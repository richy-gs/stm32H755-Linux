
stm32H7_uart_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000670c  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  080069ac  080069ac  000079ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a28  08006a28  00008088  2**0
                  CONTENTS
  4 .ARM          00000008  08006a28  08006a28  00007a28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006a30  08006a30  00008088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a30  08006a30  00007a30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006a34  08006a34  00007a34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  24000000  08006a38  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b0  24000088  08006ac0  00008088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000338  08006ac0  00008338  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00008088  2**0
                  CONTENTS, READONLY
 12 .debug_info   000130d3  00000000  00000000  000080b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027d0  00000000  00000000  0001b189  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d00  00000000  00000000  0001d960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009df  00000000  00000000  0001e660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003ab1a  00000000  00000000  0001f03f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000116f7  00000000  00000000  00059b59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0017d2c4  00000000  00000000  0006b250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001e8514  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003be0  00000000  00000000  001e8558  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  001ec138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000088 	.word	0x24000088
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08006994 	.word	0x08006994

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400008c 	.word	0x2400008c
 80002dc:	08006994 	.word	0x08006994

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000390:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000394:	f000 b96a 	b.w	800066c <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	460c      	mov	r4, r1
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d14e      	bne.n	800045a <__udivmoddi4+0xaa>
 80003bc:	4694      	mov	ip, r2
 80003be:	458c      	cmp	ip, r1
 80003c0:	4686      	mov	lr, r0
 80003c2:	fab2 f282 	clz	r2, r2
 80003c6:	d962      	bls.n	800048e <__udivmoddi4+0xde>
 80003c8:	b14a      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003ca:	f1c2 0320 	rsb	r3, r2, #32
 80003ce:	4091      	lsls	r1, r2
 80003d0:	fa20 f303 	lsr.w	r3, r0, r3
 80003d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003d8:	4319      	orrs	r1, r3
 80003da:	fa00 fe02 	lsl.w	lr, r0, r2
 80003de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e2:	fa1f f68c 	uxth.w	r6, ip
 80003e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ee:	fb07 1114 	mls	r1, r7, r4, r1
 80003f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f6:	fb04 f106 	mul.w	r1, r4, r6
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000406:	f080 8112 	bcs.w	800062e <__udivmoddi4+0x27e>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 810f 	bls.w	800062e <__udivmoddi4+0x27e>
 8000410:	3c02      	subs	r4, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	fa1f f38e 	uxth.w	r3, lr
 800041a:	fbb1 f0f7 	udiv	r0, r1, r7
 800041e:	fb07 1110 	mls	r1, r7, r0, r1
 8000422:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000426:	fb00 f606 	mul.w	r6, r0, r6
 800042a:	429e      	cmp	r6, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x94>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000436:	f080 80fc 	bcs.w	8000632 <__udivmoddi4+0x282>
 800043a:	429e      	cmp	r6, r3
 800043c:	f240 80f9 	bls.w	8000632 <__udivmoddi4+0x282>
 8000440:	4463      	add	r3, ip
 8000442:	3802      	subs	r0, #2
 8000444:	1b9b      	subs	r3, r3, r6
 8000446:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800044a:	2100      	movs	r1, #0
 800044c:	b11d      	cbz	r5, 8000456 <__udivmoddi4+0xa6>
 800044e:	40d3      	lsrs	r3, r2
 8000450:	2200      	movs	r2, #0
 8000452:	e9c5 3200 	strd	r3, r2, [r5]
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d905      	bls.n	800046a <__udivmoddi4+0xba>
 800045e:	b10d      	cbz	r5, 8000464 <__udivmoddi4+0xb4>
 8000460:	e9c5 0100 	strd	r0, r1, [r5]
 8000464:	2100      	movs	r1, #0
 8000466:	4608      	mov	r0, r1
 8000468:	e7f5      	b.n	8000456 <__udivmoddi4+0xa6>
 800046a:	fab3 f183 	clz	r1, r3
 800046e:	2900      	cmp	r1, #0
 8000470:	d146      	bne.n	8000500 <__udivmoddi4+0x150>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d302      	bcc.n	800047c <__udivmoddi4+0xcc>
 8000476:	4290      	cmp	r0, r2
 8000478:	f0c0 80f0 	bcc.w	800065c <__udivmoddi4+0x2ac>
 800047c:	1a86      	subs	r6, r0, r2
 800047e:	eb64 0303 	sbc.w	r3, r4, r3
 8000482:	2001      	movs	r0, #1
 8000484:	2d00      	cmp	r5, #0
 8000486:	d0e6      	beq.n	8000456 <__udivmoddi4+0xa6>
 8000488:	e9c5 6300 	strd	r6, r3, [r5]
 800048c:	e7e3      	b.n	8000456 <__udivmoddi4+0xa6>
 800048e:	2a00      	cmp	r2, #0
 8000490:	f040 8090 	bne.w	80005b4 <__udivmoddi4+0x204>
 8000494:	eba1 040c 	sub.w	r4, r1, ip
 8000498:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800049c:	fa1f f78c 	uxth.w	r7, ip
 80004a0:	2101      	movs	r1, #1
 80004a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004aa:	fb08 4416 	mls	r4, r8, r6, r4
 80004ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004b2:	fb07 f006 	mul.w	r0, r7, r6
 80004b6:	4298      	cmp	r0, r3
 80004b8:	d908      	bls.n	80004cc <__udivmoddi4+0x11c>
 80004ba:	eb1c 0303 	adds.w	r3, ip, r3
 80004be:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x11a>
 80004c4:	4298      	cmp	r0, r3
 80004c6:	f200 80cd 	bhi.w	8000664 <__udivmoddi4+0x2b4>
 80004ca:	4626      	mov	r6, r4
 80004cc:	1a1c      	subs	r4, r3, r0
 80004ce:	fa1f f38e 	uxth.w	r3, lr
 80004d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004d6:	fb08 4410 	mls	r4, r8, r0, r4
 80004da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004de:	fb00 f707 	mul.w	r7, r0, r7
 80004e2:	429f      	cmp	r7, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x148>
 80004e6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ea:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80004ee:	d202      	bcs.n	80004f6 <__udivmoddi4+0x146>
 80004f0:	429f      	cmp	r7, r3
 80004f2:	f200 80b0 	bhi.w	8000656 <__udivmoddi4+0x2a6>
 80004f6:	4620      	mov	r0, r4
 80004f8:	1bdb      	subs	r3, r3, r7
 80004fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004fe:	e7a5      	b.n	800044c <__udivmoddi4+0x9c>
 8000500:	f1c1 0620 	rsb	r6, r1, #32
 8000504:	408b      	lsls	r3, r1
 8000506:	fa22 f706 	lsr.w	r7, r2, r6
 800050a:	431f      	orrs	r7, r3
 800050c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000510:	fa04 f301 	lsl.w	r3, r4, r1
 8000514:	ea43 030c 	orr.w	r3, r3, ip
 8000518:	40f4      	lsrs	r4, r6
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	0c38      	lsrs	r0, r7, #16
 8000520:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000524:	fbb4 fef0 	udiv	lr, r4, r0
 8000528:	fa1f fc87 	uxth.w	ip, r7
 800052c:	fb00 441e 	mls	r4, r0, lr, r4
 8000530:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000534:	fb0e f90c 	mul.w	r9, lr, ip
 8000538:	45a1      	cmp	r9, r4
 800053a:	fa02 f201 	lsl.w	r2, r2, r1
 800053e:	d90a      	bls.n	8000556 <__udivmoddi4+0x1a6>
 8000540:	193c      	adds	r4, r7, r4
 8000542:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000546:	f080 8084 	bcs.w	8000652 <__udivmoddi4+0x2a2>
 800054a:	45a1      	cmp	r9, r4
 800054c:	f240 8081 	bls.w	8000652 <__udivmoddi4+0x2a2>
 8000550:	f1ae 0e02 	sub.w	lr, lr, #2
 8000554:	443c      	add	r4, r7
 8000556:	eba4 0409 	sub.w	r4, r4, r9
 800055a:	fa1f f983 	uxth.w	r9, r3
 800055e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000562:	fb00 4413 	mls	r4, r0, r3, r4
 8000566:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800056a:	fb03 fc0c 	mul.w	ip, r3, ip
 800056e:	45a4      	cmp	ip, r4
 8000570:	d907      	bls.n	8000582 <__udivmoddi4+0x1d2>
 8000572:	193c      	adds	r4, r7, r4
 8000574:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000578:	d267      	bcs.n	800064a <__udivmoddi4+0x29a>
 800057a:	45a4      	cmp	ip, r4
 800057c:	d965      	bls.n	800064a <__udivmoddi4+0x29a>
 800057e:	3b02      	subs	r3, #2
 8000580:	443c      	add	r4, r7
 8000582:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000586:	fba0 9302 	umull	r9, r3, r0, r2
 800058a:	eba4 040c 	sub.w	r4, r4, ip
 800058e:	429c      	cmp	r4, r3
 8000590:	46ce      	mov	lr, r9
 8000592:	469c      	mov	ip, r3
 8000594:	d351      	bcc.n	800063a <__udivmoddi4+0x28a>
 8000596:	d04e      	beq.n	8000636 <__udivmoddi4+0x286>
 8000598:	b155      	cbz	r5, 80005b0 <__udivmoddi4+0x200>
 800059a:	ebb8 030e 	subs.w	r3, r8, lr
 800059e:	eb64 040c 	sbc.w	r4, r4, ip
 80005a2:	fa04 f606 	lsl.w	r6, r4, r6
 80005a6:	40cb      	lsrs	r3, r1
 80005a8:	431e      	orrs	r6, r3
 80005aa:	40cc      	lsrs	r4, r1
 80005ac:	e9c5 6400 	strd	r6, r4, [r5]
 80005b0:	2100      	movs	r1, #0
 80005b2:	e750      	b.n	8000456 <__udivmoddi4+0xa6>
 80005b4:	f1c2 0320 	rsb	r3, r2, #32
 80005b8:	fa20 f103 	lsr.w	r1, r0, r3
 80005bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005c0:	fa24 f303 	lsr.w	r3, r4, r3
 80005c4:	4094      	lsls	r4, r2
 80005c6:	430c      	orrs	r4, r1
 80005c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005d0:	fa1f f78c 	uxth.w	r7, ip
 80005d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005d8:	fb08 3110 	mls	r1, r8, r0, r3
 80005dc:	0c23      	lsrs	r3, r4, #16
 80005de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005e2:	fb00 f107 	mul.w	r1, r0, r7
 80005e6:	4299      	cmp	r1, r3
 80005e8:	d908      	bls.n	80005fc <__udivmoddi4+0x24c>
 80005ea:	eb1c 0303 	adds.w	r3, ip, r3
 80005ee:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80005f2:	d22c      	bcs.n	800064e <__udivmoddi4+0x29e>
 80005f4:	4299      	cmp	r1, r3
 80005f6:	d92a      	bls.n	800064e <__udivmoddi4+0x29e>
 80005f8:	3802      	subs	r0, #2
 80005fa:	4463      	add	r3, ip
 80005fc:	1a5b      	subs	r3, r3, r1
 80005fe:	b2a4      	uxth	r4, r4
 8000600:	fbb3 f1f8 	udiv	r1, r3, r8
 8000604:	fb08 3311 	mls	r3, r8, r1, r3
 8000608:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800060c:	fb01 f307 	mul.w	r3, r1, r7
 8000610:	42a3      	cmp	r3, r4
 8000612:	d908      	bls.n	8000626 <__udivmoddi4+0x276>
 8000614:	eb1c 0404 	adds.w	r4, ip, r4
 8000618:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800061c:	d213      	bcs.n	8000646 <__udivmoddi4+0x296>
 800061e:	42a3      	cmp	r3, r4
 8000620:	d911      	bls.n	8000646 <__udivmoddi4+0x296>
 8000622:	3902      	subs	r1, #2
 8000624:	4464      	add	r4, ip
 8000626:	1ae4      	subs	r4, r4, r3
 8000628:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800062c:	e739      	b.n	80004a2 <__udivmoddi4+0xf2>
 800062e:	4604      	mov	r4, r0
 8000630:	e6f0      	b.n	8000414 <__udivmoddi4+0x64>
 8000632:	4608      	mov	r0, r1
 8000634:	e706      	b.n	8000444 <__udivmoddi4+0x94>
 8000636:	45c8      	cmp	r8, r9
 8000638:	d2ae      	bcs.n	8000598 <__udivmoddi4+0x1e8>
 800063a:	ebb9 0e02 	subs.w	lr, r9, r2
 800063e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000642:	3801      	subs	r0, #1
 8000644:	e7a8      	b.n	8000598 <__udivmoddi4+0x1e8>
 8000646:	4631      	mov	r1, r6
 8000648:	e7ed      	b.n	8000626 <__udivmoddi4+0x276>
 800064a:	4603      	mov	r3, r0
 800064c:	e799      	b.n	8000582 <__udivmoddi4+0x1d2>
 800064e:	4630      	mov	r0, r6
 8000650:	e7d4      	b.n	80005fc <__udivmoddi4+0x24c>
 8000652:	46d6      	mov	lr, sl
 8000654:	e77f      	b.n	8000556 <__udivmoddi4+0x1a6>
 8000656:	4463      	add	r3, ip
 8000658:	3802      	subs	r0, #2
 800065a:	e74d      	b.n	80004f8 <__udivmoddi4+0x148>
 800065c:	4606      	mov	r6, r0
 800065e:	4623      	mov	r3, r4
 8000660:	4608      	mov	r0, r1
 8000662:	e70f      	b.n	8000484 <__udivmoddi4+0xd4>
 8000664:	3e02      	subs	r6, #2
 8000666:	4463      	add	r3, ip
 8000668:	e730      	b.n	80004cc <__udivmoddi4+0x11c>
 800066a:	bf00      	nop

0800066c <__aeabi_idiv0>:
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop

08000670 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000674:	4b3d      	ldr	r3, [pc, #244]	@ (800076c <SystemInit+0xfc>)
 8000676:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800067a:	4a3c      	ldr	r2, [pc, #240]	@ (800076c <SystemInit+0xfc>)
 800067c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000680:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000684:	4b39      	ldr	r3, [pc, #228]	@ (800076c <SystemInit+0xfc>)
 8000686:	691b      	ldr	r3, [r3, #16]
 8000688:	4a38      	ldr	r2, [pc, #224]	@ (800076c <SystemInit+0xfc>)
 800068a:	f043 0310 	orr.w	r3, r3, #16
 800068e:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000690:	4b37      	ldr	r3, [pc, #220]	@ (8000770 <SystemInit+0x100>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	f003 030f 	and.w	r3, r3, #15
 8000698:	2b06      	cmp	r3, #6
 800069a:	d807      	bhi.n	80006ac <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800069c:	4b34      	ldr	r3, [pc, #208]	@ (8000770 <SystemInit+0x100>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	f023 030f 	bic.w	r3, r3, #15
 80006a4:	4a32      	ldr	r2, [pc, #200]	@ (8000770 <SystemInit+0x100>)
 80006a6:	f043 0307 	orr.w	r3, r3, #7
 80006aa:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006ac:	4b31      	ldr	r3, [pc, #196]	@ (8000774 <SystemInit+0x104>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4a30      	ldr	r2, [pc, #192]	@ (8000774 <SystemInit+0x104>)
 80006b2:	f043 0301 	orr.w	r3, r3, #1
 80006b6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006b8:	4b2e      	ldr	r3, [pc, #184]	@ (8000774 <SystemInit+0x104>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006be:	4b2d      	ldr	r3, [pc, #180]	@ (8000774 <SystemInit+0x104>)
 80006c0:	681a      	ldr	r2, [r3, #0]
 80006c2:	492c      	ldr	r1, [pc, #176]	@ (8000774 <SystemInit+0x104>)
 80006c4:	4b2c      	ldr	r3, [pc, #176]	@ (8000778 <SystemInit+0x108>)
 80006c6:	4013      	ands	r3, r2
 80006c8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006ca:	4b29      	ldr	r3, [pc, #164]	@ (8000770 <SystemInit+0x100>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	f003 0308 	and.w	r3, r3, #8
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d007      	beq.n	80006e6 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006d6:	4b26      	ldr	r3, [pc, #152]	@ (8000770 <SystemInit+0x100>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	f023 030f 	bic.w	r3, r3, #15
 80006de:	4a24      	ldr	r2, [pc, #144]	@ (8000770 <SystemInit+0x100>)
 80006e0:	f043 0307 	orr.w	r3, r3, #7
 80006e4:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006e6:	4b23      	ldr	r3, [pc, #140]	@ (8000774 <SystemInit+0x104>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80006ec:	4b21      	ldr	r3, [pc, #132]	@ (8000774 <SystemInit+0x104>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80006f2:	4b20      	ldr	r3, [pc, #128]	@ (8000774 <SystemInit+0x104>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80006f8:	4b1e      	ldr	r3, [pc, #120]	@ (8000774 <SystemInit+0x104>)
 80006fa:	4a20      	ldr	r2, [pc, #128]	@ (800077c <SystemInit+0x10c>)
 80006fc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80006fe:	4b1d      	ldr	r3, [pc, #116]	@ (8000774 <SystemInit+0x104>)
 8000700:	4a1f      	ldr	r2, [pc, #124]	@ (8000780 <SystemInit+0x110>)
 8000702:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000704:	4b1b      	ldr	r3, [pc, #108]	@ (8000774 <SystemInit+0x104>)
 8000706:	4a1f      	ldr	r2, [pc, #124]	@ (8000784 <SystemInit+0x114>)
 8000708:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800070a:	4b1a      	ldr	r3, [pc, #104]	@ (8000774 <SystemInit+0x104>)
 800070c:	2200      	movs	r2, #0
 800070e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000710:	4b18      	ldr	r3, [pc, #96]	@ (8000774 <SystemInit+0x104>)
 8000712:	4a1c      	ldr	r2, [pc, #112]	@ (8000784 <SystemInit+0x114>)
 8000714:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000716:	4b17      	ldr	r3, [pc, #92]	@ (8000774 <SystemInit+0x104>)
 8000718:	2200      	movs	r2, #0
 800071a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800071c:	4b15      	ldr	r3, [pc, #84]	@ (8000774 <SystemInit+0x104>)
 800071e:	4a19      	ldr	r2, [pc, #100]	@ (8000784 <SystemInit+0x114>)
 8000720:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000722:	4b14      	ldr	r3, [pc, #80]	@ (8000774 <SystemInit+0x104>)
 8000724:	2200      	movs	r2, #0
 8000726:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000728:	4b12      	ldr	r3, [pc, #72]	@ (8000774 <SystemInit+0x104>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4a11      	ldr	r2, [pc, #68]	@ (8000774 <SystemInit+0x104>)
 800072e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000732:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000734:	4b0f      	ldr	r3, [pc, #60]	@ (8000774 <SystemInit+0x104>)
 8000736:	2200      	movs	r2, #0
 8000738:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800073a:	4b13      	ldr	r3, [pc, #76]	@ (8000788 <SystemInit+0x118>)
 800073c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800073e:	4a12      	ldr	r2, [pc, #72]	@ (8000788 <SystemInit+0x118>)
 8000740:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000744:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000746:	4b11      	ldr	r3, [pc, #68]	@ (800078c <SystemInit+0x11c>)
 8000748:	681a      	ldr	r2, [r3, #0]
 800074a:	4b11      	ldr	r3, [pc, #68]	@ (8000790 <SystemInit+0x120>)
 800074c:	4013      	ands	r3, r2
 800074e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000752:	d202      	bcs.n	800075a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000754:	4b0f      	ldr	r3, [pc, #60]	@ (8000794 <SystemInit+0x124>)
 8000756:	2201      	movs	r2, #1
 8000758:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800075a:	4b0f      	ldr	r3, [pc, #60]	@ (8000798 <SystemInit+0x128>)
 800075c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000760:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000762:	bf00      	nop
 8000764:	46bd      	mov	sp, r7
 8000766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076a:	4770      	bx	lr
 800076c:	e000ed00 	.word	0xe000ed00
 8000770:	52002000 	.word	0x52002000
 8000774:	58024400 	.word	0x58024400
 8000778:	eaf6ed7f 	.word	0xeaf6ed7f
 800077c:	02020200 	.word	0x02020200
 8000780:	01ff0000 	.word	0x01ff0000
 8000784:	01010280 	.word	0x01010280
 8000788:	580000c0 	.word	0x580000c0
 800078c:	5c001000 	.word	0x5c001000
 8000790:	ffff0000 	.word	0xffff0000
 8000794:	51008108 	.word	0x51008108
 8000798:	52004000 	.word	0x52004000

0800079c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80007a2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80007a6:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80007a8:	bf00      	nop
 80007aa:	4b3a      	ldr	r3, [pc, #232]	@ (8000894 <main+0xf8>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d004      	beq.n	80007c0 <main+0x24>
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	1e5a      	subs	r2, r3, #1
 80007ba:	607a      	str	r2, [r7, #4]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	dcf4      	bgt.n	80007aa <main+0xe>
  if ( timeout < 0 )
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	da01      	bge.n	80007ca <main+0x2e>
  {
  Error_Handler();
 80007c6:	f000 f9eb 	bl	8000ba0 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ca:	f000 fd75 	bl	80012b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007ce:	f000 f869 	bl	80008a4 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80007d2:	4b30      	ldr	r3, [pc, #192]	@ (8000894 <main+0xf8>)
 80007d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007d8:	4a2e      	ldr	r2, [pc, #184]	@ (8000894 <main+0xf8>)
 80007da:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80007de:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007e2:	4b2c      	ldr	r3, [pc, #176]	@ (8000894 <main+0xf8>)
 80007e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80007ec:	603b      	str	r3, [r7, #0]
 80007ee:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80007f0:	2000      	movs	r0, #0
 80007f2:	f001 f99b 	bl	8001b2c <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 80007f6:	2100      	movs	r1, #0
 80007f8:	2000      	movs	r0, #0
 80007fa:	f001 f9b1 	bl	8001b60 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 80007fe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000802:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000804:	bf00      	nop
 8000806:	4b23      	ldr	r3, [pc, #140]	@ (8000894 <main+0xf8>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800080e:	2b00      	cmp	r3, #0
 8000810:	d104      	bne.n	800081c <main+0x80>
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	1e5a      	subs	r2, r3, #1
 8000816:	607a      	str	r2, [r7, #4]
 8000818:	2b00      	cmp	r3, #0
 800081a:	dcf4      	bgt.n	8000806 <main+0x6a>
if ( timeout < 0 )
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	2b00      	cmp	r3, #0
 8000820:	da01      	bge.n	8000826 <main+0x8a>
{
Error_Handler();
 8000822:	f000 f9bd 	bl	8000ba0 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000826:	f000 f903 	bl	8000a30 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800082a:	f000 f8b5 	bl	8000998 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 800082e:	2000      	movs	r0, #0
 8000830:	f000 fb7a 	bl	8000f28 <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 8000834:	2001      	movs	r0, #1
 8000836:	f000 fb77 	bl	8000f28 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 800083a:	2002      	movs	r0, #2
 800083c:	f000 fb74 	bl	8000f28 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000840:	2101      	movs	r1, #1
 8000842:	2000      	movs	r0, #0
 8000844:	f000 fbe6 	bl	8001014 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000848:	4b13      	ldr	r3, [pc, #76]	@ (8000898 <main+0xfc>)
 800084a:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800084e:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000850:	4b11      	ldr	r3, [pc, #68]	@ (8000898 <main+0xfc>)
 8000852:	2200      	movs	r2, #0
 8000854:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000856:	4b10      	ldr	r3, [pc, #64]	@ (8000898 <main+0xfc>)
 8000858:	2200      	movs	r2, #0
 800085a:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 800085c:	4b0e      	ldr	r3, [pc, #56]	@ (8000898 <main+0xfc>)
 800085e:	2200      	movs	r2, #0
 8000860:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000862:	4b0d      	ldr	r3, [pc, #52]	@ (8000898 <main+0xfc>)
 8000864:	2200      	movs	r2, #0
 8000866:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000868:	490b      	ldr	r1, [pc, #44]	@ (8000898 <main+0xfc>)
 800086a:	2000      	movs	r0, #0
 800086c:	f000 fc62 	bl	8001134 <BSP_COM_Init>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <main+0xde>
  {
    Error_Handler();
 8000876:	f000 f993 	bl	8000ba0 <Error_Handler>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//	  BSP_LED_On(1);
	  HAL_GPIO_TogglePin(LED1_GPIO_PORT, LED1_PIN);
 800087a:	2101      	movs	r1, #1
 800087c:	4807      	ldr	r0, [pc, #28]	@ (800089c <main+0x100>)
 800087e:	f001 f93a 	bl	8001af6 <HAL_GPIO_TogglePin>
	  HAL_Delay(2000);
 8000882:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000886:	f000 fda9 	bl	80013dc <HAL_Delay>
	  printf("A\n\r");
 800088a:	4805      	ldr	r0, [pc, #20]	@ (80008a0 <main+0x104>)
 800088c:	f005 fa14 	bl	8005cb8 <iprintf>
	  HAL_GPIO_TogglePin(LED1_GPIO_PORT, LED1_PIN);
 8000890:	bf00      	nop
 8000892:	e7f2      	b.n	800087a <main+0xde>
 8000894:	58024400 	.word	0x58024400
 8000898:	240000a4 	.word	0x240000a4
 800089c:	58020400 	.word	0x58020400
 80008a0:	080069ac 	.word	0x080069ac

080008a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b09c      	sub	sp, #112	@ 0x70
 80008a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008ae:	224c      	movs	r2, #76	@ 0x4c
 80008b0:	2100      	movs	r1, #0
 80008b2:	4618      	mov	r0, r3
 80008b4:	f005 fa55 	bl	8005d62 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008b8:	1d3b      	adds	r3, r7, #4
 80008ba:	2220      	movs	r2, #32
 80008bc:	2100      	movs	r1, #0
 80008be:	4618      	mov	r0, r3
 80008c0:	f005 fa4f 	bl	8005d62 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_EXTERNAL_SOURCE_SUPPLY);
 80008c4:	2001      	movs	r0, #1
 80008c6:	f001 f95f 	bl	8001b88 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80008ca:	2300      	movs	r3, #0
 80008cc:	603b      	str	r3, [r7, #0]
 80008ce:	4b30      	ldr	r3, [pc, #192]	@ (8000990 <SystemClock_Config+0xec>)
 80008d0:	699b      	ldr	r3, [r3, #24]
 80008d2:	4a2f      	ldr	r2, [pc, #188]	@ (8000990 <SystemClock_Config+0xec>)
 80008d4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80008d8:	6193      	str	r3, [r2, #24]
 80008da:	4b2d      	ldr	r3, [pc, #180]	@ (8000990 <SystemClock_Config+0xec>)
 80008dc:	699b      	ldr	r3, [r3, #24]
 80008de:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008e2:	603b      	str	r3, [r7, #0]
 80008e4:	4b2b      	ldr	r3, [pc, #172]	@ (8000994 <SystemClock_Config+0xf0>)
 80008e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008e8:	4a2a      	ldr	r2, [pc, #168]	@ (8000994 <SystemClock_Config+0xf0>)
 80008ea:	f043 0301 	orr.w	r3, r3, #1
 80008ee:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80008f0:	4b28      	ldr	r3, [pc, #160]	@ (8000994 <SystemClock_Config+0xf0>)
 80008f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008f4:	f003 0301 	and.w	r3, r3, #1
 80008f8:	603b      	str	r3, [r7, #0]
 80008fa:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80008fc:	bf00      	nop
 80008fe:	4b24      	ldr	r3, [pc, #144]	@ (8000990 <SystemClock_Config+0xec>)
 8000900:	699b      	ldr	r3, [r3, #24]
 8000902:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000906:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800090a:	d1f8      	bne.n	80008fe <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800090c:	2301      	movs	r3, #1
 800090e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000910:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000914:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000916:	2302      	movs	r3, #2
 8000918:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800091a:	2302      	movs	r3, #2
 800091c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 800091e:	2302      	movs	r3, #2
 8000920:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 240;
 8000922:	23f0      	movs	r3, #240	@ 0xf0
 8000924:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000926:	2302      	movs	r3, #2
 8000928:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 800092a:	2305      	movs	r3, #5
 800092c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800092e:	2302      	movs	r3, #2
 8000930:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000932:	2308      	movs	r3, #8
 8000934:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000936:	2300      	movs	r3, #0
 8000938:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800093a:	2300      	movs	r3, #0
 800093c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800093e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000942:	4618      	mov	r0, r3
 8000944:	f001 f97a 	bl	8001c3c <HAL_RCC_OscConfig>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800094e:	f000 f927 	bl	8000ba0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000952:	233f      	movs	r3, #63	@ 0x3f
 8000954:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000956:	2303      	movs	r3, #3
 8000958:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800095a:	2300      	movs	r3, #0
 800095c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800095e:	2308      	movs	r3, #8
 8000960:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000962:	2340      	movs	r3, #64	@ 0x40
 8000964:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000966:	2340      	movs	r3, #64	@ 0x40
 8000968:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800096a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800096e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000970:	2340      	movs	r3, #64	@ 0x40
 8000972:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000974:	1d3b      	adds	r3, r7, #4
 8000976:	2104      	movs	r1, #4
 8000978:	4618      	mov	r0, r3
 800097a:	f001 fdb9 	bl	80024f0 <HAL_RCC_ClockConfig>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000984:	f000 f90c 	bl	8000ba0 <Error_Handler>
  }
}
 8000988:	bf00      	nop
 800098a:	3770      	adds	r7, #112	@ 0x70
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	58024800 	.word	0x58024800
 8000994:	58000400 	.word	0x58000400

08000998 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800099c:	4b22      	ldr	r3, [pc, #136]	@ (8000a28 <MX_USART2_UART_Init+0x90>)
 800099e:	4a23      	ldr	r2, [pc, #140]	@ (8000a2c <MX_USART2_UART_Init+0x94>)
 80009a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80009a2:	4b21      	ldr	r3, [pc, #132]	@ (8000a28 <MX_USART2_UART_Init+0x90>)
 80009a4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80009a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009aa:	4b1f      	ldr	r3, [pc, #124]	@ (8000a28 <MX_USART2_UART_Init+0x90>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009b0:	4b1d      	ldr	r3, [pc, #116]	@ (8000a28 <MX_USART2_UART_Init+0x90>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009b6:	4b1c      	ldr	r3, [pc, #112]	@ (8000a28 <MX_USART2_UART_Init+0x90>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009bc:	4b1a      	ldr	r3, [pc, #104]	@ (8000a28 <MX_USART2_UART_Init+0x90>)
 80009be:	220c      	movs	r2, #12
 80009c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009c2:	4b19      	ldr	r3, [pc, #100]	@ (8000a28 <MX_USART2_UART_Init+0x90>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009c8:	4b17      	ldr	r3, [pc, #92]	@ (8000a28 <MX_USART2_UART_Init+0x90>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ce:	4b16      	ldr	r3, [pc, #88]	@ (8000a28 <MX_USART2_UART_Init+0x90>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009d4:	4b14      	ldr	r3, [pc, #80]	@ (8000a28 <MX_USART2_UART_Init+0x90>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009da:	4b13      	ldr	r3, [pc, #76]	@ (8000a28 <MX_USART2_UART_Init+0x90>)
 80009dc:	2200      	movs	r2, #0
 80009de:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009e0:	4811      	ldr	r0, [pc, #68]	@ (8000a28 <MX_USART2_UART_Init+0x90>)
 80009e2:	f003 ff3d 	bl	8004860 <HAL_UART_Init>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80009ec:	f000 f8d8 	bl	8000ba0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009f0:	2100      	movs	r1, #0
 80009f2:	480d      	ldr	r0, [pc, #52]	@ (8000a28 <MX_USART2_UART_Init+0x90>)
 80009f4:	f004 ffd3 	bl	800599e <HAL_UARTEx_SetTxFifoThreshold>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80009fe:	f000 f8cf 	bl	8000ba0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a02:	2100      	movs	r1, #0
 8000a04:	4808      	ldr	r0, [pc, #32]	@ (8000a28 <MX_USART2_UART_Init+0x90>)
 8000a06:	f005 f808 	bl	8005a1a <HAL_UARTEx_SetRxFifoThreshold>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000a10:	f000 f8c6 	bl	8000ba0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000a14:	4804      	ldr	r0, [pc, #16]	@ (8000a28 <MX_USART2_UART_Init+0x90>)
 8000a16:	f004 ff89 	bl	800592c <HAL_UARTEx_DisableFifoMode>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000a20:	f000 f8be 	bl	8000ba0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a24:	bf00      	nop
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	240000b4 	.word	0x240000b4
 8000a2c:	40004400 	.word	0x40004400

08000a30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b08a      	sub	sp, #40	@ 0x28
 8000a34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a36:	f107 0314 	add.w	r3, r7, #20
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	601a      	str	r2, [r3, #0]
 8000a3e:	605a      	str	r2, [r3, #4]
 8000a40:	609a      	str	r2, [r3, #8]
 8000a42:	60da      	str	r2, [r3, #12]
 8000a44:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a46:	4b51      	ldr	r3, [pc, #324]	@ (8000b8c <MX_GPIO_Init+0x15c>)
 8000a48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a4c:	4a4f      	ldr	r2, [pc, #316]	@ (8000b8c <MX_GPIO_Init+0x15c>)
 8000a4e:	f043 0304 	orr.w	r3, r3, #4
 8000a52:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a56:	4b4d      	ldr	r3, [pc, #308]	@ (8000b8c <MX_GPIO_Init+0x15c>)
 8000a58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a5c:	f003 0304 	and.w	r3, r3, #4
 8000a60:	613b      	str	r3, [r7, #16]
 8000a62:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a64:	4b49      	ldr	r3, [pc, #292]	@ (8000b8c <MX_GPIO_Init+0x15c>)
 8000a66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a6a:	4a48      	ldr	r2, [pc, #288]	@ (8000b8c <MX_GPIO_Init+0x15c>)
 8000a6c:	f043 0301 	orr.w	r3, r3, #1
 8000a70:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a74:	4b45      	ldr	r3, [pc, #276]	@ (8000b8c <MX_GPIO_Init+0x15c>)
 8000a76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a7a:	f003 0301 	and.w	r3, r3, #1
 8000a7e:	60fb      	str	r3, [r7, #12]
 8000a80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a82:	4b42      	ldr	r3, [pc, #264]	@ (8000b8c <MX_GPIO_Init+0x15c>)
 8000a84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a88:	4a40      	ldr	r2, [pc, #256]	@ (8000b8c <MX_GPIO_Init+0x15c>)
 8000a8a:	f043 0302 	orr.w	r3, r3, #2
 8000a8e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a92:	4b3e      	ldr	r3, [pc, #248]	@ (8000b8c <MX_GPIO_Init+0x15c>)
 8000a94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a98:	f003 0302 	and.w	r3, r3, #2
 8000a9c:	60bb      	str	r3, [r7, #8]
 8000a9e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aa0:	4b3a      	ldr	r3, [pc, #232]	@ (8000b8c <MX_GPIO_Init+0x15c>)
 8000aa2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000aa6:	4a39      	ldr	r2, [pc, #228]	@ (8000b8c <MX_GPIO_Init+0x15c>)
 8000aa8:	f043 0308 	orr.w	r3, r3, #8
 8000aac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ab0:	4b36      	ldr	r3, [pc, #216]	@ (8000b8c <MX_GPIO_Init+0x15c>)
 8000ab2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ab6:	f003 0308 	and.w	r3, r3, #8
 8000aba:	607b      	str	r3, [r7, #4]
 8000abc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000abe:	4b33      	ldr	r3, [pc, #204]	@ (8000b8c <MX_GPIO_Init+0x15c>)
 8000ac0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ac4:	4a31      	ldr	r2, [pc, #196]	@ (8000b8c <MX_GPIO_Init+0x15c>)
 8000ac6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000aca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ace:	4b2f      	ldr	r3, [pc, #188]	@ (8000b8c <MX_GPIO_Init+0x15c>)
 8000ad0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ad4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ad8:	603b      	str	r3, [r7, #0]
 8000ada:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000adc:	2332      	movs	r3, #50	@ 0x32
 8000ade:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000aec:	230b      	movs	r3, #11
 8000aee:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000af0:	f107 0314 	add.w	r3, r7, #20
 8000af4:	4619      	mov	r1, r3
 8000af6:	4826      	ldr	r0, [pc, #152]	@ (8000b90 <MX_GPIO_Init+0x160>)
 8000af8:	f000 fe34 	bl	8001764 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000afc:	2386      	movs	r3, #134	@ 0x86
 8000afe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b00:	2302      	movs	r3, #2
 8000b02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b04:	2300      	movs	r3, #0
 8000b06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b0c:	230b      	movs	r3, #11
 8000b0e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b10:	f107 0314 	add.w	r3, r7, #20
 8000b14:	4619      	mov	r1, r3
 8000b16:	481f      	ldr	r0, [pc, #124]	@ (8000b94 <MX_GPIO_Init+0x164>)
 8000b18:	f000 fe24 	bl	8001764 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000b1c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b22:	2302      	movs	r3, #2
 8000b24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b26:	2300      	movs	r3, #0
 8000b28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b2e:	230b      	movs	r3, #11
 8000b30:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b32:	f107 0314 	add.w	r3, r7, #20
 8000b36:	4619      	mov	r1, r3
 8000b38:	4817      	ldr	r0, [pc, #92]	@ (8000b98 <MX_GPIO_Init+0x168>)
 8000b3a:	f000 fe13 	bl	8001764 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000b3e:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000b42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b44:	2302      	movs	r3, #2
 8000b46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000b50:	230a      	movs	r3, #10
 8000b52:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b54:	f107 0314 	add.w	r3, r7, #20
 8000b58:	4619      	mov	r1, r3
 8000b5a:	480e      	ldr	r0, [pc, #56]	@ (8000b94 <MX_GPIO_Init+0x164>)
 8000b5c:	f000 fe02 	bl	8001764 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000b60:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000b64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b66:	2302      	movs	r3, #2
 8000b68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b72:	230b      	movs	r3, #11
 8000b74:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b76:	f107 0314 	add.w	r3, r7, #20
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	4807      	ldr	r0, [pc, #28]	@ (8000b9c <MX_GPIO_Init+0x16c>)
 8000b7e:	f000 fdf1 	bl	8001764 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b82:	bf00      	nop
 8000b84:	3728      	adds	r7, #40	@ 0x28
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	58024400 	.word	0x58024400
 8000b90:	58020800 	.word	0x58020800
 8000b94:	58020000 	.word	0x58020000
 8000b98:	58020400 	.word	0x58020400
 8000b9c:	58021800 	.word	0x58021800

08000ba0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ba4:	b672      	cpsid	i
}
 8000ba6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ba8:	bf00      	nop
 8000baa:	e7fd      	b.n	8000ba8 <Error_Handler+0x8>

08000bac <__io_putchar>:
/**
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE {
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  /* write a character to the USART3 and Loop until the end of transmission*/
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000bb4:	1d39      	adds	r1, r7, #4
 8000bb6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000bba:	2201      	movs	r2, #1
 8000bbc:	4803      	ldr	r0, [pc, #12]	@ (8000bcc <__io_putchar+0x20>)
 8000bbe:	f003 fe9f 	bl	8004900 <HAL_UART_Transmit>
  return ch;
 8000bc2:	687b      	ldr	r3, [r7, #4]
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	3708      	adds	r7, #8
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	240000b4 	.word	0x240000b4

08000bd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bd6:	4b0a      	ldr	r3, [pc, #40]	@ (8000c00 <HAL_MspInit+0x30>)
 8000bd8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000bdc:	4a08      	ldr	r2, [pc, #32]	@ (8000c00 <HAL_MspInit+0x30>)
 8000bde:	f043 0302 	orr.w	r3, r3, #2
 8000be2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000be6:	4b06      	ldr	r3, [pc, #24]	@ (8000c00 <HAL_MspInit+0x30>)
 8000be8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000bec:	f003 0302 	and.w	r3, r3, #2
 8000bf0:	607b      	str	r3, [r7, #4]
 8000bf2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bf4:	bf00      	nop
 8000bf6:	370c      	adds	r7, #12
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr
 8000c00:	58024400 	.word	0x58024400

08000c04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b0bc      	sub	sp, #240	@ 0xf0
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c0c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000c10:	2200      	movs	r2, #0
 8000c12:	601a      	str	r2, [r3, #0]
 8000c14:	605a      	str	r2, [r3, #4]
 8000c16:	609a      	str	r2, [r3, #8]
 8000c18:	60da      	str	r2, [r3, #12]
 8000c1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c1c:	f107 0318 	add.w	r3, r7, #24
 8000c20:	22c0      	movs	r2, #192	@ 0xc0
 8000c22:	2100      	movs	r1, #0
 8000c24:	4618      	mov	r0, r3
 8000c26:	f005 f89c 	bl	8005d62 <memset>
  if(huart->Instance==USART2)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4a38      	ldr	r2, [pc, #224]	@ (8000d10 <HAL_UART_MspInit+0x10c>)
 8000c30:	4293      	cmp	r3, r2
 8000c32:	d169      	bne.n	8000d08 <HAL_UART_MspInit+0x104>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000c34:	f04f 0202 	mov.w	r2, #2
 8000c38:	f04f 0300 	mov.w	r3, #0
 8000c3c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000c40:	2300      	movs	r3, #0
 8000c42:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c46:	f107 0318 	add.w	r3, r7, #24
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f001 ffdc 	bl	8002c08 <HAL_RCCEx_PeriphCLKConfig>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000c56:	f7ff ffa3 	bl	8000ba0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c5a:	4b2e      	ldr	r3, [pc, #184]	@ (8000d14 <HAL_UART_MspInit+0x110>)
 8000c5c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000c60:	4a2c      	ldr	r2, [pc, #176]	@ (8000d14 <HAL_UART_MspInit+0x110>)
 8000c62:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c66:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000c6a:	4b2a      	ldr	r3, [pc, #168]	@ (8000d14 <HAL_UART_MspInit+0x110>)
 8000c6c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000c70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c74:	617b      	str	r3, [r7, #20]
 8000c76:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c78:	4b26      	ldr	r3, [pc, #152]	@ (8000d14 <HAL_UART_MspInit+0x110>)
 8000c7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c7e:	4a25      	ldr	r2, [pc, #148]	@ (8000d14 <HAL_UART_MspInit+0x110>)
 8000c80:	f043 0301 	orr.w	r3, r3, #1
 8000c84:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c88:	4b22      	ldr	r3, [pc, #136]	@ (8000d14 <HAL_UART_MspInit+0x110>)
 8000c8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c8e:	f003 0301 	and.w	r3, r3, #1
 8000c92:	613b      	str	r3, [r7, #16]
 8000c94:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c96:	4b1f      	ldr	r3, [pc, #124]	@ (8000d14 <HAL_UART_MspInit+0x110>)
 8000c98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c9c:	4a1d      	ldr	r2, [pc, #116]	@ (8000d14 <HAL_UART_MspInit+0x110>)
 8000c9e:	f043 0308 	orr.w	r3, r3, #8
 8000ca2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ca6:	4b1b      	ldr	r3, [pc, #108]	@ (8000d14 <HAL_UART_MspInit+0x110>)
 8000ca8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cac:	f003 0308 	and.w	r3, r3, #8
 8000cb0:	60fb      	str	r3, [r7, #12]
 8000cb2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000cb4:	2308      	movs	r3, #8
 8000cb6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ccc:	2307      	movs	r3, #7
 8000cce:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd2:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	480f      	ldr	r0, [pc, #60]	@ (8000d18 <HAL_UART_MspInit+0x114>)
 8000cda:	f000 fd43 	bl	8001764 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000cde:	2320      	movs	r3, #32
 8000ce0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cea:	2300      	movs	r3, #0
 8000cec:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cf6:	2307      	movs	r3, #7
 8000cf8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cfc:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000d00:	4619      	mov	r1, r3
 8000d02:	4806      	ldr	r0, [pc, #24]	@ (8000d1c <HAL_UART_MspInit+0x118>)
 8000d04:	f000 fd2e 	bl	8001764 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000d08:	bf00      	nop
 8000d0a:	37f0      	adds	r7, #240	@ 0xf0
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	40004400 	.word	0x40004400
 8000d14:	58024400 	.word	0x58024400
 8000d18:	58020000 	.word	0x58020000
 8000d1c:	58020c00 	.word	0x58020c00

08000d20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d24:	bf00      	nop
 8000d26:	e7fd      	b.n	8000d24 <NMI_Handler+0x4>

08000d28 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d2c:	bf00      	nop
 8000d2e:	e7fd      	b.n	8000d2c <HardFault_Handler+0x4>

08000d30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d34:	bf00      	nop
 8000d36:	e7fd      	b.n	8000d34 <MemManage_Handler+0x4>

08000d38 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d3c:	bf00      	nop
 8000d3e:	e7fd      	b.n	8000d3c <BusFault_Handler+0x4>

08000d40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d44:	bf00      	nop
 8000d46:	e7fd      	b.n	8000d44 <UsageFault_Handler+0x4>

08000d48 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d4c:	bf00      	nop
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr

08000d56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d56:	b480      	push	{r7}
 8000d58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d5a:	bf00      	nop
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr

08000d64 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d68:	bf00      	nop
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr

08000d72 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d72:	b580      	push	{r7, lr}
 8000d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d76:	f000 fb11 	bl	800139c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d7a:	bf00      	nop
 8000d7c:	bd80      	pop	{r7, pc}

08000d7e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d7e:	b580      	push	{r7, lr}
 8000d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8000d82:	2000      	movs	r0, #0
 8000d84:	f000 f9b8 	bl	80010f8 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d88:	bf00      	nop
 8000d8a:	bd80      	pop	{r7, pc}

08000d8c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b086      	sub	sp, #24
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	60f8      	str	r0, [r7, #12]
 8000d94:	60b9      	str	r1, [r7, #8]
 8000d96:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d98:	2300      	movs	r3, #0
 8000d9a:	617b      	str	r3, [r7, #20]
 8000d9c:	e00a      	b.n	8000db4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d9e:	f3af 8000 	nop.w
 8000da2:	4601      	mov	r1, r0
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	1c5a      	adds	r2, r3, #1
 8000da8:	60ba      	str	r2, [r7, #8]
 8000daa:	b2ca      	uxtb	r2, r1
 8000dac:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	3301      	adds	r3, #1
 8000db2:	617b      	str	r3, [r7, #20]
 8000db4:	697a      	ldr	r2, [r7, #20]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	429a      	cmp	r2, r3
 8000dba:	dbf0      	blt.n	8000d9e <_read+0x12>
  }

  return len;
 8000dbc:	687b      	ldr	r3, [r7, #4]
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3718      	adds	r7, #24
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}

08000dc6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000dc6:	b580      	push	{r7, lr}
 8000dc8:	b086      	sub	sp, #24
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	60f8      	str	r0, [r7, #12]
 8000dce:	60b9      	str	r1, [r7, #8]
 8000dd0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	617b      	str	r3, [r7, #20]
 8000dd6:	e009      	b.n	8000dec <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000dd8:	68bb      	ldr	r3, [r7, #8]
 8000dda:	1c5a      	adds	r2, r3, #1
 8000ddc:	60ba      	str	r2, [r7, #8]
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	4618      	mov	r0, r3
 8000de2:	f7ff fee3 	bl	8000bac <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	3301      	adds	r3, #1
 8000dea:	617b      	str	r3, [r7, #20]
 8000dec:	697a      	ldr	r2, [r7, #20]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	429a      	cmp	r2, r3
 8000df2:	dbf1      	blt.n	8000dd8 <_write+0x12>
  }
  return len;
 8000df4:	687b      	ldr	r3, [r7, #4]
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3718      	adds	r7, #24
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}

08000dfe <_close>:

int _close(int file)
{
 8000dfe:	b480      	push	{r7}
 8000e00:	b083      	sub	sp, #12
 8000e02:	af00      	add	r7, sp, #0
 8000e04:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e06:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	370c      	adds	r7, #12
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr

08000e16 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e16:	b480      	push	{r7}
 8000e18:	b083      	sub	sp, #12
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	6078      	str	r0, [r7, #4]
 8000e1e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e26:	605a      	str	r2, [r3, #4]
  return 0;
 8000e28:	2300      	movs	r3, #0
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	370c      	adds	r7, #12
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr

08000e36 <_isatty>:

int _isatty(int file)
{
 8000e36:	b480      	push	{r7}
 8000e38:	b083      	sub	sp, #12
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e3e:	2301      	movs	r3, #1
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	370c      	adds	r7, #12
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr

08000e4c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b085      	sub	sp, #20
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	60f8      	str	r0, [r7, #12]
 8000e54:	60b9      	str	r1, [r7, #8]
 8000e56:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e58:	2300      	movs	r3, #0
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3714      	adds	r7, #20
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr
	...

08000e68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b086      	sub	sp, #24
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e70:	4a14      	ldr	r2, [pc, #80]	@ (8000ec4 <_sbrk+0x5c>)
 8000e72:	4b15      	ldr	r3, [pc, #84]	@ (8000ec8 <_sbrk+0x60>)
 8000e74:	1ad3      	subs	r3, r2, r3
 8000e76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e7c:	4b13      	ldr	r3, [pc, #76]	@ (8000ecc <_sbrk+0x64>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d102      	bne.n	8000e8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e84:	4b11      	ldr	r3, [pc, #68]	@ (8000ecc <_sbrk+0x64>)
 8000e86:	4a12      	ldr	r2, [pc, #72]	@ (8000ed0 <_sbrk+0x68>)
 8000e88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e8a:	4b10      	ldr	r3, [pc, #64]	@ (8000ecc <_sbrk+0x64>)
 8000e8c:	681a      	ldr	r2, [r3, #0]
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4413      	add	r3, r2
 8000e92:	693a      	ldr	r2, [r7, #16]
 8000e94:	429a      	cmp	r2, r3
 8000e96:	d207      	bcs.n	8000ea8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e98:	f004 ffb2 	bl	8005e00 <__errno>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	220c      	movs	r2, #12
 8000ea0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ea2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000ea6:	e009      	b.n	8000ebc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ea8:	4b08      	ldr	r3, [pc, #32]	@ (8000ecc <_sbrk+0x64>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000eae:	4b07      	ldr	r3, [pc, #28]	@ (8000ecc <_sbrk+0x64>)
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	4413      	add	r3, r2
 8000eb6:	4a05      	ldr	r2, [pc, #20]	@ (8000ecc <_sbrk+0x64>)
 8000eb8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000eba:	68fb      	ldr	r3, [r7, #12]
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	3718      	adds	r7, #24
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	24080000 	.word	0x24080000
 8000ec8:	00000400 	.word	0x00000400
 8000ecc:	24000148 	.word	0x24000148
 8000ed0:	24000338 	.word	0x24000338

08000ed4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000ed4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f0c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ed8:	f7ff fbca 	bl	8000670 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000edc:	480c      	ldr	r0, [pc, #48]	@ (8000f10 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ede:	490d      	ldr	r1, [pc, #52]	@ (8000f14 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ee0:	4a0d      	ldr	r2, [pc, #52]	@ (8000f18 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ee2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ee4:	e002      	b.n	8000eec <LoopCopyDataInit>

08000ee6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ee6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ee8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eea:	3304      	adds	r3, #4

08000eec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000eec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ef0:	d3f9      	bcc.n	8000ee6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ef2:	4a0a      	ldr	r2, [pc, #40]	@ (8000f1c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ef4:	4c0a      	ldr	r4, [pc, #40]	@ (8000f20 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ef6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ef8:	e001      	b.n	8000efe <LoopFillZerobss>

08000efa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000efa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000efc:	3204      	adds	r2, #4

08000efe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000efe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f00:	d3fb      	bcc.n	8000efa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f02:	f004 ff83 	bl	8005e0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f06:	f7ff fc49 	bl	800079c <main>
  bx  lr
 8000f0a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f0c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000f10:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000f14:	24000088 	.word	0x24000088
  ldr r2, =_sidata
 8000f18:	08006a38 	.word	0x08006a38
  ldr r2, =_sbss
 8000f1c:	24000088 	.word	0x24000088
  ldr r4, =_ebss
 8000f20:	24000338 	.word	0x24000338

08000f24 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f24:	e7fe      	b.n	8000f24 <ADC3_IRQHandler>
	...

08000f28 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b08c      	sub	sp, #48	@ 0x30
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	4603      	mov	r3, r0
 8000f30:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000f32:	2300      	movs	r3, #0
 8000f34:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8000f36:	79fb      	ldrb	r3, [r7, #7]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d009      	beq.n	8000f50 <BSP_LED_Init+0x28>
 8000f3c:	79fb      	ldrb	r3, [r7, #7]
 8000f3e:	2b01      	cmp	r3, #1
 8000f40:	d006      	beq.n	8000f50 <BSP_LED_Init+0x28>
 8000f42:	79fb      	ldrb	r3, [r7, #7]
 8000f44:	2b02      	cmp	r3, #2
 8000f46:	d003      	beq.n	8000f50 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000f48:	f06f 0301 	mvn.w	r3, #1
 8000f4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000f4e:	e055      	b.n	8000ffc <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 8000f50:	79fb      	ldrb	r3, [r7, #7]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d10f      	bne.n	8000f76 <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 8000f56:	4b2c      	ldr	r3, [pc, #176]	@ (8001008 <BSP_LED_Init+0xe0>)
 8000f58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f5c:	4a2a      	ldr	r2, [pc, #168]	@ (8001008 <BSP_LED_Init+0xe0>)
 8000f5e:	f043 0302 	orr.w	r3, r3, #2
 8000f62:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f66:	4b28      	ldr	r3, [pc, #160]	@ (8001008 <BSP_LED_Init+0xe0>)
 8000f68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f6c:	f003 0302 	and.w	r3, r3, #2
 8000f70:	617b      	str	r3, [r7, #20]
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	e021      	b.n	8000fba <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 8000f76:	79fb      	ldrb	r3, [r7, #7]
 8000f78:	2b01      	cmp	r3, #1
 8000f7a:	d10f      	bne.n	8000f9c <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 8000f7c:	4b22      	ldr	r3, [pc, #136]	@ (8001008 <BSP_LED_Init+0xe0>)
 8000f7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f82:	4a21      	ldr	r2, [pc, #132]	@ (8001008 <BSP_LED_Init+0xe0>)
 8000f84:	f043 0310 	orr.w	r3, r3, #16
 8000f88:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f8c:	4b1e      	ldr	r3, [pc, #120]	@ (8001008 <BSP_LED_Init+0xe0>)
 8000f8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f92:	f003 0310 	and.w	r3, r3, #16
 8000f96:	613b      	str	r3, [r7, #16]
 8000f98:	693b      	ldr	r3, [r7, #16]
 8000f9a:	e00e      	b.n	8000fba <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8000f9c:	4b1a      	ldr	r3, [pc, #104]	@ (8001008 <BSP_LED_Init+0xe0>)
 8000f9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fa2:	4a19      	ldr	r2, [pc, #100]	@ (8001008 <BSP_LED_Init+0xe0>)
 8000fa4:	f043 0302 	orr.w	r3, r3, #2
 8000fa8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fac:	4b16      	ldr	r3, [pc, #88]	@ (8001008 <BSP_LED_Init+0xe0>)
 8000fae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fb2:	f003 0302 	and.w	r3, r3, #2
 8000fb6:	60fb      	str	r3, [r7, #12]
 8000fb8:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8000fba:	79fb      	ldrb	r3, [r7, #7]
 8000fbc:	4a13      	ldr	r2, [pc, #76]	@ (800100c <BSP_LED_Init+0xe4>)
 8000fbe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000fc2:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fcc:	2303      	movs	r3, #3
 8000fce:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000fd0:	79fb      	ldrb	r3, [r7, #7]
 8000fd2:	4a0f      	ldr	r2, [pc, #60]	@ (8001010 <BSP_LED_Init+0xe8>)
 8000fd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fd8:	f107 0218 	add.w	r2, r7, #24
 8000fdc:	4611      	mov	r1, r2
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f000 fbc0 	bl	8001764 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8000fe4:	79fb      	ldrb	r3, [r7, #7]
 8000fe6:	4a0a      	ldr	r2, [pc, #40]	@ (8001010 <BSP_LED_Init+0xe8>)
 8000fe8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000fec:	79fb      	ldrb	r3, [r7, #7]
 8000fee:	4a07      	ldr	r2, [pc, #28]	@ (800100c <BSP_LED_Init+0xe4>)
 8000ff0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	f000 fd64 	bl	8001ac4 <HAL_GPIO_WritePin>
  }

  return ret;
 8000ffc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	3730      	adds	r7, #48	@ 0x30
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	58024400 	.word	0x58024400
 800100c:	080069c0 	.word	0x080069c0
 8001010:	2400000c 	.word	0x2400000c

08001014 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b088      	sub	sp, #32
 8001018:	af00      	add	r7, sp, #0
 800101a:	4603      	mov	r3, r0
 800101c:	460a      	mov	r2, r1
 800101e:	71fb      	strb	r3, [r7, #7]
 8001020:	4613      	mov	r3, r2
 8001022:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8001024:	4b2e      	ldr	r3, [pc, #184]	@ (80010e0 <BSP_PB_Init+0xcc>)
 8001026:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800102a:	4a2d      	ldr	r2, [pc, #180]	@ (80010e0 <BSP_PB_Init+0xcc>)
 800102c:	f043 0304 	orr.w	r3, r3, #4
 8001030:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001034:	4b2a      	ldr	r3, [pc, #168]	@ (80010e0 <BSP_PB_Init+0xcc>)
 8001036:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800103a:	f003 0304 	and.w	r3, r3, #4
 800103e:	60bb      	str	r3, [r7, #8]
 8001040:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8001042:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001046:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8001048:	2302      	movs	r3, #2
 800104a:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 800104c:	2302      	movs	r3, #2
 800104e:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8001050:	79bb      	ldrb	r3, [r7, #6]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d10c      	bne.n	8001070 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8001056:	2300      	movs	r3, #0
 8001058:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 800105a:	79fb      	ldrb	r3, [r7, #7]
 800105c:	4a21      	ldr	r2, [pc, #132]	@ (80010e4 <BSP_PB_Init+0xd0>)
 800105e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001062:	f107 020c 	add.w	r2, r7, #12
 8001066:	4611      	mov	r1, r2
 8001068:	4618      	mov	r0, r3
 800106a:	f000 fb7b 	bl	8001764 <HAL_GPIO_Init>
 800106e:	e031      	b.n	80010d4 <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8001070:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001074:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001076:	79fb      	ldrb	r3, [r7, #7]
 8001078:	4a1a      	ldr	r2, [pc, #104]	@ (80010e4 <BSP_PB_Init+0xd0>)
 800107a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800107e:	f107 020c 	add.w	r2, r7, #12
 8001082:	4611      	mov	r1, r2
 8001084:	4618      	mov	r0, r3
 8001086:	f000 fb6d 	bl	8001764 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 800108a:	79fb      	ldrb	r3, [r7, #7]
 800108c:	00db      	lsls	r3, r3, #3
 800108e:	4a16      	ldr	r2, [pc, #88]	@ (80010e8 <BSP_PB_Init+0xd4>)
 8001090:	441a      	add	r2, r3
 8001092:	79fb      	ldrb	r3, [r7, #7]
 8001094:	4915      	ldr	r1, [pc, #84]	@ (80010ec <BSP_PB_Init+0xd8>)
 8001096:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800109a:	4619      	mov	r1, r3
 800109c:	4610      	mov	r0, r2
 800109e:	f000 fb10 	bl	80016c2 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 80010a2:	79fb      	ldrb	r3, [r7, #7]
 80010a4:	00db      	lsls	r3, r3, #3
 80010a6:	4a10      	ldr	r2, [pc, #64]	@ (80010e8 <BSP_PB_Init+0xd4>)
 80010a8:	1898      	adds	r0, r3, r2
 80010aa:	79fb      	ldrb	r3, [r7, #7]
 80010ac:	4a10      	ldr	r2, [pc, #64]	@ (80010f0 <BSP_PB_Init+0xdc>)
 80010ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010b2:	461a      	mov	r2, r3
 80010b4:	2100      	movs	r1, #0
 80010b6:	f000 fae5 	bl	8001684 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 80010ba:	2028      	movs	r0, #40	@ 0x28
 80010bc:	79fb      	ldrb	r3, [r7, #7]
 80010be:	4a0d      	ldr	r2, [pc, #52]	@ (80010f4 <BSP_PB_Init+0xe0>)
 80010c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010c4:	2200      	movs	r2, #0
 80010c6:	4619      	mov	r1, r3
 80010c8:	f000 fa93 	bl	80015f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 80010cc:	2328      	movs	r3, #40	@ 0x28
 80010ce:	4618      	mov	r0, r3
 80010d0:	f000 faa9 	bl	8001626 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 80010d4:	2300      	movs	r3, #0
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3720      	adds	r7, #32
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	58024400 	.word	0x58024400
 80010e4:	24000018 	.word	0x24000018
 80010e8:	2400014c 	.word	0x2400014c
 80010ec:	080069c8 	.word	0x080069c8
 80010f0:	2400001c 	.word	0x2400001c
 80010f4:	24000020 	.word	0x24000020

080010f8 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	4603      	mov	r3, r0
 8001100:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8001102:	79fb      	ldrb	r3, [r7, #7]
 8001104:	00db      	lsls	r3, r3, #3
 8001106:	4a04      	ldr	r2, [pc, #16]	@ (8001118 <BSP_PB_IRQHandler+0x20>)
 8001108:	4413      	add	r3, r2
 800110a:	4618      	mov	r0, r3
 800110c:	f000 faee 	bl	80016ec <HAL_EXTI_IRQHandler>
}
 8001110:	bf00      	nop
 8001112:	3708      	adds	r7, #8
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	2400014c 	.word	0x2400014c

0800111c <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	4603      	mov	r3, r0
 8001124:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8001126:	bf00      	nop
 8001128:	370c      	adds	r7, #12
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
	...

08001134 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	4603      	mov	r3, r0
 800113c:	6039      	str	r1, [r7, #0]
 800113e:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001140:	2300      	movs	r3, #0
 8001142:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 8001144:	79fb      	ldrb	r3, [r7, #7]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d003      	beq.n	8001152 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800114a:	f06f 0301 	mvn.w	r3, #1
 800114e:	60fb      	str	r3, [r7, #12]
 8001150:	e018      	b.n	8001184 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8001152:	79fb      	ldrb	r3, [r7, #7]
 8001154:	2294      	movs	r2, #148	@ 0x94
 8001156:	fb02 f303 	mul.w	r3, r2, r3
 800115a:	4a0d      	ldr	r2, [pc, #52]	@ (8001190 <BSP_COM_Init+0x5c>)
 800115c:	4413      	add	r3, r2
 800115e:	4618      	mov	r0, r3
 8001160:	f000 f852 	bl	8001208 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8001164:	79fb      	ldrb	r3, [r7, #7]
 8001166:	2294      	movs	r2, #148	@ 0x94
 8001168:	fb02 f303 	mul.w	r3, r2, r3
 800116c:	4a08      	ldr	r2, [pc, #32]	@ (8001190 <BSP_COM_Init+0x5c>)
 800116e:	4413      	add	r3, r2
 8001170:	6839      	ldr	r1, [r7, #0]
 8001172:	4618      	mov	r0, r3
 8001174:	f000 f80e 	bl	8001194 <MX_USART3_Init>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d002      	beq.n	8001184 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800117e:	f06f 0303 	mvn.w	r3, #3
 8001182:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001184:	68fb      	ldr	r3, [r7, #12]
}
 8001186:	4618      	mov	r0, r3
 8001188:	3710      	adds	r7, #16
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	24000154 	.word	0x24000154

08001194 <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 800119e:	4b15      	ldr	r3, [pc, #84]	@ (80011f4 <MX_USART3_Init+0x60>)
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	220c      	movs	r2, #12
 80011b2:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	895b      	ldrh	r3, [r3, #10]
 80011b8:	461a      	mov	r2, r3
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	685a      	ldr	r2, [r3, #4]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	891b      	ldrh	r3, [r3, #8]
 80011ca:	461a      	mov	r2, r3
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	899b      	ldrh	r3, [r3, #12]
 80011d4:	461a      	mov	r2, r3
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80011e0:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 80011e2:	6878      	ldr	r0, [r7, #4]
 80011e4:	f003 fb3c 	bl	8004860 <HAL_UART_Init>
 80011e8:	4603      	mov	r3, r0
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	24000008 	.word	0x24000008

080011f8 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 80011fc:	2000      	movs	r0, #0
 80011fe:	f7ff ff8d 	bl	800111c <BSP_PB_Callback>
}
 8001202:	bf00      	nop
 8001204:	bd80      	pop	{r7, pc}
	...

08001208 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b08a      	sub	sp, #40	@ 0x28
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8001210:	4b27      	ldr	r3, [pc, #156]	@ (80012b0 <COM1_MspInit+0xa8>)
 8001212:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001216:	4a26      	ldr	r2, [pc, #152]	@ (80012b0 <COM1_MspInit+0xa8>)
 8001218:	f043 0308 	orr.w	r3, r3, #8
 800121c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001220:	4b23      	ldr	r3, [pc, #140]	@ (80012b0 <COM1_MspInit+0xa8>)
 8001222:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001226:	f003 0308 	and.w	r3, r3, #8
 800122a:	613b      	str	r3, [r7, #16]
 800122c:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 800122e:	4b20      	ldr	r3, [pc, #128]	@ (80012b0 <COM1_MspInit+0xa8>)
 8001230:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001234:	4a1e      	ldr	r2, [pc, #120]	@ (80012b0 <COM1_MspInit+0xa8>)
 8001236:	f043 0308 	orr.w	r3, r3, #8
 800123a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800123e:	4b1c      	ldr	r3, [pc, #112]	@ (80012b0 <COM1_MspInit+0xa8>)
 8001240:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001244:	f003 0308 	and.w	r3, r3, #8
 8001248:	60fb      	str	r3, [r7, #12]
 800124a:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 800124c:	4b18      	ldr	r3, [pc, #96]	@ (80012b0 <COM1_MspInit+0xa8>)
 800124e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001252:	4a17      	ldr	r2, [pc, #92]	@ (80012b0 <COM1_MspInit+0xa8>)
 8001254:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001258:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800125c:	4b14      	ldr	r3, [pc, #80]	@ (80012b0 <COM1_MspInit+0xa8>)
 800125e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001262:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001266:	60bb      	str	r3, [r7, #8]
 8001268:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 800126a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800126e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001270:	2302      	movs	r3, #2
 8001272:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001274:	2302      	movs	r3, #2
 8001276:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001278:	2301      	movs	r3, #1
 800127a:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 800127c:	2307      	movs	r3, #7
 800127e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8001280:	f107 0314 	add.w	r3, r7, #20
 8001284:	4619      	mov	r1, r3
 8001286:	480b      	ldr	r0, [pc, #44]	@ (80012b4 <COM1_MspInit+0xac>)
 8001288:	f000 fa6c 	bl	8001764 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 800128c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001290:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001292:	2302      	movs	r3, #2
 8001294:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8001296:	2307      	movs	r3, #7
 8001298:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 800129a:	f107 0314 	add.w	r3, r7, #20
 800129e:	4619      	mov	r1, r3
 80012a0:	4804      	ldr	r0, [pc, #16]	@ (80012b4 <COM1_MspInit+0xac>)
 80012a2:	f000 fa5f 	bl	8001764 <HAL_GPIO_Init>
}
 80012a6:	bf00      	nop
 80012a8:	3728      	adds	r7, #40	@ 0x28
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	58024400 	.word	0x58024400
 80012b4:	58020c00 	.word	0x58020c00

080012b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012be:	2003      	movs	r0, #3
 80012c0:	f000 f98c 	bl	80015dc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80012c4:	f001 faca 	bl	800285c <HAL_RCC_GetSysClockFreq>
 80012c8:	4602      	mov	r2, r0
 80012ca:	4b15      	ldr	r3, [pc, #84]	@ (8001320 <HAL_Init+0x68>)
 80012cc:	699b      	ldr	r3, [r3, #24]
 80012ce:	0a1b      	lsrs	r3, r3, #8
 80012d0:	f003 030f 	and.w	r3, r3, #15
 80012d4:	4913      	ldr	r1, [pc, #76]	@ (8001324 <HAL_Init+0x6c>)
 80012d6:	5ccb      	ldrb	r3, [r1, r3]
 80012d8:	f003 031f 	and.w	r3, r3, #31
 80012dc:	fa22 f303 	lsr.w	r3, r2, r3
 80012e0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80012e2:	4b0f      	ldr	r3, [pc, #60]	@ (8001320 <HAL_Init+0x68>)
 80012e4:	699b      	ldr	r3, [r3, #24]
 80012e6:	f003 030f 	and.w	r3, r3, #15
 80012ea:	4a0e      	ldr	r2, [pc, #56]	@ (8001324 <HAL_Init+0x6c>)
 80012ec:	5cd3      	ldrb	r3, [r2, r3]
 80012ee:	f003 031f 	and.w	r3, r3, #31
 80012f2:	687a      	ldr	r2, [r7, #4]
 80012f4:	fa22 f303 	lsr.w	r3, r2, r3
 80012f8:	4a0b      	ldr	r2, [pc, #44]	@ (8001328 <HAL_Init+0x70>)
 80012fa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80012fc:	4a0b      	ldr	r2, [pc, #44]	@ (800132c <HAL_Init+0x74>)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001302:	2000      	movs	r0, #0
 8001304:	f000 f814 	bl	8001330 <HAL_InitTick>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800130e:	2301      	movs	r3, #1
 8001310:	e002      	b.n	8001318 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001312:	f7ff fc5d 	bl	8000bd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001316:	2300      	movs	r3, #0
}
 8001318:	4618      	mov	r0, r3
 800131a:	3708      	adds	r7, #8
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	58024400 	.word	0x58024400
 8001324:	080069b0 	.word	0x080069b0
 8001328:	24000004 	.word	0x24000004
 800132c:	24000000 	.word	0x24000000

08001330 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001338:	4b15      	ldr	r3, [pc, #84]	@ (8001390 <HAL_InitTick+0x60>)
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d101      	bne.n	8001344 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001340:	2301      	movs	r3, #1
 8001342:	e021      	b.n	8001388 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001344:	4b13      	ldr	r3, [pc, #76]	@ (8001394 <HAL_InitTick+0x64>)
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	4b11      	ldr	r3, [pc, #68]	@ (8001390 <HAL_InitTick+0x60>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	4619      	mov	r1, r3
 800134e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001352:	fbb3 f3f1 	udiv	r3, r3, r1
 8001356:	fbb2 f3f3 	udiv	r3, r2, r3
 800135a:	4618      	mov	r0, r3
 800135c:	f000 f971 	bl	8001642 <HAL_SYSTICK_Config>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	e00e      	b.n	8001388 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2b0f      	cmp	r3, #15
 800136e:	d80a      	bhi.n	8001386 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001370:	2200      	movs	r2, #0
 8001372:	6879      	ldr	r1, [r7, #4]
 8001374:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001378:	f000 f93b 	bl	80015f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800137c:	4a06      	ldr	r2, [pc, #24]	@ (8001398 <HAL_InitTick+0x68>)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001382:	2300      	movs	r3, #0
 8001384:	e000      	b.n	8001388 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
}
 8001388:	4618      	mov	r0, r3
 800138a:	3708      	adds	r7, #8
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	24000028 	.word	0x24000028
 8001394:	24000000 	.word	0x24000000
 8001398:	24000024 	.word	0x24000024

0800139c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80013a0:	4b06      	ldr	r3, [pc, #24]	@ (80013bc <HAL_IncTick+0x20>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	461a      	mov	r2, r3
 80013a6:	4b06      	ldr	r3, [pc, #24]	@ (80013c0 <HAL_IncTick+0x24>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4413      	add	r3, r2
 80013ac:	4a04      	ldr	r2, [pc, #16]	@ (80013c0 <HAL_IncTick+0x24>)
 80013ae:	6013      	str	r3, [r2, #0]
}
 80013b0:	bf00      	nop
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	24000028 	.word	0x24000028
 80013c0:	240001e8 	.word	0x240001e8

080013c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  return uwTick;
 80013c8:	4b03      	ldr	r3, [pc, #12]	@ (80013d8 <HAL_GetTick+0x14>)
 80013ca:	681b      	ldr	r3, [r3, #0]
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	240001e8 	.word	0x240001e8

080013dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b084      	sub	sp, #16
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013e4:	f7ff ffee 	bl	80013c4 <HAL_GetTick>
 80013e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80013f4:	d005      	beq.n	8001402 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001420 <HAL_Delay+0x44>)
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	461a      	mov	r2, r3
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	4413      	add	r3, r2
 8001400:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001402:	bf00      	nop
 8001404:	f7ff ffde 	bl	80013c4 <HAL_GetTick>
 8001408:	4602      	mov	r2, r0
 800140a:	68bb      	ldr	r3, [r7, #8]
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	68fa      	ldr	r2, [r7, #12]
 8001410:	429a      	cmp	r2, r3
 8001412:	d8f7      	bhi.n	8001404 <HAL_Delay+0x28>
  {
  }
}
 8001414:	bf00      	nop
 8001416:	bf00      	nop
 8001418:	3710      	adds	r7, #16
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	24000028 	.word	0x24000028

08001424 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001428:	4b03      	ldr	r3, [pc, #12]	@ (8001438 <HAL_GetREVID+0x14>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	0c1b      	lsrs	r3, r3, #16
}
 800142e:	4618      	mov	r0, r3
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr
 8001438:	5c001000 	.word	0x5c001000

0800143c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800143c:	b480      	push	{r7}
 800143e:	b085      	sub	sp, #20
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	f003 0307 	and.w	r3, r3, #7
 800144a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800144c:	4b0b      	ldr	r3, [pc, #44]	@ (800147c <__NVIC_SetPriorityGrouping+0x40>)
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001452:	68ba      	ldr	r2, [r7, #8]
 8001454:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001458:	4013      	ands	r3, r2
 800145a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001464:	4b06      	ldr	r3, [pc, #24]	@ (8001480 <__NVIC_SetPriorityGrouping+0x44>)
 8001466:	4313      	orrs	r3, r2
 8001468:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800146a:	4a04      	ldr	r2, [pc, #16]	@ (800147c <__NVIC_SetPriorityGrouping+0x40>)
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	60d3      	str	r3, [r2, #12]
}
 8001470:	bf00      	nop
 8001472:	3714      	adds	r7, #20
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr
 800147c:	e000ed00 	.word	0xe000ed00
 8001480:	05fa0000 	.word	0x05fa0000

08001484 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001488:	4b04      	ldr	r3, [pc, #16]	@ (800149c <__NVIC_GetPriorityGrouping+0x18>)
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	0a1b      	lsrs	r3, r3, #8
 800148e:	f003 0307 	and.w	r3, r3, #7
}
 8001492:	4618      	mov	r0, r3
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr
 800149c:	e000ed00 	.word	0xe000ed00

080014a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	4603      	mov	r3, r0
 80014a8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80014aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	db0b      	blt.n	80014ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014b2:	88fb      	ldrh	r3, [r7, #6]
 80014b4:	f003 021f 	and.w	r2, r3, #31
 80014b8:	4907      	ldr	r1, [pc, #28]	@ (80014d8 <__NVIC_EnableIRQ+0x38>)
 80014ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014be:	095b      	lsrs	r3, r3, #5
 80014c0:	2001      	movs	r0, #1
 80014c2:	fa00 f202 	lsl.w	r2, r0, r2
 80014c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80014ca:	bf00      	nop
 80014cc:	370c      	adds	r7, #12
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	e000e100 	.word	0xe000e100

080014dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	4603      	mov	r3, r0
 80014e4:	6039      	str	r1, [r7, #0]
 80014e6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80014e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	db0a      	blt.n	8001506 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	b2da      	uxtb	r2, r3
 80014f4:	490c      	ldr	r1, [pc, #48]	@ (8001528 <__NVIC_SetPriority+0x4c>)
 80014f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014fa:	0112      	lsls	r2, r2, #4
 80014fc:	b2d2      	uxtb	r2, r2
 80014fe:	440b      	add	r3, r1
 8001500:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001504:	e00a      	b.n	800151c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	b2da      	uxtb	r2, r3
 800150a:	4908      	ldr	r1, [pc, #32]	@ (800152c <__NVIC_SetPriority+0x50>)
 800150c:	88fb      	ldrh	r3, [r7, #6]
 800150e:	f003 030f 	and.w	r3, r3, #15
 8001512:	3b04      	subs	r3, #4
 8001514:	0112      	lsls	r2, r2, #4
 8001516:	b2d2      	uxtb	r2, r2
 8001518:	440b      	add	r3, r1
 800151a:	761a      	strb	r2, [r3, #24]
}
 800151c:	bf00      	nop
 800151e:	370c      	adds	r7, #12
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr
 8001528:	e000e100 	.word	0xe000e100
 800152c:	e000ed00 	.word	0xe000ed00

08001530 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001530:	b480      	push	{r7}
 8001532:	b089      	sub	sp, #36	@ 0x24
 8001534:	af00      	add	r7, sp, #0
 8001536:	60f8      	str	r0, [r7, #12]
 8001538:	60b9      	str	r1, [r7, #8]
 800153a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	f003 0307 	and.w	r3, r3, #7
 8001542:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001544:	69fb      	ldr	r3, [r7, #28]
 8001546:	f1c3 0307 	rsb	r3, r3, #7
 800154a:	2b04      	cmp	r3, #4
 800154c:	bf28      	it	cs
 800154e:	2304      	movcs	r3, #4
 8001550:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	3304      	adds	r3, #4
 8001556:	2b06      	cmp	r3, #6
 8001558:	d902      	bls.n	8001560 <NVIC_EncodePriority+0x30>
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	3b03      	subs	r3, #3
 800155e:	e000      	b.n	8001562 <NVIC_EncodePriority+0x32>
 8001560:	2300      	movs	r3, #0
 8001562:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001564:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001568:	69bb      	ldr	r3, [r7, #24]
 800156a:	fa02 f303 	lsl.w	r3, r2, r3
 800156e:	43da      	mvns	r2, r3
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	401a      	ands	r2, r3
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001578:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	fa01 f303 	lsl.w	r3, r1, r3
 8001582:	43d9      	mvns	r1, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001588:	4313      	orrs	r3, r2
         );
}
 800158a:	4618      	mov	r0, r3
 800158c:	3724      	adds	r7, #36	@ 0x24
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
	...

08001598 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	3b01      	subs	r3, #1
 80015a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80015a8:	d301      	bcc.n	80015ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015aa:	2301      	movs	r3, #1
 80015ac:	e00f      	b.n	80015ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015ae:	4a0a      	ldr	r2, [pc, #40]	@ (80015d8 <SysTick_Config+0x40>)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	3b01      	subs	r3, #1
 80015b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015b6:	210f      	movs	r1, #15
 80015b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80015bc:	f7ff ff8e 	bl	80014dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015c0:	4b05      	ldr	r3, [pc, #20]	@ (80015d8 <SysTick_Config+0x40>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015c6:	4b04      	ldr	r3, [pc, #16]	@ (80015d8 <SysTick_Config+0x40>)
 80015c8:	2207      	movs	r2, #7
 80015ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015cc:	2300      	movs	r3, #0
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3708      	adds	r7, #8
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	e000e010 	.word	0xe000e010

080015dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015e4:	6878      	ldr	r0, [r7, #4]
 80015e6:	f7ff ff29 	bl	800143c <__NVIC_SetPriorityGrouping>
}
 80015ea:	bf00      	nop
 80015ec:	3708      	adds	r7, #8
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}

080015f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015f2:	b580      	push	{r7, lr}
 80015f4:	b086      	sub	sp, #24
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	4603      	mov	r3, r0
 80015fa:	60b9      	str	r1, [r7, #8]
 80015fc:	607a      	str	r2, [r7, #4]
 80015fe:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001600:	f7ff ff40 	bl	8001484 <__NVIC_GetPriorityGrouping>
 8001604:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001606:	687a      	ldr	r2, [r7, #4]
 8001608:	68b9      	ldr	r1, [r7, #8]
 800160a:	6978      	ldr	r0, [r7, #20]
 800160c:	f7ff ff90 	bl	8001530 <NVIC_EncodePriority>
 8001610:	4602      	mov	r2, r0
 8001612:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001616:	4611      	mov	r1, r2
 8001618:	4618      	mov	r0, r3
 800161a:	f7ff ff5f 	bl	80014dc <__NVIC_SetPriority>
}
 800161e:	bf00      	nop
 8001620:	3718      	adds	r7, #24
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}

08001626 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001626:	b580      	push	{r7, lr}
 8001628:	b082      	sub	sp, #8
 800162a:	af00      	add	r7, sp, #0
 800162c:	4603      	mov	r3, r0
 800162e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001630:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001634:	4618      	mov	r0, r3
 8001636:	f7ff ff33 	bl	80014a0 <__NVIC_EnableIRQ>
}
 800163a:	bf00      	nop
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}

08001642 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001642:	b580      	push	{r7, lr}
 8001644:	b082      	sub	sp, #8
 8001646:	af00      	add	r7, sp, #0
 8001648:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800164a:	6878      	ldr	r0, [r7, #4]
 800164c:	f7ff ffa4 	bl	8001598 <SysTick_Config>
 8001650:	4603      	mov	r3, r0
}
 8001652:	4618      	mov	r0, r3
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
	...

0800165c <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8001660:	4b07      	ldr	r3, [pc, #28]	@ (8001680 <HAL_GetCurrentCPUID+0x24>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	091b      	lsrs	r3, r3, #4
 8001666:	f003 030f 	and.w	r3, r3, #15
 800166a:	2b07      	cmp	r3, #7
 800166c:	d101      	bne.n	8001672 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 800166e:	2303      	movs	r3, #3
 8001670:	e000      	b.n	8001674 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8001672:	2301      	movs	r3, #1
  }
}
 8001674:	4618      	mov	r0, r3
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	e000ed00 	.word	0xe000ed00

08001684 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8001684:	b480      	push	{r7}
 8001686:	b087      	sub	sp, #28
 8001688:	af00      	add	r7, sp, #0
 800168a:	60f8      	str	r0, [r7, #12]
 800168c:	460b      	mov	r3, r1
 800168e:	607a      	str	r2, [r7, #4]
 8001690:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8001692:	2300      	movs	r3, #0
 8001694:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d101      	bne.n	80016a0 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 800169c:	2301      	movs	r3, #1
 800169e:	e00a      	b.n	80016b6 <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 80016a0:	7afb      	ldrb	r3, [r7, #11]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d103      	bne.n	80016ae <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	687a      	ldr	r2, [r7, #4]
 80016aa:	605a      	str	r2, [r3, #4]
      break;
 80016ac:	e002      	b.n	80016b4 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	75fb      	strb	r3, [r7, #23]
      break;
 80016b2:	bf00      	nop
  }

  return status;
 80016b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	371c      	adds	r7, #28
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr

080016c2 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80016c2:	b480      	push	{r7}
 80016c4:	b083      	sub	sp, #12
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	6078      	str	r0, [r7, #4]
 80016ca:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d101      	bne.n	80016d6 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e003      	b.n	80016de <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	683a      	ldr	r2, [r7, #0]
 80016da:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80016dc:	2300      	movs	r3, #0
  }
}
 80016de:	4618      	mov	r0, r3
 80016e0:	370c      	adds	r7, #12
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
	...

080016ec <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b086      	sub	sp, #24
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	0c1b      	lsrs	r3, r3, #16
 80016fa:	f003 0303 	and.w	r3, r3, #3
 80016fe:	613b      	str	r3, [r7, #16]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f003 031f 	and.w	r3, r3, #31
 8001708:	2201      	movs	r2, #1
 800170a:	fa02 f303 	lsl.w	r3, r2, r3
 800170e:	60fb      	str	r3, [r7, #12]

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 8001710:	f7ff ffa4 	bl	800165c <HAL_GetCurrentCPUID>
 8001714:	4603      	mov	r3, r0
 8001716:	2b03      	cmp	r3, #3
 8001718:	d105      	bne.n	8001726 <HAL_EXTI_IRQHandler+0x3a>
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	011a      	lsls	r2, r3, #4
 800171e:	4b0f      	ldr	r3, [pc, #60]	@ (800175c <HAL_EXTI_IRQHandler+0x70>)
 8001720:	4413      	add	r3, r2
 8001722:	617b      	str	r3, [r7, #20]
 8001724:	e004      	b.n	8001730 <HAL_EXTI_IRQHandler+0x44>
  }
  else /* Cortex-M4*/
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	011a      	lsls	r2, r3, #4
 800172a:	4b0d      	ldr	r3, [pc, #52]	@ (8001760 <HAL_EXTI_IRQHandler+0x74>)
 800172c:	4413      	add	r3, r2
 800172e:	617b      	str	r3, [r7, #20]
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	68fa      	ldr	r2, [r7, #12]
 8001736:	4013      	ands	r3, r2
 8001738:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d009      	beq.n	8001754 <HAL_EXTI_IRQHandler+0x68>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	68fa      	ldr	r2, [r7, #12]
 8001744:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d002      	beq.n	8001754 <HAL_EXTI_IRQHandler+0x68>
    {
      hexti->PendingCallback();
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	4798      	blx	r3
    }
  }
}
 8001754:	bf00      	nop
 8001756:	3718      	adds	r7, #24
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	58000088 	.word	0x58000088
 8001760:	580000c8 	.word	0x580000c8

08001764 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001764:	b480      	push	{r7}
 8001766:	b089      	sub	sp, #36	@ 0x24
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800176e:	2300      	movs	r3, #0
 8001770:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001772:	4b89      	ldr	r3, [pc, #548]	@ (8001998 <HAL_GPIO_Init+0x234>)
 8001774:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001776:	e194      	b.n	8001aa2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	2101      	movs	r1, #1
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	fa01 f303 	lsl.w	r3, r1, r3
 8001784:	4013      	ands	r3, r2
 8001786:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	2b00      	cmp	r3, #0
 800178c:	f000 8186 	beq.w	8001a9c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f003 0303 	and.w	r3, r3, #3
 8001798:	2b01      	cmp	r3, #1
 800179a:	d005      	beq.n	80017a8 <HAL_GPIO_Init+0x44>
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f003 0303 	and.w	r3, r3, #3
 80017a4:	2b02      	cmp	r3, #2
 80017a6:	d130      	bne.n	800180a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	005b      	lsls	r3, r3, #1
 80017b2:	2203      	movs	r2, #3
 80017b4:	fa02 f303 	lsl.w	r3, r2, r3
 80017b8:	43db      	mvns	r3, r3
 80017ba:	69ba      	ldr	r2, [r7, #24]
 80017bc:	4013      	ands	r3, r2
 80017be:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	68da      	ldr	r2, [r3, #12]
 80017c4:	69fb      	ldr	r3, [r7, #28]
 80017c6:	005b      	lsls	r3, r3, #1
 80017c8:	fa02 f303 	lsl.w	r3, r2, r3
 80017cc:	69ba      	ldr	r2, [r7, #24]
 80017ce:	4313      	orrs	r3, r2
 80017d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	69ba      	ldr	r2, [r7, #24]
 80017d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80017de:	2201      	movs	r2, #1
 80017e0:	69fb      	ldr	r3, [r7, #28]
 80017e2:	fa02 f303 	lsl.w	r3, r2, r3
 80017e6:	43db      	mvns	r3, r3
 80017e8:	69ba      	ldr	r2, [r7, #24]
 80017ea:	4013      	ands	r3, r2
 80017ec:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	091b      	lsrs	r3, r3, #4
 80017f4:	f003 0201 	and.w	r2, r3, #1
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	fa02 f303 	lsl.w	r3, r2, r3
 80017fe:	69ba      	ldr	r2, [r7, #24]
 8001800:	4313      	orrs	r3, r2
 8001802:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	69ba      	ldr	r2, [r7, #24]
 8001808:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	f003 0303 	and.w	r3, r3, #3
 8001812:	2b03      	cmp	r3, #3
 8001814:	d017      	beq.n	8001846 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	68db      	ldr	r3, [r3, #12]
 800181a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800181c:	69fb      	ldr	r3, [r7, #28]
 800181e:	005b      	lsls	r3, r3, #1
 8001820:	2203      	movs	r2, #3
 8001822:	fa02 f303 	lsl.w	r3, r2, r3
 8001826:	43db      	mvns	r3, r3
 8001828:	69ba      	ldr	r2, [r7, #24]
 800182a:	4013      	ands	r3, r2
 800182c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	689a      	ldr	r2, [r3, #8]
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	005b      	lsls	r3, r3, #1
 8001836:	fa02 f303 	lsl.w	r3, r2, r3
 800183a:	69ba      	ldr	r2, [r7, #24]
 800183c:	4313      	orrs	r3, r2
 800183e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	69ba      	ldr	r2, [r7, #24]
 8001844:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f003 0303 	and.w	r3, r3, #3
 800184e:	2b02      	cmp	r3, #2
 8001850:	d123      	bne.n	800189a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	08da      	lsrs	r2, r3, #3
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	3208      	adds	r2, #8
 800185a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800185e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001860:	69fb      	ldr	r3, [r7, #28]
 8001862:	f003 0307 	and.w	r3, r3, #7
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	220f      	movs	r2, #15
 800186a:	fa02 f303 	lsl.w	r3, r2, r3
 800186e:	43db      	mvns	r3, r3
 8001870:	69ba      	ldr	r2, [r7, #24]
 8001872:	4013      	ands	r3, r2
 8001874:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	691a      	ldr	r2, [r3, #16]
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	f003 0307 	and.w	r3, r3, #7
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	fa02 f303 	lsl.w	r3, r2, r3
 8001886:	69ba      	ldr	r2, [r7, #24]
 8001888:	4313      	orrs	r3, r2
 800188a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800188c:	69fb      	ldr	r3, [r7, #28]
 800188e:	08da      	lsrs	r2, r3, #3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	3208      	adds	r2, #8
 8001894:	69b9      	ldr	r1, [r7, #24]
 8001896:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80018a0:	69fb      	ldr	r3, [r7, #28]
 80018a2:	005b      	lsls	r3, r3, #1
 80018a4:	2203      	movs	r2, #3
 80018a6:	fa02 f303 	lsl.w	r3, r2, r3
 80018aa:	43db      	mvns	r3, r3
 80018ac:	69ba      	ldr	r2, [r7, #24]
 80018ae:	4013      	ands	r3, r2
 80018b0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	f003 0203 	and.w	r2, r3, #3
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	005b      	lsls	r3, r3, #1
 80018be:	fa02 f303 	lsl.w	r3, r2, r3
 80018c2:	69ba      	ldr	r2, [r7, #24]
 80018c4:	4313      	orrs	r3, r2
 80018c6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	69ba      	ldr	r2, [r7, #24]
 80018cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	f000 80e0 	beq.w	8001a9c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018dc:	4b2f      	ldr	r3, [pc, #188]	@ (800199c <HAL_GPIO_Init+0x238>)
 80018de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80018e2:	4a2e      	ldr	r2, [pc, #184]	@ (800199c <HAL_GPIO_Init+0x238>)
 80018e4:	f043 0302 	orr.w	r3, r3, #2
 80018e8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80018ec:	4b2b      	ldr	r3, [pc, #172]	@ (800199c <HAL_GPIO_Init+0x238>)
 80018ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80018f2:	f003 0302 	and.w	r3, r3, #2
 80018f6:	60fb      	str	r3, [r7, #12]
 80018f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018fa:	4a29      	ldr	r2, [pc, #164]	@ (80019a0 <HAL_GPIO_Init+0x23c>)
 80018fc:	69fb      	ldr	r3, [r7, #28]
 80018fe:	089b      	lsrs	r3, r3, #2
 8001900:	3302      	adds	r3, #2
 8001902:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001906:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001908:	69fb      	ldr	r3, [r7, #28]
 800190a:	f003 0303 	and.w	r3, r3, #3
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	220f      	movs	r2, #15
 8001912:	fa02 f303 	lsl.w	r3, r2, r3
 8001916:	43db      	mvns	r3, r3
 8001918:	69ba      	ldr	r2, [r7, #24]
 800191a:	4013      	ands	r3, r2
 800191c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4a20      	ldr	r2, [pc, #128]	@ (80019a4 <HAL_GPIO_Init+0x240>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d052      	beq.n	80019cc <HAL_GPIO_Init+0x268>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4a1f      	ldr	r2, [pc, #124]	@ (80019a8 <HAL_GPIO_Init+0x244>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d031      	beq.n	8001992 <HAL_GPIO_Init+0x22e>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4a1e      	ldr	r2, [pc, #120]	@ (80019ac <HAL_GPIO_Init+0x248>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d02b      	beq.n	800198e <HAL_GPIO_Init+0x22a>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4a1d      	ldr	r2, [pc, #116]	@ (80019b0 <HAL_GPIO_Init+0x24c>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d025      	beq.n	800198a <HAL_GPIO_Init+0x226>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4a1c      	ldr	r2, [pc, #112]	@ (80019b4 <HAL_GPIO_Init+0x250>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d01f      	beq.n	8001986 <HAL_GPIO_Init+0x222>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4a1b      	ldr	r2, [pc, #108]	@ (80019b8 <HAL_GPIO_Init+0x254>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d019      	beq.n	8001982 <HAL_GPIO_Init+0x21e>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4a1a      	ldr	r2, [pc, #104]	@ (80019bc <HAL_GPIO_Init+0x258>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d013      	beq.n	800197e <HAL_GPIO_Init+0x21a>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4a19      	ldr	r2, [pc, #100]	@ (80019c0 <HAL_GPIO_Init+0x25c>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d00d      	beq.n	800197a <HAL_GPIO_Init+0x216>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4a18      	ldr	r2, [pc, #96]	@ (80019c4 <HAL_GPIO_Init+0x260>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d007      	beq.n	8001976 <HAL_GPIO_Init+0x212>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4a17      	ldr	r2, [pc, #92]	@ (80019c8 <HAL_GPIO_Init+0x264>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d101      	bne.n	8001972 <HAL_GPIO_Init+0x20e>
 800196e:	2309      	movs	r3, #9
 8001970:	e02d      	b.n	80019ce <HAL_GPIO_Init+0x26a>
 8001972:	230a      	movs	r3, #10
 8001974:	e02b      	b.n	80019ce <HAL_GPIO_Init+0x26a>
 8001976:	2308      	movs	r3, #8
 8001978:	e029      	b.n	80019ce <HAL_GPIO_Init+0x26a>
 800197a:	2307      	movs	r3, #7
 800197c:	e027      	b.n	80019ce <HAL_GPIO_Init+0x26a>
 800197e:	2306      	movs	r3, #6
 8001980:	e025      	b.n	80019ce <HAL_GPIO_Init+0x26a>
 8001982:	2305      	movs	r3, #5
 8001984:	e023      	b.n	80019ce <HAL_GPIO_Init+0x26a>
 8001986:	2304      	movs	r3, #4
 8001988:	e021      	b.n	80019ce <HAL_GPIO_Init+0x26a>
 800198a:	2303      	movs	r3, #3
 800198c:	e01f      	b.n	80019ce <HAL_GPIO_Init+0x26a>
 800198e:	2302      	movs	r3, #2
 8001990:	e01d      	b.n	80019ce <HAL_GPIO_Init+0x26a>
 8001992:	2301      	movs	r3, #1
 8001994:	e01b      	b.n	80019ce <HAL_GPIO_Init+0x26a>
 8001996:	bf00      	nop
 8001998:	58000080 	.word	0x58000080
 800199c:	58024400 	.word	0x58024400
 80019a0:	58000400 	.word	0x58000400
 80019a4:	58020000 	.word	0x58020000
 80019a8:	58020400 	.word	0x58020400
 80019ac:	58020800 	.word	0x58020800
 80019b0:	58020c00 	.word	0x58020c00
 80019b4:	58021000 	.word	0x58021000
 80019b8:	58021400 	.word	0x58021400
 80019bc:	58021800 	.word	0x58021800
 80019c0:	58021c00 	.word	0x58021c00
 80019c4:	58022000 	.word	0x58022000
 80019c8:	58022400 	.word	0x58022400
 80019cc:	2300      	movs	r3, #0
 80019ce:	69fa      	ldr	r2, [r7, #28]
 80019d0:	f002 0203 	and.w	r2, r2, #3
 80019d4:	0092      	lsls	r2, r2, #2
 80019d6:	4093      	lsls	r3, r2
 80019d8:	69ba      	ldr	r2, [r7, #24]
 80019da:	4313      	orrs	r3, r2
 80019dc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019de:	4938      	ldr	r1, [pc, #224]	@ (8001ac0 <HAL_GPIO_Init+0x35c>)
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	089b      	lsrs	r3, r3, #2
 80019e4:	3302      	adds	r3, #2
 80019e6:	69ba      	ldr	r2, [r7, #24]
 80019e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80019ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	43db      	mvns	r3, r3
 80019f8:	69ba      	ldr	r2, [r7, #24]
 80019fa:	4013      	ands	r3, r2
 80019fc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d003      	beq.n	8001a12 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001a0a:	69ba      	ldr	r2, [r7, #24]
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001a12:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001a16:	69bb      	ldr	r3, [r7, #24]
 8001a18:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001a1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	43db      	mvns	r3, r3
 8001a26:	69ba      	ldr	r2, [r7, #24]
 8001a28:	4013      	ands	r3, r2
 8001a2a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d003      	beq.n	8001a40 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001a38:	69ba      	ldr	r2, [r7, #24]
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001a40:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001a44:	69bb      	ldr	r3, [r7, #24]
 8001a46:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	43db      	mvns	r3, r3
 8001a52:	69ba      	ldr	r2, [r7, #24]
 8001a54:	4013      	ands	r3, r2
 8001a56:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d003      	beq.n	8001a6c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	69ba      	ldr	r2, [r7, #24]
 8001a70:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	43db      	mvns	r3, r3
 8001a7c:	69ba      	ldr	r2, [r7, #24]
 8001a7e:	4013      	ands	r3, r2
 8001a80:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d003      	beq.n	8001a96 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001a8e:	69ba      	ldr	r2, [r7, #24]
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	4313      	orrs	r3, r2
 8001a94:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	69ba      	ldr	r2, [r7, #24]
 8001a9a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	fa22 f303 	lsr.w	r3, r2, r3
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	f47f ae63 	bne.w	8001778 <HAL_GPIO_Init+0x14>
  }
}
 8001ab2:	bf00      	nop
 8001ab4:	bf00      	nop
 8001ab6:	3724      	adds	r7, #36	@ 0x24
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr
 8001ac0:	58000400 	.word	0x58000400

08001ac4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
 8001acc:	460b      	mov	r3, r1
 8001ace:	807b      	strh	r3, [r7, #2]
 8001ad0:	4613      	mov	r3, r2
 8001ad2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ad4:	787b      	ldrb	r3, [r7, #1]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d003      	beq.n	8001ae2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ada:	887a      	ldrh	r2, [r7, #2]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001ae0:	e003      	b.n	8001aea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001ae2:	887b      	ldrh	r3, [r7, #2]
 8001ae4:	041a      	lsls	r2, r3, #16
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	619a      	str	r2, [r3, #24]
}
 8001aea:	bf00      	nop
 8001aec:	370c      	adds	r7, #12
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr

08001af6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001af6:	b480      	push	{r7}
 8001af8:	b085      	sub	sp, #20
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	6078      	str	r0, [r7, #4]
 8001afe:	460b      	mov	r3, r1
 8001b00:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	695b      	ldr	r3, [r3, #20]
 8001b06:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b08:	887a      	ldrh	r2, [r7, #2]
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	041a      	lsls	r2, r3, #16
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	43d9      	mvns	r1, r3
 8001b14:	887b      	ldrh	r3, [r7, #2]
 8001b16:	400b      	ands	r3, r1
 8001b18:	431a      	orrs	r2, r3
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	619a      	str	r2, [r3, #24]
}
 8001b1e:	bf00      	nop
 8001b20:	3714      	adds	r7, #20
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
	...

08001b2c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001b34:	4a08      	ldr	r2, [pc, #32]	@ (8001b58 <HAL_HSEM_FastTake+0x2c>)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	3320      	adds	r3, #32
 8001b3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b3e:	4a07      	ldr	r2, [pc, #28]	@ (8001b5c <HAL_HSEM_FastTake+0x30>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d101      	bne.n	8001b48 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001b44:	2300      	movs	r3, #0
 8001b46:	e000      	b.n	8001b4a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	370c      	adds	r7, #12
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	58026400 	.word	0x58026400
 8001b5c:	80000300 	.word	0x80000300

08001b60 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8001b6a:	4906      	ldr	r1, [pc, #24]	@ (8001b84 <HAL_HSEM_Release+0x24>)
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001b78:	bf00      	nop
 8001b7a:	370c      	adds	r7, #12
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr
 8001b84:	58026400 	.word	0x58026400

08001b88 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001b90:	4b29      	ldr	r3, [pc, #164]	@ (8001c38 <HAL_PWREx_ConfigSupply+0xb0>)
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	f003 0307 	and.w	r3, r3, #7
 8001b98:	2b06      	cmp	r3, #6
 8001b9a:	d00a      	beq.n	8001bb2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001b9c:	4b26      	ldr	r3, [pc, #152]	@ (8001c38 <HAL_PWREx_ConfigSupply+0xb0>)
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001ba4:	687a      	ldr	r2, [r7, #4]
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	d001      	beq.n	8001bae <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e040      	b.n	8001c30 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	e03e      	b.n	8001c30 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001bb2:	4b21      	ldr	r3, [pc, #132]	@ (8001c38 <HAL_PWREx_ConfigSupply+0xb0>)
 8001bb4:	68db      	ldr	r3, [r3, #12]
 8001bb6:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8001bba:	491f      	ldr	r1, [pc, #124]	@ (8001c38 <HAL_PWREx_ConfigSupply+0xb0>)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001bc2:	f7ff fbff 	bl	80013c4 <HAL_GetTick>
 8001bc6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001bc8:	e009      	b.n	8001bde <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001bca:	f7ff fbfb 	bl	80013c4 <HAL_GetTick>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001bd8:	d901      	bls.n	8001bde <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e028      	b.n	8001c30 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001bde:	4b16      	ldr	r3, [pc, #88]	@ (8001c38 <HAL_PWREx_ConfigSupply+0xb0>)
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001be6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001bea:	d1ee      	bne.n	8001bca <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2b1e      	cmp	r3, #30
 8001bf0:	d008      	beq.n	8001c04 <HAL_PWREx_ConfigSupply+0x7c>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2b2e      	cmp	r3, #46	@ 0x2e
 8001bf6:	d005      	beq.n	8001c04 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2b1d      	cmp	r3, #29
 8001bfc:	d002      	beq.n	8001c04 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2b2d      	cmp	r3, #45	@ 0x2d
 8001c02:	d114      	bne.n	8001c2e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001c04:	f7ff fbde 	bl	80013c4 <HAL_GetTick>
 8001c08:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001c0a:	e009      	b.n	8001c20 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001c0c:	f7ff fbda 	bl	80013c4 <HAL_GetTick>
 8001c10:	4602      	mov	r2, r0
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001c1a:	d901      	bls.n	8001c20 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e007      	b.n	8001c30 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001c20:	4b05      	ldr	r3, [pc, #20]	@ (8001c38 <HAL_PWREx_ConfigSupply+0xb0>)
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c2c:	d1ee      	bne.n	8001c0c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001c2e:	2300      	movs	r3, #0
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3710      	adds	r7, #16
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	58024800 	.word	0x58024800

08001c3c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b08c      	sub	sp, #48	@ 0x30
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d102      	bne.n	8001c50 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	f000 bc48 	b.w	80024e0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 0301 	and.w	r3, r3, #1
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	f000 8088 	beq.w	8001d6e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c5e:	4b99      	ldr	r3, [pc, #612]	@ (8001ec4 <HAL_RCC_OscConfig+0x288>)
 8001c60:	691b      	ldr	r3, [r3, #16]
 8001c62:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001c66:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001c68:	4b96      	ldr	r3, [pc, #600]	@ (8001ec4 <HAL_RCC_OscConfig+0x288>)
 8001c6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c6c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001c6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c70:	2b10      	cmp	r3, #16
 8001c72:	d007      	beq.n	8001c84 <HAL_RCC_OscConfig+0x48>
 8001c74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c76:	2b18      	cmp	r3, #24
 8001c78:	d111      	bne.n	8001c9e <HAL_RCC_OscConfig+0x62>
 8001c7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c7c:	f003 0303 	and.w	r3, r3, #3
 8001c80:	2b02      	cmp	r3, #2
 8001c82:	d10c      	bne.n	8001c9e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c84:	4b8f      	ldr	r3, [pc, #572]	@ (8001ec4 <HAL_RCC_OscConfig+0x288>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d06d      	beq.n	8001d6c <HAL_RCC_OscConfig+0x130>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d169      	bne.n	8001d6c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	f000 bc21 	b.w	80024e0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ca6:	d106      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x7a>
 8001ca8:	4b86      	ldr	r3, [pc, #536]	@ (8001ec4 <HAL_RCC_OscConfig+0x288>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a85      	ldr	r2, [pc, #532]	@ (8001ec4 <HAL_RCC_OscConfig+0x288>)
 8001cae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cb2:	6013      	str	r3, [r2, #0]
 8001cb4:	e02e      	b.n	8001d14 <HAL_RCC_OscConfig+0xd8>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d10c      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x9c>
 8001cbe:	4b81      	ldr	r3, [pc, #516]	@ (8001ec4 <HAL_RCC_OscConfig+0x288>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a80      	ldr	r2, [pc, #512]	@ (8001ec4 <HAL_RCC_OscConfig+0x288>)
 8001cc4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001cc8:	6013      	str	r3, [r2, #0]
 8001cca:	4b7e      	ldr	r3, [pc, #504]	@ (8001ec4 <HAL_RCC_OscConfig+0x288>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a7d      	ldr	r2, [pc, #500]	@ (8001ec4 <HAL_RCC_OscConfig+0x288>)
 8001cd0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001cd4:	6013      	str	r3, [r2, #0]
 8001cd6:	e01d      	b.n	8001d14 <HAL_RCC_OscConfig+0xd8>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ce0:	d10c      	bne.n	8001cfc <HAL_RCC_OscConfig+0xc0>
 8001ce2:	4b78      	ldr	r3, [pc, #480]	@ (8001ec4 <HAL_RCC_OscConfig+0x288>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a77      	ldr	r2, [pc, #476]	@ (8001ec4 <HAL_RCC_OscConfig+0x288>)
 8001ce8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001cec:	6013      	str	r3, [r2, #0]
 8001cee:	4b75      	ldr	r3, [pc, #468]	@ (8001ec4 <HAL_RCC_OscConfig+0x288>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a74      	ldr	r2, [pc, #464]	@ (8001ec4 <HAL_RCC_OscConfig+0x288>)
 8001cf4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cf8:	6013      	str	r3, [r2, #0]
 8001cfa:	e00b      	b.n	8001d14 <HAL_RCC_OscConfig+0xd8>
 8001cfc:	4b71      	ldr	r3, [pc, #452]	@ (8001ec4 <HAL_RCC_OscConfig+0x288>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a70      	ldr	r2, [pc, #448]	@ (8001ec4 <HAL_RCC_OscConfig+0x288>)
 8001d02:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d06:	6013      	str	r3, [r2, #0]
 8001d08:	4b6e      	ldr	r3, [pc, #440]	@ (8001ec4 <HAL_RCC_OscConfig+0x288>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a6d      	ldr	r2, [pc, #436]	@ (8001ec4 <HAL_RCC_OscConfig+0x288>)
 8001d0e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d013      	beq.n	8001d44 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d1c:	f7ff fb52 	bl	80013c4 <HAL_GetTick>
 8001d20:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001d22:	e008      	b.n	8001d36 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d24:	f7ff fb4e 	bl	80013c4 <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	2b64      	cmp	r3, #100	@ 0x64
 8001d30:	d901      	bls.n	8001d36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d32:	2303      	movs	r3, #3
 8001d34:	e3d4      	b.n	80024e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001d36:	4b63      	ldr	r3, [pc, #396]	@ (8001ec4 <HAL_RCC_OscConfig+0x288>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d0f0      	beq.n	8001d24 <HAL_RCC_OscConfig+0xe8>
 8001d42:	e014      	b.n	8001d6e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d44:	f7ff fb3e 	bl	80013c4 <HAL_GetTick>
 8001d48:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001d4a:	e008      	b.n	8001d5e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d4c:	f7ff fb3a 	bl	80013c4 <HAL_GetTick>
 8001d50:	4602      	mov	r2, r0
 8001d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	2b64      	cmp	r3, #100	@ 0x64
 8001d58:	d901      	bls.n	8001d5e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e3c0      	b.n	80024e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001d5e:	4b59      	ldr	r3, [pc, #356]	@ (8001ec4 <HAL_RCC_OscConfig+0x288>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d1f0      	bne.n	8001d4c <HAL_RCC_OscConfig+0x110>
 8001d6a:	e000      	b.n	8001d6e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 0302 	and.w	r3, r3, #2
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	f000 80ca 	beq.w	8001f10 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d7c:	4b51      	ldr	r3, [pc, #324]	@ (8001ec4 <HAL_RCC_OscConfig+0x288>)
 8001d7e:	691b      	ldr	r3, [r3, #16]
 8001d80:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001d84:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001d86:	4b4f      	ldr	r3, [pc, #316]	@ (8001ec4 <HAL_RCC_OscConfig+0x288>)
 8001d88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d8a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001d8c:	6a3b      	ldr	r3, [r7, #32]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d007      	beq.n	8001da2 <HAL_RCC_OscConfig+0x166>
 8001d92:	6a3b      	ldr	r3, [r7, #32]
 8001d94:	2b18      	cmp	r3, #24
 8001d96:	d156      	bne.n	8001e46 <HAL_RCC_OscConfig+0x20a>
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	f003 0303 	and.w	r3, r3, #3
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d151      	bne.n	8001e46 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001da2:	4b48      	ldr	r3, [pc, #288]	@ (8001ec4 <HAL_RCC_OscConfig+0x288>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0304 	and.w	r3, r3, #4
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d005      	beq.n	8001dba <HAL_RCC_OscConfig+0x17e>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	68db      	ldr	r3, [r3, #12]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d101      	bne.n	8001dba <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e392      	b.n	80024e0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001dba:	4b42      	ldr	r3, [pc, #264]	@ (8001ec4 <HAL_RCC_OscConfig+0x288>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f023 0219 	bic.w	r2, r3, #25
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	68db      	ldr	r3, [r3, #12]
 8001dc6:	493f      	ldr	r1, [pc, #252]	@ (8001ec4 <HAL_RCC_OscConfig+0x288>)
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dcc:	f7ff fafa 	bl	80013c4 <HAL_GetTick>
 8001dd0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001dd2:	e008      	b.n	8001de6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dd4:	f7ff faf6 	bl	80013c4 <HAL_GetTick>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	2b02      	cmp	r3, #2
 8001de0:	d901      	bls.n	8001de6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001de2:	2303      	movs	r3, #3
 8001de4:	e37c      	b.n	80024e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001de6:	4b37      	ldr	r3, [pc, #220]	@ (8001ec4 <HAL_RCC_OscConfig+0x288>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 0304 	and.w	r3, r3, #4
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d0f0      	beq.n	8001dd4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001df2:	f7ff fb17 	bl	8001424 <HAL_GetREVID>
 8001df6:	4603      	mov	r3, r0
 8001df8:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d817      	bhi.n	8001e30 <HAL_RCC_OscConfig+0x1f4>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	691b      	ldr	r3, [r3, #16]
 8001e04:	2b40      	cmp	r3, #64	@ 0x40
 8001e06:	d108      	bne.n	8001e1a <HAL_RCC_OscConfig+0x1de>
 8001e08:	4b2e      	ldr	r3, [pc, #184]	@ (8001ec4 <HAL_RCC_OscConfig+0x288>)
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001e10:	4a2c      	ldr	r2, [pc, #176]	@ (8001ec4 <HAL_RCC_OscConfig+0x288>)
 8001e12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e16:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e18:	e07a      	b.n	8001f10 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e1a:	4b2a      	ldr	r3, [pc, #168]	@ (8001ec4 <HAL_RCC_OscConfig+0x288>)
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	691b      	ldr	r3, [r3, #16]
 8001e26:	031b      	lsls	r3, r3, #12
 8001e28:	4926      	ldr	r1, [pc, #152]	@ (8001ec4 <HAL_RCC_OscConfig+0x288>)
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e2e:	e06f      	b.n	8001f10 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e30:	4b24      	ldr	r3, [pc, #144]	@ (8001ec4 <HAL_RCC_OscConfig+0x288>)
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	691b      	ldr	r3, [r3, #16]
 8001e3c:	061b      	lsls	r3, r3, #24
 8001e3e:	4921      	ldr	r1, [pc, #132]	@ (8001ec4 <HAL_RCC_OscConfig+0x288>)
 8001e40:	4313      	orrs	r3, r2
 8001e42:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e44:	e064      	b.n	8001f10 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	68db      	ldr	r3, [r3, #12]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d047      	beq.n	8001ede <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001e4e:	4b1d      	ldr	r3, [pc, #116]	@ (8001ec4 <HAL_RCC_OscConfig+0x288>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f023 0219 	bic.w	r2, r3, #25
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	68db      	ldr	r3, [r3, #12]
 8001e5a:	491a      	ldr	r1, [pc, #104]	@ (8001ec4 <HAL_RCC_OscConfig+0x288>)
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e60:	f7ff fab0 	bl	80013c4 <HAL_GetTick>
 8001e64:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e66:	e008      	b.n	8001e7a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e68:	f7ff faac 	bl	80013c4 <HAL_GetTick>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d901      	bls.n	8001e7a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001e76:	2303      	movs	r3, #3
 8001e78:	e332      	b.n	80024e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e7a:	4b12      	ldr	r3, [pc, #72]	@ (8001ec4 <HAL_RCC_OscConfig+0x288>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 0304 	and.w	r3, r3, #4
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d0f0      	beq.n	8001e68 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e86:	f7ff facd 	bl	8001424 <HAL_GetREVID>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d819      	bhi.n	8001ec8 <HAL_RCC_OscConfig+0x28c>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	691b      	ldr	r3, [r3, #16]
 8001e98:	2b40      	cmp	r3, #64	@ 0x40
 8001e9a:	d108      	bne.n	8001eae <HAL_RCC_OscConfig+0x272>
 8001e9c:	4b09      	ldr	r3, [pc, #36]	@ (8001ec4 <HAL_RCC_OscConfig+0x288>)
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001ea4:	4a07      	ldr	r2, [pc, #28]	@ (8001ec4 <HAL_RCC_OscConfig+0x288>)
 8001ea6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001eaa:	6053      	str	r3, [r2, #4]
 8001eac:	e030      	b.n	8001f10 <HAL_RCC_OscConfig+0x2d4>
 8001eae:	4b05      	ldr	r3, [pc, #20]	@ (8001ec4 <HAL_RCC_OscConfig+0x288>)
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	691b      	ldr	r3, [r3, #16]
 8001eba:	031b      	lsls	r3, r3, #12
 8001ebc:	4901      	ldr	r1, [pc, #4]	@ (8001ec4 <HAL_RCC_OscConfig+0x288>)
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	604b      	str	r3, [r1, #4]
 8001ec2:	e025      	b.n	8001f10 <HAL_RCC_OscConfig+0x2d4>
 8001ec4:	58024400 	.word	0x58024400
 8001ec8:	4b9a      	ldr	r3, [pc, #616]	@ (8002134 <HAL_RCC_OscConfig+0x4f8>)
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	691b      	ldr	r3, [r3, #16]
 8001ed4:	061b      	lsls	r3, r3, #24
 8001ed6:	4997      	ldr	r1, [pc, #604]	@ (8002134 <HAL_RCC_OscConfig+0x4f8>)
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	604b      	str	r3, [r1, #4]
 8001edc:	e018      	b.n	8001f10 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ede:	4b95      	ldr	r3, [pc, #596]	@ (8002134 <HAL_RCC_OscConfig+0x4f8>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a94      	ldr	r2, [pc, #592]	@ (8002134 <HAL_RCC_OscConfig+0x4f8>)
 8001ee4:	f023 0301 	bic.w	r3, r3, #1
 8001ee8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eea:	f7ff fa6b 	bl	80013c4 <HAL_GetTick>
 8001eee:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001ef0:	e008      	b.n	8001f04 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ef2:	f7ff fa67 	bl	80013c4 <HAL_GetTick>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d901      	bls.n	8001f04 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001f00:	2303      	movs	r3, #3
 8001f02:	e2ed      	b.n	80024e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001f04:	4b8b      	ldr	r3, [pc, #556]	@ (8002134 <HAL_RCC_OscConfig+0x4f8>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 0304 	and.w	r3, r3, #4
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d1f0      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 0310 	and.w	r3, r3, #16
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	f000 80a9 	beq.w	8002070 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f1e:	4b85      	ldr	r3, [pc, #532]	@ (8002134 <HAL_RCC_OscConfig+0x4f8>)
 8001f20:	691b      	ldr	r3, [r3, #16]
 8001f22:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001f26:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001f28:	4b82      	ldr	r3, [pc, #520]	@ (8002134 <HAL_RCC_OscConfig+0x4f8>)
 8001f2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f2c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001f2e:	69bb      	ldr	r3, [r7, #24]
 8001f30:	2b08      	cmp	r3, #8
 8001f32:	d007      	beq.n	8001f44 <HAL_RCC_OscConfig+0x308>
 8001f34:	69bb      	ldr	r3, [r7, #24]
 8001f36:	2b18      	cmp	r3, #24
 8001f38:	d13a      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x374>
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	f003 0303 	and.w	r3, r3, #3
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d135      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001f44:	4b7b      	ldr	r3, [pc, #492]	@ (8002134 <HAL_RCC_OscConfig+0x4f8>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d005      	beq.n	8001f5c <HAL_RCC_OscConfig+0x320>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	69db      	ldr	r3, [r3, #28]
 8001f54:	2b80      	cmp	r3, #128	@ 0x80
 8001f56:	d001      	beq.n	8001f5c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e2c1      	b.n	80024e0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001f5c:	f7ff fa62 	bl	8001424 <HAL_GetREVID>
 8001f60:	4603      	mov	r3, r0
 8001f62:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d817      	bhi.n	8001f9a <HAL_RCC_OscConfig+0x35e>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6a1b      	ldr	r3, [r3, #32]
 8001f6e:	2b20      	cmp	r3, #32
 8001f70:	d108      	bne.n	8001f84 <HAL_RCC_OscConfig+0x348>
 8001f72:	4b70      	ldr	r3, [pc, #448]	@ (8002134 <HAL_RCC_OscConfig+0x4f8>)
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001f7a:	4a6e      	ldr	r2, [pc, #440]	@ (8002134 <HAL_RCC_OscConfig+0x4f8>)
 8001f7c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001f80:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001f82:	e075      	b.n	8002070 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001f84:	4b6b      	ldr	r3, [pc, #428]	@ (8002134 <HAL_RCC_OscConfig+0x4f8>)
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6a1b      	ldr	r3, [r3, #32]
 8001f90:	069b      	lsls	r3, r3, #26
 8001f92:	4968      	ldr	r1, [pc, #416]	@ (8002134 <HAL_RCC_OscConfig+0x4f8>)
 8001f94:	4313      	orrs	r3, r2
 8001f96:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001f98:	e06a      	b.n	8002070 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001f9a:	4b66      	ldr	r3, [pc, #408]	@ (8002134 <HAL_RCC_OscConfig+0x4f8>)
 8001f9c:	68db      	ldr	r3, [r3, #12]
 8001f9e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6a1b      	ldr	r3, [r3, #32]
 8001fa6:	061b      	lsls	r3, r3, #24
 8001fa8:	4962      	ldr	r1, [pc, #392]	@ (8002134 <HAL_RCC_OscConfig+0x4f8>)
 8001faa:	4313      	orrs	r3, r2
 8001fac:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001fae:	e05f      	b.n	8002070 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	69db      	ldr	r3, [r3, #28]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d042      	beq.n	800203e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001fb8:	4b5e      	ldr	r3, [pc, #376]	@ (8002134 <HAL_RCC_OscConfig+0x4f8>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a5d      	ldr	r2, [pc, #372]	@ (8002134 <HAL_RCC_OscConfig+0x4f8>)
 8001fbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001fc2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fc4:	f7ff f9fe 	bl	80013c4 <HAL_GetTick>
 8001fc8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001fca:	e008      	b.n	8001fde <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001fcc:	f7ff f9fa 	bl	80013c4 <HAL_GetTick>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	d901      	bls.n	8001fde <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e280      	b.n	80024e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001fde:	4b55      	ldr	r3, [pc, #340]	@ (8002134 <HAL_RCC_OscConfig+0x4f8>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d0f0      	beq.n	8001fcc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001fea:	f7ff fa1b 	bl	8001424 <HAL_GetREVID>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d817      	bhi.n	8002028 <HAL_RCC_OscConfig+0x3ec>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6a1b      	ldr	r3, [r3, #32]
 8001ffc:	2b20      	cmp	r3, #32
 8001ffe:	d108      	bne.n	8002012 <HAL_RCC_OscConfig+0x3d6>
 8002000:	4b4c      	ldr	r3, [pc, #304]	@ (8002134 <HAL_RCC_OscConfig+0x4f8>)
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002008:	4a4a      	ldr	r2, [pc, #296]	@ (8002134 <HAL_RCC_OscConfig+0x4f8>)
 800200a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800200e:	6053      	str	r3, [r2, #4]
 8002010:	e02e      	b.n	8002070 <HAL_RCC_OscConfig+0x434>
 8002012:	4b48      	ldr	r3, [pc, #288]	@ (8002134 <HAL_RCC_OscConfig+0x4f8>)
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6a1b      	ldr	r3, [r3, #32]
 800201e:	069b      	lsls	r3, r3, #26
 8002020:	4944      	ldr	r1, [pc, #272]	@ (8002134 <HAL_RCC_OscConfig+0x4f8>)
 8002022:	4313      	orrs	r3, r2
 8002024:	604b      	str	r3, [r1, #4]
 8002026:	e023      	b.n	8002070 <HAL_RCC_OscConfig+0x434>
 8002028:	4b42      	ldr	r3, [pc, #264]	@ (8002134 <HAL_RCC_OscConfig+0x4f8>)
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6a1b      	ldr	r3, [r3, #32]
 8002034:	061b      	lsls	r3, r3, #24
 8002036:	493f      	ldr	r1, [pc, #252]	@ (8002134 <HAL_RCC_OscConfig+0x4f8>)
 8002038:	4313      	orrs	r3, r2
 800203a:	60cb      	str	r3, [r1, #12]
 800203c:	e018      	b.n	8002070 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800203e:	4b3d      	ldr	r3, [pc, #244]	@ (8002134 <HAL_RCC_OscConfig+0x4f8>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a3c      	ldr	r2, [pc, #240]	@ (8002134 <HAL_RCC_OscConfig+0x4f8>)
 8002044:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002048:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800204a:	f7ff f9bb 	bl	80013c4 <HAL_GetTick>
 800204e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002050:	e008      	b.n	8002064 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002052:	f7ff f9b7 	bl	80013c4 <HAL_GetTick>
 8002056:	4602      	mov	r2, r0
 8002058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800205a:	1ad3      	subs	r3, r2, r3
 800205c:	2b02      	cmp	r3, #2
 800205e:	d901      	bls.n	8002064 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002060:	2303      	movs	r3, #3
 8002062:	e23d      	b.n	80024e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002064:	4b33      	ldr	r3, [pc, #204]	@ (8002134 <HAL_RCC_OscConfig+0x4f8>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800206c:	2b00      	cmp	r3, #0
 800206e:	d1f0      	bne.n	8002052 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 0308 	and.w	r3, r3, #8
 8002078:	2b00      	cmp	r3, #0
 800207a:	d036      	beq.n	80020ea <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	695b      	ldr	r3, [r3, #20]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d019      	beq.n	80020b8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002084:	4b2b      	ldr	r3, [pc, #172]	@ (8002134 <HAL_RCC_OscConfig+0x4f8>)
 8002086:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002088:	4a2a      	ldr	r2, [pc, #168]	@ (8002134 <HAL_RCC_OscConfig+0x4f8>)
 800208a:	f043 0301 	orr.w	r3, r3, #1
 800208e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002090:	f7ff f998 	bl	80013c4 <HAL_GetTick>
 8002094:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002096:	e008      	b.n	80020aa <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002098:	f7ff f994 	bl	80013c4 <HAL_GetTick>
 800209c:	4602      	mov	r2, r0
 800209e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d901      	bls.n	80020aa <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80020a6:	2303      	movs	r3, #3
 80020a8:	e21a      	b.n	80024e0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80020aa:	4b22      	ldr	r3, [pc, #136]	@ (8002134 <HAL_RCC_OscConfig+0x4f8>)
 80020ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020ae:	f003 0302 	and.w	r3, r3, #2
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d0f0      	beq.n	8002098 <HAL_RCC_OscConfig+0x45c>
 80020b6:	e018      	b.n	80020ea <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020b8:	4b1e      	ldr	r3, [pc, #120]	@ (8002134 <HAL_RCC_OscConfig+0x4f8>)
 80020ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020bc:	4a1d      	ldr	r2, [pc, #116]	@ (8002134 <HAL_RCC_OscConfig+0x4f8>)
 80020be:	f023 0301 	bic.w	r3, r3, #1
 80020c2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020c4:	f7ff f97e 	bl	80013c4 <HAL_GetTick>
 80020c8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80020ca:	e008      	b.n	80020de <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020cc:	f7ff f97a 	bl	80013c4 <HAL_GetTick>
 80020d0:	4602      	mov	r2, r0
 80020d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	d901      	bls.n	80020de <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80020da:	2303      	movs	r3, #3
 80020dc:	e200      	b.n	80024e0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80020de:	4b15      	ldr	r3, [pc, #84]	@ (8002134 <HAL_RCC_OscConfig+0x4f8>)
 80020e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020e2:	f003 0302 	and.w	r3, r3, #2
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d1f0      	bne.n	80020cc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0320 	and.w	r3, r3, #32
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d039      	beq.n	800216a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	699b      	ldr	r3, [r3, #24]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d01c      	beq.n	8002138 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80020fe:	4b0d      	ldr	r3, [pc, #52]	@ (8002134 <HAL_RCC_OscConfig+0x4f8>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a0c      	ldr	r2, [pc, #48]	@ (8002134 <HAL_RCC_OscConfig+0x4f8>)
 8002104:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002108:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800210a:	f7ff f95b 	bl	80013c4 <HAL_GetTick>
 800210e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002110:	e008      	b.n	8002124 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002112:	f7ff f957 	bl	80013c4 <HAL_GetTick>
 8002116:	4602      	mov	r2, r0
 8002118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800211a:	1ad3      	subs	r3, r2, r3
 800211c:	2b02      	cmp	r3, #2
 800211e:	d901      	bls.n	8002124 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002120:	2303      	movs	r3, #3
 8002122:	e1dd      	b.n	80024e0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002124:	4b03      	ldr	r3, [pc, #12]	@ (8002134 <HAL_RCC_OscConfig+0x4f8>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800212c:	2b00      	cmp	r3, #0
 800212e:	d0f0      	beq.n	8002112 <HAL_RCC_OscConfig+0x4d6>
 8002130:	e01b      	b.n	800216a <HAL_RCC_OscConfig+0x52e>
 8002132:	bf00      	nop
 8002134:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002138:	4b9b      	ldr	r3, [pc, #620]	@ (80023a8 <HAL_RCC_OscConfig+0x76c>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a9a      	ldr	r2, [pc, #616]	@ (80023a8 <HAL_RCC_OscConfig+0x76c>)
 800213e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002142:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002144:	f7ff f93e 	bl	80013c4 <HAL_GetTick>
 8002148:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800214a:	e008      	b.n	800215e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800214c:	f7ff f93a 	bl	80013c4 <HAL_GetTick>
 8002150:	4602      	mov	r2, r0
 8002152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	2b02      	cmp	r3, #2
 8002158:	d901      	bls.n	800215e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800215a:	2303      	movs	r3, #3
 800215c:	e1c0      	b.n	80024e0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800215e:	4b92      	ldr	r3, [pc, #584]	@ (80023a8 <HAL_RCC_OscConfig+0x76c>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d1f0      	bne.n	800214c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0304 	and.w	r3, r3, #4
 8002172:	2b00      	cmp	r3, #0
 8002174:	f000 8081 	beq.w	800227a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002178:	4b8c      	ldr	r3, [pc, #560]	@ (80023ac <HAL_RCC_OscConfig+0x770>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a8b      	ldr	r2, [pc, #556]	@ (80023ac <HAL_RCC_OscConfig+0x770>)
 800217e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002182:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002184:	f7ff f91e 	bl	80013c4 <HAL_GetTick>
 8002188:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800218a:	e008      	b.n	800219e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800218c:	f7ff f91a 	bl	80013c4 <HAL_GetTick>
 8002190:	4602      	mov	r2, r0
 8002192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	2b64      	cmp	r3, #100	@ 0x64
 8002198:	d901      	bls.n	800219e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	e1a0      	b.n	80024e0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800219e:	4b83      	ldr	r3, [pc, #524]	@ (80023ac <HAL_RCC_OscConfig+0x770>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d0f0      	beq.n	800218c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d106      	bne.n	80021c0 <HAL_RCC_OscConfig+0x584>
 80021b2:	4b7d      	ldr	r3, [pc, #500]	@ (80023a8 <HAL_RCC_OscConfig+0x76c>)
 80021b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021b6:	4a7c      	ldr	r2, [pc, #496]	@ (80023a8 <HAL_RCC_OscConfig+0x76c>)
 80021b8:	f043 0301 	orr.w	r3, r3, #1
 80021bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80021be:	e02d      	b.n	800221c <HAL_RCC_OscConfig+0x5e0>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d10c      	bne.n	80021e2 <HAL_RCC_OscConfig+0x5a6>
 80021c8:	4b77      	ldr	r3, [pc, #476]	@ (80023a8 <HAL_RCC_OscConfig+0x76c>)
 80021ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021cc:	4a76      	ldr	r2, [pc, #472]	@ (80023a8 <HAL_RCC_OscConfig+0x76c>)
 80021ce:	f023 0301 	bic.w	r3, r3, #1
 80021d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80021d4:	4b74      	ldr	r3, [pc, #464]	@ (80023a8 <HAL_RCC_OscConfig+0x76c>)
 80021d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021d8:	4a73      	ldr	r2, [pc, #460]	@ (80023a8 <HAL_RCC_OscConfig+0x76c>)
 80021da:	f023 0304 	bic.w	r3, r3, #4
 80021de:	6713      	str	r3, [r2, #112]	@ 0x70
 80021e0:	e01c      	b.n	800221c <HAL_RCC_OscConfig+0x5e0>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	2b05      	cmp	r3, #5
 80021e8:	d10c      	bne.n	8002204 <HAL_RCC_OscConfig+0x5c8>
 80021ea:	4b6f      	ldr	r3, [pc, #444]	@ (80023a8 <HAL_RCC_OscConfig+0x76c>)
 80021ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021ee:	4a6e      	ldr	r2, [pc, #440]	@ (80023a8 <HAL_RCC_OscConfig+0x76c>)
 80021f0:	f043 0304 	orr.w	r3, r3, #4
 80021f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80021f6:	4b6c      	ldr	r3, [pc, #432]	@ (80023a8 <HAL_RCC_OscConfig+0x76c>)
 80021f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021fa:	4a6b      	ldr	r2, [pc, #428]	@ (80023a8 <HAL_RCC_OscConfig+0x76c>)
 80021fc:	f043 0301 	orr.w	r3, r3, #1
 8002200:	6713      	str	r3, [r2, #112]	@ 0x70
 8002202:	e00b      	b.n	800221c <HAL_RCC_OscConfig+0x5e0>
 8002204:	4b68      	ldr	r3, [pc, #416]	@ (80023a8 <HAL_RCC_OscConfig+0x76c>)
 8002206:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002208:	4a67      	ldr	r2, [pc, #412]	@ (80023a8 <HAL_RCC_OscConfig+0x76c>)
 800220a:	f023 0301 	bic.w	r3, r3, #1
 800220e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002210:	4b65      	ldr	r3, [pc, #404]	@ (80023a8 <HAL_RCC_OscConfig+0x76c>)
 8002212:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002214:	4a64      	ldr	r2, [pc, #400]	@ (80023a8 <HAL_RCC_OscConfig+0x76c>)
 8002216:	f023 0304 	bic.w	r3, r3, #4
 800221a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d015      	beq.n	8002250 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002224:	f7ff f8ce 	bl	80013c4 <HAL_GetTick>
 8002228:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800222a:	e00a      	b.n	8002242 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800222c:	f7ff f8ca 	bl	80013c4 <HAL_GetTick>
 8002230:	4602      	mov	r2, r0
 8002232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	f241 3288 	movw	r2, #5000	@ 0x1388
 800223a:	4293      	cmp	r3, r2
 800223c:	d901      	bls.n	8002242 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800223e:	2303      	movs	r3, #3
 8002240:	e14e      	b.n	80024e0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002242:	4b59      	ldr	r3, [pc, #356]	@ (80023a8 <HAL_RCC_OscConfig+0x76c>)
 8002244:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002246:	f003 0302 	and.w	r3, r3, #2
 800224a:	2b00      	cmp	r3, #0
 800224c:	d0ee      	beq.n	800222c <HAL_RCC_OscConfig+0x5f0>
 800224e:	e014      	b.n	800227a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002250:	f7ff f8b8 	bl	80013c4 <HAL_GetTick>
 8002254:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002256:	e00a      	b.n	800226e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002258:	f7ff f8b4 	bl	80013c4 <HAL_GetTick>
 800225c:	4602      	mov	r2, r0
 800225e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002266:	4293      	cmp	r3, r2
 8002268:	d901      	bls.n	800226e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800226a:	2303      	movs	r3, #3
 800226c:	e138      	b.n	80024e0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800226e:	4b4e      	ldr	r3, [pc, #312]	@ (80023a8 <HAL_RCC_OscConfig+0x76c>)
 8002270:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002272:	f003 0302 	and.w	r3, r3, #2
 8002276:	2b00      	cmp	r3, #0
 8002278:	d1ee      	bne.n	8002258 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800227e:	2b00      	cmp	r3, #0
 8002280:	f000 812d 	beq.w	80024de <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002284:	4b48      	ldr	r3, [pc, #288]	@ (80023a8 <HAL_RCC_OscConfig+0x76c>)
 8002286:	691b      	ldr	r3, [r3, #16]
 8002288:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800228c:	2b18      	cmp	r3, #24
 800228e:	f000 80bd 	beq.w	800240c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002296:	2b02      	cmp	r3, #2
 8002298:	f040 809e 	bne.w	80023d8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800229c:	4b42      	ldr	r3, [pc, #264]	@ (80023a8 <HAL_RCC_OscConfig+0x76c>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a41      	ldr	r2, [pc, #260]	@ (80023a8 <HAL_RCC_OscConfig+0x76c>)
 80022a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80022a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022a8:	f7ff f88c 	bl	80013c4 <HAL_GetTick>
 80022ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80022ae:	e008      	b.n	80022c2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022b0:	f7ff f888 	bl	80013c4 <HAL_GetTick>
 80022b4:	4602      	mov	r2, r0
 80022b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	d901      	bls.n	80022c2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	e10e      	b.n	80024e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80022c2:	4b39      	ldr	r3, [pc, #228]	@ (80023a8 <HAL_RCC_OscConfig+0x76c>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d1f0      	bne.n	80022b0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022ce:	4b36      	ldr	r3, [pc, #216]	@ (80023a8 <HAL_RCC_OscConfig+0x76c>)
 80022d0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80022d2:	4b37      	ldr	r3, [pc, #220]	@ (80023b0 <HAL_RCC_OscConfig+0x774>)
 80022d4:	4013      	ands	r3, r2
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80022de:	0112      	lsls	r2, r2, #4
 80022e0:	430a      	orrs	r2, r1
 80022e2:	4931      	ldr	r1, [pc, #196]	@ (80023a8 <HAL_RCC_OscConfig+0x76c>)
 80022e4:	4313      	orrs	r3, r2
 80022e6:	628b      	str	r3, [r1, #40]	@ 0x28
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ec:	3b01      	subs	r3, #1
 80022ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022f6:	3b01      	subs	r3, #1
 80022f8:	025b      	lsls	r3, r3, #9
 80022fa:	b29b      	uxth	r3, r3
 80022fc:	431a      	orrs	r2, r3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002302:	3b01      	subs	r3, #1
 8002304:	041b      	lsls	r3, r3, #16
 8002306:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800230a:	431a      	orrs	r2, r3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002310:	3b01      	subs	r3, #1
 8002312:	061b      	lsls	r3, r3, #24
 8002314:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002318:	4923      	ldr	r1, [pc, #140]	@ (80023a8 <HAL_RCC_OscConfig+0x76c>)
 800231a:	4313      	orrs	r3, r2
 800231c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800231e:	4b22      	ldr	r3, [pc, #136]	@ (80023a8 <HAL_RCC_OscConfig+0x76c>)
 8002320:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002322:	4a21      	ldr	r2, [pc, #132]	@ (80023a8 <HAL_RCC_OscConfig+0x76c>)
 8002324:	f023 0301 	bic.w	r3, r3, #1
 8002328:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800232a:	4b1f      	ldr	r3, [pc, #124]	@ (80023a8 <HAL_RCC_OscConfig+0x76c>)
 800232c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800232e:	4b21      	ldr	r3, [pc, #132]	@ (80023b4 <HAL_RCC_OscConfig+0x778>)
 8002330:	4013      	ands	r3, r2
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002336:	00d2      	lsls	r2, r2, #3
 8002338:	491b      	ldr	r1, [pc, #108]	@ (80023a8 <HAL_RCC_OscConfig+0x76c>)
 800233a:	4313      	orrs	r3, r2
 800233c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800233e:	4b1a      	ldr	r3, [pc, #104]	@ (80023a8 <HAL_RCC_OscConfig+0x76c>)
 8002340:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002342:	f023 020c 	bic.w	r2, r3, #12
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800234a:	4917      	ldr	r1, [pc, #92]	@ (80023a8 <HAL_RCC_OscConfig+0x76c>)
 800234c:	4313      	orrs	r3, r2
 800234e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002350:	4b15      	ldr	r3, [pc, #84]	@ (80023a8 <HAL_RCC_OscConfig+0x76c>)
 8002352:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002354:	f023 0202 	bic.w	r2, r3, #2
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800235c:	4912      	ldr	r1, [pc, #72]	@ (80023a8 <HAL_RCC_OscConfig+0x76c>)
 800235e:	4313      	orrs	r3, r2
 8002360:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002362:	4b11      	ldr	r3, [pc, #68]	@ (80023a8 <HAL_RCC_OscConfig+0x76c>)
 8002364:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002366:	4a10      	ldr	r2, [pc, #64]	@ (80023a8 <HAL_RCC_OscConfig+0x76c>)
 8002368:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800236c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800236e:	4b0e      	ldr	r3, [pc, #56]	@ (80023a8 <HAL_RCC_OscConfig+0x76c>)
 8002370:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002372:	4a0d      	ldr	r2, [pc, #52]	@ (80023a8 <HAL_RCC_OscConfig+0x76c>)
 8002374:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002378:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800237a:	4b0b      	ldr	r3, [pc, #44]	@ (80023a8 <HAL_RCC_OscConfig+0x76c>)
 800237c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800237e:	4a0a      	ldr	r2, [pc, #40]	@ (80023a8 <HAL_RCC_OscConfig+0x76c>)
 8002380:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002384:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002386:	4b08      	ldr	r3, [pc, #32]	@ (80023a8 <HAL_RCC_OscConfig+0x76c>)
 8002388:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800238a:	4a07      	ldr	r2, [pc, #28]	@ (80023a8 <HAL_RCC_OscConfig+0x76c>)
 800238c:	f043 0301 	orr.w	r3, r3, #1
 8002390:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002392:	4b05      	ldr	r3, [pc, #20]	@ (80023a8 <HAL_RCC_OscConfig+0x76c>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a04      	ldr	r2, [pc, #16]	@ (80023a8 <HAL_RCC_OscConfig+0x76c>)
 8002398:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800239c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800239e:	f7ff f811 	bl	80013c4 <HAL_GetTick>
 80023a2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80023a4:	e011      	b.n	80023ca <HAL_RCC_OscConfig+0x78e>
 80023a6:	bf00      	nop
 80023a8:	58024400 	.word	0x58024400
 80023ac:	58024800 	.word	0x58024800
 80023b0:	fffffc0c 	.word	0xfffffc0c
 80023b4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023b8:	f7ff f804 	bl	80013c4 <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	2b02      	cmp	r3, #2
 80023c4:	d901      	bls.n	80023ca <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	e08a      	b.n	80024e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80023ca:	4b47      	ldr	r3, [pc, #284]	@ (80024e8 <HAL_RCC_OscConfig+0x8ac>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d0f0      	beq.n	80023b8 <HAL_RCC_OscConfig+0x77c>
 80023d6:	e082      	b.n	80024de <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023d8:	4b43      	ldr	r3, [pc, #268]	@ (80024e8 <HAL_RCC_OscConfig+0x8ac>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a42      	ldr	r2, [pc, #264]	@ (80024e8 <HAL_RCC_OscConfig+0x8ac>)
 80023de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80023e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023e4:	f7fe ffee 	bl	80013c4 <HAL_GetTick>
 80023e8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80023ea:	e008      	b.n	80023fe <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023ec:	f7fe ffea 	bl	80013c4 <HAL_GetTick>
 80023f0:	4602      	mov	r2, r0
 80023f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	2b02      	cmp	r3, #2
 80023f8:	d901      	bls.n	80023fe <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80023fa:	2303      	movs	r3, #3
 80023fc:	e070      	b.n	80024e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80023fe:	4b3a      	ldr	r3, [pc, #232]	@ (80024e8 <HAL_RCC_OscConfig+0x8ac>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d1f0      	bne.n	80023ec <HAL_RCC_OscConfig+0x7b0>
 800240a:	e068      	b.n	80024de <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800240c:	4b36      	ldr	r3, [pc, #216]	@ (80024e8 <HAL_RCC_OscConfig+0x8ac>)
 800240e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002410:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002412:	4b35      	ldr	r3, [pc, #212]	@ (80024e8 <HAL_RCC_OscConfig+0x8ac>)
 8002414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002416:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800241c:	2b01      	cmp	r3, #1
 800241e:	d031      	beq.n	8002484 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	f003 0203 	and.w	r2, r3, #3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800242a:	429a      	cmp	r2, r3
 800242c:	d12a      	bne.n	8002484 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	091b      	lsrs	r3, r3, #4
 8002432:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800243a:	429a      	cmp	r2, r3
 800243c:	d122      	bne.n	8002484 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002448:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800244a:	429a      	cmp	r2, r3
 800244c:	d11a      	bne.n	8002484 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	0a5b      	lsrs	r3, r3, #9
 8002452:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800245a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800245c:	429a      	cmp	r2, r3
 800245e:	d111      	bne.n	8002484 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	0c1b      	lsrs	r3, r3, #16
 8002464:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800246c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800246e:	429a      	cmp	r2, r3
 8002470:	d108      	bne.n	8002484 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	0e1b      	lsrs	r3, r3, #24
 8002476:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800247e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002480:	429a      	cmp	r2, r3
 8002482:	d001      	beq.n	8002488 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	e02b      	b.n	80024e0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002488:	4b17      	ldr	r3, [pc, #92]	@ (80024e8 <HAL_RCC_OscConfig+0x8ac>)
 800248a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800248c:	08db      	lsrs	r3, r3, #3
 800248e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002492:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002498:	693a      	ldr	r2, [r7, #16]
 800249a:	429a      	cmp	r2, r3
 800249c:	d01f      	beq.n	80024de <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800249e:	4b12      	ldr	r3, [pc, #72]	@ (80024e8 <HAL_RCC_OscConfig+0x8ac>)
 80024a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024a2:	4a11      	ldr	r2, [pc, #68]	@ (80024e8 <HAL_RCC_OscConfig+0x8ac>)
 80024a4:	f023 0301 	bic.w	r3, r3, #1
 80024a8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80024aa:	f7fe ff8b 	bl	80013c4 <HAL_GetTick>
 80024ae:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80024b0:	bf00      	nop
 80024b2:	f7fe ff87 	bl	80013c4 <HAL_GetTick>
 80024b6:	4602      	mov	r2, r0
 80024b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d0f9      	beq.n	80024b2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80024be:	4b0a      	ldr	r3, [pc, #40]	@ (80024e8 <HAL_RCC_OscConfig+0x8ac>)
 80024c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80024c2:	4b0a      	ldr	r3, [pc, #40]	@ (80024ec <HAL_RCC_OscConfig+0x8b0>)
 80024c4:	4013      	ands	r3, r2
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80024ca:	00d2      	lsls	r2, r2, #3
 80024cc:	4906      	ldr	r1, [pc, #24]	@ (80024e8 <HAL_RCC_OscConfig+0x8ac>)
 80024ce:	4313      	orrs	r3, r2
 80024d0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80024d2:	4b05      	ldr	r3, [pc, #20]	@ (80024e8 <HAL_RCC_OscConfig+0x8ac>)
 80024d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024d6:	4a04      	ldr	r2, [pc, #16]	@ (80024e8 <HAL_RCC_OscConfig+0x8ac>)
 80024d8:	f043 0301 	orr.w	r3, r3, #1
 80024dc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80024de:	2300      	movs	r3, #0
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3730      	adds	r7, #48	@ 0x30
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	58024400 	.word	0x58024400
 80024ec:	ffff0007 	.word	0xffff0007

080024f0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b086      	sub	sp, #24
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d101      	bne.n	8002504 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	e19c      	b.n	800283e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002504:	4b8a      	ldr	r3, [pc, #552]	@ (8002730 <HAL_RCC_ClockConfig+0x240>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 030f 	and.w	r3, r3, #15
 800250c:	683a      	ldr	r2, [r7, #0]
 800250e:	429a      	cmp	r2, r3
 8002510:	d910      	bls.n	8002534 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002512:	4b87      	ldr	r3, [pc, #540]	@ (8002730 <HAL_RCC_ClockConfig+0x240>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f023 020f 	bic.w	r2, r3, #15
 800251a:	4985      	ldr	r1, [pc, #532]	@ (8002730 <HAL_RCC_ClockConfig+0x240>)
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	4313      	orrs	r3, r2
 8002520:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002522:	4b83      	ldr	r3, [pc, #524]	@ (8002730 <HAL_RCC_ClockConfig+0x240>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 030f 	and.w	r3, r3, #15
 800252a:	683a      	ldr	r2, [r7, #0]
 800252c:	429a      	cmp	r2, r3
 800252e:	d001      	beq.n	8002534 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e184      	b.n	800283e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0304 	and.w	r3, r3, #4
 800253c:	2b00      	cmp	r3, #0
 800253e:	d010      	beq.n	8002562 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	691a      	ldr	r2, [r3, #16]
 8002544:	4b7b      	ldr	r3, [pc, #492]	@ (8002734 <HAL_RCC_ClockConfig+0x244>)
 8002546:	699b      	ldr	r3, [r3, #24]
 8002548:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800254c:	429a      	cmp	r2, r3
 800254e:	d908      	bls.n	8002562 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002550:	4b78      	ldr	r3, [pc, #480]	@ (8002734 <HAL_RCC_ClockConfig+0x244>)
 8002552:	699b      	ldr	r3, [r3, #24]
 8002554:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	691b      	ldr	r3, [r3, #16]
 800255c:	4975      	ldr	r1, [pc, #468]	@ (8002734 <HAL_RCC_ClockConfig+0x244>)
 800255e:	4313      	orrs	r3, r2
 8002560:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0308 	and.w	r3, r3, #8
 800256a:	2b00      	cmp	r3, #0
 800256c:	d010      	beq.n	8002590 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	695a      	ldr	r2, [r3, #20]
 8002572:	4b70      	ldr	r3, [pc, #448]	@ (8002734 <HAL_RCC_ClockConfig+0x244>)
 8002574:	69db      	ldr	r3, [r3, #28]
 8002576:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800257a:	429a      	cmp	r2, r3
 800257c:	d908      	bls.n	8002590 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800257e:	4b6d      	ldr	r3, [pc, #436]	@ (8002734 <HAL_RCC_ClockConfig+0x244>)
 8002580:	69db      	ldr	r3, [r3, #28]
 8002582:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	695b      	ldr	r3, [r3, #20]
 800258a:	496a      	ldr	r1, [pc, #424]	@ (8002734 <HAL_RCC_ClockConfig+0x244>)
 800258c:	4313      	orrs	r3, r2
 800258e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0310 	and.w	r3, r3, #16
 8002598:	2b00      	cmp	r3, #0
 800259a:	d010      	beq.n	80025be <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	699a      	ldr	r2, [r3, #24]
 80025a0:	4b64      	ldr	r3, [pc, #400]	@ (8002734 <HAL_RCC_ClockConfig+0x244>)
 80025a2:	69db      	ldr	r3, [r3, #28]
 80025a4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d908      	bls.n	80025be <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80025ac:	4b61      	ldr	r3, [pc, #388]	@ (8002734 <HAL_RCC_ClockConfig+0x244>)
 80025ae:	69db      	ldr	r3, [r3, #28]
 80025b0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	699b      	ldr	r3, [r3, #24]
 80025b8:	495e      	ldr	r1, [pc, #376]	@ (8002734 <HAL_RCC_ClockConfig+0x244>)
 80025ba:	4313      	orrs	r3, r2
 80025bc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0320 	and.w	r3, r3, #32
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d010      	beq.n	80025ec <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	69da      	ldr	r2, [r3, #28]
 80025ce:	4b59      	ldr	r3, [pc, #356]	@ (8002734 <HAL_RCC_ClockConfig+0x244>)
 80025d0:	6a1b      	ldr	r3, [r3, #32]
 80025d2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d908      	bls.n	80025ec <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80025da:	4b56      	ldr	r3, [pc, #344]	@ (8002734 <HAL_RCC_ClockConfig+0x244>)
 80025dc:	6a1b      	ldr	r3, [r3, #32]
 80025de:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	69db      	ldr	r3, [r3, #28]
 80025e6:	4953      	ldr	r1, [pc, #332]	@ (8002734 <HAL_RCC_ClockConfig+0x244>)
 80025e8:	4313      	orrs	r3, r2
 80025ea:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 0302 	and.w	r3, r3, #2
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d010      	beq.n	800261a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	68da      	ldr	r2, [r3, #12]
 80025fc:	4b4d      	ldr	r3, [pc, #308]	@ (8002734 <HAL_RCC_ClockConfig+0x244>)
 80025fe:	699b      	ldr	r3, [r3, #24]
 8002600:	f003 030f 	and.w	r3, r3, #15
 8002604:	429a      	cmp	r2, r3
 8002606:	d908      	bls.n	800261a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002608:	4b4a      	ldr	r3, [pc, #296]	@ (8002734 <HAL_RCC_ClockConfig+0x244>)
 800260a:	699b      	ldr	r3, [r3, #24]
 800260c:	f023 020f 	bic.w	r2, r3, #15
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	4947      	ldr	r1, [pc, #284]	@ (8002734 <HAL_RCC_ClockConfig+0x244>)
 8002616:	4313      	orrs	r3, r2
 8002618:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0301 	and.w	r3, r3, #1
 8002622:	2b00      	cmp	r3, #0
 8002624:	d055      	beq.n	80026d2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002626:	4b43      	ldr	r3, [pc, #268]	@ (8002734 <HAL_RCC_ClockConfig+0x244>)
 8002628:	699b      	ldr	r3, [r3, #24]
 800262a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	4940      	ldr	r1, [pc, #256]	@ (8002734 <HAL_RCC_ClockConfig+0x244>)
 8002634:	4313      	orrs	r3, r2
 8002636:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	2b02      	cmp	r3, #2
 800263e:	d107      	bne.n	8002650 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002640:	4b3c      	ldr	r3, [pc, #240]	@ (8002734 <HAL_RCC_ClockConfig+0x244>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002648:	2b00      	cmp	r3, #0
 800264a:	d121      	bne.n	8002690 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	e0f6      	b.n	800283e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	2b03      	cmp	r3, #3
 8002656:	d107      	bne.n	8002668 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002658:	4b36      	ldr	r3, [pc, #216]	@ (8002734 <HAL_RCC_ClockConfig+0x244>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002660:	2b00      	cmp	r3, #0
 8002662:	d115      	bne.n	8002690 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e0ea      	b.n	800283e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	2b01      	cmp	r3, #1
 800266e:	d107      	bne.n	8002680 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002670:	4b30      	ldr	r3, [pc, #192]	@ (8002734 <HAL_RCC_ClockConfig+0x244>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002678:	2b00      	cmp	r3, #0
 800267a:	d109      	bne.n	8002690 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e0de      	b.n	800283e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002680:	4b2c      	ldr	r3, [pc, #176]	@ (8002734 <HAL_RCC_ClockConfig+0x244>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0304 	and.w	r3, r3, #4
 8002688:	2b00      	cmp	r3, #0
 800268a:	d101      	bne.n	8002690 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e0d6      	b.n	800283e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002690:	4b28      	ldr	r3, [pc, #160]	@ (8002734 <HAL_RCC_ClockConfig+0x244>)
 8002692:	691b      	ldr	r3, [r3, #16]
 8002694:	f023 0207 	bic.w	r2, r3, #7
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	4925      	ldr	r1, [pc, #148]	@ (8002734 <HAL_RCC_ClockConfig+0x244>)
 800269e:	4313      	orrs	r3, r2
 80026a0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026a2:	f7fe fe8f 	bl	80013c4 <HAL_GetTick>
 80026a6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026a8:	e00a      	b.n	80026c0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026aa:	f7fe fe8b 	bl	80013c4 <HAL_GetTick>
 80026ae:	4602      	mov	r2, r0
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	1ad3      	subs	r3, r2, r3
 80026b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d901      	bls.n	80026c0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80026bc:	2303      	movs	r3, #3
 80026be:	e0be      	b.n	800283e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026c0:	4b1c      	ldr	r3, [pc, #112]	@ (8002734 <HAL_RCC_ClockConfig+0x244>)
 80026c2:	691b      	ldr	r3, [r3, #16]
 80026c4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	00db      	lsls	r3, r3, #3
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d1eb      	bne.n	80026aa <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0302 	and.w	r3, r3, #2
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d010      	beq.n	8002700 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	68da      	ldr	r2, [r3, #12]
 80026e2:	4b14      	ldr	r3, [pc, #80]	@ (8002734 <HAL_RCC_ClockConfig+0x244>)
 80026e4:	699b      	ldr	r3, [r3, #24]
 80026e6:	f003 030f 	and.w	r3, r3, #15
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d208      	bcs.n	8002700 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026ee:	4b11      	ldr	r3, [pc, #68]	@ (8002734 <HAL_RCC_ClockConfig+0x244>)
 80026f0:	699b      	ldr	r3, [r3, #24]
 80026f2:	f023 020f 	bic.w	r2, r3, #15
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	68db      	ldr	r3, [r3, #12]
 80026fa:	490e      	ldr	r1, [pc, #56]	@ (8002734 <HAL_RCC_ClockConfig+0x244>)
 80026fc:	4313      	orrs	r3, r2
 80026fe:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002700:	4b0b      	ldr	r3, [pc, #44]	@ (8002730 <HAL_RCC_ClockConfig+0x240>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 030f 	and.w	r3, r3, #15
 8002708:	683a      	ldr	r2, [r7, #0]
 800270a:	429a      	cmp	r2, r3
 800270c:	d214      	bcs.n	8002738 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800270e:	4b08      	ldr	r3, [pc, #32]	@ (8002730 <HAL_RCC_ClockConfig+0x240>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f023 020f 	bic.w	r2, r3, #15
 8002716:	4906      	ldr	r1, [pc, #24]	@ (8002730 <HAL_RCC_ClockConfig+0x240>)
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	4313      	orrs	r3, r2
 800271c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800271e:	4b04      	ldr	r3, [pc, #16]	@ (8002730 <HAL_RCC_ClockConfig+0x240>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 030f 	and.w	r3, r3, #15
 8002726:	683a      	ldr	r2, [r7, #0]
 8002728:	429a      	cmp	r2, r3
 800272a:	d005      	beq.n	8002738 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	e086      	b.n	800283e <HAL_RCC_ClockConfig+0x34e>
 8002730:	52002000 	.word	0x52002000
 8002734:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0304 	and.w	r3, r3, #4
 8002740:	2b00      	cmp	r3, #0
 8002742:	d010      	beq.n	8002766 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	691a      	ldr	r2, [r3, #16]
 8002748:	4b3f      	ldr	r3, [pc, #252]	@ (8002848 <HAL_RCC_ClockConfig+0x358>)
 800274a:	699b      	ldr	r3, [r3, #24]
 800274c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002750:	429a      	cmp	r2, r3
 8002752:	d208      	bcs.n	8002766 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002754:	4b3c      	ldr	r3, [pc, #240]	@ (8002848 <HAL_RCC_ClockConfig+0x358>)
 8002756:	699b      	ldr	r3, [r3, #24]
 8002758:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	691b      	ldr	r3, [r3, #16]
 8002760:	4939      	ldr	r1, [pc, #228]	@ (8002848 <HAL_RCC_ClockConfig+0x358>)
 8002762:	4313      	orrs	r3, r2
 8002764:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 0308 	and.w	r3, r3, #8
 800276e:	2b00      	cmp	r3, #0
 8002770:	d010      	beq.n	8002794 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	695a      	ldr	r2, [r3, #20]
 8002776:	4b34      	ldr	r3, [pc, #208]	@ (8002848 <HAL_RCC_ClockConfig+0x358>)
 8002778:	69db      	ldr	r3, [r3, #28]
 800277a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800277e:	429a      	cmp	r2, r3
 8002780:	d208      	bcs.n	8002794 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002782:	4b31      	ldr	r3, [pc, #196]	@ (8002848 <HAL_RCC_ClockConfig+0x358>)
 8002784:	69db      	ldr	r3, [r3, #28]
 8002786:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	695b      	ldr	r3, [r3, #20]
 800278e:	492e      	ldr	r1, [pc, #184]	@ (8002848 <HAL_RCC_ClockConfig+0x358>)
 8002790:	4313      	orrs	r3, r2
 8002792:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0310 	and.w	r3, r3, #16
 800279c:	2b00      	cmp	r3, #0
 800279e:	d010      	beq.n	80027c2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	699a      	ldr	r2, [r3, #24]
 80027a4:	4b28      	ldr	r3, [pc, #160]	@ (8002848 <HAL_RCC_ClockConfig+0x358>)
 80027a6:	69db      	ldr	r3, [r3, #28]
 80027a8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d208      	bcs.n	80027c2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80027b0:	4b25      	ldr	r3, [pc, #148]	@ (8002848 <HAL_RCC_ClockConfig+0x358>)
 80027b2:	69db      	ldr	r3, [r3, #28]
 80027b4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	699b      	ldr	r3, [r3, #24]
 80027bc:	4922      	ldr	r1, [pc, #136]	@ (8002848 <HAL_RCC_ClockConfig+0x358>)
 80027be:	4313      	orrs	r3, r2
 80027c0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0320 	and.w	r3, r3, #32
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d010      	beq.n	80027f0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	69da      	ldr	r2, [r3, #28]
 80027d2:	4b1d      	ldr	r3, [pc, #116]	@ (8002848 <HAL_RCC_ClockConfig+0x358>)
 80027d4:	6a1b      	ldr	r3, [r3, #32]
 80027d6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80027da:	429a      	cmp	r2, r3
 80027dc:	d208      	bcs.n	80027f0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80027de:	4b1a      	ldr	r3, [pc, #104]	@ (8002848 <HAL_RCC_ClockConfig+0x358>)
 80027e0:	6a1b      	ldr	r3, [r3, #32]
 80027e2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	69db      	ldr	r3, [r3, #28]
 80027ea:	4917      	ldr	r1, [pc, #92]	@ (8002848 <HAL_RCC_ClockConfig+0x358>)
 80027ec:	4313      	orrs	r3, r2
 80027ee:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80027f0:	f000 f834 	bl	800285c <HAL_RCC_GetSysClockFreq>
 80027f4:	4602      	mov	r2, r0
 80027f6:	4b14      	ldr	r3, [pc, #80]	@ (8002848 <HAL_RCC_ClockConfig+0x358>)
 80027f8:	699b      	ldr	r3, [r3, #24]
 80027fa:	0a1b      	lsrs	r3, r3, #8
 80027fc:	f003 030f 	and.w	r3, r3, #15
 8002800:	4912      	ldr	r1, [pc, #72]	@ (800284c <HAL_RCC_ClockConfig+0x35c>)
 8002802:	5ccb      	ldrb	r3, [r1, r3]
 8002804:	f003 031f 	and.w	r3, r3, #31
 8002808:	fa22 f303 	lsr.w	r3, r2, r3
 800280c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800280e:	4b0e      	ldr	r3, [pc, #56]	@ (8002848 <HAL_RCC_ClockConfig+0x358>)
 8002810:	699b      	ldr	r3, [r3, #24]
 8002812:	f003 030f 	and.w	r3, r3, #15
 8002816:	4a0d      	ldr	r2, [pc, #52]	@ (800284c <HAL_RCC_ClockConfig+0x35c>)
 8002818:	5cd3      	ldrb	r3, [r2, r3]
 800281a:	f003 031f 	and.w	r3, r3, #31
 800281e:	693a      	ldr	r2, [r7, #16]
 8002820:	fa22 f303 	lsr.w	r3, r2, r3
 8002824:	4a0a      	ldr	r2, [pc, #40]	@ (8002850 <HAL_RCC_ClockConfig+0x360>)
 8002826:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002828:	4a0a      	ldr	r2, [pc, #40]	@ (8002854 <HAL_RCC_ClockConfig+0x364>)
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800282e:	4b0a      	ldr	r3, [pc, #40]	@ (8002858 <HAL_RCC_ClockConfig+0x368>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4618      	mov	r0, r3
 8002834:	f7fe fd7c 	bl	8001330 <HAL_InitTick>
 8002838:	4603      	mov	r3, r0
 800283a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800283c:	7bfb      	ldrb	r3, [r7, #15]
}
 800283e:	4618      	mov	r0, r3
 8002840:	3718      	adds	r7, #24
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	58024400 	.word	0x58024400
 800284c:	080069b0 	.word	0x080069b0
 8002850:	24000004 	.word	0x24000004
 8002854:	24000000 	.word	0x24000000
 8002858:	24000024 	.word	0x24000024

0800285c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800285c:	b480      	push	{r7}
 800285e:	b089      	sub	sp, #36	@ 0x24
 8002860:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002862:	4bb3      	ldr	r3, [pc, #716]	@ (8002b30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002864:	691b      	ldr	r3, [r3, #16]
 8002866:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800286a:	2b18      	cmp	r3, #24
 800286c:	f200 8155 	bhi.w	8002b1a <HAL_RCC_GetSysClockFreq+0x2be>
 8002870:	a201      	add	r2, pc, #4	@ (adr r2, 8002878 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002876:	bf00      	nop
 8002878:	080028dd 	.word	0x080028dd
 800287c:	08002b1b 	.word	0x08002b1b
 8002880:	08002b1b 	.word	0x08002b1b
 8002884:	08002b1b 	.word	0x08002b1b
 8002888:	08002b1b 	.word	0x08002b1b
 800288c:	08002b1b 	.word	0x08002b1b
 8002890:	08002b1b 	.word	0x08002b1b
 8002894:	08002b1b 	.word	0x08002b1b
 8002898:	08002903 	.word	0x08002903
 800289c:	08002b1b 	.word	0x08002b1b
 80028a0:	08002b1b 	.word	0x08002b1b
 80028a4:	08002b1b 	.word	0x08002b1b
 80028a8:	08002b1b 	.word	0x08002b1b
 80028ac:	08002b1b 	.word	0x08002b1b
 80028b0:	08002b1b 	.word	0x08002b1b
 80028b4:	08002b1b 	.word	0x08002b1b
 80028b8:	08002909 	.word	0x08002909
 80028bc:	08002b1b 	.word	0x08002b1b
 80028c0:	08002b1b 	.word	0x08002b1b
 80028c4:	08002b1b 	.word	0x08002b1b
 80028c8:	08002b1b 	.word	0x08002b1b
 80028cc:	08002b1b 	.word	0x08002b1b
 80028d0:	08002b1b 	.word	0x08002b1b
 80028d4:	08002b1b 	.word	0x08002b1b
 80028d8:	0800290f 	.word	0x0800290f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80028dc:	4b94      	ldr	r3, [pc, #592]	@ (8002b30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 0320 	and.w	r3, r3, #32
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d009      	beq.n	80028fc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80028e8:	4b91      	ldr	r3, [pc, #580]	@ (8002b30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	08db      	lsrs	r3, r3, #3
 80028ee:	f003 0303 	and.w	r3, r3, #3
 80028f2:	4a90      	ldr	r2, [pc, #576]	@ (8002b34 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80028f4:	fa22 f303 	lsr.w	r3, r2, r3
 80028f8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80028fa:	e111      	b.n	8002b20 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80028fc:	4b8d      	ldr	r3, [pc, #564]	@ (8002b34 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80028fe:	61bb      	str	r3, [r7, #24]
      break;
 8002900:	e10e      	b.n	8002b20 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002902:	4b8d      	ldr	r3, [pc, #564]	@ (8002b38 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002904:	61bb      	str	r3, [r7, #24]
      break;
 8002906:	e10b      	b.n	8002b20 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002908:	4b8c      	ldr	r3, [pc, #560]	@ (8002b3c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800290a:	61bb      	str	r3, [r7, #24]
      break;
 800290c:	e108      	b.n	8002b20 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800290e:	4b88      	ldr	r3, [pc, #544]	@ (8002b30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002910:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002912:	f003 0303 	and.w	r3, r3, #3
 8002916:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002918:	4b85      	ldr	r3, [pc, #532]	@ (8002b30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800291a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800291c:	091b      	lsrs	r3, r3, #4
 800291e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002922:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002924:	4b82      	ldr	r3, [pc, #520]	@ (8002b30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002926:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002928:	f003 0301 	and.w	r3, r3, #1
 800292c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800292e:	4b80      	ldr	r3, [pc, #512]	@ (8002b30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002930:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002932:	08db      	lsrs	r3, r3, #3
 8002934:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002938:	68fa      	ldr	r2, [r7, #12]
 800293a:	fb02 f303 	mul.w	r3, r2, r3
 800293e:	ee07 3a90 	vmov	s15, r3
 8002942:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002946:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	2b00      	cmp	r3, #0
 800294e:	f000 80e1 	beq.w	8002b14 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	2b02      	cmp	r3, #2
 8002956:	f000 8083 	beq.w	8002a60 <HAL_RCC_GetSysClockFreq+0x204>
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	2b02      	cmp	r3, #2
 800295e:	f200 80a1 	bhi.w	8002aa4 <HAL_RCC_GetSysClockFreq+0x248>
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d003      	beq.n	8002970 <HAL_RCC_GetSysClockFreq+0x114>
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	2b01      	cmp	r3, #1
 800296c:	d056      	beq.n	8002a1c <HAL_RCC_GetSysClockFreq+0x1c0>
 800296e:	e099      	b.n	8002aa4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002970:	4b6f      	ldr	r3, [pc, #444]	@ (8002b30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 0320 	and.w	r3, r3, #32
 8002978:	2b00      	cmp	r3, #0
 800297a:	d02d      	beq.n	80029d8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800297c:	4b6c      	ldr	r3, [pc, #432]	@ (8002b30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	08db      	lsrs	r3, r3, #3
 8002982:	f003 0303 	and.w	r3, r3, #3
 8002986:	4a6b      	ldr	r2, [pc, #428]	@ (8002b34 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002988:	fa22 f303 	lsr.w	r3, r2, r3
 800298c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	ee07 3a90 	vmov	s15, r3
 8002994:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	ee07 3a90 	vmov	s15, r3
 800299e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80029a6:	4b62      	ldr	r3, [pc, #392]	@ (8002b30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029ae:	ee07 3a90 	vmov	s15, r3
 80029b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80029b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80029ba:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002b40 <HAL_RCC_GetSysClockFreq+0x2e4>
 80029be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80029c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80029c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80029ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80029ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029d2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80029d6:	e087      	b.n	8002ae8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	ee07 3a90 	vmov	s15, r3
 80029de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029e2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002b44 <HAL_RCC_GetSysClockFreq+0x2e8>
 80029e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80029ea:	4b51      	ldr	r3, [pc, #324]	@ (8002b30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029f2:	ee07 3a90 	vmov	s15, r3
 80029f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80029fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80029fe:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002b40 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002a02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002a0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a16:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002a1a:	e065      	b.n	8002ae8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	ee07 3a90 	vmov	s15, r3
 8002a22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a26:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002b48 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002a2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a2e:	4b40      	ldr	r3, [pc, #256]	@ (8002b30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a36:	ee07 3a90 	vmov	s15, r3
 8002a3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a3e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002a42:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002b40 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002a46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002a52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a5a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002a5e:	e043      	b.n	8002ae8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	ee07 3a90 	vmov	s15, r3
 8002a66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a6a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002b4c <HAL_RCC_GetSysClockFreq+0x2f0>
 8002a6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a72:	4b2f      	ldr	r3, [pc, #188]	@ (8002b30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a7a:	ee07 3a90 	vmov	s15, r3
 8002a7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a82:	ed97 6a02 	vldr	s12, [r7, #8]
 8002a86:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002b40 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002a8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002a96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a9e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002aa2:	e021      	b.n	8002ae8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	ee07 3a90 	vmov	s15, r3
 8002aaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002aae:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002b48 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002ab2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ab6:	4b1e      	ldr	r3, [pc, #120]	@ (8002b30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002abe:	ee07 3a90 	vmov	s15, r3
 8002ac2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ac6:	ed97 6a02 	vldr	s12, [r7, #8]
 8002aca:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002b40 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002ace:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002ad2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ad6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002ada:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ade:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ae2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002ae6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002ae8:	4b11      	ldr	r3, [pc, #68]	@ (8002b30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002aea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aec:	0a5b      	lsrs	r3, r3, #9
 8002aee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002af2:	3301      	adds	r3, #1
 8002af4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	ee07 3a90 	vmov	s15, r3
 8002afc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002b00:	edd7 6a07 	vldr	s13, [r7, #28]
 8002b04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b0c:	ee17 3a90 	vmov	r3, s15
 8002b10:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002b12:	e005      	b.n	8002b20 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002b14:	2300      	movs	r3, #0
 8002b16:	61bb      	str	r3, [r7, #24]
      break;
 8002b18:	e002      	b.n	8002b20 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002b1a:	4b07      	ldr	r3, [pc, #28]	@ (8002b38 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002b1c:	61bb      	str	r3, [r7, #24]
      break;
 8002b1e:	bf00      	nop
  }

  return sysclockfreq;
 8002b20:	69bb      	ldr	r3, [r7, #24]
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3724      	adds	r7, #36	@ 0x24
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr
 8002b2e:	bf00      	nop
 8002b30:	58024400 	.word	0x58024400
 8002b34:	03d09000 	.word	0x03d09000
 8002b38:	003d0900 	.word	0x003d0900
 8002b3c:	007a1200 	.word	0x007a1200
 8002b40:	46000000 	.word	0x46000000
 8002b44:	4c742400 	.word	0x4c742400
 8002b48:	4a742400 	.word	0x4a742400
 8002b4c:	4af42400 	.word	0x4af42400

08002b50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b082      	sub	sp, #8
 8002b54:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002b56:	f7ff fe81 	bl	800285c <HAL_RCC_GetSysClockFreq>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	4b10      	ldr	r3, [pc, #64]	@ (8002ba0 <HAL_RCC_GetHCLKFreq+0x50>)
 8002b5e:	699b      	ldr	r3, [r3, #24]
 8002b60:	0a1b      	lsrs	r3, r3, #8
 8002b62:	f003 030f 	and.w	r3, r3, #15
 8002b66:	490f      	ldr	r1, [pc, #60]	@ (8002ba4 <HAL_RCC_GetHCLKFreq+0x54>)
 8002b68:	5ccb      	ldrb	r3, [r1, r3]
 8002b6a:	f003 031f 	and.w	r3, r3, #31
 8002b6e:	fa22 f303 	lsr.w	r3, r2, r3
 8002b72:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002b74:	4b0a      	ldr	r3, [pc, #40]	@ (8002ba0 <HAL_RCC_GetHCLKFreq+0x50>)
 8002b76:	699b      	ldr	r3, [r3, #24]
 8002b78:	f003 030f 	and.w	r3, r3, #15
 8002b7c:	4a09      	ldr	r2, [pc, #36]	@ (8002ba4 <HAL_RCC_GetHCLKFreq+0x54>)
 8002b7e:	5cd3      	ldrb	r3, [r2, r3]
 8002b80:	f003 031f 	and.w	r3, r3, #31
 8002b84:	687a      	ldr	r2, [r7, #4]
 8002b86:	fa22 f303 	lsr.w	r3, r2, r3
 8002b8a:	4a07      	ldr	r2, [pc, #28]	@ (8002ba8 <HAL_RCC_GetHCLKFreq+0x58>)
 8002b8c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002b8e:	4a07      	ldr	r2, [pc, #28]	@ (8002bac <HAL_RCC_GetHCLKFreq+0x5c>)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002b94:	4b04      	ldr	r3, [pc, #16]	@ (8002ba8 <HAL_RCC_GetHCLKFreq+0x58>)
 8002b96:	681b      	ldr	r3, [r3, #0]
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	3708      	adds	r7, #8
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	58024400 	.word	0x58024400
 8002ba4:	080069b0 	.word	0x080069b0
 8002ba8:	24000004 	.word	0x24000004
 8002bac:	24000000 	.word	0x24000000

08002bb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002bb4:	f7ff ffcc 	bl	8002b50 <HAL_RCC_GetHCLKFreq>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	4b06      	ldr	r3, [pc, #24]	@ (8002bd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bbc:	69db      	ldr	r3, [r3, #28]
 8002bbe:	091b      	lsrs	r3, r3, #4
 8002bc0:	f003 0307 	and.w	r3, r3, #7
 8002bc4:	4904      	ldr	r1, [pc, #16]	@ (8002bd8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002bc6:	5ccb      	ldrb	r3, [r1, r3]
 8002bc8:	f003 031f 	and.w	r3, r3, #31
 8002bcc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	58024400 	.word	0x58024400
 8002bd8:	080069b0 	.word	0x080069b0

08002bdc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002be0:	f7ff ffb6 	bl	8002b50 <HAL_RCC_GetHCLKFreq>
 8002be4:	4602      	mov	r2, r0
 8002be6:	4b06      	ldr	r3, [pc, #24]	@ (8002c00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002be8:	69db      	ldr	r3, [r3, #28]
 8002bea:	0a1b      	lsrs	r3, r3, #8
 8002bec:	f003 0307 	and.w	r3, r3, #7
 8002bf0:	4904      	ldr	r1, [pc, #16]	@ (8002c04 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002bf2:	5ccb      	ldrb	r3, [r1, r3]
 8002bf4:	f003 031f 	and.w	r3, r3, #31
 8002bf8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	58024400 	.word	0x58024400
 8002c04:	080069b0 	.word	0x080069b0

08002c08 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c0c:	b0ca      	sub	sp, #296	@ 0x128
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002c14:	2300      	movs	r3, #0
 8002c16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002c20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c28:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8002c2c:	2500      	movs	r5, #0
 8002c2e:	ea54 0305 	orrs.w	r3, r4, r5
 8002c32:	d049      	beq.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002c34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c38:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002c3a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002c3e:	d02f      	beq.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002c40:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002c44:	d828      	bhi.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002c46:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002c4a:	d01a      	beq.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002c4c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002c50:	d822      	bhi.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d003      	beq.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002c56:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002c5a:	d007      	beq.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002c5c:	e01c      	b.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c5e:	4bb8      	ldr	r3, [pc, #736]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c62:	4ab7      	ldr	r2, [pc, #732]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c68:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002c6a:	e01a      	b.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002c6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c70:	3308      	adds	r3, #8
 8002c72:	2102      	movs	r1, #2
 8002c74:	4618      	mov	r0, r3
 8002c76:	f001 fc8f 	bl	8004598 <RCCEx_PLL2_Config>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002c80:	e00f      	b.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002c82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c86:	3328      	adds	r3, #40	@ 0x28
 8002c88:	2102      	movs	r1, #2
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f001 fd36 	bl	80046fc <RCCEx_PLL3_Config>
 8002c90:	4603      	mov	r3, r0
 8002c92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002c96:	e004      	b.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002c9e:	e000      	b.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002ca0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ca2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d10a      	bne.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002caa:	4ba5      	ldr	r3, [pc, #660]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002cac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cae:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8002cb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cb6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002cb8:	4aa1      	ldr	r2, [pc, #644]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002cba:	430b      	orrs	r3, r1
 8002cbc:	6513      	str	r3, [r2, #80]	@ 0x50
 8002cbe:	e003      	b.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cc0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002cc4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002cc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cd0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8002cd4:	f04f 0900 	mov.w	r9, #0
 8002cd8:	ea58 0309 	orrs.w	r3, r8, r9
 8002cdc:	d047      	beq.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002cde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ce2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ce4:	2b04      	cmp	r3, #4
 8002ce6:	d82a      	bhi.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002ce8:	a201      	add	r2, pc, #4	@ (adr r2, 8002cf0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cee:	bf00      	nop
 8002cf0:	08002d05 	.word	0x08002d05
 8002cf4:	08002d13 	.word	0x08002d13
 8002cf8:	08002d29 	.word	0x08002d29
 8002cfc:	08002d47 	.word	0x08002d47
 8002d00:	08002d47 	.word	0x08002d47
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d04:	4b8e      	ldr	r3, [pc, #568]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d08:	4a8d      	ldr	r2, [pc, #564]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d0e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002d10:	e01a      	b.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002d12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d16:	3308      	adds	r3, #8
 8002d18:	2100      	movs	r1, #0
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f001 fc3c 	bl	8004598 <RCCEx_PLL2_Config>
 8002d20:	4603      	mov	r3, r0
 8002d22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002d26:	e00f      	b.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002d28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d2c:	3328      	adds	r3, #40	@ 0x28
 8002d2e:	2100      	movs	r1, #0
 8002d30:	4618      	mov	r0, r3
 8002d32:	f001 fce3 	bl	80046fc <RCCEx_PLL3_Config>
 8002d36:	4603      	mov	r3, r0
 8002d38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002d3c:	e004      	b.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002d44:	e000      	b.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002d46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d10a      	bne.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d50:	4b7b      	ldr	r3, [pc, #492]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d54:	f023 0107 	bic.w	r1, r3, #7
 8002d58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d5e:	4a78      	ldr	r2, [pc, #480]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d60:	430b      	orrs	r3, r1
 8002d62:	6513      	str	r3, [r2, #80]	@ 0x50
 8002d64:	e003      	b.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002d6a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002d6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d76:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8002d7a:	f04f 0b00 	mov.w	fp, #0
 8002d7e:	ea5a 030b 	orrs.w	r3, sl, fp
 8002d82:	d04c      	beq.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8002d84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d8e:	d030      	beq.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8002d90:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d94:	d829      	bhi.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002d96:	2bc0      	cmp	r3, #192	@ 0xc0
 8002d98:	d02d      	beq.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002d9a:	2bc0      	cmp	r3, #192	@ 0xc0
 8002d9c:	d825      	bhi.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002d9e:	2b80      	cmp	r3, #128	@ 0x80
 8002da0:	d018      	beq.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002da2:	2b80      	cmp	r3, #128	@ 0x80
 8002da4:	d821      	bhi.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d002      	beq.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8002daa:	2b40      	cmp	r3, #64	@ 0x40
 8002dac:	d007      	beq.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8002dae:	e01c      	b.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002db0:	4b63      	ldr	r3, [pc, #396]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002db2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002db4:	4a62      	ldr	r2, [pc, #392]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002db6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002dba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002dbc:	e01c      	b.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002dbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002dc2:	3308      	adds	r3, #8
 8002dc4:	2100      	movs	r1, #0
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f001 fbe6 	bl	8004598 <RCCEx_PLL2_Config>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002dd2:	e011      	b.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002dd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002dd8:	3328      	adds	r3, #40	@ 0x28
 8002dda:	2100      	movs	r1, #0
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f001 fc8d 	bl	80046fc <RCCEx_PLL3_Config>
 8002de2:	4603      	mov	r3, r0
 8002de4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002de8:	e006      	b.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002df0:	e002      	b.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002df2:	bf00      	nop
 8002df4:	e000      	b.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002df6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002df8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d10a      	bne.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002e00:	4b4f      	ldr	r3, [pc, #316]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002e02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e04:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8002e08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e0e:	4a4c      	ldr	r2, [pc, #304]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002e10:	430b      	orrs	r3, r1
 8002e12:	6513      	str	r3, [r2, #80]	@ 0x50
 8002e14:	e003      	b.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002e1a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002e1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e26:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8002e2a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8002e2e:	2300      	movs	r3, #0
 8002e30:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8002e34:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8002e38:	460b      	mov	r3, r1
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	d053      	beq.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8002e3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e42:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002e46:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002e4a:	d035      	beq.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002e4c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002e50:	d82e      	bhi.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002e52:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002e56:	d031      	beq.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8002e58:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002e5c:	d828      	bhi.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002e5e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002e62:	d01a      	beq.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8002e64:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002e68:	d822      	bhi.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d003      	beq.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8002e6e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002e72:	d007      	beq.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8002e74:	e01c      	b.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e76:	4b32      	ldr	r3, [pc, #200]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002e78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e7a:	4a31      	ldr	r2, [pc, #196]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002e7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e80:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002e82:	e01c      	b.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002e84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e88:	3308      	adds	r3, #8
 8002e8a:	2100      	movs	r1, #0
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f001 fb83 	bl	8004598 <RCCEx_PLL2_Config>
 8002e92:	4603      	mov	r3, r0
 8002e94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002e98:	e011      	b.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002e9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e9e:	3328      	adds	r3, #40	@ 0x28
 8002ea0:	2100      	movs	r1, #0
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f001 fc2a 	bl	80046fc <RCCEx_PLL3_Config>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002eae:	e006      	b.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002eb6:	e002      	b.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002eb8:	bf00      	nop
 8002eba:	e000      	b.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002ebc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ebe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d10b      	bne.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002ec6:	4b1e      	ldr	r3, [pc, #120]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002ec8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eca:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8002ece:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ed2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002ed6:	4a1a      	ldr	r2, [pc, #104]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002ed8:	430b      	orrs	r3, r1
 8002eda:	6593      	str	r3, [r2, #88]	@ 0x58
 8002edc:	e003      	b.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ede:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ee2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002ee6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eee:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8002ef2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002efc:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8002f00:	460b      	mov	r3, r1
 8002f02:	4313      	orrs	r3, r2
 8002f04:	d056      	beq.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8002f06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f0a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002f0e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002f12:	d038      	beq.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8002f14:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002f18:	d831      	bhi.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002f1a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002f1e:	d034      	beq.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x382>
 8002f20:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002f24:	d82b      	bhi.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002f26:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002f2a:	d01d      	beq.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002f2c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002f30:	d825      	bhi.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d006      	beq.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8002f36:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f3a:	d00a      	beq.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002f3c:	e01f      	b.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002f3e:	bf00      	nop
 8002f40:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f44:	4ba2      	ldr	r3, [pc, #648]	@ (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f48:	4aa1      	ldr	r2, [pc, #644]	@ (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f4e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002f50:	e01c      	b.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002f52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f56:	3308      	adds	r3, #8
 8002f58:	2100      	movs	r1, #0
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f001 fb1c 	bl	8004598 <RCCEx_PLL2_Config>
 8002f60:	4603      	mov	r3, r0
 8002f62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002f66:	e011      	b.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002f68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f6c:	3328      	adds	r3, #40	@ 0x28
 8002f6e:	2100      	movs	r1, #0
 8002f70:	4618      	mov	r0, r3
 8002f72:	f001 fbc3 	bl	80046fc <RCCEx_PLL3_Config>
 8002f76:	4603      	mov	r3, r0
 8002f78:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002f7c:	e006      	b.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002f84:	e002      	b.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002f86:	bf00      	nop
 8002f88:	e000      	b.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002f8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f8c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d10b      	bne.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002f94:	4b8e      	ldr	r3, [pc, #568]	@ (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f98:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8002f9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fa0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002fa4:	4a8a      	ldr	r2, [pc, #552]	@ (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002fa6:	430b      	orrs	r3, r1
 8002fa8:	6593      	str	r3, [r2, #88]	@ 0x58
 8002faa:	e003      	b.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002fb0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002fb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fbc:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8002fc0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8002fca:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8002fce:	460b      	mov	r3, r1
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	d03a      	beq.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8002fd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fda:	2b30      	cmp	r3, #48	@ 0x30
 8002fdc:	d01f      	beq.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x416>
 8002fde:	2b30      	cmp	r3, #48	@ 0x30
 8002fe0:	d819      	bhi.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002fe2:	2b20      	cmp	r3, #32
 8002fe4:	d00c      	beq.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8002fe6:	2b20      	cmp	r3, #32
 8002fe8:	d815      	bhi.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d019      	beq.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8002fee:	2b10      	cmp	r3, #16
 8002ff0:	d111      	bne.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ff2:	4b77      	ldr	r3, [pc, #476]	@ (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ff4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ff6:	4a76      	ldr	r2, [pc, #472]	@ (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ff8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ffc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002ffe:	e011      	b.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003000:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003004:	3308      	adds	r3, #8
 8003006:	2102      	movs	r1, #2
 8003008:	4618      	mov	r0, r3
 800300a:	f001 fac5 	bl	8004598 <RCCEx_PLL2_Config>
 800300e:	4603      	mov	r3, r0
 8003010:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003014:	e006      	b.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800301c:	e002      	b.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800301e:	bf00      	nop
 8003020:	e000      	b.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003022:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003024:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003028:	2b00      	cmp	r3, #0
 800302a:	d10a      	bne.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800302c:	4b68      	ldr	r3, [pc, #416]	@ (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800302e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003030:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003034:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003038:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800303a:	4a65      	ldr	r2, [pc, #404]	@ (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800303c:	430b      	orrs	r3, r1
 800303e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003040:	e003      	b.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003042:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003046:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800304a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800304e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003052:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003056:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800305a:	2300      	movs	r3, #0
 800305c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003060:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003064:	460b      	mov	r3, r1
 8003066:	4313      	orrs	r3, r2
 8003068:	d051      	beq.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800306a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800306e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003070:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003074:	d035      	beq.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003076:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800307a:	d82e      	bhi.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800307c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003080:	d031      	beq.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003082:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003086:	d828      	bhi.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003088:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800308c:	d01a      	beq.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800308e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003092:	d822      	bhi.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003094:	2b00      	cmp	r3, #0
 8003096:	d003      	beq.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003098:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800309c:	d007      	beq.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800309e:	e01c      	b.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80030a0:	4b4b      	ldr	r3, [pc, #300]	@ (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80030a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030a4:	4a4a      	ldr	r2, [pc, #296]	@ (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80030a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80030aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80030ac:	e01c      	b.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80030ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030b2:	3308      	adds	r3, #8
 80030b4:	2100      	movs	r1, #0
 80030b6:	4618      	mov	r0, r3
 80030b8:	f001 fa6e 	bl	8004598 <RCCEx_PLL2_Config>
 80030bc:	4603      	mov	r3, r0
 80030be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80030c2:	e011      	b.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80030c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030c8:	3328      	adds	r3, #40	@ 0x28
 80030ca:	2100      	movs	r1, #0
 80030cc:	4618      	mov	r0, r3
 80030ce:	f001 fb15 	bl	80046fc <RCCEx_PLL3_Config>
 80030d2:	4603      	mov	r3, r0
 80030d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80030d8:	e006      	b.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80030e0:	e002      	b.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80030e2:	bf00      	nop
 80030e4:	e000      	b.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80030e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d10a      	bne.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80030f0:	4b37      	ldr	r3, [pc, #220]	@ (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80030f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030f4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80030f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030fe:	4a34      	ldr	r2, [pc, #208]	@ (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003100:	430b      	orrs	r3, r1
 8003102:	6513      	str	r3, [r2, #80]	@ 0x50
 8003104:	e003      	b.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003106:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800310a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800310e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003116:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800311a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800311e:	2300      	movs	r3, #0
 8003120:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003124:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003128:	460b      	mov	r3, r1
 800312a:	4313      	orrs	r3, r2
 800312c:	d056      	beq.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800312e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003132:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003134:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003138:	d033      	beq.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800313a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800313e:	d82c      	bhi.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003140:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003144:	d02f      	beq.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003146:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800314a:	d826      	bhi.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800314c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003150:	d02b      	beq.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003152:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003156:	d820      	bhi.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003158:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800315c:	d012      	beq.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800315e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003162:	d81a      	bhi.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003164:	2b00      	cmp	r3, #0
 8003166:	d022      	beq.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003168:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800316c:	d115      	bne.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800316e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003172:	3308      	adds	r3, #8
 8003174:	2101      	movs	r1, #1
 8003176:	4618      	mov	r0, r3
 8003178:	f001 fa0e 	bl	8004598 <RCCEx_PLL2_Config>
 800317c:	4603      	mov	r3, r0
 800317e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003182:	e015      	b.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003184:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003188:	3328      	adds	r3, #40	@ 0x28
 800318a:	2101      	movs	r1, #1
 800318c:	4618      	mov	r0, r3
 800318e:	f001 fab5 	bl	80046fc <RCCEx_PLL3_Config>
 8003192:	4603      	mov	r3, r0
 8003194:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003198:	e00a      	b.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80031a0:	e006      	b.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80031a2:	bf00      	nop
 80031a4:	e004      	b.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80031a6:	bf00      	nop
 80031a8:	e002      	b.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80031aa:	bf00      	nop
 80031ac:	e000      	b.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80031ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d10d      	bne.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80031b8:	4b05      	ldr	r3, [pc, #20]	@ (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80031ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031bc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80031c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80031c6:	4a02      	ldr	r2, [pc, #8]	@ (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80031c8:	430b      	orrs	r3, r1
 80031ca:	6513      	str	r3, [r2, #80]	@ 0x50
 80031cc:	e006      	b.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80031ce:	bf00      	nop
 80031d0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80031d8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80031dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031e4:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80031e8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80031ec:	2300      	movs	r3, #0
 80031ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80031f2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80031f6:	460b      	mov	r3, r1
 80031f8:	4313      	orrs	r3, r2
 80031fa:	d055      	beq.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80031fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003200:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003204:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003208:	d033      	beq.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800320a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800320e:	d82c      	bhi.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003210:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003214:	d02f      	beq.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003216:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800321a:	d826      	bhi.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800321c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003220:	d02b      	beq.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003222:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003226:	d820      	bhi.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003228:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800322c:	d012      	beq.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800322e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003232:	d81a      	bhi.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003234:	2b00      	cmp	r3, #0
 8003236:	d022      	beq.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003238:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800323c:	d115      	bne.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800323e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003242:	3308      	adds	r3, #8
 8003244:	2101      	movs	r1, #1
 8003246:	4618      	mov	r0, r3
 8003248:	f001 f9a6 	bl	8004598 <RCCEx_PLL2_Config>
 800324c:	4603      	mov	r3, r0
 800324e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003252:	e015      	b.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003254:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003258:	3328      	adds	r3, #40	@ 0x28
 800325a:	2101      	movs	r1, #1
 800325c:	4618      	mov	r0, r3
 800325e:	f001 fa4d 	bl	80046fc <RCCEx_PLL3_Config>
 8003262:	4603      	mov	r3, r0
 8003264:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003268:	e00a      	b.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003270:	e006      	b.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003272:	bf00      	nop
 8003274:	e004      	b.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003276:	bf00      	nop
 8003278:	e002      	b.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800327a:	bf00      	nop
 800327c:	e000      	b.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800327e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003280:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003284:	2b00      	cmp	r3, #0
 8003286:	d10b      	bne.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003288:	4ba3      	ldr	r3, [pc, #652]	@ (8003518 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800328a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800328c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003290:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003294:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003298:	4a9f      	ldr	r2, [pc, #636]	@ (8003518 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800329a:	430b      	orrs	r3, r1
 800329c:	6593      	str	r3, [r2, #88]	@ 0x58
 800329e:	e003      	b.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80032a4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80032a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032b0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80032b4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80032b8:	2300      	movs	r3, #0
 80032ba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80032be:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80032c2:	460b      	mov	r3, r1
 80032c4:	4313      	orrs	r3, r2
 80032c6:	d037      	beq.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80032c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80032d2:	d00e      	beq.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80032d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80032d8:	d816      	bhi.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d018      	beq.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80032de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80032e2:	d111      	bne.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032e4:	4b8c      	ldr	r3, [pc, #560]	@ (8003518 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80032e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032e8:	4a8b      	ldr	r2, [pc, #556]	@ (8003518 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80032ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80032ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80032f0:	e00f      	b.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80032f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032f6:	3308      	adds	r3, #8
 80032f8:	2101      	movs	r1, #1
 80032fa:	4618      	mov	r0, r3
 80032fc:	f001 f94c 	bl	8004598 <RCCEx_PLL2_Config>
 8003300:	4603      	mov	r3, r0
 8003302:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003306:	e004      	b.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800330e:	e000      	b.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003310:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003312:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003316:	2b00      	cmp	r3, #0
 8003318:	d10a      	bne.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800331a:	4b7f      	ldr	r3, [pc, #508]	@ (8003518 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800331c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800331e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003322:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003326:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003328:	4a7b      	ldr	r2, [pc, #492]	@ (8003518 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800332a:	430b      	orrs	r3, r1
 800332c:	6513      	str	r3, [r2, #80]	@ 0x50
 800332e:	e003      	b.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003330:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003334:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003338:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800333c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003340:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003344:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003348:	2300      	movs	r3, #0
 800334a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800334e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003352:	460b      	mov	r3, r1
 8003354:	4313      	orrs	r3, r2
 8003356:	d039      	beq.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003358:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800335c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800335e:	2b03      	cmp	r3, #3
 8003360:	d81c      	bhi.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003362:	a201      	add	r2, pc, #4	@ (adr r2, 8003368 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003368:	080033a5 	.word	0x080033a5
 800336c:	08003379 	.word	0x08003379
 8003370:	08003387 	.word	0x08003387
 8003374:	080033a5 	.word	0x080033a5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003378:	4b67      	ldr	r3, [pc, #412]	@ (8003518 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800337a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800337c:	4a66      	ldr	r2, [pc, #408]	@ (8003518 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800337e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003382:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003384:	e00f      	b.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003386:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800338a:	3308      	adds	r3, #8
 800338c:	2102      	movs	r1, #2
 800338e:	4618      	mov	r0, r3
 8003390:	f001 f902 	bl	8004598 <RCCEx_PLL2_Config>
 8003394:	4603      	mov	r3, r0
 8003396:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800339a:	e004      	b.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80033a2:	e000      	b.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80033a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d10a      	bne.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80033ae:	4b5a      	ldr	r3, [pc, #360]	@ (8003518 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80033b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033b2:	f023 0103 	bic.w	r1, r3, #3
 80033b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033bc:	4a56      	ldr	r2, [pc, #344]	@ (8003518 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80033be:	430b      	orrs	r3, r1
 80033c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80033c2:	e003      	b.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80033c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80033cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033d4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80033d8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80033dc:	2300      	movs	r3, #0
 80033de:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80033e2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80033e6:	460b      	mov	r3, r1
 80033e8:	4313      	orrs	r3, r2
 80033ea:	f000 809f 	beq.w	800352c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033ee:	4b4b      	ldr	r3, [pc, #300]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a4a      	ldr	r2, [pc, #296]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80033f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033f8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80033fa:	f7fd ffe3 	bl	80013c4 <HAL_GetTick>
 80033fe:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003402:	e00b      	b.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003404:	f7fd ffde 	bl	80013c4 <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800340e:	1ad3      	subs	r3, r2, r3
 8003410:	2b64      	cmp	r3, #100	@ 0x64
 8003412:	d903      	bls.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003414:	2303      	movs	r3, #3
 8003416:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800341a:	e005      	b.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800341c:	4b3f      	ldr	r3, [pc, #252]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003424:	2b00      	cmp	r3, #0
 8003426:	d0ed      	beq.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003428:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800342c:	2b00      	cmp	r3, #0
 800342e:	d179      	bne.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003430:	4b39      	ldr	r3, [pc, #228]	@ (8003518 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003432:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003434:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003438:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800343c:	4053      	eors	r3, r2
 800343e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003442:	2b00      	cmp	r3, #0
 8003444:	d015      	beq.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003446:	4b34      	ldr	r3, [pc, #208]	@ (8003518 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003448:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800344a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800344e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003452:	4b31      	ldr	r3, [pc, #196]	@ (8003518 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003454:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003456:	4a30      	ldr	r2, [pc, #192]	@ (8003518 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003458:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800345c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800345e:	4b2e      	ldr	r3, [pc, #184]	@ (8003518 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003460:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003462:	4a2d      	ldr	r2, [pc, #180]	@ (8003518 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003464:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003468:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800346a:	4a2b      	ldr	r2, [pc, #172]	@ (8003518 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800346c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003470:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003472:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003476:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800347a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800347e:	d118      	bne.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003480:	f7fd ffa0 	bl	80013c4 <HAL_GetTick>
 8003484:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003488:	e00d      	b.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800348a:	f7fd ff9b 	bl	80013c4 <HAL_GetTick>
 800348e:	4602      	mov	r2, r0
 8003490:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003494:	1ad2      	subs	r2, r2, r3
 8003496:	f241 3388 	movw	r3, #5000	@ 0x1388
 800349a:	429a      	cmp	r2, r3
 800349c:	d903      	bls.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800349e:	2303      	movs	r3, #3
 80034a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80034a4:	e005      	b.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80034a6:	4b1c      	ldr	r3, [pc, #112]	@ (8003518 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80034a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034aa:	f003 0302 	and.w	r3, r3, #2
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d0eb      	beq.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80034b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d129      	bne.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034be:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80034c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034c6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80034ca:	d10e      	bne.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80034cc:	4b12      	ldr	r3, [pc, #72]	@ (8003518 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80034ce:	691b      	ldr	r3, [r3, #16]
 80034d0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80034d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034d8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80034dc:	091a      	lsrs	r2, r3, #4
 80034de:	4b10      	ldr	r3, [pc, #64]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80034e0:	4013      	ands	r3, r2
 80034e2:	4a0d      	ldr	r2, [pc, #52]	@ (8003518 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80034e4:	430b      	orrs	r3, r1
 80034e6:	6113      	str	r3, [r2, #16]
 80034e8:	e005      	b.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80034ea:	4b0b      	ldr	r3, [pc, #44]	@ (8003518 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80034ec:	691b      	ldr	r3, [r3, #16]
 80034ee:	4a0a      	ldr	r2, [pc, #40]	@ (8003518 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80034f0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80034f4:	6113      	str	r3, [r2, #16]
 80034f6:	4b08      	ldr	r3, [pc, #32]	@ (8003518 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80034f8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80034fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034fe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003502:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003506:	4a04      	ldr	r2, [pc, #16]	@ (8003518 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003508:	430b      	orrs	r3, r1
 800350a:	6713      	str	r3, [r2, #112]	@ 0x70
 800350c:	e00e      	b.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800350e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003512:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8003516:	e009      	b.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003518:	58024400 	.word	0x58024400
 800351c:	58024800 	.word	0x58024800
 8003520:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003524:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003528:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800352c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003534:	f002 0301 	and.w	r3, r2, #1
 8003538:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800353c:	2300      	movs	r3, #0
 800353e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003542:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003546:	460b      	mov	r3, r1
 8003548:	4313      	orrs	r3, r2
 800354a:	f000 8089 	beq.w	8003660 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800354e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003552:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003554:	2b28      	cmp	r3, #40	@ 0x28
 8003556:	d86b      	bhi.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003558:	a201      	add	r2, pc, #4	@ (adr r2, 8003560 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800355a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800355e:	bf00      	nop
 8003560:	08003639 	.word	0x08003639
 8003564:	08003631 	.word	0x08003631
 8003568:	08003631 	.word	0x08003631
 800356c:	08003631 	.word	0x08003631
 8003570:	08003631 	.word	0x08003631
 8003574:	08003631 	.word	0x08003631
 8003578:	08003631 	.word	0x08003631
 800357c:	08003631 	.word	0x08003631
 8003580:	08003605 	.word	0x08003605
 8003584:	08003631 	.word	0x08003631
 8003588:	08003631 	.word	0x08003631
 800358c:	08003631 	.word	0x08003631
 8003590:	08003631 	.word	0x08003631
 8003594:	08003631 	.word	0x08003631
 8003598:	08003631 	.word	0x08003631
 800359c:	08003631 	.word	0x08003631
 80035a0:	0800361b 	.word	0x0800361b
 80035a4:	08003631 	.word	0x08003631
 80035a8:	08003631 	.word	0x08003631
 80035ac:	08003631 	.word	0x08003631
 80035b0:	08003631 	.word	0x08003631
 80035b4:	08003631 	.word	0x08003631
 80035b8:	08003631 	.word	0x08003631
 80035bc:	08003631 	.word	0x08003631
 80035c0:	08003639 	.word	0x08003639
 80035c4:	08003631 	.word	0x08003631
 80035c8:	08003631 	.word	0x08003631
 80035cc:	08003631 	.word	0x08003631
 80035d0:	08003631 	.word	0x08003631
 80035d4:	08003631 	.word	0x08003631
 80035d8:	08003631 	.word	0x08003631
 80035dc:	08003631 	.word	0x08003631
 80035e0:	08003639 	.word	0x08003639
 80035e4:	08003631 	.word	0x08003631
 80035e8:	08003631 	.word	0x08003631
 80035ec:	08003631 	.word	0x08003631
 80035f0:	08003631 	.word	0x08003631
 80035f4:	08003631 	.word	0x08003631
 80035f8:	08003631 	.word	0x08003631
 80035fc:	08003631 	.word	0x08003631
 8003600:	08003639 	.word	0x08003639
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003604:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003608:	3308      	adds	r3, #8
 800360a:	2101      	movs	r1, #1
 800360c:	4618      	mov	r0, r3
 800360e:	f000 ffc3 	bl	8004598 <RCCEx_PLL2_Config>
 8003612:	4603      	mov	r3, r0
 8003614:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003618:	e00f      	b.n	800363a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800361a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800361e:	3328      	adds	r3, #40	@ 0x28
 8003620:	2101      	movs	r1, #1
 8003622:	4618      	mov	r0, r3
 8003624:	f001 f86a 	bl	80046fc <RCCEx_PLL3_Config>
 8003628:	4603      	mov	r3, r0
 800362a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800362e:	e004      	b.n	800363a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003636:	e000      	b.n	800363a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003638:	bf00      	nop
    }

    if (ret == HAL_OK)
 800363a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800363e:	2b00      	cmp	r3, #0
 8003640:	d10a      	bne.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003642:	4bbf      	ldr	r3, [pc, #764]	@ (8003940 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003644:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003646:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800364a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800364e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003650:	4abb      	ldr	r2, [pc, #748]	@ (8003940 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003652:	430b      	orrs	r3, r1
 8003654:	6553      	str	r3, [r2, #84]	@ 0x54
 8003656:	e003      	b.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003658:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800365c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003660:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003668:	f002 0302 	and.w	r3, r2, #2
 800366c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003670:	2300      	movs	r3, #0
 8003672:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003676:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800367a:	460b      	mov	r3, r1
 800367c:	4313      	orrs	r3, r2
 800367e:	d041      	beq.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003680:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003684:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003686:	2b05      	cmp	r3, #5
 8003688:	d824      	bhi.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800368a:	a201      	add	r2, pc, #4	@ (adr r2, 8003690 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800368c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003690:	080036dd 	.word	0x080036dd
 8003694:	080036a9 	.word	0x080036a9
 8003698:	080036bf 	.word	0x080036bf
 800369c:	080036dd 	.word	0x080036dd
 80036a0:	080036dd 	.word	0x080036dd
 80036a4:	080036dd 	.word	0x080036dd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80036a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036ac:	3308      	adds	r3, #8
 80036ae:	2101      	movs	r1, #1
 80036b0:	4618      	mov	r0, r3
 80036b2:	f000 ff71 	bl	8004598 <RCCEx_PLL2_Config>
 80036b6:	4603      	mov	r3, r0
 80036b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80036bc:	e00f      	b.n	80036de <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80036be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036c2:	3328      	adds	r3, #40	@ 0x28
 80036c4:	2101      	movs	r1, #1
 80036c6:	4618      	mov	r0, r3
 80036c8:	f001 f818 	bl	80046fc <RCCEx_PLL3_Config>
 80036cc:	4603      	mov	r3, r0
 80036ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80036d2:	e004      	b.n	80036de <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80036da:	e000      	b.n	80036de <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80036dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d10a      	bne.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80036e6:	4b96      	ldr	r3, [pc, #600]	@ (8003940 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80036e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036ea:	f023 0107 	bic.w	r1, r3, #7
 80036ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036f2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80036f4:	4a92      	ldr	r2, [pc, #584]	@ (8003940 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80036f6:	430b      	orrs	r3, r1
 80036f8:	6553      	str	r3, [r2, #84]	@ 0x54
 80036fa:	e003      	b.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003700:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003704:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800370c:	f002 0304 	and.w	r3, r2, #4
 8003710:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003714:	2300      	movs	r3, #0
 8003716:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800371a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800371e:	460b      	mov	r3, r1
 8003720:	4313      	orrs	r3, r2
 8003722:	d044      	beq.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003724:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003728:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800372c:	2b05      	cmp	r3, #5
 800372e:	d825      	bhi.n	800377c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003730:	a201      	add	r2, pc, #4	@ (adr r2, 8003738 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8003732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003736:	bf00      	nop
 8003738:	08003785 	.word	0x08003785
 800373c:	08003751 	.word	0x08003751
 8003740:	08003767 	.word	0x08003767
 8003744:	08003785 	.word	0x08003785
 8003748:	08003785 	.word	0x08003785
 800374c:	08003785 	.word	0x08003785
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003750:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003754:	3308      	adds	r3, #8
 8003756:	2101      	movs	r1, #1
 8003758:	4618      	mov	r0, r3
 800375a:	f000 ff1d 	bl	8004598 <RCCEx_PLL2_Config>
 800375e:	4603      	mov	r3, r0
 8003760:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003764:	e00f      	b.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003766:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800376a:	3328      	adds	r3, #40	@ 0x28
 800376c:	2101      	movs	r1, #1
 800376e:	4618      	mov	r0, r3
 8003770:	f000 ffc4 	bl	80046fc <RCCEx_PLL3_Config>
 8003774:	4603      	mov	r3, r0
 8003776:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800377a:	e004      	b.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003782:	e000      	b.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003784:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003786:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800378a:	2b00      	cmp	r3, #0
 800378c:	d10b      	bne.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800378e:	4b6c      	ldr	r3, [pc, #432]	@ (8003940 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003790:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003792:	f023 0107 	bic.w	r1, r3, #7
 8003796:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800379a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800379e:	4a68      	ldr	r2, [pc, #416]	@ (8003940 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80037a0:	430b      	orrs	r3, r1
 80037a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80037a4:	e003      	b.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80037ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037b6:	f002 0320 	and.w	r3, r2, #32
 80037ba:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80037be:	2300      	movs	r3, #0
 80037c0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80037c4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80037c8:	460b      	mov	r3, r1
 80037ca:	4313      	orrs	r3, r2
 80037cc:	d055      	beq.n	800387a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80037ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80037da:	d033      	beq.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80037dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80037e0:	d82c      	bhi.n	800383c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80037e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037e6:	d02f      	beq.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80037e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037ec:	d826      	bhi.n	800383c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80037ee:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80037f2:	d02b      	beq.n	800384c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80037f4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80037f8:	d820      	bhi.n	800383c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80037fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80037fe:	d012      	beq.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003800:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003804:	d81a      	bhi.n	800383c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003806:	2b00      	cmp	r3, #0
 8003808:	d022      	beq.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800380a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800380e:	d115      	bne.n	800383c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003810:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003814:	3308      	adds	r3, #8
 8003816:	2100      	movs	r1, #0
 8003818:	4618      	mov	r0, r3
 800381a:	f000 febd 	bl	8004598 <RCCEx_PLL2_Config>
 800381e:	4603      	mov	r3, r0
 8003820:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003824:	e015      	b.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003826:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800382a:	3328      	adds	r3, #40	@ 0x28
 800382c:	2102      	movs	r1, #2
 800382e:	4618      	mov	r0, r3
 8003830:	f000 ff64 	bl	80046fc <RCCEx_PLL3_Config>
 8003834:	4603      	mov	r3, r0
 8003836:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800383a:	e00a      	b.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003842:	e006      	b.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003844:	bf00      	nop
 8003846:	e004      	b.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003848:	bf00      	nop
 800384a:	e002      	b.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800384c:	bf00      	nop
 800384e:	e000      	b.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003850:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003852:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003856:	2b00      	cmp	r3, #0
 8003858:	d10b      	bne.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800385a:	4b39      	ldr	r3, [pc, #228]	@ (8003940 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800385c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800385e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003862:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003866:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800386a:	4a35      	ldr	r2, [pc, #212]	@ (8003940 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800386c:	430b      	orrs	r3, r1
 800386e:	6553      	str	r3, [r2, #84]	@ 0x54
 8003870:	e003      	b.n	800387a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003872:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003876:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800387a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800387e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003882:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003886:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800388a:	2300      	movs	r3, #0
 800388c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003890:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003894:	460b      	mov	r3, r1
 8003896:	4313      	orrs	r3, r2
 8003898:	d058      	beq.n	800394c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800389a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800389e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80038a2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80038a6:	d033      	beq.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80038a8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80038ac:	d82c      	bhi.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80038ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038b2:	d02f      	beq.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80038b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038b8:	d826      	bhi.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80038ba:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80038be:	d02b      	beq.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80038c0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80038c4:	d820      	bhi.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80038c6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80038ca:	d012      	beq.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80038cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80038d0:	d81a      	bhi.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d022      	beq.n	800391c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80038d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038da:	d115      	bne.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80038dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038e0:	3308      	adds	r3, #8
 80038e2:	2100      	movs	r1, #0
 80038e4:	4618      	mov	r0, r3
 80038e6:	f000 fe57 	bl	8004598 <RCCEx_PLL2_Config>
 80038ea:	4603      	mov	r3, r0
 80038ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80038f0:	e015      	b.n	800391e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80038f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038f6:	3328      	adds	r3, #40	@ 0x28
 80038f8:	2102      	movs	r1, #2
 80038fa:	4618      	mov	r0, r3
 80038fc:	f000 fefe 	bl	80046fc <RCCEx_PLL3_Config>
 8003900:	4603      	mov	r3, r0
 8003902:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003906:	e00a      	b.n	800391e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800390e:	e006      	b.n	800391e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003910:	bf00      	nop
 8003912:	e004      	b.n	800391e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003914:	bf00      	nop
 8003916:	e002      	b.n	800391e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003918:	bf00      	nop
 800391a:	e000      	b.n	800391e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800391c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800391e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003922:	2b00      	cmp	r3, #0
 8003924:	d10e      	bne.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003926:	4b06      	ldr	r3, [pc, #24]	@ (8003940 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003928:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800392a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800392e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003932:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003936:	4a02      	ldr	r2, [pc, #8]	@ (8003940 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003938:	430b      	orrs	r3, r1
 800393a:	6593      	str	r3, [r2, #88]	@ 0x58
 800393c:	e006      	b.n	800394c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800393e:	bf00      	nop
 8003940:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003944:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003948:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800394c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003954:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003958:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800395c:	2300      	movs	r3, #0
 800395e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003962:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003966:	460b      	mov	r3, r1
 8003968:	4313      	orrs	r3, r2
 800396a:	d055      	beq.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800396c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003970:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003974:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003978:	d033      	beq.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800397a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800397e:	d82c      	bhi.n	80039da <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003980:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003984:	d02f      	beq.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8003986:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800398a:	d826      	bhi.n	80039da <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800398c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003990:	d02b      	beq.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8003992:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003996:	d820      	bhi.n	80039da <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003998:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800399c:	d012      	beq.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800399e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80039a2:	d81a      	bhi.n	80039da <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d022      	beq.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80039a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80039ac:	d115      	bne.n	80039da <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80039ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039b2:	3308      	adds	r3, #8
 80039b4:	2100      	movs	r1, #0
 80039b6:	4618      	mov	r0, r3
 80039b8:	f000 fdee 	bl	8004598 <RCCEx_PLL2_Config>
 80039bc:	4603      	mov	r3, r0
 80039be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80039c2:	e015      	b.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80039c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039c8:	3328      	adds	r3, #40	@ 0x28
 80039ca:	2102      	movs	r1, #2
 80039cc:	4618      	mov	r0, r3
 80039ce:	f000 fe95 	bl	80046fc <RCCEx_PLL3_Config>
 80039d2:	4603      	mov	r3, r0
 80039d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80039d8:	e00a      	b.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80039e0:	e006      	b.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80039e2:	bf00      	nop
 80039e4:	e004      	b.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80039e6:	bf00      	nop
 80039e8:	e002      	b.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80039ea:	bf00      	nop
 80039ec:	e000      	b.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80039ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d10b      	bne.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80039f8:	4ba1      	ldr	r3, [pc, #644]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80039fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039fc:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8003a00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a04:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003a08:	4a9d      	ldr	r2, [pc, #628]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003a0a:	430b      	orrs	r3, r1
 8003a0c:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a0e:	e003      	b.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a10:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a14:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003a18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a20:	f002 0308 	and.w	r3, r2, #8
 8003a24:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003a28:	2300      	movs	r3, #0
 8003a2a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003a2e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8003a32:	460b      	mov	r3, r1
 8003a34:	4313      	orrs	r3, r2
 8003a36:	d01e      	beq.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003a38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a40:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a44:	d10c      	bne.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003a46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a4a:	3328      	adds	r3, #40	@ 0x28
 8003a4c:	2102      	movs	r1, #2
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f000 fe54 	bl	80046fc <RCCEx_PLL3_Config>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d002      	beq.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003a60:	4b87      	ldr	r3, [pc, #540]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003a62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a64:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003a68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a70:	4a83      	ldr	r2, [pc, #524]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003a72:	430b      	orrs	r3, r1
 8003a74:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003a76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a7e:	f002 0310 	and.w	r3, r2, #16
 8003a82:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003a86:	2300      	movs	r3, #0
 8003a88:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003a8c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003a90:	460b      	mov	r3, r1
 8003a92:	4313      	orrs	r3, r2
 8003a94:	d01e      	beq.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003a96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a9a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003a9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003aa2:	d10c      	bne.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003aa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003aa8:	3328      	adds	r3, #40	@ 0x28
 8003aaa:	2102      	movs	r1, #2
 8003aac:	4618      	mov	r0, r3
 8003aae:	f000 fe25 	bl	80046fc <RCCEx_PLL3_Config>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d002      	beq.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003abe:	4b70      	ldr	r3, [pc, #448]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003ac0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ac2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003ac6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003aca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003ace:	4a6c      	ldr	r2, [pc, #432]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003ad0:	430b      	orrs	r3, r1
 8003ad2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ad4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003adc:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8003ae0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003aea:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8003aee:	460b      	mov	r3, r1
 8003af0:	4313      	orrs	r3, r2
 8003af2:	d03e      	beq.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003af4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003af8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003afc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003b00:	d022      	beq.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8003b02:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003b06:	d81b      	bhi.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d003      	beq.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8003b0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b10:	d00b      	beq.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8003b12:	e015      	b.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003b14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b18:	3308      	adds	r3, #8
 8003b1a:	2100      	movs	r1, #0
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f000 fd3b 	bl	8004598 <RCCEx_PLL2_Config>
 8003b22:	4603      	mov	r3, r0
 8003b24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003b28:	e00f      	b.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003b2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b2e:	3328      	adds	r3, #40	@ 0x28
 8003b30:	2102      	movs	r1, #2
 8003b32:	4618      	mov	r0, r3
 8003b34:	f000 fde2 	bl	80046fc <RCCEx_PLL3_Config>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003b3e:	e004      	b.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003b46:	e000      	b.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8003b48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d10b      	bne.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003b52:	4b4b      	ldr	r3, [pc, #300]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003b54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b56:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003b5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b5e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003b62:	4a47      	ldr	r2, [pc, #284]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003b64:	430b      	orrs	r3, r1
 8003b66:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b68:	e003      	b.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b6e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003b72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b7a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003b7e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003b80:	2300      	movs	r3, #0
 8003b82:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003b84:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003b88:	460b      	mov	r3, r1
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	d03b      	beq.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003b8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b96:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003b9a:	d01f      	beq.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8003b9c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003ba0:	d818      	bhi.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8003ba2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003ba6:	d003      	beq.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8003ba8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003bac:	d007      	beq.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8003bae:	e011      	b.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bb0:	4b33      	ldr	r3, [pc, #204]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003bb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bb4:	4a32      	ldr	r2, [pc, #200]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003bb6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003bba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003bbc:	e00f      	b.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003bbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bc2:	3328      	adds	r3, #40	@ 0x28
 8003bc4:	2101      	movs	r1, #1
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f000 fd98 	bl	80046fc <RCCEx_PLL3_Config>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8003bd2:	e004      	b.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003bda:	e000      	b.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8003bdc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bde:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d10b      	bne.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003be6:	4b26      	ldr	r3, [pc, #152]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003be8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bea:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003bee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bf6:	4a22      	ldr	r2, [pc, #136]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003bf8:	430b      	orrs	r3, r1
 8003bfa:	6553      	str	r3, [r2, #84]	@ 0x54
 8003bfc:	e003      	b.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bfe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c02:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003c06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c0e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003c12:	673b      	str	r3, [r7, #112]	@ 0x70
 8003c14:	2300      	movs	r3, #0
 8003c16:	677b      	str	r3, [r7, #116]	@ 0x74
 8003c18:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8003c1c:	460b      	mov	r3, r1
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	d034      	beq.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003c22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d003      	beq.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8003c2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c30:	d007      	beq.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8003c32:	e011      	b.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c34:	4b12      	ldr	r3, [pc, #72]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003c36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c38:	4a11      	ldr	r2, [pc, #68]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003c3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c3e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003c40:	e00e      	b.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003c42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c46:	3308      	adds	r3, #8
 8003c48:	2102      	movs	r1, #2
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f000 fca4 	bl	8004598 <RCCEx_PLL2_Config>
 8003c50:	4603      	mov	r3, r0
 8003c52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003c56:	e003      	b.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003c5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d10d      	bne.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003c68:	4b05      	ldr	r3, [pc, #20]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003c6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c6c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003c70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c76:	4a02      	ldr	r2, [pc, #8]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003c78:	430b      	orrs	r3, r1
 8003c7a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003c7c:	e006      	b.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8003c7e:	bf00      	nop
 8003c80:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c88:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003c8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c94:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8003c98:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003c9e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8003ca2:	460b      	mov	r3, r1
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	d00c      	beq.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003ca8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cac:	3328      	adds	r3, #40	@ 0x28
 8003cae:	2102      	movs	r1, #2
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f000 fd23 	bl	80046fc <RCCEx_PLL3_Config>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d002      	beq.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003cc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cca:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8003cce:	663b      	str	r3, [r7, #96]	@ 0x60
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	667b      	str	r3, [r7, #100]	@ 0x64
 8003cd4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003cd8:	460b      	mov	r3, r1
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	d038      	beq.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003cde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ce2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003ce6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003cea:	d018      	beq.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8003cec:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003cf0:	d811      	bhi.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003cf2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003cf6:	d014      	beq.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8003cf8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003cfc:	d80b      	bhi.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d011      	beq.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8003d02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d06:	d106      	bne.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d08:	4bc3      	ldr	r3, [pc, #780]	@ (8004018 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003d0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d0c:	4ac2      	ldr	r2, [pc, #776]	@ (8004018 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003d0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d12:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003d14:	e008      	b.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003d1c:	e004      	b.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003d1e:	bf00      	nop
 8003d20:	e002      	b.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003d22:	bf00      	nop
 8003d24:	e000      	b.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003d26:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d28:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d10b      	bne.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003d30:	4bb9      	ldr	r3, [pc, #740]	@ (8004018 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003d32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d34:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003d38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003d40:	4ab5      	ldr	r2, [pc, #724]	@ (8004018 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003d42:	430b      	orrs	r3, r1
 8003d44:	6553      	str	r3, [r2, #84]	@ 0x54
 8003d46:	e003      	b.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d4c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003d50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d58:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8003d5c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003d5e:	2300      	movs	r3, #0
 8003d60:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003d62:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8003d66:	460b      	mov	r3, r1
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	d009      	beq.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003d6c:	4baa      	ldr	r3, [pc, #680]	@ (8004018 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003d6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d70:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003d74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d7a:	4aa7      	ldr	r2, [pc, #668]	@ (8004018 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003d7c:	430b      	orrs	r3, r1
 8003d7e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003d80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d88:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8003d8c:	653b      	str	r3, [r7, #80]	@ 0x50
 8003d8e:	2300      	movs	r3, #0
 8003d90:	657b      	str	r3, [r7, #84]	@ 0x54
 8003d92:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8003d96:	460b      	mov	r3, r1
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	d00a      	beq.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003d9c:	4b9e      	ldr	r3, [pc, #632]	@ (8004018 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003d9e:	691b      	ldr	r3, [r3, #16]
 8003da0:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8003da4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003da8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003dac:	4a9a      	ldr	r2, [pc, #616]	@ (8004018 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003dae:	430b      	orrs	r3, r1
 8003db0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003db2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dba:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8003dbe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003dc4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003dc8:	460b      	mov	r3, r1
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	d009      	beq.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003dce:	4b92      	ldr	r3, [pc, #584]	@ (8004018 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003dd0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003dd2:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8003dd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dda:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ddc:	4a8e      	ldr	r2, [pc, #568]	@ (8004018 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003dde:	430b      	orrs	r3, r1
 8003de0:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003de2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dea:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8003dee:	643b      	str	r3, [r7, #64]	@ 0x40
 8003df0:	2300      	movs	r3, #0
 8003df2:	647b      	str	r3, [r7, #68]	@ 0x44
 8003df4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003df8:	460b      	mov	r3, r1
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	d00e      	beq.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003dfe:	4b86      	ldr	r3, [pc, #536]	@ (8004018 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003e00:	691b      	ldr	r3, [r3, #16]
 8003e02:	4a85      	ldr	r2, [pc, #532]	@ (8004018 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003e04:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003e08:	6113      	str	r3, [r2, #16]
 8003e0a:	4b83      	ldr	r3, [pc, #524]	@ (8004018 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003e0c:	6919      	ldr	r1, [r3, #16]
 8003e0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e12:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003e16:	4a80      	ldr	r2, [pc, #512]	@ (8004018 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003e18:	430b      	orrs	r3, r1
 8003e1a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003e1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e24:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8003e28:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003e2e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8003e32:	460b      	mov	r3, r1
 8003e34:	4313      	orrs	r3, r2
 8003e36:	d009      	beq.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003e38:	4b77      	ldr	r3, [pc, #476]	@ (8004018 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003e3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e3c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003e40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e46:	4a74      	ldr	r2, [pc, #464]	@ (8004018 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003e48:	430b      	orrs	r3, r1
 8003e4a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003e4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e54:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8003e58:	633b      	str	r3, [r7, #48]	@ 0x30
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e5e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8003e62:	460b      	mov	r3, r1
 8003e64:	4313      	orrs	r3, r2
 8003e66:	d00a      	beq.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003e68:	4b6b      	ldr	r3, [pc, #428]	@ (8004018 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003e6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e6c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8003e70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e74:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003e78:	4a67      	ldr	r2, [pc, #412]	@ (8004018 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003e7a:	430b      	orrs	r3, r1
 8003e7c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003e7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e86:	2100      	movs	r1, #0
 8003e88:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003e8a:	f003 0301 	and.w	r3, r3, #1
 8003e8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e90:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8003e94:	460b      	mov	r3, r1
 8003e96:	4313      	orrs	r3, r2
 8003e98:	d011      	beq.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003e9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e9e:	3308      	adds	r3, #8
 8003ea0:	2100      	movs	r1, #0
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f000 fb78 	bl	8004598 <RCCEx_PLL2_Config>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003eae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d003      	beq.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eb6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003eba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003ebe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ec6:	2100      	movs	r1, #0
 8003ec8:	6239      	str	r1, [r7, #32]
 8003eca:	f003 0302 	and.w	r3, r3, #2
 8003ece:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ed0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003ed4:	460b      	mov	r3, r1
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	d011      	beq.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003eda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ede:	3308      	adds	r3, #8
 8003ee0:	2101      	movs	r1, #1
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f000 fb58 	bl	8004598 <RCCEx_PLL2_Config>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003eee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d003      	beq.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ef6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003efa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003efe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f06:	2100      	movs	r1, #0
 8003f08:	61b9      	str	r1, [r7, #24]
 8003f0a:	f003 0304 	and.w	r3, r3, #4
 8003f0e:	61fb      	str	r3, [r7, #28]
 8003f10:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003f14:	460b      	mov	r3, r1
 8003f16:	4313      	orrs	r3, r2
 8003f18:	d011      	beq.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003f1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f1e:	3308      	adds	r3, #8
 8003f20:	2102      	movs	r1, #2
 8003f22:	4618      	mov	r0, r3
 8003f24:	f000 fb38 	bl	8004598 <RCCEx_PLL2_Config>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003f2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d003      	beq.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f3a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003f3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f46:	2100      	movs	r1, #0
 8003f48:	6139      	str	r1, [r7, #16]
 8003f4a:	f003 0308 	and.w	r3, r3, #8
 8003f4e:	617b      	str	r3, [r7, #20]
 8003f50:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003f54:	460b      	mov	r3, r1
 8003f56:	4313      	orrs	r3, r2
 8003f58:	d011      	beq.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003f5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f5e:	3328      	adds	r3, #40	@ 0x28
 8003f60:	2100      	movs	r1, #0
 8003f62:	4618      	mov	r0, r3
 8003f64:	f000 fbca 	bl	80046fc <RCCEx_PLL3_Config>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8003f6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d003      	beq.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f7a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003f7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f86:	2100      	movs	r1, #0
 8003f88:	60b9      	str	r1, [r7, #8]
 8003f8a:	f003 0310 	and.w	r3, r3, #16
 8003f8e:	60fb      	str	r3, [r7, #12]
 8003f90:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003f94:	460b      	mov	r3, r1
 8003f96:	4313      	orrs	r3, r2
 8003f98:	d011      	beq.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003f9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f9e:	3328      	adds	r3, #40	@ 0x28
 8003fa0:	2101      	movs	r1, #1
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f000 fbaa 	bl	80046fc <RCCEx_PLL3_Config>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003fae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d003      	beq.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fb6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003fbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fc6:	2100      	movs	r1, #0
 8003fc8:	6039      	str	r1, [r7, #0]
 8003fca:	f003 0320 	and.w	r3, r3, #32
 8003fce:	607b      	str	r3, [r7, #4]
 8003fd0:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003fd4:	460b      	mov	r3, r1
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	d011      	beq.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003fda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fde:	3328      	adds	r3, #40	@ 0x28
 8003fe0:	2102      	movs	r1, #2
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f000 fb8a 	bl	80046fc <RCCEx_PLL3_Config>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003fee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d003      	beq.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ff6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ffa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8003ffe:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8004002:	2b00      	cmp	r3, #0
 8004004:	d101      	bne.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004006:	2300      	movs	r3, #0
 8004008:	e000      	b.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
}
 800400c:	4618      	mov	r0, r3
 800400e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8004012:	46bd      	mov	sp, r7
 8004014:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004018:	58024400 	.word	0x58024400

0800401c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004020:	f7fe fd96 	bl	8002b50 <HAL_RCC_GetHCLKFreq>
 8004024:	4602      	mov	r2, r0
 8004026:	4b06      	ldr	r3, [pc, #24]	@ (8004040 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004028:	6a1b      	ldr	r3, [r3, #32]
 800402a:	091b      	lsrs	r3, r3, #4
 800402c:	f003 0307 	and.w	r3, r3, #7
 8004030:	4904      	ldr	r1, [pc, #16]	@ (8004044 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004032:	5ccb      	ldrb	r3, [r1, r3]
 8004034:	f003 031f 	and.w	r3, r3, #31
 8004038:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800403c:	4618      	mov	r0, r3
 800403e:	bd80      	pop	{r7, pc}
 8004040:	58024400 	.word	0x58024400
 8004044:	080069b0 	.word	0x080069b0

08004048 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004048:	b480      	push	{r7}
 800404a:	b089      	sub	sp, #36	@ 0x24
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004050:	4ba1      	ldr	r3, [pc, #644]	@ (80042d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004052:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004054:	f003 0303 	and.w	r3, r3, #3
 8004058:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800405a:	4b9f      	ldr	r3, [pc, #636]	@ (80042d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800405c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800405e:	0b1b      	lsrs	r3, r3, #12
 8004060:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004064:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004066:	4b9c      	ldr	r3, [pc, #624]	@ (80042d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004068:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800406a:	091b      	lsrs	r3, r3, #4
 800406c:	f003 0301 	and.w	r3, r3, #1
 8004070:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004072:	4b99      	ldr	r3, [pc, #612]	@ (80042d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004074:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004076:	08db      	lsrs	r3, r3, #3
 8004078:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800407c:	693a      	ldr	r2, [r7, #16]
 800407e:	fb02 f303 	mul.w	r3, r2, r3
 8004082:	ee07 3a90 	vmov	s15, r3
 8004086:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800408a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	2b00      	cmp	r3, #0
 8004092:	f000 8111 	beq.w	80042b8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004096:	69bb      	ldr	r3, [r7, #24]
 8004098:	2b02      	cmp	r3, #2
 800409a:	f000 8083 	beq.w	80041a4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800409e:	69bb      	ldr	r3, [r7, #24]
 80040a0:	2b02      	cmp	r3, #2
 80040a2:	f200 80a1 	bhi.w	80041e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80040a6:	69bb      	ldr	r3, [r7, #24]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d003      	beq.n	80040b4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80040ac:	69bb      	ldr	r3, [r7, #24]
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d056      	beq.n	8004160 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80040b2:	e099      	b.n	80041e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80040b4:	4b88      	ldr	r3, [pc, #544]	@ (80042d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 0320 	and.w	r3, r3, #32
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d02d      	beq.n	800411c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80040c0:	4b85      	ldr	r3, [pc, #532]	@ (80042d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	08db      	lsrs	r3, r3, #3
 80040c6:	f003 0303 	and.w	r3, r3, #3
 80040ca:	4a84      	ldr	r2, [pc, #528]	@ (80042dc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80040cc:	fa22 f303 	lsr.w	r3, r2, r3
 80040d0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	ee07 3a90 	vmov	s15, r3
 80040d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	ee07 3a90 	vmov	s15, r3
 80040e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040ea:	4b7b      	ldr	r3, [pc, #492]	@ (80042d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80040ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040f2:	ee07 3a90 	vmov	s15, r3
 80040f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80040fe:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80042e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004102:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004106:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800410a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800410e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004112:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004116:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800411a:	e087      	b.n	800422c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	ee07 3a90 	vmov	s15, r3
 8004122:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004126:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80042e4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800412a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800412e:	4b6a      	ldr	r3, [pc, #424]	@ (80042d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004130:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004132:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004136:	ee07 3a90 	vmov	s15, r3
 800413a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800413e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004142:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80042e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004146:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800414a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800414e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004152:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004156:	ee67 7a27 	vmul.f32	s15, s14, s15
 800415a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800415e:	e065      	b.n	800422c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	ee07 3a90 	vmov	s15, r3
 8004166:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800416a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80042e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800416e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004172:	4b59      	ldr	r3, [pc, #356]	@ (80042d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004174:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004176:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800417a:	ee07 3a90 	vmov	s15, r3
 800417e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004182:	ed97 6a03 	vldr	s12, [r7, #12]
 8004186:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80042e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800418a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800418e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004192:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004196:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800419a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800419e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80041a2:	e043      	b.n	800422c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	ee07 3a90 	vmov	s15, r3
 80041aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041ae:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80042ec <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80041b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041b6:	4b48      	ldr	r3, [pc, #288]	@ (80042d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80041b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041be:	ee07 3a90 	vmov	s15, r3
 80041c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80041ca:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80042e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80041ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80041d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80041da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80041e6:	e021      	b.n	800422c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	ee07 3a90 	vmov	s15, r3
 80041ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041f2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80042e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80041f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041fa:	4b37      	ldr	r3, [pc, #220]	@ (80042d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80041fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004202:	ee07 3a90 	vmov	s15, r3
 8004206:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800420a:	ed97 6a03 	vldr	s12, [r7, #12]
 800420e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80042e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004212:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004216:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800421a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800421e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004222:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004226:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800422a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800422c:	4b2a      	ldr	r3, [pc, #168]	@ (80042d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800422e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004230:	0a5b      	lsrs	r3, r3, #9
 8004232:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004236:	ee07 3a90 	vmov	s15, r3
 800423a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800423e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004242:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004246:	edd7 6a07 	vldr	s13, [r7, #28]
 800424a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800424e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004252:	ee17 2a90 	vmov	r2, s15
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800425a:	4b1f      	ldr	r3, [pc, #124]	@ (80042d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800425c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800425e:	0c1b      	lsrs	r3, r3, #16
 8004260:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004264:	ee07 3a90 	vmov	s15, r3
 8004268:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800426c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004270:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004274:	edd7 6a07 	vldr	s13, [r7, #28]
 8004278:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800427c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004280:	ee17 2a90 	vmov	r2, s15
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004288:	4b13      	ldr	r3, [pc, #76]	@ (80042d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800428a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800428c:	0e1b      	lsrs	r3, r3, #24
 800428e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004292:	ee07 3a90 	vmov	s15, r3
 8004296:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800429a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800429e:	ee37 7a87 	vadd.f32	s14, s15, s14
 80042a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80042a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80042aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80042ae:	ee17 2a90 	vmov	r2, s15
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80042b6:	e008      	b.n	80042ca <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2200      	movs	r2, #0
 80042bc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2200      	movs	r2, #0
 80042c2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2200      	movs	r2, #0
 80042c8:	609a      	str	r2, [r3, #8]
}
 80042ca:	bf00      	nop
 80042cc:	3724      	adds	r7, #36	@ 0x24
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr
 80042d6:	bf00      	nop
 80042d8:	58024400 	.word	0x58024400
 80042dc:	03d09000 	.word	0x03d09000
 80042e0:	46000000 	.word	0x46000000
 80042e4:	4c742400 	.word	0x4c742400
 80042e8:	4a742400 	.word	0x4a742400
 80042ec:	4af42400 	.word	0x4af42400

080042f0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b089      	sub	sp, #36	@ 0x24
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80042f8:	4ba1      	ldr	r3, [pc, #644]	@ (8004580 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80042fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042fc:	f003 0303 	and.w	r3, r3, #3
 8004300:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004302:	4b9f      	ldr	r3, [pc, #636]	@ (8004580 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004304:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004306:	0d1b      	lsrs	r3, r3, #20
 8004308:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800430c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800430e:	4b9c      	ldr	r3, [pc, #624]	@ (8004580 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004310:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004312:	0a1b      	lsrs	r3, r3, #8
 8004314:	f003 0301 	and.w	r3, r3, #1
 8004318:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800431a:	4b99      	ldr	r3, [pc, #612]	@ (8004580 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800431c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800431e:	08db      	lsrs	r3, r3, #3
 8004320:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004324:	693a      	ldr	r2, [r7, #16]
 8004326:	fb02 f303 	mul.w	r3, r2, r3
 800432a:	ee07 3a90 	vmov	s15, r3
 800432e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004332:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	2b00      	cmp	r3, #0
 800433a:	f000 8111 	beq.w	8004560 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800433e:	69bb      	ldr	r3, [r7, #24]
 8004340:	2b02      	cmp	r3, #2
 8004342:	f000 8083 	beq.w	800444c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004346:	69bb      	ldr	r3, [r7, #24]
 8004348:	2b02      	cmp	r3, #2
 800434a:	f200 80a1 	bhi.w	8004490 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800434e:	69bb      	ldr	r3, [r7, #24]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d003      	beq.n	800435c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004354:	69bb      	ldr	r3, [r7, #24]
 8004356:	2b01      	cmp	r3, #1
 8004358:	d056      	beq.n	8004408 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800435a:	e099      	b.n	8004490 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800435c:	4b88      	ldr	r3, [pc, #544]	@ (8004580 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 0320 	and.w	r3, r3, #32
 8004364:	2b00      	cmp	r3, #0
 8004366:	d02d      	beq.n	80043c4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004368:	4b85      	ldr	r3, [pc, #532]	@ (8004580 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	08db      	lsrs	r3, r3, #3
 800436e:	f003 0303 	and.w	r3, r3, #3
 8004372:	4a84      	ldr	r2, [pc, #528]	@ (8004584 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004374:	fa22 f303 	lsr.w	r3, r2, r3
 8004378:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	ee07 3a90 	vmov	s15, r3
 8004380:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	ee07 3a90 	vmov	s15, r3
 800438a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800438e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004392:	4b7b      	ldr	r3, [pc, #492]	@ (8004580 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004396:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800439a:	ee07 3a90 	vmov	s15, r3
 800439e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80043a6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004588 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80043aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80043b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043be:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80043c2:	e087      	b.n	80044d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	ee07 3a90 	vmov	s15, r3
 80043ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043ce:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800458c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80043d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043d6:	4b6a      	ldr	r3, [pc, #424]	@ (8004580 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80043d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043de:	ee07 3a90 	vmov	s15, r3
 80043e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80043ea:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004588 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80043ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80043fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004402:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004406:	e065      	b.n	80044d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	ee07 3a90 	vmov	s15, r3
 800440e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004412:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004590 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004416:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800441a:	4b59      	ldr	r3, [pc, #356]	@ (8004580 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800441c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800441e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004422:	ee07 3a90 	vmov	s15, r3
 8004426:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800442a:	ed97 6a03 	vldr	s12, [r7, #12]
 800442e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004588 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004432:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004436:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800443a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800443e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004442:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004446:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800444a:	e043      	b.n	80044d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	ee07 3a90 	vmov	s15, r3
 8004452:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004456:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004594 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800445a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800445e:	4b48      	ldr	r3, [pc, #288]	@ (8004580 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004462:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004466:	ee07 3a90 	vmov	s15, r3
 800446a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800446e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004472:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004588 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004476:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800447a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800447e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004482:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004486:	ee67 7a27 	vmul.f32	s15, s14, s15
 800448a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800448e:	e021      	b.n	80044d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	ee07 3a90 	vmov	s15, r3
 8004496:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800449a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004590 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800449e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044a2:	4b37      	ldr	r3, [pc, #220]	@ (8004580 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80044a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044aa:	ee07 3a90 	vmov	s15, r3
 80044ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80044b6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004588 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80044ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80044c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80044d2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80044d4:	4b2a      	ldr	r3, [pc, #168]	@ (8004580 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80044d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044d8:	0a5b      	lsrs	r3, r3, #9
 80044da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80044de:	ee07 3a90 	vmov	s15, r3
 80044e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044e6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80044ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 80044ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80044f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80044f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044fa:	ee17 2a90 	vmov	r2, s15
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004502:	4b1f      	ldr	r3, [pc, #124]	@ (8004580 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004506:	0c1b      	lsrs	r3, r3, #16
 8004508:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800450c:	ee07 3a90 	vmov	s15, r3
 8004510:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004514:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004518:	ee37 7a87 	vadd.f32	s14, s15, s14
 800451c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004520:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004524:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004528:	ee17 2a90 	vmov	r2, s15
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004530:	4b13      	ldr	r3, [pc, #76]	@ (8004580 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004532:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004534:	0e1b      	lsrs	r3, r3, #24
 8004536:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800453a:	ee07 3a90 	vmov	s15, r3
 800453e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004542:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004546:	ee37 7a87 	vadd.f32	s14, s15, s14
 800454a:	edd7 6a07 	vldr	s13, [r7, #28]
 800454e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004552:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004556:	ee17 2a90 	vmov	r2, s15
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800455e:	e008      	b.n	8004572 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2200      	movs	r2, #0
 8004564:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2200      	movs	r2, #0
 800456a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2200      	movs	r2, #0
 8004570:	609a      	str	r2, [r3, #8]
}
 8004572:	bf00      	nop
 8004574:	3724      	adds	r7, #36	@ 0x24
 8004576:	46bd      	mov	sp, r7
 8004578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457c:	4770      	bx	lr
 800457e:	bf00      	nop
 8004580:	58024400 	.word	0x58024400
 8004584:	03d09000 	.word	0x03d09000
 8004588:	46000000 	.word	0x46000000
 800458c:	4c742400 	.word	0x4c742400
 8004590:	4a742400 	.word	0x4a742400
 8004594:	4af42400 	.word	0x4af42400

08004598 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b084      	sub	sp, #16
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
 80045a0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80045a2:	2300      	movs	r3, #0
 80045a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80045a6:	4b53      	ldr	r3, [pc, #332]	@ (80046f4 <RCCEx_PLL2_Config+0x15c>)
 80045a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045aa:	f003 0303 	and.w	r3, r3, #3
 80045ae:	2b03      	cmp	r3, #3
 80045b0:	d101      	bne.n	80045b6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	e099      	b.n	80046ea <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80045b6:	4b4f      	ldr	r3, [pc, #316]	@ (80046f4 <RCCEx_PLL2_Config+0x15c>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a4e      	ldr	r2, [pc, #312]	@ (80046f4 <RCCEx_PLL2_Config+0x15c>)
 80045bc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80045c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045c2:	f7fc feff 	bl	80013c4 <HAL_GetTick>
 80045c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80045c8:	e008      	b.n	80045dc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80045ca:	f7fc fefb 	bl	80013c4 <HAL_GetTick>
 80045ce:	4602      	mov	r2, r0
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	1ad3      	subs	r3, r2, r3
 80045d4:	2b02      	cmp	r3, #2
 80045d6:	d901      	bls.n	80045dc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80045d8:	2303      	movs	r3, #3
 80045da:	e086      	b.n	80046ea <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80045dc:	4b45      	ldr	r3, [pc, #276]	@ (80046f4 <RCCEx_PLL2_Config+0x15c>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d1f0      	bne.n	80045ca <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80045e8:	4b42      	ldr	r3, [pc, #264]	@ (80046f4 <RCCEx_PLL2_Config+0x15c>)
 80045ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045ec:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	031b      	lsls	r3, r3, #12
 80045f6:	493f      	ldr	r1, [pc, #252]	@ (80046f4 <RCCEx_PLL2_Config+0x15c>)
 80045f8:	4313      	orrs	r3, r2
 80045fa:	628b      	str	r3, [r1, #40]	@ 0x28
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	3b01      	subs	r3, #1
 8004602:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	3b01      	subs	r3, #1
 800460c:	025b      	lsls	r3, r3, #9
 800460e:	b29b      	uxth	r3, r3
 8004610:	431a      	orrs	r2, r3
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	68db      	ldr	r3, [r3, #12]
 8004616:	3b01      	subs	r3, #1
 8004618:	041b      	lsls	r3, r3, #16
 800461a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800461e:	431a      	orrs	r2, r3
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	691b      	ldr	r3, [r3, #16]
 8004624:	3b01      	subs	r3, #1
 8004626:	061b      	lsls	r3, r3, #24
 8004628:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800462c:	4931      	ldr	r1, [pc, #196]	@ (80046f4 <RCCEx_PLL2_Config+0x15c>)
 800462e:	4313      	orrs	r3, r2
 8004630:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004632:	4b30      	ldr	r3, [pc, #192]	@ (80046f4 <RCCEx_PLL2_Config+0x15c>)
 8004634:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004636:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	695b      	ldr	r3, [r3, #20]
 800463e:	492d      	ldr	r1, [pc, #180]	@ (80046f4 <RCCEx_PLL2_Config+0x15c>)
 8004640:	4313      	orrs	r3, r2
 8004642:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004644:	4b2b      	ldr	r3, [pc, #172]	@ (80046f4 <RCCEx_PLL2_Config+0x15c>)
 8004646:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004648:	f023 0220 	bic.w	r2, r3, #32
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	699b      	ldr	r3, [r3, #24]
 8004650:	4928      	ldr	r1, [pc, #160]	@ (80046f4 <RCCEx_PLL2_Config+0x15c>)
 8004652:	4313      	orrs	r3, r2
 8004654:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004656:	4b27      	ldr	r3, [pc, #156]	@ (80046f4 <RCCEx_PLL2_Config+0x15c>)
 8004658:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800465a:	4a26      	ldr	r2, [pc, #152]	@ (80046f4 <RCCEx_PLL2_Config+0x15c>)
 800465c:	f023 0310 	bic.w	r3, r3, #16
 8004660:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004662:	4b24      	ldr	r3, [pc, #144]	@ (80046f4 <RCCEx_PLL2_Config+0x15c>)
 8004664:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004666:	4b24      	ldr	r3, [pc, #144]	@ (80046f8 <RCCEx_PLL2_Config+0x160>)
 8004668:	4013      	ands	r3, r2
 800466a:	687a      	ldr	r2, [r7, #4]
 800466c:	69d2      	ldr	r2, [r2, #28]
 800466e:	00d2      	lsls	r2, r2, #3
 8004670:	4920      	ldr	r1, [pc, #128]	@ (80046f4 <RCCEx_PLL2_Config+0x15c>)
 8004672:	4313      	orrs	r3, r2
 8004674:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004676:	4b1f      	ldr	r3, [pc, #124]	@ (80046f4 <RCCEx_PLL2_Config+0x15c>)
 8004678:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800467a:	4a1e      	ldr	r2, [pc, #120]	@ (80046f4 <RCCEx_PLL2_Config+0x15c>)
 800467c:	f043 0310 	orr.w	r3, r3, #16
 8004680:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d106      	bne.n	8004696 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004688:	4b1a      	ldr	r3, [pc, #104]	@ (80046f4 <RCCEx_PLL2_Config+0x15c>)
 800468a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800468c:	4a19      	ldr	r2, [pc, #100]	@ (80046f4 <RCCEx_PLL2_Config+0x15c>)
 800468e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004692:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004694:	e00f      	b.n	80046b6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	2b01      	cmp	r3, #1
 800469a:	d106      	bne.n	80046aa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800469c:	4b15      	ldr	r3, [pc, #84]	@ (80046f4 <RCCEx_PLL2_Config+0x15c>)
 800469e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046a0:	4a14      	ldr	r2, [pc, #80]	@ (80046f4 <RCCEx_PLL2_Config+0x15c>)
 80046a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80046a6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80046a8:	e005      	b.n	80046b6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80046aa:	4b12      	ldr	r3, [pc, #72]	@ (80046f4 <RCCEx_PLL2_Config+0x15c>)
 80046ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046ae:	4a11      	ldr	r2, [pc, #68]	@ (80046f4 <RCCEx_PLL2_Config+0x15c>)
 80046b0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80046b4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80046b6:	4b0f      	ldr	r3, [pc, #60]	@ (80046f4 <RCCEx_PLL2_Config+0x15c>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a0e      	ldr	r2, [pc, #56]	@ (80046f4 <RCCEx_PLL2_Config+0x15c>)
 80046bc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80046c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046c2:	f7fc fe7f 	bl	80013c4 <HAL_GetTick>
 80046c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80046c8:	e008      	b.n	80046dc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80046ca:	f7fc fe7b 	bl	80013c4 <HAL_GetTick>
 80046ce:	4602      	mov	r2, r0
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	1ad3      	subs	r3, r2, r3
 80046d4:	2b02      	cmp	r3, #2
 80046d6:	d901      	bls.n	80046dc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80046d8:	2303      	movs	r3, #3
 80046da:	e006      	b.n	80046ea <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80046dc:	4b05      	ldr	r3, [pc, #20]	@ (80046f4 <RCCEx_PLL2_Config+0x15c>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d0f0      	beq.n	80046ca <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80046e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3710      	adds	r7, #16
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}
 80046f2:	bf00      	nop
 80046f4:	58024400 	.word	0x58024400
 80046f8:	ffff0007 	.word	0xffff0007

080046fc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b084      	sub	sp, #16
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
 8004704:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004706:	2300      	movs	r3, #0
 8004708:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800470a:	4b53      	ldr	r3, [pc, #332]	@ (8004858 <RCCEx_PLL3_Config+0x15c>)
 800470c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800470e:	f003 0303 	and.w	r3, r3, #3
 8004712:	2b03      	cmp	r3, #3
 8004714:	d101      	bne.n	800471a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	e099      	b.n	800484e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800471a:	4b4f      	ldr	r3, [pc, #316]	@ (8004858 <RCCEx_PLL3_Config+0x15c>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a4e      	ldr	r2, [pc, #312]	@ (8004858 <RCCEx_PLL3_Config+0x15c>)
 8004720:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004724:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004726:	f7fc fe4d 	bl	80013c4 <HAL_GetTick>
 800472a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800472c:	e008      	b.n	8004740 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800472e:	f7fc fe49 	bl	80013c4 <HAL_GetTick>
 8004732:	4602      	mov	r2, r0
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	1ad3      	subs	r3, r2, r3
 8004738:	2b02      	cmp	r3, #2
 800473a:	d901      	bls.n	8004740 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800473c:	2303      	movs	r3, #3
 800473e:	e086      	b.n	800484e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004740:	4b45      	ldr	r3, [pc, #276]	@ (8004858 <RCCEx_PLL3_Config+0x15c>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004748:	2b00      	cmp	r3, #0
 800474a:	d1f0      	bne.n	800472e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800474c:	4b42      	ldr	r3, [pc, #264]	@ (8004858 <RCCEx_PLL3_Config+0x15c>)
 800474e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004750:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	051b      	lsls	r3, r3, #20
 800475a:	493f      	ldr	r1, [pc, #252]	@ (8004858 <RCCEx_PLL3_Config+0x15c>)
 800475c:	4313      	orrs	r3, r2
 800475e:	628b      	str	r3, [r1, #40]	@ 0x28
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	3b01      	subs	r3, #1
 8004766:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	3b01      	subs	r3, #1
 8004770:	025b      	lsls	r3, r3, #9
 8004772:	b29b      	uxth	r3, r3
 8004774:	431a      	orrs	r2, r3
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	68db      	ldr	r3, [r3, #12]
 800477a:	3b01      	subs	r3, #1
 800477c:	041b      	lsls	r3, r3, #16
 800477e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004782:	431a      	orrs	r2, r3
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	691b      	ldr	r3, [r3, #16]
 8004788:	3b01      	subs	r3, #1
 800478a:	061b      	lsls	r3, r3, #24
 800478c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004790:	4931      	ldr	r1, [pc, #196]	@ (8004858 <RCCEx_PLL3_Config+0x15c>)
 8004792:	4313      	orrs	r3, r2
 8004794:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004796:	4b30      	ldr	r3, [pc, #192]	@ (8004858 <RCCEx_PLL3_Config+0x15c>)
 8004798:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800479a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	695b      	ldr	r3, [r3, #20]
 80047a2:	492d      	ldr	r1, [pc, #180]	@ (8004858 <RCCEx_PLL3_Config+0x15c>)
 80047a4:	4313      	orrs	r3, r2
 80047a6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80047a8:	4b2b      	ldr	r3, [pc, #172]	@ (8004858 <RCCEx_PLL3_Config+0x15c>)
 80047aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047ac:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	699b      	ldr	r3, [r3, #24]
 80047b4:	4928      	ldr	r1, [pc, #160]	@ (8004858 <RCCEx_PLL3_Config+0x15c>)
 80047b6:	4313      	orrs	r3, r2
 80047b8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80047ba:	4b27      	ldr	r3, [pc, #156]	@ (8004858 <RCCEx_PLL3_Config+0x15c>)
 80047bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047be:	4a26      	ldr	r2, [pc, #152]	@ (8004858 <RCCEx_PLL3_Config+0x15c>)
 80047c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80047c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80047c6:	4b24      	ldr	r3, [pc, #144]	@ (8004858 <RCCEx_PLL3_Config+0x15c>)
 80047c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80047ca:	4b24      	ldr	r3, [pc, #144]	@ (800485c <RCCEx_PLL3_Config+0x160>)
 80047cc:	4013      	ands	r3, r2
 80047ce:	687a      	ldr	r2, [r7, #4]
 80047d0:	69d2      	ldr	r2, [r2, #28]
 80047d2:	00d2      	lsls	r2, r2, #3
 80047d4:	4920      	ldr	r1, [pc, #128]	@ (8004858 <RCCEx_PLL3_Config+0x15c>)
 80047d6:	4313      	orrs	r3, r2
 80047d8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80047da:	4b1f      	ldr	r3, [pc, #124]	@ (8004858 <RCCEx_PLL3_Config+0x15c>)
 80047dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047de:	4a1e      	ldr	r2, [pc, #120]	@ (8004858 <RCCEx_PLL3_Config+0x15c>)
 80047e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d106      	bne.n	80047fa <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80047ec:	4b1a      	ldr	r3, [pc, #104]	@ (8004858 <RCCEx_PLL3_Config+0x15c>)
 80047ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047f0:	4a19      	ldr	r2, [pc, #100]	@ (8004858 <RCCEx_PLL3_Config+0x15c>)
 80047f2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80047f6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80047f8:	e00f      	b.n	800481a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d106      	bne.n	800480e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004800:	4b15      	ldr	r3, [pc, #84]	@ (8004858 <RCCEx_PLL3_Config+0x15c>)
 8004802:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004804:	4a14      	ldr	r2, [pc, #80]	@ (8004858 <RCCEx_PLL3_Config+0x15c>)
 8004806:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800480a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800480c:	e005      	b.n	800481a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800480e:	4b12      	ldr	r3, [pc, #72]	@ (8004858 <RCCEx_PLL3_Config+0x15c>)
 8004810:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004812:	4a11      	ldr	r2, [pc, #68]	@ (8004858 <RCCEx_PLL3_Config+0x15c>)
 8004814:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004818:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800481a:	4b0f      	ldr	r3, [pc, #60]	@ (8004858 <RCCEx_PLL3_Config+0x15c>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a0e      	ldr	r2, [pc, #56]	@ (8004858 <RCCEx_PLL3_Config+0x15c>)
 8004820:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004824:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004826:	f7fc fdcd 	bl	80013c4 <HAL_GetTick>
 800482a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800482c:	e008      	b.n	8004840 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800482e:	f7fc fdc9 	bl	80013c4 <HAL_GetTick>
 8004832:	4602      	mov	r2, r0
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	1ad3      	subs	r3, r2, r3
 8004838:	2b02      	cmp	r3, #2
 800483a:	d901      	bls.n	8004840 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800483c:	2303      	movs	r3, #3
 800483e:	e006      	b.n	800484e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004840:	4b05      	ldr	r3, [pc, #20]	@ (8004858 <RCCEx_PLL3_Config+0x15c>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004848:	2b00      	cmp	r3, #0
 800484a:	d0f0      	beq.n	800482e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800484c:	7bfb      	ldrb	r3, [r7, #15]
}
 800484e:	4618      	mov	r0, r3
 8004850:	3710      	adds	r7, #16
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
 8004856:	bf00      	nop
 8004858:	58024400 	.word	0x58024400
 800485c:	ffff0007 	.word	0xffff0007

08004860 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b082      	sub	sp, #8
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d101      	bne.n	8004872 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	e042      	b.n	80048f8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004878:	2b00      	cmp	r3, #0
 800487a:	d106      	bne.n	800488a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2200      	movs	r2, #0
 8004880:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f7fc f9bd 	bl	8000c04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2224      	movs	r2, #36	@ 0x24
 800488e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f022 0201 	bic.w	r2, r2, #1
 80048a0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d002      	beq.n	80048b0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f000 fe1e 	bl	80054ec <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80048b0:	6878      	ldr	r0, [r7, #4]
 80048b2:	f000 f8b3 	bl	8004a1c <UART_SetConfig>
 80048b6:	4603      	mov	r3, r0
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d101      	bne.n	80048c0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80048bc:	2301      	movs	r3, #1
 80048be:	e01b      	b.n	80048f8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	685a      	ldr	r2, [r3, #4]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80048ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	689a      	ldr	r2, [r3, #8]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80048de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f042 0201 	orr.w	r2, r2, #1
 80048ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f000 fe9d 	bl	8005630 <UART_CheckIdleState>
 80048f6:	4603      	mov	r3, r0
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	3708      	adds	r7, #8
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}

08004900 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b08a      	sub	sp, #40	@ 0x28
 8004904:	af02      	add	r7, sp, #8
 8004906:	60f8      	str	r0, [r7, #12]
 8004908:	60b9      	str	r1, [r7, #8]
 800490a:	603b      	str	r3, [r7, #0]
 800490c:	4613      	mov	r3, r2
 800490e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004916:	2b20      	cmp	r3, #32
 8004918:	d17b      	bne.n	8004a12 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d002      	beq.n	8004926 <HAL_UART_Transmit+0x26>
 8004920:	88fb      	ldrh	r3, [r7, #6]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d101      	bne.n	800492a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	e074      	b.n	8004a14 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2200      	movs	r2, #0
 800492e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2221      	movs	r2, #33	@ 0x21
 8004936:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800493a:	f7fc fd43 	bl	80013c4 <HAL_GetTick>
 800493e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	88fa      	ldrh	r2, [r7, #6]
 8004944:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	88fa      	ldrh	r2, [r7, #6]
 800494c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004958:	d108      	bne.n	800496c <HAL_UART_Transmit+0x6c>
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	691b      	ldr	r3, [r3, #16]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d104      	bne.n	800496c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004962:	2300      	movs	r3, #0
 8004964:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	61bb      	str	r3, [r7, #24]
 800496a:	e003      	b.n	8004974 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004970:	2300      	movs	r3, #0
 8004972:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004974:	e030      	b.n	80049d8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	9300      	str	r3, [sp, #0]
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	2200      	movs	r2, #0
 800497e:	2180      	movs	r1, #128	@ 0x80
 8004980:	68f8      	ldr	r0, [r7, #12]
 8004982:	f000 feff 	bl	8005784 <UART_WaitOnFlagUntilTimeout>
 8004986:	4603      	mov	r3, r0
 8004988:	2b00      	cmp	r3, #0
 800498a:	d005      	beq.n	8004998 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2220      	movs	r2, #32
 8004990:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8004994:	2303      	movs	r3, #3
 8004996:	e03d      	b.n	8004a14 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004998:	69fb      	ldr	r3, [r7, #28]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d10b      	bne.n	80049b6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800499e:	69bb      	ldr	r3, [r7, #24]
 80049a0:	881b      	ldrh	r3, [r3, #0]
 80049a2:	461a      	mov	r2, r3
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049ac:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80049ae:	69bb      	ldr	r3, [r7, #24]
 80049b0:	3302      	adds	r3, #2
 80049b2:	61bb      	str	r3, [r7, #24]
 80049b4:	e007      	b.n	80049c6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80049b6:	69fb      	ldr	r3, [r7, #28]
 80049b8:	781a      	ldrb	r2, [r3, #0]
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80049c0:	69fb      	ldr	r3, [r7, #28]
 80049c2:	3301      	adds	r3, #1
 80049c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80049cc:	b29b      	uxth	r3, r3
 80049ce:	3b01      	subs	r3, #1
 80049d0:	b29a      	uxth	r2, r3
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80049de:	b29b      	uxth	r3, r3
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d1c8      	bne.n	8004976 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	9300      	str	r3, [sp, #0]
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	2200      	movs	r2, #0
 80049ec:	2140      	movs	r1, #64	@ 0x40
 80049ee:	68f8      	ldr	r0, [r7, #12]
 80049f0:	f000 fec8 	bl	8005784 <UART_WaitOnFlagUntilTimeout>
 80049f4:	4603      	mov	r3, r0
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d005      	beq.n	8004a06 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2220      	movs	r2, #32
 80049fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8004a02:	2303      	movs	r3, #3
 8004a04:	e006      	b.n	8004a14 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2220      	movs	r2, #32
 8004a0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	e000      	b.n	8004a14 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8004a12:	2302      	movs	r3, #2
  }
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	3720      	adds	r7, #32
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}

08004a1c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a20:	b092      	sub	sp, #72	@ 0x48
 8004a22:	af00      	add	r7, sp, #0
 8004a24:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004a26:	2300      	movs	r3, #0
 8004a28:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	689a      	ldr	r2, [r3, #8]
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	691b      	ldr	r3, [r3, #16]
 8004a34:	431a      	orrs	r2, r3
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	695b      	ldr	r3, [r3, #20]
 8004a3a:	431a      	orrs	r2, r3
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	69db      	ldr	r3, [r3, #28]
 8004a40:	4313      	orrs	r3, r2
 8004a42:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	4bbe      	ldr	r3, [pc, #760]	@ (8004d44 <UART_SetConfig+0x328>)
 8004a4c:	4013      	ands	r3, r2
 8004a4e:	697a      	ldr	r2, [r7, #20]
 8004a50:	6812      	ldr	r2, [r2, #0]
 8004a52:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004a54:	430b      	orrs	r3, r1
 8004a56:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	68da      	ldr	r2, [r3, #12]
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	430a      	orrs	r2, r1
 8004a6c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	699b      	ldr	r3, [r3, #24]
 8004a72:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4ab3      	ldr	r2, [pc, #716]	@ (8004d48 <UART_SetConfig+0x32c>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d004      	beq.n	8004a88 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	6a1b      	ldr	r3, [r3, #32]
 8004a82:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004a84:	4313      	orrs	r3, r2
 8004a86:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	689a      	ldr	r2, [r3, #8]
 8004a8e:	4baf      	ldr	r3, [pc, #700]	@ (8004d4c <UART_SetConfig+0x330>)
 8004a90:	4013      	ands	r3, r2
 8004a92:	697a      	ldr	r2, [r7, #20]
 8004a94:	6812      	ldr	r2, [r2, #0]
 8004a96:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004a98:	430b      	orrs	r3, r1
 8004a9a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004aa2:	f023 010f 	bic.w	r1, r3, #15
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	430a      	orrs	r2, r1
 8004ab0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4aa6      	ldr	r2, [pc, #664]	@ (8004d50 <UART_SetConfig+0x334>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d177      	bne.n	8004bac <UART_SetConfig+0x190>
 8004abc:	4ba5      	ldr	r3, [pc, #660]	@ (8004d54 <UART_SetConfig+0x338>)
 8004abe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ac0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004ac4:	2b28      	cmp	r3, #40	@ 0x28
 8004ac6:	d86d      	bhi.n	8004ba4 <UART_SetConfig+0x188>
 8004ac8:	a201      	add	r2, pc, #4	@ (adr r2, 8004ad0 <UART_SetConfig+0xb4>)
 8004aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ace:	bf00      	nop
 8004ad0:	08004b75 	.word	0x08004b75
 8004ad4:	08004ba5 	.word	0x08004ba5
 8004ad8:	08004ba5 	.word	0x08004ba5
 8004adc:	08004ba5 	.word	0x08004ba5
 8004ae0:	08004ba5 	.word	0x08004ba5
 8004ae4:	08004ba5 	.word	0x08004ba5
 8004ae8:	08004ba5 	.word	0x08004ba5
 8004aec:	08004ba5 	.word	0x08004ba5
 8004af0:	08004b7d 	.word	0x08004b7d
 8004af4:	08004ba5 	.word	0x08004ba5
 8004af8:	08004ba5 	.word	0x08004ba5
 8004afc:	08004ba5 	.word	0x08004ba5
 8004b00:	08004ba5 	.word	0x08004ba5
 8004b04:	08004ba5 	.word	0x08004ba5
 8004b08:	08004ba5 	.word	0x08004ba5
 8004b0c:	08004ba5 	.word	0x08004ba5
 8004b10:	08004b85 	.word	0x08004b85
 8004b14:	08004ba5 	.word	0x08004ba5
 8004b18:	08004ba5 	.word	0x08004ba5
 8004b1c:	08004ba5 	.word	0x08004ba5
 8004b20:	08004ba5 	.word	0x08004ba5
 8004b24:	08004ba5 	.word	0x08004ba5
 8004b28:	08004ba5 	.word	0x08004ba5
 8004b2c:	08004ba5 	.word	0x08004ba5
 8004b30:	08004b8d 	.word	0x08004b8d
 8004b34:	08004ba5 	.word	0x08004ba5
 8004b38:	08004ba5 	.word	0x08004ba5
 8004b3c:	08004ba5 	.word	0x08004ba5
 8004b40:	08004ba5 	.word	0x08004ba5
 8004b44:	08004ba5 	.word	0x08004ba5
 8004b48:	08004ba5 	.word	0x08004ba5
 8004b4c:	08004ba5 	.word	0x08004ba5
 8004b50:	08004b95 	.word	0x08004b95
 8004b54:	08004ba5 	.word	0x08004ba5
 8004b58:	08004ba5 	.word	0x08004ba5
 8004b5c:	08004ba5 	.word	0x08004ba5
 8004b60:	08004ba5 	.word	0x08004ba5
 8004b64:	08004ba5 	.word	0x08004ba5
 8004b68:	08004ba5 	.word	0x08004ba5
 8004b6c:	08004ba5 	.word	0x08004ba5
 8004b70:	08004b9d 	.word	0x08004b9d
 8004b74:	2301      	movs	r3, #1
 8004b76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b7a:	e222      	b.n	8004fc2 <UART_SetConfig+0x5a6>
 8004b7c:	2304      	movs	r3, #4
 8004b7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b82:	e21e      	b.n	8004fc2 <UART_SetConfig+0x5a6>
 8004b84:	2308      	movs	r3, #8
 8004b86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b8a:	e21a      	b.n	8004fc2 <UART_SetConfig+0x5a6>
 8004b8c:	2310      	movs	r3, #16
 8004b8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b92:	e216      	b.n	8004fc2 <UART_SetConfig+0x5a6>
 8004b94:	2320      	movs	r3, #32
 8004b96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b9a:	e212      	b.n	8004fc2 <UART_SetConfig+0x5a6>
 8004b9c:	2340      	movs	r3, #64	@ 0x40
 8004b9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ba2:	e20e      	b.n	8004fc2 <UART_SetConfig+0x5a6>
 8004ba4:	2380      	movs	r3, #128	@ 0x80
 8004ba6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004baa:	e20a      	b.n	8004fc2 <UART_SetConfig+0x5a6>
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a69      	ldr	r2, [pc, #420]	@ (8004d58 <UART_SetConfig+0x33c>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d130      	bne.n	8004c18 <UART_SetConfig+0x1fc>
 8004bb6:	4b67      	ldr	r3, [pc, #412]	@ (8004d54 <UART_SetConfig+0x338>)
 8004bb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bba:	f003 0307 	and.w	r3, r3, #7
 8004bbe:	2b05      	cmp	r3, #5
 8004bc0:	d826      	bhi.n	8004c10 <UART_SetConfig+0x1f4>
 8004bc2:	a201      	add	r2, pc, #4	@ (adr r2, 8004bc8 <UART_SetConfig+0x1ac>)
 8004bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bc8:	08004be1 	.word	0x08004be1
 8004bcc:	08004be9 	.word	0x08004be9
 8004bd0:	08004bf1 	.word	0x08004bf1
 8004bd4:	08004bf9 	.word	0x08004bf9
 8004bd8:	08004c01 	.word	0x08004c01
 8004bdc:	08004c09 	.word	0x08004c09
 8004be0:	2300      	movs	r3, #0
 8004be2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004be6:	e1ec      	b.n	8004fc2 <UART_SetConfig+0x5a6>
 8004be8:	2304      	movs	r3, #4
 8004bea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004bee:	e1e8      	b.n	8004fc2 <UART_SetConfig+0x5a6>
 8004bf0:	2308      	movs	r3, #8
 8004bf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004bf6:	e1e4      	b.n	8004fc2 <UART_SetConfig+0x5a6>
 8004bf8:	2310      	movs	r3, #16
 8004bfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004bfe:	e1e0      	b.n	8004fc2 <UART_SetConfig+0x5a6>
 8004c00:	2320      	movs	r3, #32
 8004c02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c06:	e1dc      	b.n	8004fc2 <UART_SetConfig+0x5a6>
 8004c08:	2340      	movs	r3, #64	@ 0x40
 8004c0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c0e:	e1d8      	b.n	8004fc2 <UART_SetConfig+0x5a6>
 8004c10:	2380      	movs	r3, #128	@ 0x80
 8004c12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c16:	e1d4      	b.n	8004fc2 <UART_SetConfig+0x5a6>
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a4f      	ldr	r2, [pc, #316]	@ (8004d5c <UART_SetConfig+0x340>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d130      	bne.n	8004c84 <UART_SetConfig+0x268>
 8004c22:	4b4c      	ldr	r3, [pc, #304]	@ (8004d54 <UART_SetConfig+0x338>)
 8004c24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c26:	f003 0307 	and.w	r3, r3, #7
 8004c2a:	2b05      	cmp	r3, #5
 8004c2c:	d826      	bhi.n	8004c7c <UART_SetConfig+0x260>
 8004c2e:	a201      	add	r2, pc, #4	@ (adr r2, 8004c34 <UART_SetConfig+0x218>)
 8004c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c34:	08004c4d 	.word	0x08004c4d
 8004c38:	08004c55 	.word	0x08004c55
 8004c3c:	08004c5d 	.word	0x08004c5d
 8004c40:	08004c65 	.word	0x08004c65
 8004c44:	08004c6d 	.word	0x08004c6d
 8004c48:	08004c75 	.word	0x08004c75
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c52:	e1b6      	b.n	8004fc2 <UART_SetConfig+0x5a6>
 8004c54:	2304      	movs	r3, #4
 8004c56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c5a:	e1b2      	b.n	8004fc2 <UART_SetConfig+0x5a6>
 8004c5c:	2308      	movs	r3, #8
 8004c5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c62:	e1ae      	b.n	8004fc2 <UART_SetConfig+0x5a6>
 8004c64:	2310      	movs	r3, #16
 8004c66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c6a:	e1aa      	b.n	8004fc2 <UART_SetConfig+0x5a6>
 8004c6c:	2320      	movs	r3, #32
 8004c6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c72:	e1a6      	b.n	8004fc2 <UART_SetConfig+0x5a6>
 8004c74:	2340      	movs	r3, #64	@ 0x40
 8004c76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c7a:	e1a2      	b.n	8004fc2 <UART_SetConfig+0x5a6>
 8004c7c:	2380      	movs	r3, #128	@ 0x80
 8004c7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c82:	e19e      	b.n	8004fc2 <UART_SetConfig+0x5a6>
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a35      	ldr	r2, [pc, #212]	@ (8004d60 <UART_SetConfig+0x344>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d130      	bne.n	8004cf0 <UART_SetConfig+0x2d4>
 8004c8e:	4b31      	ldr	r3, [pc, #196]	@ (8004d54 <UART_SetConfig+0x338>)
 8004c90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c92:	f003 0307 	and.w	r3, r3, #7
 8004c96:	2b05      	cmp	r3, #5
 8004c98:	d826      	bhi.n	8004ce8 <UART_SetConfig+0x2cc>
 8004c9a:	a201      	add	r2, pc, #4	@ (adr r2, 8004ca0 <UART_SetConfig+0x284>)
 8004c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ca0:	08004cb9 	.word	0x08004cb9
 8004ca4:	08004cc1 	.word	0x08004cc1
 8004ca8:	08004cc9 	.word	0x08004cc9
 8004cac:	08004cd1 	.word	0x08004cd1
 8004cb0:	08004cd9 	.word	0x08004cd9
 8004cb4:	08004ce1 	.word	0x08004ce1
 8004cb8:	2300      	movs	r3, #0
 8004cba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004cbe:	e180      	b.n	8004fc2 <UART_SetConfig+0x5a6>
 8004cc0:	2304      	movs	r3, #4
 8004cc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004cc6:	e17c      	b.n	8004fc2 <UART_SetConfig+0x5a6>
 8004cc8:	2308      	movs	r3, #8
 8004cca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004cce:	e178      	b.n	8004fc2 <UART_SetConfig+0x5a6>
 8004cd0:	2310      	movs	r3, #16
 8004cd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004cd6:	e174      	b.n	8004fc2 <UART_SetConfig+0x5a6>
 8004cd8:	2320      	movs	r3, #32
 8004cda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004cde:	e170      	b.n	8004fc2 <UART_SetConfig+0x5a6>
 8004ce0:	2340      	movs	r3, #64	@ 0x40
 8004ce2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ce6:	e16c      	b.n	8004fc2 <UART_SetConfig+0x5a6>
 8004ce8:	2380      	movs	r3, #128	@ 0x80
 8004cea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004cee:	e168      	b.n	8004fc2 <UART_SetConfig+0x5a6>
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a1b      	ldr	r2, [pc, #108]	@ (8004d64 <UART_SetConfig+0x348>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d142      	bne.n	8004d80 <UART_SetConfig+0x364>
 8004cfa:	4b16      	ldr	r3, [pc, #88]	@ (8004d54 <UART_SetConfig+0x338>)
 8004cfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cfe:	f003 0307 	and.w	r3, r3, #7
 8004d02:	2b05      	cmp	r3, #5
 8004d04:	d838      	bhi.n	8004d78 <UART_SetConfig+0x35c>
 8004d06:	a201      	add	r2, pc, #4	@ (adr r2, 8004d0c <UART_SetConfig+0x2f0>)
 8004d08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d0c:	08004d25 	.word	0x08004d25
 8004d10:	08004d2d 	.word	0x08004d2d
 8004d14:	08004d35 	.word	0x08004d35
 8004d18:	08004d3d 	.word	0x08004d3d
 8004d1c:	08004d69 	.word	0x08004d69
 8004d20:	08004d71 	.word	0x08004d71
 8004d24:	2300      	movs	r3, #0
 8004d26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d2a:	e14a      	b.n	8004fc2 <UART_SetConfig+0x5a6>
 8004d2c:	2304      	movs	r3, #4
 8004d2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d32:	e146      	b.n	8004fc2 <UART_SetConfig+0x5a6>
 8004d34:	2308      	movs	r3, #8
 8004d36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d3a:	e142      	b.n	8004fc2 <UART_SetConfig+0x5a6>
 8004d3c:	2310      	movs	r3, #16
 8004d3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d42:	e13e      	b.n	8004fc2 <UART_SetConfig+0x5a6>
 8004d44:	cfff69f3 	.word	0xcfff69f3
 8004d48:	58000c00 	.word	0x58000c00
 8004d4c:	11fff4ff 	.word	0x11fff4ff
 8004d50:	40011000 	.word	0x40011000
 8004d54:	58024400 	.word	0x58024400
 8004d58:	40004400 	.word	0x40004400
 8004d5c:	40004800 	.word	0x40004800
 8004d60:	40004c00 	.word	0x40004c00
 8004d64:	40005000 	.word	0x40005000
 8004d68:	2320      	movs	r3, #32
 8004d6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d6e:	e128      	b.n	8004fc2 <UART_SetConfig+0x5a6>
 8004d70:	2340      	movs	r3, #64	@ 0x40
 8004d72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d76:	e124      	b.n	8004fc2 <UART_SetConfig+0x5a6>
 8004d78:	2380      	movs	r3, #128	@ 0x80
 8004d7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d7e:	e120      	b.n	8004fc2 <UART_SetConfig+0x5a6>
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4acb      	ldr	r2, [pc, #812]	@ (80050b4 <UART_SetConfig+0x698>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d176      	bne.n	8004e78 <UART_SetConfig+0x45c>
 8004d8a:	4bcb      	ldr	r3, [pc, #812]	@ (80050b8 <UART_SetConfig+0x69c>)
 8004d8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d8e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004d92:	2b28      	cmp	r3, #40	@ 0x28
 8004d94:	d86c      	bhi.n	8004e70 <UART_SetConfig+0x454>
 8004d96:	a201      	add	r2, pc, #4	@ (adr r2, 8004d9c <UART_SetConfig+0x380>)
 8004d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d9c:	08004e41 	.word	0x08004e41
 8004da0:	08004e71 	.word	0x08004e71
 8004da4:	08004e71 	.word	0x08004e71
 8004da8:	08004e71 	.word	0x08004e71
 8004dac:	08004e71 	.word	0x08004e71
 8004db0:	08004e71 	.word	0x08004e71
 8004db4:	08004e71 	.word	0x08004e71
 8004db8:	08004e71 	.word	0x08004e71
 8004dbc:	08004e49 	.word	0x08004e49
 8004dc0:	08004e71 	.word	0x08004e71
 8004dc4:	08004e71 	.word	0x08004e71
 8004dc8:	08004e71 	.word	0x08004e71
 8004dcc:	08004e71 	.word	0x08004e71
 8004dd0:	08004e71 	.word	0x08004e71
 8004dd4:	08004e71 	.word	0x08004e71
 8004dd8:	08004e71 	.word	0x08004e71
 8004ddc:	08004e51 	.word	0x08004e51
 8004de0:	08004e71 	.word	0x08004e71
 8004de4:	08004e71 	.word	0x08004e71
 8004de8:	08004e71 	.word	0x08004e71
 8004dec:	08004e71 	.word	0x08004e71
 8004df0:	08004e71 	.word	0x08004e71
 8004df4:	08004e71 	.word	0x08004e71
 8004df8:	08004e71 	.word	0x08004e71
 8004dfc:	08004e59 	.word	0x08004e59
 8004e00:	08004e71 	.word	0x08004e71
 8004e04:	08004e71 	.word	0x08004e71
 8004e08:	08004e71 	.word	0x08004e71
 8004e0c:	08004e71 	.word	0x08004e71
 8004e10:	08004e71 	.word	0x08004e71
 8004e14:	08004e71 	.word	0x08004e71
 8004e18:	08004e71 	.word	0x08004e71
 8004e1c:	08004e61 	.word	0x08004e61
 8004e20:	08004e71 	.word	0x08004e71
 8004e24:	08004e71 	.word	0x08004e71
 8004e28:	08004e71 	.word	0x08004e71
 8004e2c:	08004e71 	.word	0x08004e71
 8004e30:	08004e71 	.word	0x08004e71
 8004e34:	08004e71 	.word	0x08004e71
 8004e38:	08004e71 	.word	0x08004e71
 8004e3c:	08004e69 	.word	0x08004e69
 8004e40:	2301      	movs	r3, #1
 8004e42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e46:	e0bc      	b.n	8004fc2 <UART_SetConfig+0x5a6>
 8004e48:	2304      	movs	r3, #4
 8004e4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e4e:	e0b8      	b.n	8004fc2 <UART_SetConfig+0x5a6>
 8004e50:	2308      	movs	r3, #8
 8004e52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e56:	e0b4      	b.n	8004fc2 <UART_SetConfig+0x5a6>
 8004e58:	2310      	movs	r3, #16
 8004e5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e5e:	e0b0      	b.n	8004fc2 <UART_SetConfig+0x5a6>
 8004e60:	2320      	movs	r3, #32
 8004e62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e66:	e0ac      	b.n	8004fc2 <UART_SetConfig+0x5a6>
 8004e68:	2340      	movs	r3, #64	@ 0x40
 8004e6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e6e:	e0a8      	b.n	8004fc2 <UART_SetConfig+0x5a6>
 8004e70:	2380      	movs	r3, #128	@ 0x80
 8004e72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e76:	e0a4      	b.n	8004fc2 <UART_SetConfig+0x5a6>
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a8f      	ldr	r2, [pc, #572]	@ (80050bc <UART_SetConfig+0x6a0>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d130      	bne.n	8004ee4 <UART_SetConfig+0x4c8>
 8004e82:	4b8d      	ldr	r3, [pc, #564]	@ (80050b8 <UART_SetConfig+0x69c>)
 8004e84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e86:	f003 0307 	and.w	r3, r3, #7
 8004e8a:	2b05      	cmp	r3, #5
 8004e8c:	d826      	bhi.n	8004edc <UART_SetConfig+0x4c0>
 8004e8e:	a201      	add	r2, pc, #4	@ (adr r2, 8004e94 <UART_SetConfig+0x478>)
 8004e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e94:	08004ead 	.word	0x08004ead
 8004e98:	08004eb5 	.word	0x08004eb5
 8004e9c:	08004ebd 	.word	0x08004ebd
 8004ea0:	08004ec5 	.word	0x08004ec5
 8004ea4:	08004ecd 	.word	0x08004ecd
 8004ea8:	08004ed5 	.word	0x08004ed5
 8004eac:	2300      	movs	r3, #0
 8004eae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004eb2:	e086      	b.n	8004fc2 <UART_SetConfig+0x5a6>
 8004eb4:	2304      	movs	r3, #4
 8004eb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004eba:	e082      	b.n	8004fc2 <UART_SetConfig+0x5a6>
 8004ebc:	2308      	movs	r3, #8
 8004ebe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ec2:	e07e      	b.n	8004fc2 <UART_SetConfig+0x5a6>
 8004ec4:	2310      	movs	r3, #16
 8004ec6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004eca:	e07a      	b.n	8004fc2 <UART_SetConfig+0x5a6>
 8004ecc:	2320      	movs	r3, #32
 8004ece:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ed2:	e076      	b.n	8004fc2 <UART_SetConfig+0x5a6>
 8004ed4:	2340      	movs	r3, #64	@ 0x40
 8004ed6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004eda:	e072      	b.n	8004fc2 <UART_SetConfig+0x5a6>
 8004edc:	2380      	movs	r3, #128	@ 0x80
 8004ede:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ee2:	e06e      	b.n	8004fc2 <UART_SetConfig+0x5a6>
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a75      	ldr	r2, [pc, #468]	@ (80050c0 <UART_SetConfig+0x6a4>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d130      	bne.n	8004f50 <UART_SetConfig+0x534>
 8004eee:	4b72      	ldr	r3, [pc, #456]	@ (80050b8 <UART_SetConfig+0x69c>)
 8004ef0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ef2:	f003 0307 	and.w	r3, r3, #7
 8004ef6:	2b05      	cmp	r3, #5
 8004ef8:	d826      	bhi.n	8004f48 <UART_SetConfig+0x52c>
 8004efa:	a201      	add	r2, pc, #4	@ (adr r2, 8004f00 <UART_SetConfig+0x4e4>)
 8004efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f00:	08004f19 	.word	0x08004f19
 8004f04:	08004f21 	.word	0x08004f21
 8004f08:	08004f29 	.word	0x08004f29
 8004f0c:	08004f31 	.word	0x08004f31
 8004f10:	08004f39 	.word	0x08004f39
 8004f14:	08004f41 	.word	0x08004f41
 8004f18:	2300      	movs	r3, #0
 8004f1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f1e:	e050      	b.n	8004fc2 <UART_SetConfig+0x5a6>
 8004f20:	2304      	movs	r3, #4
 8004f22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f26:	e04c      	b.n	8004fc2 <UART_SetConfig+0x5a6>
 8004f28:	2308      	movs	r3, #8
 8004f2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f2e:	e048      	b.n	8004fc2 <UART_SetConfig+0x5a6>
 8004f30:	2310      	movs	r3, #16
 8004f32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f36:	e044      	b.n	8004fc2 <UART_SetConfig+0x5a6>
 8004f38:	2320      	movs	r3, #32
 8004f3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f3e:	e040      	b.n	8004fc2 <UART_SetConfig+0x5a6>
 8004f40:	2340      	movs	r3, #64	@ 0x40
 8004f42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f46:	e03c      	b.n	8004fc2 <UART_SetConfig+0x5a6>
 8004f48:	2380      	movs	r3, #128	@ 0x80
 8004f4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f4e:	e038      	b.n	8004fc2 <UART_SetConfig+0x5a6>
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a5b      	ldr	r2, [pc, #364]	@ (80050c4 <UART_SetConfig+0x6a8>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d130      	bne.n	8004fbc <UART_SetConfig+0x5a0>
 8004f5a:	4b57      	ldr	r3, [pc, #348]	@ (80050b8 <UART_SetConfig+0x69c>)
 8004f5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f5e:	f003 0307 	and.w	r3, r3, #7
 8004f62:	2b05      	cmp	r3, #5
 8004f64:	d826      	bhi.n	8004fb4 <UART_SetConfig+0x598>
 8004f66:	a201      	add	r2, pc, #4	@ (adr r2, 8004f6c <UART_SetConfig+0x550>)
 8004f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f6c:	08004f85 	.word	0x08004f85
 8004f70:	08004f8d 	.word	0x08004f8d
 8004f74:	08004f95 	.word	0x08004f95
 8004f78:	08004f9d 	.word	0x08004f9d
 8004f7c:	08004fa5 	.word	0x08004fa5
 8004f80:	08004fad 	.word	0x08004fad
 8004f84:	2302      	movs	r3, #2
 8004f86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f8a:	e01a      	b.n	8004fc2 <UART_SetConfig+0x5a6>
 8004f8c:	2304      	movs	r3, #4
 8004f8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f92:	e016      	b.n	8004fc2 <UART_SetConfig+0x5a6>
 8004f94:	2308      	movs	r3, #8
 8004f96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f9a:	e012      	b.n	8004fc2 <UART_SetConfig+0x5a6>
 8004f9c:	2310      	movs	r3, #16
 8004f9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004fa2:	e00e      	b.n	8004fc2 <UART_SetConfig+0x5a6>
 8004fa4:	2320      	movs	r3, #32
 8004fa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004faa:	e00a      	b.n	8004fc2 <UART_SetConfig+0x5a6>
 8004fac:	2340      	movs	r3, #64	@ 0x40
 8004fae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004fb2:	e006      	b.n	8004fc2 <UART_SetConfig+0x5a6>
 8004fb4:	2380      	movs	r3, #128	@ 0x80
 8004fb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004fba:	e002      	b.n	8004fc2 <UART_SetConfig+0x5a6>
 8004fbc:	2380      	movs	r3, #128	@ 0x80
 8004fbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a3f      	ldr	r2, [pc, #252]	@ (80050c4 <UART_SetConfig+0x6a8>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	f040 80f8 	bne.w	80051be <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004fce:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004fd2:	2b20      	cmp	r3, #32
 8004fd4:	dc46      	bgt.n	8005064 <UART_SetConfig+0x648>
 8004fd6:	2b02      	cmp	r3, #2
 8004fd8:	f2c0 8082 	blt.w	80050e0 <UART_SetConfig+0x6c4>
 8004fdc:	3b02      	subs	r3, #2
 8004fde:	2b1e      	cmp	r3, #30
 8004fe0:	d87e      	bhi.n	80050e0 <UART_SetConfig+0x6c4>
 8004fe2:	a201      	add	r2, pc, #4	@ (adr r2, 8004fe8 <UART_SetConfig+0x5cc>)
 8004fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fe8:	0800506b 	.word	0x0800506b
 8004fec:	080050e1 	.word	0x080050e1
 8004ff0:	08005073 	.word	0x08005073
 8004ff4:	080050e1 	.word	0x080050e1
 8004ff8:	080050e1 	.word	0x080050e1
 8004ffc:	080050e1 	.word	0x080050e1
 8005000:	08005083 	.word	0x08005083
 8005004:	080050e1 	.word	0x080050e1
 8005008:	080050e1 	.word	0x080050e1
 800500c:	080050e1 	.word	0x080050e1
 8005010:	080050e1 	.word	0x080050e1
 8005014:	080050e1 	.word	0x080050e1
 8005018:	080050e1 	.word	0x080050e1
 800501c:	080050e1 	.word	0x080050e1
 8005020:	08005093 	.word	0x08005093
 8005024:	080050e1 	.word	0x080050e1
 8005028:	080050e1 	.word	0x080050e1
 800502c:	080050e1 	.word	0x080050e1
 8005030:	080050e1 	.word	0x080050e1
 8005034:	080050e1 	.word	0x080050e1
 8005038:	080050e1 	.word	0x080050e1
 800503c:	080050e1 	.word	0x080050e1
 8005040:	080050e1 	.word	0x080050e1
 8005044:	080050e1 	.word	0x080050e1
 8005048:	080050e1 	.word	0x080050e1
 800504c:	080050e1 	.word	0x080050e1
 8005050:	080050e1 	.word	0x080050e1
 8005054:	080050e1 	.word	0x080050e1
 8005058:	080050e1 	.word	0x080050e1
 800505c:	080050e1 	.word	0x080050e1
 8005060:	080050d3 	.word	0x080050d3
 8005064:	2b40      	cmp	r3, #64	@ 0x40
 8005066:	d037      	beq.n	80050d8 <UART_SetConfig+0x6bc>
 8005068:	e03a      	b.n	80050e0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800506a:	f7fe ffd7 	bl	800401c <HAL_RCCEx_GetD3PCLK1Freq>
 800506e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005070:	e03c      	b.n	80050ec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005072:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005076:	4618      	mov	r0, r3
 8005078:	f7fe ffe6 	bl	8004048 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800507c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800507e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005080:	e034      	b.n	80050ec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005082:	f107 0318 	add.w	r3, r7, #24
 8005086:	4618      	mov	r0, r3
 8005088:	f7ff f932 	bl	80042f0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800508c:	69fb      	ldr	r3, [r7, #28]
 800508e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005090:	e02c      	b.n	80050ec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005092:	4b09      	ldr	r3, [pc, #36]	@ (80050b8 <UART_SetConfig+0x69c>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f003 0320 	and.w	r3, r3, #32
 800509a:	2b00      	cmp	r3, #0
 800509c:	d016      	beq.n	80050cc <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800509e:	4b06      	ldr	r3, [pc, #24]	@ (80050b8 <UART_SetConfig+0x69c>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	08db      	lsrs	r3, r3, #3
 80050a4:	f003 0303 	and.w	r3, r3, #3
 80050a8:	4a07      	ldr	r2, [pc, #28]	@ (80050c8 <UART_SetConfig+0x6ac>)
 80050aa:	fa22 f303 	lsr.w	r3, r2, r3
 80050ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80050b0:	e01c      	b.n	80050ec <UART_SetConfig+0x6d0>
 80050b2:	bf00      	nop
 80050b4:	40011400 	.word	0x40011400
 80050b8:	58024400 	.word	0x58024400
 80050bc:	40007800 	.word	0x40007800
 80050c0:	40007c00 	.word	0x40007c00
 80050c4:	58000c00 	.word	0x58000c00
 80050c8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80050cc:	4b9d      	ldr	r3, [pc, #628]	@ (8005344 <UART_SetConfig+0x928>)
 80050ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80050d0:	e00c      	b.n	80050ec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80050d2:	4b9d      	ldr	r3, [pc, #628]	@ (8005348 <UART_SetConfig+0x92c>)
 80050d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80050d6:	e009      	b.n	80050ec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050d8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80050dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80050de:	e005      	b.n	80050ec <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80050e0:	2300      	movs	r3, #0
 80050e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80050e4:	2301      	movs	r3, #1
 80050e6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80050ea:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80050ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	f000 81de 	beq.w	80054b0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050f8:	4a94      	ldr	r2, [pc, #592]	@ (800534c <UART_SetConfig+0x930>)
 80050fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80050fe:	461a      	mov	r2, r3
 8005100:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005102:	fbb3 f3f2 	udiv	r3, r3, r2
 8005106:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	685a      	ldr	r2, [r3, #4]
 800510c:	4613      	mov	r3, r2
 800510e:	005b      	lsls	r3, r3, #1
 8005110:	4413      	add	r3, r2
 8005112:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005114:	429a      	cmp	r2, r3
 8005116:	d305      	bcc.n	8005124 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800511e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005120:	429a      	cmp	r2, r3
 8005122:	d903      	bls.n	800512c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8005124:	2301      	movs	r3, #1
 8005126:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800512a:	e1c1      	b.n	80054b0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800512c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800512e:	2200      	movs	r2, #0
 8005130:	60bb      	str	r3, [r7, #8]
 8005132:	60fa      	str	r2, [r7, #12]
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005138:	4a84      	ldr	r2, [pc, #528]	@ (800534c <UART_SetConfig+0x930>)
 800513a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800513e:	b29b      	uxth	r3, r3
 8005140:	2200      	movs	r2, #0
 8005142:	603b      	str	r3, [r7, #0]
 8005144:	607a      	str	r2, [r7, #4]
 8005146:	e9d7 2300 	ldrd	r2, r3, [r7]
 800514a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800514e:	f7fb f917 	bl	8000380 <__aeabi_uldivmod>
 8005152:	4602      	mov	r2, r0
 8005154:	460b      	mov	r3, r1
 8005156:	4610      	mov	r0, r2
 8005158:	4619      	mov	r1, r3
 800515a:	f04f 0200 	mov.w	r2, #0
 800515e:	f04f 0300 	mov.w	r3, #0
 8005162:	020b      	lsls	r3, r1, #8
 8005164:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005168:	0202      	lsls	r2, r0, #8
 800516a:	6979      	ldr	r1, [r7, #20]
 800516c:	6849      	ldr	r1, [r1, #4]
 800516e:	0849      	lsrs	r1, r1, #1
 8005170:	2000      	movs	r0, #0
 8005172:	460c      	mov	r4, r1
 8005174:	4605      	mov	r5, r0
 8005176:	eb12 0804 	adds.w	r8, r2, r4
 800517a:	eb43 0905 	adc.w	r9, r3, r5
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	2200      	movs	r2, #0
 8005184:	469a      	mov	sl, r3
 8005186:	4693      	mov	fp, r2
 8005188:	4652      	mov	r2, sl
 800518a:	465b      	mov	r3, fp
 800518c:	4640      	mov	r0, r8
 800518e:	4649      	mov	r1, r9
 8005190:	f7fb f8f6 	bl	8000380 <__aeabi_uldivmod>
 8005194:	4602      	mov	r2, r0
 8005196:	460b      	mov	r3, r1
 8005198:	4613      	mov	r3, r2
 800519a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800519c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800519e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80051a2:	d308      	bcc.n	80051b6 <UART_SetConfig+0x79a>
 80051a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80051aa:	d204      	bcs.n	80051b6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80051b2:	60da      	str	r2, [r3, #12]
 80051b4:	e17c      	b.n	80054b0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80051b6:	2301      	movs	r3, #1
 80051b8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80051bc:	e178      	b.n	80054b0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	69db      	ldr	r3, [r3, #28]
 80051c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80051c6:	f040 80c5 	bne.w	8005354 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80051ca:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80051ce:	2b20      	cmp	r3, #32
 80051d0:	dc48      	bgt.n	8005264 <UART_SetConfig+0x848>
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	db7b      	blt.n	80052ce <UART_SetConfig+0x8b2>
 80051d6:	2b20      	cmp	r3, #32
 80051d8:	d879      	bhi.n	80052ce <UART_SetConfig+0x8b2>
 80051da:	a201      	add	r2, pc, #4	@ (adr r2, 80051e0 <UART_SetConfig+0x7c4>)
 80051dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051e0:	0800526b 	.word	0x0800526b
 80051e4:	08005273 	.word	0x08005273
 80051e8:	080052cf 	.word	0x080052cf
 80051ec:	080052cf 	.word	0x080052cf
 80051f0:	0800527b 	.word	0x0800527b
 80051f4:	080052cf 	.word	0x080052cf
 80051f8:	080052cf 	.word	0x080052cf
 80051fc:	080052cf 	.word	0x080052cf
 8005200:	0800528b 	.word	0x0800528b
 8005204:	080052cf 	.word	0x080052cf
 8005208:	080052cf 	.word	0x080052cf
 800520c:	080052cf 	.word	0x080052cf
 8005210:	080052cf 	.word	0x080052cf
 8005214:	080052cf 	.word	0x080052cf
 8005218:	080052cf 	.word	0x080052cf
 800521c:	080052cf 	.word	0x080052cf
 8005220:	0800529b 	.word	0x0800529b
 8005224:	080052cf 	.word	0x080052cf
 8005228:	080052cf 	.word	0x080052cf
 800522c:	080052cf 	.word	0x080052cf
 8005230:	080052cf 	.word	0x080052cf
 8005234:	080052cf 	.word	0x080052cf
 8005238:	080052cf 	.word	0x080052cf
 800523c:	080052cf 	.word	0x080052cf
 8005240:	080052cf 	.word	0x080052cf
 8005244:	080052cf 	.word	0x080052cf
 8005248:	080052cf 	.word	0x080052cf
 800524c:	080052cf 	.word	0x080052cf
 8005250:	080052cf 	.word	0x080052cf
 8005254:	080052cf 	.word	0x080052cf
 8005258:	080052cf 	.word	0x080052cf
 800525c:	080052cf 	.word	0x080052cf
 8005260:	080052c1 	.word	0x080052c1
 8005264:	2b40      	cmp	r3, #64	@ 0x40
 8005266:	d02e      	beq.n	80052c6 <UART_SetConfig+0x8aa>
 8005268:	e031      	b.n	80052ce <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800526a:	f7fd fca1 	bl	8002bb0 <HAL_RCC_GetPCLK1Freq>
 800526e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005270:	e033      	b.n	80052da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005272:	f7fd fcb3 	bl	8002bdc <HAL_RCC_GetPCLK2Freq>
 8005276:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005278:	e02f      	b.n	80052da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800527a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800527e:	4618      	mov	r0, r3
 8005280:	f7fe fee2 	bl	8004048 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005284:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005286:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005288:	e027      	b.n	80052da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800528a:	f107 0318 	add.w	r3, r7, #24
 800528e:	4618      	mov	r0, r3
 8005290:	f7ff f82e 	bl	80042f0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005294:	69fb      	ldr	r3, [r7, #28]
 8005296:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005298:	e01f      	b.n	80052da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800529a:	4b2d      	ldr	r3, [pc, #180]	@ (8005350 <UART_SetConfig+0x934>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f003 0320 	and.w	r3, r3, #32
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d009      	beq.n	80052ba <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80052a6:	4b2a      	ldr	r3, [pc, #168]	@ (8005350 <UART_SetConfig+0x934>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	08db      	lsrs	r3, r3, #3
 80052ac:	f003 0303 	and.w	r3, r3, #3
 80052b0:	4a24      	ldr	r2, [pc, #144]	@ (8005344 <UART_SetConfig+0x928>)
 80052b2:	fa22 f303 	lsr.w	r3, r2, r3
 80052b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80052b8:	e00f      	b.n	80052da <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80052ba:	4b22      	ldr	r3, [pc, #136]	@ (8005344 <UART_SetConfig+0x928>)
 80052bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80052be:	e00c      	b.n	80052da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80052c0:	4b21      	ldr	r3, [pc, #132]	@ (8005348 <UART_SetConfig+0x92c>)
 80052c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80052c4:	e009      	b.n	80052da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80052ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80052cc:	e005      	b.n	80052da <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80052ce:	2300      	movs	r3, #0
 80052d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80052d8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80052da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80052dc:	2b00      	cmp	r3, #0
 80052de:	f000 80e7 	beq.w	80054b0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052e6:	4a19      	ldr	r2, [pc, #100]	@ (800534c <UART_SetConfig+0x930>)
 80052e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80052ec:	461a      	mov	r2, r3
 80052ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80052f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80052f4:	005a      	lsls	r2, r3, #1
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	085b      	lsrs	r3, r3, #1
 80052fc:	441a      	add	r2, r3
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	fbb2 f3f3 	udiv	r3, r2, r3
 8005306:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005308:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800530a:	2b0f      	cmp	r3, #15
 800530c:	d916      	bls.n	800533c <UART_SetConfig+0x920>
 800530e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005310:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005314:	d212      	bcs.n	800533c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005316:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005318:	b29b      	uxth	r3, r3
 800531a:	f023 030f 	bic.w	r3, r3, #15
 800531e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005320:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005322:	085b      	lsrs	r3, r3, #1
 8005324:	b29b      	uxth	r3, r3
 8005326:	f003 0307 	and.w	r3, r3, #7
 800532a:	b29a      	uxth	r2, r3
 800532c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800532e:	4313      	orrs	r3, r2
 8005330:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8005338:	60da      	str	r2, [r3, #12]
 800533a:	e0b9      	b.n	80054b0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800533c:	2301      	movs	r3, #1
 800533e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005342:	e0b5      	b.n	80054b0 <UART_SetConfig+0xa94>
 8005344:	03d09000 	.word	0x03d09000
 8005348:	003d0900 	.word	0x003d0900
 800534c:	080069cc 	.word	0x080069cc
 8005350:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8005354:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005358:	2b20      	cmp	r3, #32
 800535a:	dc49      	bgt.n	80053f0 <UART_SetConfig+0x9d4>
 800535c:	2b00      	cmp	r3, #0
 800535e:	db7c      	blt.n	800545a <UART_SetConfig+0xa3e>
 8005360:	2b20      	cmp	r3, #32
 8005362:	d87a      	bhi.n	800545a <UART_SetConfig+0xa3e>
 8005364:	a201      	add	r2, pc, #4	@ (adr r2, 800536c <UART_SetConfig+0x950>)
 8005366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800536a:	bf00      	nop
 800536c:	080053f7 	.word	0x080053f7
 8005370:	080053ff 	.word	0x080053ff
 8005374:	0800545b 	.word	0x0800545b
 8005378:	0800545b 	.word	0x0800545b
 800537c:	08005407 	.word	0x08005407
 8005380:	0800545b 	.word	0x0800545b
 8005384:	0800545b 	.word	0x0800545b
 8005388:	0800545b 	.word	0x0800545b
 800538c:	08005417 	.word	0x08005417
 8005390:	0800545b 	.word	0x0800545b
 8005394:	0800545b 	.word	0x0800545b
 8005398:	0800545b 	.word	0x0800545b
 800539c:	0800545b 	.word	0x0800545b
 80053a0:	0800545b 	.word	0x0800545b
 80053a4:	0800545b 	.word	0x0800545b
 80053a8:	0800545b 	.word	0x0800545b
 80053ac:	08005427 	.word	0x08005427
 80053b0:	0800545b 	.word	0x0800545b
 80053b4:	0800545b 	.word	0x0800545b
 80053b8:	0800545b 	.word	0x0800545b
 80053bc:	0800545b 	.word	0x0800545b
 80053c0:	0800545b 	.word	0x0800545b
 80053c4:	0800545b 	.word	0x0800545b
 80053c8:	0800545b 	.word	0x0800545b
 80053cc:	0800545b 	.word	0x0800545b
 80053d0:	0800545b 	.word	0x0800545b
 80053d4:	0800545b 	.word	0x0800545b
 80053d8:	0800545b 	.word	0x0800545b
 80053dc:	0800545b 	.word	0x0800545b
 80053e0:	0800545b 	.word	0x0800545b
 80053e4:	0800545b 	.word	0x0800545b
 80053e8:	0800545b 	.word	0x0800545b
 80053ec:	0800544d 	.word	0x0800544d
 80053f0:	2b40      	cmp	r3, #64	@ 0x40
 80053f2:	d02e      	beq.n	8005452 <UART_SetConfig+0xa36>
 80053f4:	e031      	b.n	800545a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053f6:	f7fd fbdb 	bl	8002bb0 <HAL_RCC_GetPCLK1Freq>
 80053fa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80053fc:	e033      	b.n	8005466 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80053fe:	f7fd fbed 	bl	8002bdc <HAL_RCC_GetPCLK2Freq>
 8005402:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005404:	e02f      	b.n	8005466 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005406:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800540a:	4618      	mov	r0, r3
 800540c:	f7fe fe1c 	bl	8004048 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005410:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005412:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005414:	e027      	b.n	8005466 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005416:	f107 0318 	add.w	r3, r7, #24
 800541a:	4618      	mov	r0, r3
 800541c:	f7fe ff68 	bl	80042f0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005420:	69fb      	ldr	r3, [r7, #28]
 8005422:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005424:	e01f      	b.n	8005466 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005426:	4b2d      	ldr	r3, [pc, #180]	@ (80054dc <UART_SetConfig+0xac0>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f003 0320 	and.w	r3, r3, #32
 800542e:	2b00      	cmp	r3, #0
 8005430:	d009      	beq.n	8005446 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005432:	4b2a      	ldr	r3, [pc, #168]	@ (80054dc <UART_SetConfig+0xac0>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	08db      	lsrs	r3, r3, #3
 8005438:	f003 0303 	and.w	r3, r3, #3
 800543c:	4a28      	ldr	r2, [pc, #160]	@ (80054e0 <UART_SetConfig+0xac4>)
 800543e:	fa22 f303 	lsr.w	r3, r2, r3
 8005442:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005444:	e00f      	b.n	8005466 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8005446:	4b26      	ldr	r3, [pc, #152]	@ (80054e0 <UART_SetConfig+0xac4>)
 8005448:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800544a:	e00c      	b.n	8005466 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800544c:	4b25      	ldr	r3, [pc, #148]	@ (80054e4 <UART_SetConfig+0xac8>)
 800544e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005450:	e009      	b.n	8005466 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005452:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005456:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005458:	e005      	b.n	8005466 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800545a:	2300      	movs	r3, #0
 800545c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800545e:	2301      	movs	r3, #1
 8005460:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005464:	bf00      	nop
    }

    if (pclk != 0U)
 8005466:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005468:	2b00      	cmp	r3, #0
 800546a:	d021      	beq.n	80054b0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005470:	4a1d      	ldr	r2, [pc, #116]	@ (80054e8 <UART_SetConfig+0xacc>)
 8005472:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005476:	461a      	mov	r2, r3
 8005478:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800547a:	fbb3 f2f2 	udiv	r2, r3, r2
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	085b      	lsrs	r3, r3, #1
 8005484:	441a      	add	r2, r3
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	fbb2 f3f3 	udiv	r3, r2, r3
 800548e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005490:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005492:	2b0f      	cmp	r3, #15
 8005494:	d909      	bls.n	80054aa <UART_SetConfig+0xa8e>
 8005496:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005498:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800549c:	d205      	bcs.n	80054aa <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800549e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054a0:	b29a      	uxth	r2, r3
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	60da      	str	r2, [r3, #12]
 80054a8:	e002      	b.n	80054b0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80054aa:	2301      	movs	r3, #1
 80054ac:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	2201      	movs	r2, #1
 80054b4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	2201      	movs	r2, #1
 80054bc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	2200      	movs	r2, #0
 80054c4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	2200      	movs	r2, #0
 80054ca:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80054cc:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	3748      	adds	r7, #72	@ 0x48
 80054d4:	46bd      	mov	sp, r7
 80054d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80054da:	bf00      	nop
 80054dc:	58024400 	.word	0x58024400
 80054e0:	03d09000 	.word	0x03d09000
 80054e4:	003d0900 	.word	0x003d0900
 80054e8:	080069cc 	.word	0x080069cc

080054ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b083      	sub	sp, #12
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054f8:	f003 0308 	and.w	r3, r3, #8
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d00a      	beq.n	8005516 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	430a      	orrs	r2, r1
 8005514:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800551a:	f003 0301 	and.w	r3, r3, #1
 800551e:	2b00      	cmp	r3, #0
 8005520:	d00a      	beq.n	8005538 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	430a      	orrs	r2, r1
 8005536:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800553c:	f003 0302 	and.w	r3, r3, #2
 8005540:	2b00      	cmp	r3, #0
 8005542:	d00a      	beq.n	800555a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	430a      	orrs	r2, r1
 8005558:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800555e:	f003 0304 	and.w	r3, r3, #4
 8005562:	2b00      	cmp	r3, #0
 8005564:	d00a      	beq.n	800557c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	430a      	orrs	r2, r1
 800557a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005580:	f003 0310 	and.w	r3, r3, #16
 8005584:	2b00      	cmp	r3, #0
 8005586:	d00a      	beq.n	800559e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	689b      	ldr	r3, [r3, #8]
 800558e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	430a      	orrs	r2, r1
 800559c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055a2:	f003 0320 	and.w	r3, r3, #32
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d00a      	beq.n	80055c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	689b      	ldr	r3, [r3, #8]
 80055b0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	430a      	orrs	r2, r1
 80055be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d01a      	beq.n	8005602 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	430a      	orrs	r2, r1
 80055e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80055ea:	d10a      	bne.n	8005602 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	430a      	orrs	r2, r1
 8005600:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005606:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800560a:	2b00      	cmp	r3, #0
 800560c:	d00a      	beq.n	8005624 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	430a      	orrs	r2, r1
 8005622:	605a      	str	r2, [r3, #4]
  }
}
 8005624:	bf00      	nop
 8005626:	370c      	adds	r7, #12
 8005628:	46bd      	mov	sp, r7
 800562a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562e:	4770      	bx	lr

08005630 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b098      	sub	sp, #96	@ 0x60
 8005634:	af02      	add	r7, sp, #8
 8005636:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2200      	movs	r2, #0
 800563c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005640:	f7fb fec0 	bl	80013c4 <HAL_GetTick>
 8005644:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f003 0308 	and.w	r3, r3, #8
 8005650:	2b08      	cmp	r3, #8
 8005652:	d12f      	bne.n	80056b4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005654:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005658:	9300      	str	r3, [sp, #0]
 800565a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800565c:	2200      	movs	r2, #0
 800565e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f000 f88e 	bl	8005784 <UART_WaitOnFlagUntilTimeout>
 8005668:	4603      	mov	r3, r0
 800566a:	2b00      	cmp	r3, #0
 800566c:	d022      	beq.n	80056b4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005674:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005676:	e853 3f00 	ldrex	r3, [r3]
 800567a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800567c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800567e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005682:	653b      	str	r3, [r7, #80]	@ 0x50
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	461a      	mov	r2, r3
 800568a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800568c:	647b      	str	r3, [r7, #68]	@ 0x44
 800568e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005690:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005692:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005694:	e841 2300 	strex	r3, r2, [r1]
 8005698:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800569a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800569c:	2b00      	cmp	r3, #0
 800569e:	d1e6      	bne.n	800566e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2220      	movs	r2, #32
 80056a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2200      	movs	r2, #0
 80056ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80056b0:	2303      	movs	r3, #3
 80056b2:	e063      	b.n	800577c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f003 0304 	and.w	r3, r3, #4
 80056be:	2b04      	cmp	r3, #4
 80056c0:	d149      	bne.n	8005756 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80056c2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80056c6:	9300      	str	r3, [sp, #0]
 80056c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056ca:	2200      	movs	r2, #0
 80056cc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80056d0:	6878      	ldr	r0, [r7, #4]
 80056d2:	f000 f857 	bl	8005784 <UART_WaitOnFlagUntilTimeout>
 80056d6:	4603      	mov	r3, r0
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d03c      	beq.n	8005756 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056e4:	e853 3f00 	ldrex	r3, [r3]
 80056e8:	623b      	str	r3, [r7, #32]
   return(result);
 80056ea:	6a3b      	ldr	r3, [r7, #32]
 80056ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80056f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	461a      	mov	r2, r3
 80056f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80056fa:	633b      	str	r3, [r7, #48]	@ 0x30
 80056fc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005700:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005702:	e841 2300 	strex	r3, r2, [r1]
 8005706:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005708:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800570a:	2b00      	cmp	r3, #0
 800570c:	d1e6      	bne.n	80056dc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	3308      	adds	r3, #8
 8005714:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	e853 3f00 	ldrex	r3, [r3]
 800571c:	60fb      	str	r3, [r7, #12]
   return(result);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	f023 0301 	bic.w	r3, r3, #1
 8005724:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	3308      	adds	r3, #8
 800572c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800572e:	61fa      	str	r2, [r7, #28]
 8005730:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005732:	69b9      	ldr	r1, [r7, #24]
 8005734:	69fa      	ldr	r2, [r7, #28]
 8005736:	e841 2300 	strex	r3, r2, [r1]
 800573a:	617b      	str	r3, [r7, #20]
   return(result);
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d1e5      	bne.n	800570e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2220      	movs	r2, #32
 8005746:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2200      	movs	r2, #0
 800574e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005752:	2303      	movs	r3, #3
 8005754:	e012      	b.n	800577c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2220      	movs	r2, #32
 800575a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2220      	movs	r2, #32
 8005762:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2200      	movs	r2, #0
 800576a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2200      	movs	r2, #0
 8005770:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2200      	movs	r2, #0
 8005776:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800577a:	2300      	movs	r3, #0
}
 800577c:	4618      	mov	r0, r3
 800577e:	3758      	adds	r7, #88	@ 0x58
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}

08005784 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b084      	sub	sp, #16
 8005788:	af00      	add	r7, sp, #0
 800578a:	60f8      	str	r0, [r7, #12]
 800578c:	60b9      	str	r1, [r7, #8]
 800578e:	603b      	str	r3, [r7, #0]
 8005790:	4613      	mov	r3, r2
 8005792:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005794:	e04f      	b.n	8005836 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005796:	69bb      	ldr	r3, [r7, #24]
 8005798:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800579c:	d04b      	beq.n	8005836 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800579e:	f7fb fe11 	bl	80013c4 <HAL_GetTick>
 80057a2:	4602      	mov	r2, r0
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	1ad3      	subs	r3, r2, r3
 80057a8:	69ba      	ldr	r2, [r7, #24]
 80057aa:	429a      	cmp	r2, r3
 80057ac:	d302      	bcc.n	80057b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80057ae:	69bb      	ldr	r3, [r7, #24]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d101      	bne.n	80057b8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80057b4:	2303      	movs	r3, #3
 80057b6:	e04e      	b.n	8005856 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f003 0304 	and.w	r3, r3, #4
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d037      	beq.n	8005836 <UART_WaitOnFlagUntilTimeout+0xb2>
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	2b80      	cmp	r3, #128	@ 0x80
 80057ca:	d034      	beq.n	8005836 <UART_WaitOnFlagUntilTimeout+0xb2>
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	2b40      	cmp	r3, #64	@ 0x40
 80057d0:	d031      	beq.n	8005836 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	69db      	ldr	r3, [r3, #28]
 80057d8:	f003 0308 	and.w	r3, r3, #8
 80057dc:	2b08      	cmp	r3, #8
 80057de:	d110      	bne.n	8005802 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	2208      	movs	r2, #8
 80057e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80057e8:	68f8      	ldr	r0, [r7, #12]
 80057ea:	f000 f839 	bl	8005860 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2208      	movs	r2, #8
 80057f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2200      	movs	r2, #0
 80057fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80057fe:	2301      	movs	r3, #1
 8005800:	e029      	b.n	8005856 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	69db      	ldr	r3, [r3, #28]
 8005808:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800580c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005810:	d111      	bne.n	8005836 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800581a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800581c:	68f8      	ldr	r0, [r7, #12]
 800581e:	f000 f81f 	bl	8005860 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2220      	movs	r2, #32
 8005826:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2200      	movs	r2, #0
 800582e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005832:	2303      	movs	r3, #3
 8005834:	e00f      	b.n	8005856 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	69da      	ldr	r2, [r3, #28]
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	4013      	ands	r3, r2
 8005840:	68ba      	ldr	r2, [r7, #8]
 8005842:	429a      	cmp	r2, r3
 8005844:	bf0c      	ite	eq
 8005846:	2301      	moveq	r3, #1
 8005848:	2300      	movne	r3, #0
 800584a:	b2db      	uxtb	r3, r3
 800584c:	461a      	mov	r2, r3
 800584e:	79fb      	ldrb	r3, [r7, #7]
 8005850:	429a      	cmp	r2, r3
 8005852:	d0a0      	beq.n	8005796 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005854:	2300      	movs	r3, #0
}
 8005856:	4618      	mov	r0, r3
 8005858:	3710      	adds	r7, #16
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}
	...

08005860 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005860:	b480      	push	{r7}
 8005862:	b095      	sub	sp, #84	@ 0x54
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800586e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005870:	e853 3f00 	ldrex	r3, [r3]
 8005874:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005876:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005878:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800587c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	461a      	mov	r2, r3
 8005884:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005886:	643b      	str	r3, [r7, #64]	@ 0x40
 8005888:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800588a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800588c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800588e:	e841 2300 	strex	r3, r2, [r1]
 8005892:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005894:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005896:	2b00      	cmp	r3, #0
 8005898:	d1e6      	bne.n	8005868 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	3308      	adds	r3, #8
 80058a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058a2:	6a3b      	ldr	r3, [r7, #32]
 80058a4:	e853 3f00 	ldrex	r3, [r3]
 80058a8:	61fb      	str	r3, [r7, #28]
   return(result);
 80058aa:	69fa      	ldr	r2, [r7, #28]
 80058ac:	4b1e      	ldr	r3, [pc, #120]	@ (8005928 <UART_EndRxTransfer+0xc8>)
 80058ae:	4013      	ands	r3, r2
 80058b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	3308      	adds	r3, #8
 80058b8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80058ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80058bc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058be:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80058c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80058c2:	e841 2300 	strex	r3, r2, [r1]
 80058c6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80058c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d1e5      	bne.n	800589a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80058d2:	2b01      	cmp	r3, #1
 80058d4:	d118      	bne.n	8005908 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	e853 3f00 	ldrex	r3, [r3]
 80058e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	f023 0310 	bic.w	r3, r3, #16
 80058ea:	647b      	str	r3, [r7, #68]	@ 0x44
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	461a      	mov	r2, r3
 80058f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80058f4:	61bb      	str	r3, [r7, #24]
 80058f6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058f8:	6979      	ldr	r1, [r7, #20]
 80058fa:	69ba      	ldr	r2, [r7, #24]
 80058fc:	e841 2300 	strex	r3, r2, [r1]
 8005900:	613b      	str	r3, [r7, #16]
   return(result);
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d1e6      	bne.n	80058d6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2220      	movs	r2, #32
 800590c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2200      	movs	r2, #0
 8005914:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2200      	movs	r2, #0
 800591a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800591c:	bf00      	nop
 800591e:	3754      	adds	r7, #84	@ 0x54
 8005920:	46bd      	mov	sp, r7
 8005922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005926:	4770      	bx	lr
 8005928:	effffffe 	.word	0xeffffffe

0800592c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800592c:	b480      	push	{r7}
 800592e:	b085      	sub	sp, #20
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800593a:	2b01      	cmp	r3, #1
 800593c:	d101      	bne.n	8005942 <HAL_UARTEx_DisableFifoMode+0x16>
 800593e:	2302      	movs	r3, #2
 8005940:	e027      	b.n	8005992 <HAL_UARTEx_DisableFifoMode+0x66>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2201      	movs	r2, #1
 8005946:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2224      	movs	r2, #36	@ 0x24
 800594e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	681a      	ldr	r2, [r3, #0]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f022 0201 	bic.w	r2, r2, #1
 8005968:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005970:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2200      	movs	r2, #0
 8005976:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	68fa      	ldr	r2, [r7, #12]
 800597e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2220      	movs	r2, #32
 8005984:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2200      	movs	r2, #0
 800598c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005990:	2300      	movs	r3, #0
}
 8005992:	4618      	mov	r0, r3
 8005994:	3714      	adds	r7, #20
 8005996:	46bd      	mov	sp, r7
 8005998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599c:	4770      	bx	lr

0800599e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800599e:	b580      	push	{r7, lr}
 80059a0:	b084      	sub	sp, #16
 80059a2:	af00      	add	r7, sp, #0
 80059a4:	6078      	str	r0, [r7, #4]
 80059a6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80059ae:	2b01      	cmp	r3, #1
 80059b0:	d101      	bne.n	80059b6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80059b2:	2302      	movs	r3, #2
 80059b4:	e02d      	b.n	8005a12 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2201      	movs	r2, #1
 80059ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2224      	movs	r2, #36	@ 0x24
 80059c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	681a      	ldr	r2, [r3, #0]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f022 0201 	bic.w	r2, r2, #1
 80059dc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	689b      	ldr	r3, [r3, #8]
 80059e4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	683a      	ldr	r2, [r7, #0]
 80059ee:	430a      	orrs	r2, r1
 80059f0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f000 f850 	bl	8005a98 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	68fa      	ldr	r2, [r7, #12]
 80059fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2220      	movs	r2, #32
 8005a04:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005a10:	2300      	movs	r3, #0
}
 8005a12:	4618      	mov	r0, r3
 8005a14:	3710      	adds	r7, #16
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bd80      	pop	{r7, pc}

08005a1a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005a1a:	b580      	push	{r7, lr}
 8005a1c:	b084      	sub	sp, #16
 8005a1e:	af00      	add	r7, sp, #0
 8005a20:	6078      	str	r0, [r7, #4]
 8005a22:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005a2a:	2b01      	cmp	r3, #1
 8005a2c:	d101      	bne.n	8005a32 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005a2e:	2302      	movs	r3, #2
 8005a30:	e02d      	b.n	8005a8e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2201      	movs	r2, #1
 8005a36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2224      	movs	r2, #36	@ 0x24
 8005a3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	681a      	ldr	r2, [r3, #0]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f022 0201 	bic.w	r2, r2, #1
 8005a58:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	689b      	ldr	r3, [r3, #8]
 8005a60:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	683a      	ldr	r2, [r7, #0]
 8005a6a:	430a      	orrs	r2, r1
 8005a6c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f000 f812 	bl	8005a98 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	68fa      	ldr	r2, [r7, #12]
 8005a7a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2220      	movs	r2, #32
 8005a80:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2200      	movs	r2, #0
 8005a88:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005a8c:	2300      	movs	r3, #0
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	3710      	adds	r7, #16
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}
	...

08005a98 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b085      	sub	sp, #20
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d108      	bne.n	8005aba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2201      	movs	r2, #1
 8005aac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005ab8:	e031      	b.n	8005b1e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005aba:	2310      	movs	r3, #16
 8005abc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005abe:	2310      	movs	r3, #16
 8005ac0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	689b      	ldr	r3, [r3, #8]
 8005ac8:	0e5b      	lsrs	r3, r3, #25
 8005aca:	b2db      	uxtb	r3, r3
 8005acc:	f003 0307 	and.w	r3, r3, #7
 8005ad0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	689b      	ldr	r3, [r3, #8]
 8005ad8:	0f5b      	lsrs	r3, r3, #29
 8005ada:	b2db      	uxtb	r3, r3
 8005adc:	f003 0307 	and.w	r3, r3, #7
 8005ae0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005ae2:	7bbb      	ldrb	r3, [r7, #14]
 8005ae4:	7b3a      	ldrb	r2, [r7, #12]
 8005ae6:	4911      	ldr	r1, [pc, #68]	@ (8005b2c <UARTEx_SetNbDataToProcess+0x94>)
 8005ae8:	5c8a      	ldrb	r2, [r1, r2]
 8005aea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005aee:	7b3a      	ldrb	r2, [r7, #12]
 8005af0:	490f      	ldr	r1, [pc, #60]	@ (8005b30 <UARTEx_SetNbDataToProcess+0x98>)
 8005af2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005af4:	fb93 f3f2 	sdiv	r3, r3, r2
 8005af8:	b29a      	uxth	r2, r3
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005b00:	7bfb      	ldrb	r3, [r7, #15]
 8005b02:	7b7a      	ldrb	r2, [r7, #13]
 8005b04:	4909      	ldr	r1, [pc, #36]	@ (8005b2c <UARTEx_SetNbDataToProcess+0x94>)
 8005b06:	5c8a      	ldrb	r2, [r1, r2]
 8005b08:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005b0c:	7b7a      	ldrb	r2, [r7, #13]
 8005b0e:	4908      	ldr	r1, [pc, #32]	@ (8005b30 <UARTEx_SetNbDataToProcess+0x98>)
 8005b10:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005b12:	fb93 f3f2 	sdiv	r3, r3, r2
 8005b16:	b29a      	uxth	r2, r3
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005b1e:	bf00      	nop
 8005b20:	3714      	adds	r7, #20
 8005b22:	46bd      	mov	sp, r7
 8005b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b28:	4770      	bx	lr
 8005b2a:	bf00      	nop
 8005b2c:	080069e4 	.word	0x080069e4
 8005b30:	080069ec 	.word	0x080069ec

08005b34 <std>:
 8005b34:	2300      	movs	r3, #0
 8005b36:	b510      	push	{r4, lr}
 8005b38:	4604      	mov	r4, r0
 8005b3a:	e9c0 3300 	strd	r3, r3, [r0]
 8005b3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005b42:	6083      	str	r3, [r0, #8]
 8005b44:	8181      	strh	r1, [r0, #12]
 8005b46:	6643      	str	r3, [r0, #100]	@ 0x64
 8005b48:	81c2      	strh	r2, [r0, #14]
 8005b4a:	6183      	str	r3, [r0, #24]
 8005b4c:	4619      	mov	r1, r3
 8005b4e:	2208      	movs	r2, #8
 8005b50:	305c      	adds	r0, #92	@ 0x5c
 8005b52:	f000 f906 	bl	8005d62 <memset>
 8005b56:	4b0d      	ldr	r3, [pc, #52]	@ (8005b8c <std+0x58>)
 8005b58:	6263      	str	r3, [r4, #36]	@ 0x24
 8005b5a:	4b0d      	ldr	r3, [pc, #52]	@ (8005b90 <std+0x5c>)
 8005b5c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005b5e:	4b0d      	ldr	r3, [pc, #52]	@ (8005b94 <std+0x60>)
 8005b60:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005b62:	4b0d      	ldr	r3, [pc, #52]	@ (8005b98 <std+0x64>)
 8005b64:	6323      	str	r3, [r4, #48]	@ 0x30
 8005b66:	4b0d      	ldr	r3, [pc, #52]	@ (8005b9c <std+0x68>)
 8005b68:	6224      	str	r4, [r4, #32]
 8005b6a:	429c      	cmp	r4, r3
 8005b6c:	d006      	beq.n	8005b7c <std+0x48>
 8005b6e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005b72:	4294      	cmp	r4, r2
 8005b74:	d002      	beq.n	8005b7c <std+0x48>
 8005b76:	33d0      	adds	r3, #208	@ 0xd0
 8005b78:	429c      	cmp	r4, r3
 8005b7a:	d105      	bne.n	8005b88 <std+0x54>
 8005b7c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005b80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b84:	f000 b966 	b.w	8005e54 <__retarget_lock_init_recursive>
 8005b88:	bd10      	pop	{r4, pc}
 8005b8a:	bf00      	nop
 8005b8c:	08005cdd 	.word	0x08005cdd
 8005b90:	08005cff 	.word	0x08005cff
 8005b94:	08005d37 	.word	0x08005d37
 8005b98:	08005d5b 	.word	0x08005d5b
 8005b9c:	240001ec 	.word	0x240001ec

08005ba0 <stdio_exit_handler>:
 8005ba0:	4a02      	ldr	r2, [pc, #8]	@ (8005bac <stdio_exit_handler+0xc>)
 8005ba2:	4903      	ldr	r1, [pc, #12]	@ (8005bb0 <stdio_exit_handler+0x10>)
 8005ba4:	4803      	ldr	r0, [pc, #12]	@ (8005bb4 <stdio_exit_handler+0x14>)
 8005ba6:	f000 b869 	b.w	8005c7c <_fwalk_sglue>
 8005baa:	bf00      	nop
 8005bac:	2400002c 	.word	0x2400002c
 8005bb0:	080066f5 	.word	0x080066f5
 8005bb4:	2400003c 	.word	0x2400003c

08005bb8 <cleanup_stdio>:
 8005bb8:	6841      	ldr	r1, [r0, #4]
 8005bba:	4b0c      	ldr	r3, [pc, #48]	@ (8005bec <cleanup_stdio+0x34>)
 8005bbc:	4299      	cmp	r1, r3
 8005bbe:	b510      	push	{r4, lr}
 8005bc0:	4604      	mov	r4, r0
 8005bc2:	d001      	beq.n	8005bc8 <cleanup_stdio+0x10>
 8005bc4:	f000 fd96 	bl	80066f4 <_fflush_r>
 8005bc8:	68a1      	ldr	r1, [r4, #8]
 8005bca:	4b09      	ldr	r3, [pc, #36]	@ (8005bf0 <cleanup_stdio+0x38>)
 8005bcc:	4299      	cmp	r1, r3
 8005bce:	d002      	beq.n	8005bd6 <cleanup_stdio+0x1e>
 8005bd0:	4620      	mov	r0, r4
 8005bd2:	f000 fd8f 	bl	80066f4 <_fflush_r>
 8005bd6:	68e1      	ldr	r1, [r4, #12]
 8005bd8:	4b06      	ldr	r3, [pc, #24]	@ (8005bf4 <cleanup_stdio+0x3c>)
 8005bda:	4299      	cmp	r1, r3
 8005bdc:	d004      	beq.n	8005be8 <cleanup_stdio+0x30>
 8005bde:	4620      	mov	r0, r4
 8005be0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005be4:	f000 bd86 	b.w	80066f4 <_fflush_r>
 8005be8:	bd10      	pop	{r4, pc}
 8005bea:	bf00      	nop
 8005bec:	240001ec 	.word	0x240001ec
 8005bf0:	24000254 	.word	0x24000254
 8005bf4:	240002bc 	.word	0x240002bc

08005bf8 <global_stdio_init.part.0>:
 8005bf8:	b510      	push	{r4, lr}
 8005bfa:	4b0b      	ldr	r3, [pc, #44]	@ (8005c28 <global_stdio_init.part.0+0x30>)
 8005bfc:	4c0b      	ldr	r4, [pc, #44]	@ (8005c2c <global_stdio_init.part.0+0x34>)
 8005bfe:	4a0c      	ldr	r2, [pc, #48]	@ (8005c30 <global_stdio_init.part.0+0x38>)
 8005c00:	601a      	str	r2, [r3, #0]
 8005c02:	4620      	mov	r0, r4
 8005c04:	2200      	movs	r2, #0
 8005c06:	2104      	movs	r1, #4
 8005c08:	f7ff ff94 	bl	8005b34 <std>
 8005c0c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005c10:	2201      	movs	r2, #1
 8005c12:	2109      	movs	r1, #9
 8005c14:	f7ff ff8e 	bl	8005b34 <std>
 8005c18:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005c1c:	2202      	movs	r2, #2
 8005c1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c22:	2112      	movs	r1, #18
 8005c24:	f7ff bf86 	b.w	8005b34 <std>
 8005c28:	24000324 	.word	0x24000324
 8005c2c:	240001ec 	.word	0x240001ec
 8005c30:	08005ba1 	.word	0x08005ba1

08005c34 <__sfp_lock_acquire>:
 8005c34:	4801      	ldr	r0, [pc, #4]	@ (8005c3c <__sfp_lock_acquire+0x8>)
 8005c36:	f000 b90e 	b.w	8005e56 <__retarget_lock_acquire_recursive>
 8005c3a:	bf00      	nop
 8005c3c:	2400032d 	.word	0x2400032d

08005c40 <__sfp_lock_release>:
 8005c40:	4801      	ldr	r0, [pc, #4]	@ (8005c48 <__sfp_lock_release+0x8>)
 8005c42:	f000 b909 	b.w	8005e58 <__retarget_lock_release_recursive>
 8005c46:	bf00      	nop
 8005c48:	2400032d 	.word	0x2400032d

08005c4c <__sinit>:
 8005c4c:	b510      	push	{r4, lr}
 8005c4e:	4604      	mov	r4, r0
 8005c50:	f7ff fff0 	bl	8005c34 <__sfp_lock_acquire>
 8005c54:	6a23      	ldr	r3, [r4, #32]
 8005c56:	b11b      	cbz	r3, 8005c60 <__sinit+0x14>
 8005c58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c5c:	f7ff bff0 	b.w	8005c40 <__sfp_lock_release>
 8005c60:	4b04      	ldr	r3, [pc, #16]	@ (8005c74 <__sinit+0x28>)
 8005c62:	6223      	str	r3, [r4, #32]
 8005c64:	4b04      	ldr	r3, [pc, #16]	@ (8005c78 <__sinit+0x2c>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d1f5      	bne.n	8005c58 <__sinit+0xc>
 8005c6c:	f7ff ffc4 	bl	8005bf8 <global_stdio_init.part.0>
 8005c70:	e7f2      	b.n	8005c58 <__sinit+0xc>
 8005c72:	bf00      	nop
 8005c74:	08005bb9 	.word	0x08005bb9
 8005c78:	24000324 	.word	0x24000324

08005c7c <_fwalk_sglue>:
 8005c7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c80:	4607      	mov	r7, r0
 8005c82:	4688      	mov	r8, r1
 8005c84:	4614      	mov	r4, r2
 8005c86:	2600      	movs	r6, #0
 8005c88:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005c8c:	f1b9 0901 	subs.w	r9, r9, #1
 8005c90:	d505      	bpl.n	8005c9e <_fwalk_sglue+0x22>
 8005c92:	6824      	ldr	r4, [r4, #0]
 8005c94:	2c00      	cmp	r4, #0
 8005c96:	d1f7      	bne.n	8005c88 <_fwalk_sglue+0xc>
 8005c98:	4630      	mov	r0, r6
 8005c9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c9e:	89ab      	ldrh	r3, [r5, #12]
 8005ca0:	2b01      	cmp	r3, #1
 8005ca2:	d907      	bls.n	8005cb4 <_fwalk_sglue+0x38>
 8005ca4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005ca8:	3301      	adds	r3, #1
 8005caa:	d003      	beq.n	8005cb4 <_fwalk_sglue+0x38>
 8005cac:	4629      	mov	r1, r5
 8005cae:	4638      	mov	r0, r7
 8005cb0:	47c0      	blx	r8
 8005cb2:	4306      	orrs	r6, r0
 8005cb4:	3568      	adds	r5, #104	@ 0x68
 8005cb6:	e7e9      	b.n	8005c8c <_fwalk_sglue+0x10>

08005cb8 <iprintf>:
 8005cb8:	b40f      	push	{r0, r1, r2, r3}
 8005cba:	b507      	push	{r0, r1, r2, lr}
 8005cbc:	4906      	ldr	r1, [pc, #24]	@ (8005cd8 <iprintf+0x20>)
 8005cbe:	ab04      	add	r3, sp, #16
 8005cc0:	6808      	ldr	r0, [r1, #0]
 8005cc2:	f853 2b04 	ldr.w	r2, [r3], #4
 8005cc6:	6881      	ldr	r1, [r0, #8]
 8005cc8:	9301      	str	r3, [sp, #4]
 8005cca:	f000 f9e9 	bl	80060a0 <_vfiprintf_r>
 8005cce:	b003      	add	sp, #12
 8005cd0:	f85d eb04 	ldr.w	lr, [sp], #4
 8005cd4:	b004      	add	sp, #16
 8005cd6:	4770      	bx	lr
 8005cd8:	24000038 	.word	0x24000038

08005cdc <__sread>:
 8005cdc:	b510      	push	{r4, lr}
 8005cde:	460c      	mov	r4, r1
 8005ce0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ce4:	f000 f868 	bl	8005db8 <_read_r>
 8005ce8:	2800      	cmp	r0, #0
 8005cea:	bfab      	itete	ge
 8005cec:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005cee:	89a3      	ldrhlt	r3, [r4, #12]
 8005cf0:	181b      	addge	r3, r3, r0
 8005cf2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005cf6:	bfac      	ite	ge
 8005cf8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005cfa:	81a3      	strhlt	r3, [r4, #12]
 8005cfc:	bd10      	pop	{r4, pc}

08005cfe <__swrite>:
 8005cfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d02:	461f      	mov	r7, r3
 8005d04:	898b      	ldrh	r3, [r1, #12]
 8005d06:	05db      	lsls	r3, r3, #23
 8005d08:	4605      	mov	r5, r0
 8005d0a:	460c      	mov	r4, r1
 8005d0c:	4616      	mov	r6, r2
 8005d0e:	d505      	bpl.n	8005d1c <__swrite+0x1e>
 8005d10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d14:	2302      	movs	r3, #2
 8005d16:	2200      	movs	r2, #0
 8005d18:	f000 f83c 	bl	8005d94 <_lseek_r>
 8005d1c:	89a3      	ldrh	r3, [r4, #12]
 8005d1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005d22:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005d26:	81a3      	strh	r3, [r4, #12]
 8005d28:	4632      	mov	r2, r6
 8005d2a:	463b      	mov	r3, r7
 8005d2c:	4628      	mov	r0, r5
 8005d2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005d32:	f000 b853 	b.w	8005ddc <_write_r>

08005d36 <__sseek>:
 8005d36:	b510      	push	{r4, lr}
 8005d38:	460c      	mov	r4, r1
 8005d3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d3e:	f000 f829 	bl	8005d94 <_lseek_r>
 8005d42:	1c43      	adds	r3, r0, #1
 8005d44:	89a3      	ldrh	r3, [r4, #12]
 8005d46:	bf15      	itete	ne
 8005d48:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005d4a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005d4e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005d52:	81a3      	strheq	r3, [r4, #12]
 8005d54:	bf18      	it	ne
 8005d56:	81a3      	strhne	r3, [r4, #12]
 8005d58:	bd10      	pop	{r4, pc}

08005d5a <__sclose>:
 8005d5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d5e:	f000 b809 	b.w	8005d74 <_close_r>

08005d62 <memset>:
 8005d62:	4402      	add	r2, r0
 8005d64:	4603      	mov	r3, r0
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d100      	bne.n	8005d6c <memset+0xa>
 8005d6a:	4770      	bx	lr
 8005d6c:	f803 1b01 	strb.w	r1, [r3], #1
 8005d70:	e7f9      	b.n	8005d66 <memset+0x4>
	...

08005d74 <_close_r>:
 8005d74:	b538      	push	{r3, r4, r5, lr}
 8005d76:	4d06      	ldr	r5, [pc, #24]	@ (8005d90 <_close_r+0x1c>)
 8005d78:	2300      	movs	r3, #0
 8005d7a:	4604      	mov	r4, r0
 8005d7c:	4608      	mov	r0, r1
 8005d7e:	602b      	str	r3, [r5, #0]
 8005d80:	f7fb f83d 	bl	8000dfe <_close>
 8005d84:	1c43      	adds	r3, r0, #1
 8005d86:	d102      	bne.n	8005d8e <_close_r+0x1a>
 8005d88:	682b      	ldr	r3, [r5, #0]
 8005d8a:	b103      	cbz	r3, 8005d8e <_close_r+0x1a>
 8005d8c:	6023      	str	r3, [r4, #0]
 8005d8e:	bd38      	pop	{r3, r4, r5, pc}
 8005d90:	24000328 	.word	0x24000328

08005d94 <_lseek_r>:
 8005d94:	b538      	push	{r3, r4, r5, lr}
 8005d96:	4d07      	ldr	r5, [pc, #28]	@ (8005db4 <_lseek_r+0x20>)
 8005d98:	4604      	mov	r4, r0
 8005d9a:	4608      	mov	r0, r1
 8005d9c:	4611      	mov	r1, r2
 8005d9e:	2200      	movs	r2, #0
 8005da0:	602a      	str	r2, [r5, #0]
 8005da2:	461a      	mov	r2, r3
 8005da4:	f7fb f852 	bl	8000e4c <_lseek>
 8005da8:	1c43      	adds	r3, r0, #1
 8005daa:	d102      	bne.n	8005db2 <_lseek_r+0x1e>
 8005dac:	682b      	ldr	r3, [r5, #0]
 8005dae:	b103      	cbz	r3, 8005db2 <_lseek_r+0x1e>
 8005db0:	6023      	str	r3, [r4, #0]
 8005db2:	bd38      	pop	{r3, r4, r5, pc}
 8005db4:	24000328 	.word	0x24000328

08005db8 <_read_r>:
 8005db8:	b538      	push	{r3, r4, r5, lr}
 8005dba:	4d07      	ldr	r5, [pc, #28]	@ (8005dd8 <_read_r+0x20>)
 8005dbc:	4604      	mov	r4, r0
 8005dbe:	4608      	mov	r0, r1
 8005dc0:	4611      	mov	r1, r2
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	602a      	str	r2, [r5, #0]
 8005dc6:	461a      	mov	r2, r3
 8005dc8:	f7fa ffe0 	bl	8000d8c <_read>
 8005dcc:	1c43      	adds	r3, r0, #1
 8005dce:	d102      	bne.n	8005dd6 <_read_r+0x1e>
 8005dd0:	682b      	ldr	r3, [r5, #0]
 8005dd2:	b103      	cbz	r3, 8005dd6 <_read_r+0x1e>
 8005dd4:	6023      	str	r3, [r4, #0]
 8005dd6:	bd38      	pop	{r3, r4, r5, pc}
 8005dd8:	24000328 	.word	0x24000328

08005ddc <_write_r>:
 8005ddc:	b538      	push	{r3, r4, r5, lr}
 8005dde:	4d07      	ldr	r5, [pc, #28]	@ (8005dfc <_write_r+0x20>)
 8005de0:	4604      	mov	r4, r0
 8005de2:	4608      	mov	r0, r1
 8005de4:	4611      	mov	r1, r2
 8005de6:	2200      	movs	r2, #0
 8005de8:	602a      	str	r2, [r5, #0]
 8005dea:	461a      	mov	r2, r3
 8005dec:	f7fa ffeb 	bl	8000dc6 <_write>
 8005df0:	1c43      	adds	r3, r0, #1
 8005df2:	d102      	bne.n	8005dfa <_write_r+0x1e>
 8005df4:	682b      	ldr	r3, [r5, #0]
 8005df6:	b103      	cbz	r3, 8005dfa <_write_r+0x1e>
 8005df8:	6023      	str	r3, [r4, #0]
 8005dfa:	bd38      	pop	{r3, r4, r5, pc}
 8005dfc:	24000328 	.word	0x24000328

08005e00 <__errno>:
 8005e00:	4b01      	ldr	r3, [pc, #4]	@ (8005e08 <__errno+0x8>)
 8005e02:	6818      	ldr	r0, [r3, #0]
 8005e04:	4770      	bx	lr
 8005e06:	bf00      	nop
 8005e08:	24000038 	.word	0x24000038

08005e0c <__libc_init_array>:
 8005e0c:	b570      	push	{r4, r5, r6, lr}
 8005e0e:	4d0d      	ldr	r5, [pc, #52]	@ (8005e44 <__libc_init_array+0x38>)
 8005e10:	4c0d      	ldr	r4, [pc, #52]	@ (8005e48 <__libc_init_array+0x3c>)
 8005e12:	1b64      	subs	r4, r4, r5
 8005e14:	10a4      	asrs	r4, r4, #2
 8005e16:	2600      	movs	r6, #0
 8005e18:	42a6      	cmp	r6, r4
 8005e1a:	d109      	bne.n	8005e30 <__libc_init_array+0x24>
 8005e1c:	4d0b      	ldr	r5, [pc, #44]	@ (8005e4c <__libc_init_array+0x40>)
 8005e1e:	4c0c      	ldr	r4, [pc, #48]	@ (8005e50 <__libc_init_array+0x44>)
 8005e20:	f000 fdb8 	bl	8006994 <_init>
 8005e24:	1b64      	subs	r4, r4, r5
 8005e26:	10a4      	asrs	r4, r4, #2
 8005e28:	2600      	movs	r6, #0
 8005e2a:	42a6      	cmp	r6, r4
 8005e2c:	d105      	bne.n	8005e3a <__libc_init_array+0x2e>
 8005e2e:	bd70      	pop	{r4, r5, r6, pc}
 8005e30:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e34:	4798      	blx	r3
 8005e36:	3601      	adds	r6, #1
 8005e38:	e7ee      	b.n	8005e18 <__libc_init_array+0xc>
 8005e3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e3e:	4798      	blx	r3
 8005e40:	3601      	adds	r6, #1
 8005e42:	e7f2      	b.n	8005e2a <__libc_init_array+0x1e>
 8005e44:	08006a30 	.word	0x08006a30
 8005e48:	08006a30 	.word	0x08006a30
 8005e4c:	08006a30 	.word	0x08006a30
 8005e50:	08006a34 	.word	0x08006a34

08005e54 <__retarget_lock_init_recursive>:
 8005e54:	4770      	bx	lr

08005e56 <__retarget_lock_acquire_recursive>:
 8005e56:	4770      	bx	lr

08005e58 <__retarget_lock_release_recursive>:
 8005e58:	4770      	bx	lr
	...

08005e5c <_free_r>:
 8005e5c:	b538      	push	{r3, r4, r5, lr}
 8005e5e:	4605      	mov	r5, r0
 8005e60:	2900      	cmp	r1, #0
 8005e62:	d041      	beq.n	8005ee8 <_free_r+0x8c>
 8005e64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e68:	1f0c      	subs	r4, r1, #4
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	bfb8      	it	lt
 8005e6e:	18e4      	addlt	r4, r4, r3
 8005e70:	f000 f8e0 	bl	8006034 <__malloc_lock>
 8005e74:	4a1d      	ldr	r2, [pc, #116]	@ (8005eec <_free_r+0x90>)
 8005e76:	6813      	ldr	r3, [r2, #0]
 8005e78:	b933      	cbnz	r3, 8005e88 <_free_r+0x2c>
 8005e7a:	6063      	str	r3, [r4, #4]
 8005e7c:	6014      	str	r4, [r2, #0]
 8005e7e:	4628      	mov	r0, r5
 8005e80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005e84:	f000 b8dc 	b.w	8006040 <__malloc_unlock>
 8005e88:	42a3      	cmp	r3, r4
 8005e8a:	d908      	bls.n	8005e9e <_free_r+0x42>
 8005e8c:	6820      	ldr	r0, [r4, #0]
 8005e8e:	1821      	adds	r1, r4, r0
 8005e90:	428b      	cmp	r3, r1
 8005e92:	bf01      	itttt	eq
 8005e94:	6819      	ldreq	r1, [r3, #0]
 8005e96:	685b      	ldreq	r3, [r3, #4]
 8005e98:	1809      	addeq	r1, r1, r0
 8005e9a:	6021      	streq	r1, [r4, #0]
 8005e9c:	e7ed      	b.n	8005e7a <_free_r+0x1e>
 8005e9e:	461a      	mov	r2, r3
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	b10b      	cbz	r3, 8005ea8 <_free_r+0x4c>
 8005ea4:	42a3      	cmp	r3, r4
 8005ea6:	d9fa      	bls.n	8005e9e <_free_r+0x42>
 8005ea8:	6811      	ldr	r1, [r2, #0]
 8005eaa:	1850      	adds	r0, r2, r1
 8005eac:	42a0      	cmp	r0, r4
 8005eae:	d10b      	bne.n	8005ec8 <_free_r+0x6c>
 8005eb0:	6820      	ldr	r0, [r4, #0]
 8005eb2:	4401      	add	r1, r0
 8005eb4:	1850      	adds	r0, r2, r1
 8005eb6:	4283      	cmp	r3, r0
 8005eb8:	6011      	str	r1, [r2, #0]
 8005eba:	d1e0      	bne.n	8005e7e <_free_r+0x22>
 8005ebc:	6818      	ldr	r0, [r3, #0]
 8005ebe:	685b      	ldr	r3, [r3, #4]
 8005ec0:	6053      	str	r3, [r2, #4]
 8005ec2:	4408      	add	r0, r1
 8005ec4:	6010      	str	r0, [r2, #0]
 8005ec6:	e7da      	b.n	8005e7e <_free_r+0x22>
 8005ec8:	d902      	bls.n	8005ed0 <_free_r+0x74>
 8005eca:	230c      	movs	r3, #12
 8005ecc:	602b      	str	r3, [r5, #0]
 8005ece:	e7d6      	b.n	8005e7e <_free_r+0x22>
 8005ed0:	6820      	ldr	r0, [r4, #0]
 8005ed2:	1821      	adds	r1, r4, r0
 8005ed4:	428b      	cmp	r3, r1
 8005ed6:	bf04      	itt	eq
 8005ed8:	6819      	ldreq	r1, [r3, #0]
 8005eda:	685b      	ldreq	r3, [r3, #4]
 8005edc:	6063      	str	r3, [r4, #4]
 8005ede:	bf04      	itt	eq
 8005ee0:	1809      	addeq	r1, r1, r0
 8005ee2:	6021      	streq	r1, [r4, #0]
 8005ee4:	6054      	str	r4, [r2, #4]
 8005ee6:	e7ca      	b.n	8005e7e <_free_r+0x22>
 8005ee8:	bd38      	pop	{r3, r4, r5, pc}
 8005eea:	bf00      	nop
 8005eec:	24000334 	.word	0x24000334

08005ef0 <sbrk_aligned>:
 8005ef0:	b570      	push	{r4, r5, r6, lr}
 8005ef2:	4e0f      	ldr	r6, [pc, #60]	@ (8005f30 <sbrk_aligned+0x40>)
 8005ef4:	460c      	mov	r4, r1
 8005ef6:	6831      	ldr	r1, [r6, #0]
 8005ef8:	4605      	mov	r5, r0
 8005efa:	b911      	cbnz	r1, 8005f02 <sbrk_aligned+0x12>
 8005efc:	f000 fcb6 	bl	800686c <_sbrk_r>
 8005f00:	6030      	str	r0, [r6, #0]
 8005f02:	4621      	mov	r1, r4
 8005f04:	4628      	mov	r0, r5
 8005f06:	f000 fcb1 	bl	800686c <_sbrk_r>
 8005f0a:	1c43      	adds	r3, r0, #1
 8005f0c:	d103      	bne.n	8005f16 <sbrk_aligned+0x26>
 8005f0e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8005f12:	4620      	mov	r0, r4
 8005f14:	bd70      	pop	{r4, r5, r6, pc}
 8005f16:	1cc4      	adds	r4, r0, #3
 8005f18:	f024 0403 	bic.w	r4, r4, #3
 8005f1c:	42a0      	cmp	r0, r4
 8005f1e:	d0f8      	beq.n	8005f12 <sbrk_aligned+0x22>
 8005f20:	1a21      	subs	r1, r4, r0
 8005f22:	4628      	mov	r0, r5
 8005f24:	f000 fca2 	bl	800686c <_sbrk_r>
 8005f28:	3001      	adds	r0, #1
 8005f2a:	d1f2      	bne.n	8005f12 <sbrk_aligned+0x22>
 8005f2c:	e7ef      	b.n	8005f0e <sbrk_aligned+0x1e>
 8005f2e:	bf00      	nop
 8005f30:	24000330 	.word	0x24000330

08005f34 <_malloc_r>:
 8005f34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f38:	1ccd      	adds	r5, r1, #3
 8005f3a:	f025 0503 	bic.w	r5, r5, #3
 8005f3e:	3508      	adds	r5, #8
 8005f40:	2d0c      	cmp	r5, #12
 8005f42:	bf38      	it	cc
 8005f44:	250c      	movcc	r5, #12
 8005f46:	2d00      	cmp	r5, #0
 8005f48:	4606      	mov	r6, r0
 8005f4a:	db01      	blt.n	8005f50 <_malloc_r+0x1c>
 8005f4c:	42a9      	cmp	r1, r5
 8005f4e:	d904      	bls.n	8005f5a <_malloc_r+0x26>
 8005f50:	230c      	movs	r3, #12
 8005f52:	6033      	str	r3, [r6, #0]
 8005f54:	2000      	movs	r0, #0
 8005f56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f5a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006030 <_malloc_r+0xfc>
 8005f5e:	f000 f869 	bl	8006034 <__malloc_lock>
 8005f62:	f8d8 3000 	ldr.w	r3, [r8]
 8005f66:	461c      	mov	r4, r3
 8005f68:	bb44      	cbnz	r4, 8005fbc <_malloc_r+0x88>
 8005f6a:	4629      	mov	r1, r5
 8005f6c:	4630      	mov	r0, r6
 8005f6e:	f7ff ffbf 	bl	8005ef0 <sbrk_aligned>
 8005f72:	1c43      	adds	r3, r0, #1
 8005f74:	4604      	mov	r4, r0
 8005f76:	d158      	bne.n	800602a <_malloc_r+0xf6>
 8005f78:	f8d8 4000 	ldr.w	r4, [r8]
 8005f7c:	4627      	mov	r7, r4
 8005f7e:	2f00      	cmp	r7, #0
 8005f80:	d143      	bne.n	800600a <_malloc_r+0xd6>
 8005f82:	2c00      	cmp	r4, #0
 8005f84:	d04b      	beq.n	800601e <_malloc_r+0xea>
 8005f86:	6823      	ldr	r3, [r4, #0]
 8005f88:	4639      	mov	r1, r7
 8005f8a:	4630      	mov	r0, r6
 8005f8c:	eb04 0903 	add.w	r9, r4, r3
 8005f90:	f000 fc6c 	bl	800686c <_sbrk_r>
 8005f94:	4581      	cmp	r9, r0
 8005f96:	d142      	bne.n	800601e <_malloc_r+0xea>
 8005f98:	6821      	ldr	r1, [r4, #0]
 8005f9a:	1a6d      	subs	r5, r5, r1
 8005f9c:	4629      	mov	r1, r5
 8005f9e:	4630      	mov	r0, r6
 8005fa0:	f7ff ffa6 	bl	8005ef0 <sbrk_aligned>
 8005fa4:	3001      	adds	r0, #1
 8005fa6:	d03a      	beq.n	800601e <_malloc_r+0xea>
 8005fa8:	6823      	ldr	r3, [r4, #0]
 8005faa:	442b      	add	r3, r5
 8005fac:	6023      	str	r3, [r4, #0]
 8005fae:	f8d8 3000 	ldr.w	r3, [r8]
 8005fb2:	685a      	ldr	r2, [r3, #4]
 8005fb4:	bb62      	cbnz	r2, 8006010 <_malloc_r+0xdc>
 8005fb6:	f8c8 7000 	str.w	r7, [r8]
 8005fba:	e00f      	b.n	8005fdc <_malloc_r+0xa8>
 8005fbc:	6822      	ldr	r2, [r4, #0]
 8005fbe:	1b52      	subs	r2, r2, r5
 8005fc0:	d420      	bmi.n	8006004 <_malloc_r+0xd0>
 8005fc2:	2a0b      	cmp	r2, #11
 8005fc4:	d917      	bls.n	8005ff6 <_malloc_r+0xc2>
 8005fc6:	1961      	adds	r1, r4, r5
 8005fc8:	42a3      	cmp	r3, r4
 8005fca:	6025      	str	r5, [r4, #0]
 8005fcc:	bf18      	it	ne
 8005fce:	6059      	strne	r1, [r3, #4]
 8005fd0:	6863      	ldr	r3, [r4, #4]
 8005fd2:	bf08      	it	eq
 8005fd4:	f8c8 1000 	streq.w	r1, [r8]
 8005fd8:	5162      	str	r2, [r4, r5]
 8005fda:	604b      	str	r3, [r1, #4]
 8005fdc:	4630      	mov	r0, r6
 8005fde:	f000 f82f 	bl	8006040 <__malloc_unlock>
 8005fe2:	f104 000b 	add.w	r0, r4, #11
 8005fe6:	1d23      	adds	r3, r4, #4
 8005fe8:	f020 0007 	bic.w	r0, r0, #7
 8005fec:	1ac2      	subs	r2, r0, r3
 8005fee:	bf1c      	itt	ne
 8005ff0:	1a1b      	subne	r3, r3, r0
 8005ff2:	50a3      	strne	r3, [r4, r2]
 8005ff4:	e7af      	b.n	8005f56 <_malloc_r+0x22>
 8005ff6:	6862      	ldr	r2, [r4, #4]
 8005ff8:	42a3      	cmp	r3, r4
 8005ffa:	bf0c      	ite	eq
 8005ffc:	f8c8 2000 	streq.w	r2, [r8]
 8006000:	605a      	strne	r2, [r3, #4]
 8006002:	e7eb      	b.n	8005fdc <_malloc_r+0xa8>
 8006004:	4623      	mov	r3, r4
 8006006:	6864      	ldr	r4, [r4, #4]
 8006008:	e7ae      	b.n	8005f68 <_malloc_r+0x34>
 800600a:	463c      	mov	r4, r7
 800600c:	687f      	ldr	r7, [r7, #4]
 800600e:	e7b6      	b.n	8005f7e <_malloc_r+0x4a>
 8006010:	461a      	mov	r2, r3
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	42a3      	cmp	r3, r4
 8006016:	d1fb      	bne.n	8006010 <_malloc_r+0xdc>
 8006018:	2300      	movs	r3, #0
 800601a:	6053      	str	r3, [r2, #4]
 800601c:	e7de      	b.n	8005fdc <_malloc_r+0xa8>
 800601e:	230c      	movs	r3, #12
 8006020:	6033      	str	r3, [r6, #0]
 8006022:	4630      	mov	r0, r6
 8006024:	f000 f80c 	bl	8006040 <__malloc_unlock>
 8006028:	e794      	b.n	8005f54 <_malloc_r+0x20>
 800602a:	6005      	str	r5, [r0, #0]
 800602c:	e7d6      	b.n	8005fdc <_malloc_r+0xa8>
 800602e:	bf00      	nop
 8006030:	24000334 	.word	0x24000334

08006034 <__malloc_lock>:
 8006034:	4801      	ldr	r0, [pc, #4]	@ (800603c <__malloc_lock+0x8>)
 8006036:	f7ff bf0e 	b.w	8005e56 <__retarget_lock_acquire_recursive>
 800603a:	bf00      	nop
 800603c:	2400032c 	.word	0x2400032c

08006040 <__malloc_unlock>:
 8006040:	4801      	ldr	r0, [pc, #4]	@ (8006048 <__malloc_unlock+0x8>)
 8006042:	f7ff bf09 	b.w	8005e58 <__retarget_lock_release_recursive>
 8006046:	bf00      	nop
 8006048:	2400032c 	.word	0x2400032c

0800604c <__sfputc_r>:
 800604c:	6893      	ldr	r3, [r2, #8]
 800604e:	3b01      	subs	r3, #1
 8006050:	2b00      	cmp	r3, #0
 8006052:	b410      	push	{r4}
 8006054:	6093      	str	r3, [r2, #8]
 8006056:	da08      	bge.n	800606a <__sfputc_r+0x1e>
 8006058:	6994      	ldr	r4, [r2, #24]
 800605a:	42a3      	cmp	r3, r4
 800605c:	db01      	blt.n	8006062 <__sfputc_r+0x16>
 800605e:	290a      	cmp	r1, #10
 8006060:	d103      	bne.n	800606a <__sfputc_r+0x1e>
 8006062:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006066:	f000 bb6d 	b.w	8006744 <__swbuf_r>
 800606a:	6813      	ldr	r3, [r2, #0]
 800606c:	1c58      	adds	r0, r3, #1
 800606e:	6010      	str	r0, [r2, #0]
 8006070:	7019      	strb	r1, [r3, #0]
 8006072:	4608      	mov	r0, r1
 8006074:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006078:	4770      	bx	lr

0800607a <__sfputs_r>:
 800607a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800607c:	4606      	mov	r6, r0
 800607e:	460f      	mov	r7, r1
 8006080:	4614      	mov	r4, r2
 8006082:	18d5      	adds	r5, r2, r3
 8006084:	42ac      	cmp	r4, r5
 8006086:	d101      	bne.n	800608c <__sfputs_r+0x12>
 8006088:	2000      	movs	r0, #0
 800608a:	e007      	b.n	800609c <__sfputs_r+0x22>
 800608c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006090:	463a      	mov	r2, r7
 8006092:	4630      	mov	r0, r6
 8006094:	f7ff ffda 	bl	800604c <__sfputc_r>
 8006098:	1c43      	adds	r3, r0, #1
 800609a:	d1f3      	bne.n	8006084 <__sfputs_r+0xa>
 800609c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080060a0 <_vfiprintf_r>:
 80060a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060a4:	460d      	mov	r5, r1
 80060a6:	b09d      	sub	sp, #116	@ 0x74
 80060a8:	4614      	mov	r4, r2
 80060aa:	4698      	mov	r8, r3
 80060ac:	4606      	mov	r6, r0
 80060ae:	b118      	cbz	r0, 80060b8 <_vfiprintf_r+0x18>
 80060b0:	6a03      	ldr	r3, [r0, #32]
 80060b2:	b90b      	cbnz	r3, 80060b8 <_vfiprintf_r+0x18>
 80060b4:	f7ff fdca 	bl	8005c4c <__sinit>
 80060b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80060ba:	07d9      	lsls	r1, r3, #31
 80060bc:	d405      	bmi.n	80060ca <_vfiprintf_r+0x2a>
 80060be:	89ab      	ldrh	r3, [r5, #12]
 80060c0:	059a      	lsls	r2, r3, #22
 80060c2:	d402      	bmi.n	80060ca <_vfiprintf_r+0x2a>
 80060c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80060c6:	f7ff fec6 	bl	8005e56 <__retarget_lock_acquire_recursive>
 80060ca:	89ab      	ldrh	r3, [r5, #12]
 80060cc:	071b      	lsls	r3, r3, #28
 80060ce:	d501      	bpl.n	80060d4 <_vfiprintf_r+0x34>
 80060d0:	692b      	ldr	r3, [r5, #16]
 80060d2:	b99b      	cbnz	r3, 80060fc <_vfiprintf_r+0x5c>
 80060d4:	4629      	mov	r1, r5
 80060d6:	4630      	mov	r0, r6
 80060d8:	f000 fb72 	bl	80067c0 <__swsetup_r>
 80060dc:	b170      	cbz	r0, 80060fc <_vfiprintf_r+0x5c>
 80060de:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80060e0:	07dc      	lsls	r4, r3, #31
 80060e2:	d504      	bpl.n	80060ee <_vfiprintf_r+0x4e>
 80060e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80060e8:	b01d      	add	sp, #116	@ 0x74
 80060ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060ee:	89ab      	ldrh	r3, [r5, #12]
 80060f0:	0598      	lsls	r0, r3, #22
 80060f2:	d4f7      	bmi.n	80060e4 <_vfiprintf_r+0x44>
 80060f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80060f6:	f7ff feaf 	bl	8005e58 <__retarget_lock_release_recursive>
 80060fa:	e7f3      	b.n	80060e4 <_vfiprintf_r+0x44>
 80060fc:	2300      	movs	r3, #0
 80060fe:	9309      	str	r3, [sp, #36]	@ 0x24
 8006100:	2320      	movs	r3, #32
 8006102:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006106:	f8cd 800c 	str.w	r8, [sp, #12]
 800610a:	2330      	movs	r3, #48	@ 0x30
 800610c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80062bc <_vfiprintf_r+0x21c>
 8006110:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006114:	f04f 0901 	mov.w	r9, #1
 8006118:	4623      	mov	r3, r4
 800611a:	469a      	mov	sl, r3
 800611c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006120:	b10a      	cbz	r2, 8006126 <_vfiprintf_r+0x86>
 8006122:	2a25      	cmp	r2, #37	@ 0x25
 8006124:	d1f9      	bne.n	800611a <_vfiprintf_r+0x7a>
 8006126:	ebba 0b04 	subs.w	fp, sl, r4
 800612a:	d00b      	beq.n	8006144 <_vfiprintf_r+0xa4>
 800612c:	465b      	mov	r3, fp
 800612e:	4622      	mov	r2, r4
 8006130:	4629      	mov	r1, r5
 8006132:	4630      	mov	r0, r6
 8006134:	f7ff ffa1 	bl	800607a <__sfputs_r>
 8006138:	3001      	adds	r0, #1
 800613a:	f000 80a7 	beq.w	800628c <_vfiprintf_r+0x1ec>
 800613e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006140:	445a      	add	r2, fp
 8006142:	9209      	str	r2, [sp, #36]	@ 0x24
 8006144:	f89a 3000 	ldrb.w	r3, [sl]
 8006148:	2b00      	cmp	r3, #0
 800614a:	f000 809f 	beq.w	800628c <_vfiprintf_r+0x1ec>
 800614e:	2300      	movs	r3, #0
 8006150:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006154:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006158:	f10a 0a01 	add.w	sl, sl, #1
 800615c:	9304      	str	r3, [sp, #16]
 800615e:	9307      	str	r3, [sp, #28]
 8006160:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006164:	931a      	str	r3, [sp, #104]	@ 0x68
 8006166:	4654      	mov	r4, sl
 8006168:	2205      	movs	r2, #5
 800616a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800616e:	4853      	ldr	r0, [pc, #332]	@ (80062bc <_vfiprintf_r+0x21c>)
 8006170:	f7fa f8b6 	bl	80002e0 <memchr>
 8006174:	9a04      	ldr	r2, [sp, #16]
 8006176:	b9d8      	cbnz	r0, 80061b0 <_vfiprintf_r+0x110>
 8006178:	06d1      	lsls	r1, r2, #27
 800617a:	bf44      	itt	mi
 800617c:	2320      	movmi	r3, #32
 800617e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006182:	0713      	lsls	r3, r2, #28
 8006184:	bf44      	itt	mi
 8006186:	232b      	movmi	r3, #43	@ 0x2b
 8006188:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800618c:	f89a 3000 	ldrb.w	r3, [sl]
 8006190:	2b2a      	cmp	r3, #42	@ 0x2a
 8006192:	d015      	beq.n	80061c0 <_vfiprintf_r+0x120>
 8006194:	9a07      	ldr	r2, [sp, #28]
 8006196:	4654      	mov	r4, sl
 8006198:	2000      	movs	r0, #0
 800619a:	f04f 0c0a 	mov.w	ip, #10
 800619e:	4621      	mov	r1, r4
 80061a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80061a4:	3b30      	subs	r3, #48	@ 0x30
 80061a6:	2b09      	cmp	r3, #9
 80061a8:	d94b      	bls.n	8006242 <_vfiprintf_r+0x1a2>
 80061aa:	b1b0      	cbz	r0, 80061da <_vfiprintf_r+0x13a>
 80061ac:	9207      	str	r2, [sp, #28]
 80061ae:	e014      	b.n	80061da <_vfiprintf_r+0x13a>
 80061b0:	eba0 0308 	sub.w	r3, r0, r8
 80061b4:	fa09 f303 	lsl.w	r3, r9, r3
 80061b8:	4313      	orrs	r3, r2
 80061ba:	9304      	str	r3, [sp, #16]
 80061bc:	46a2      	mov	sl, r4
 80061be:	e7d2      	b.n	8006166 <_vfiprintf_r+0xc6>
 80061c0:	9b03      	ldr	r3, [sp, #12]
 80061c2:	1d19      	adds	r1, r3, #4
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	9103      	str	r1, [sp, #12]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	bfbb      	ittet	lt
 80061cc:	425b      	neglt	r3, r3
 80061ce:	f042 0202 	orrlt.w	r2, r2, #2
 80061d2:	9307      	strge	r3, [sp, #28]
 80061d4:	9307      	strlt	r3, [sp, #28]
 80061d6:	bfb8      	it	lt
 80061d8:	9204      	strlt	r2, [sp, #16]
 80061da:	7823      	ldrb	r3, [r4, #0]
 80061dc:	2b2e      	cmp	r3, #46	@ 0x2e
 80061de:	d10a      	bne.n	80061f6 <_vfiprintf_r+0x156>
 80061e0:	7863      	ldrb	r3, [r4, #1]
 80061e2:	2b2a      	cmp	r3, #42	@ 0x2a
 80061e4:	d132      	bne.n	800624c <_vfiprintf_r+0x1ac>
 80061e6:	9b03      	ldr	r3, [sp, #12]
 80061e8:	1d1a      	adds	r2, r3, #4
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	9203      	str	r2, [sp, #12]
 80061ee:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80061f2:	3402      	adds	r4, #2
 80061f4:	9305      	str	r3, [sp, #20]
 80061f6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80062cc <_vfiprintf_r+0x22c>
 80061fa:	7821      	ldrb	r1, [r4, #0]
 80061fc:	2203      	movs	r2, #3
 80061fe:	4650      	mov	r0, sl
 8006200:	f7fa f86e 	bl	80002e0 <memchr>
 8006204:	b138      	cbz	r0, 8006216 <_vfiprintf_r+0x176>
 8006206:	9b04      	ldr	r3, [sp, #16]
 8006208:	eba0 000a 	sub.w	r0, r0, sl
 800620c:	2240      	movs	r2, #64	@ 0x40
 800620e:	4082      	lsls	r2, r0
 8006210:	4313      	orrs	r3, r2
 8006212:	3401      	adds	r4, #1
 8006214:	9304      	str	r3, [sp, #16]
 8006216:	f814 1b01 	ldrb.w	r1, [r4], #1
 800621a:	4829      	ldr	r0, [pc, #164]	@ (80062c0 <_vfiprintf_r+0x220>)
 800621c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006220:	2206      	movs	r2, #6
 8006222:	f7fa f85d 	bl	80002e0 <memchr>
 8006226:	2800      	cmp	r0, #0
 8006228:	d03f      	beq.n	80062aa <_vfiprintf_r+0x20a>
 800622a:	4b26      	ldr	r3, [pc, #152]	@ (80062c4 <_vfiprintf_r+0x224>)
 800622c:	bb1b      	cbnz	r3, 8006276 <_vfiprintf_r+0x1d6>
 800622e:	9b03      	ldr	r3, [sp, #12]
 8006230:	3307      	adds	r3, #7
 8006232:	f023 0307 	bic.w	r3, r3, #7
 8006236:	3308      	adds	r3, #8
 8006238:	9303      	str	r3, [sp, #12]
 800623a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800623c:	443b      	add	r3, r7
 800623e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006240:	e76a      	b.n	8006118 <_vfiprintf_r+0x78>
 8006242:	fb0c 3202 	mla	r2, ip, r2, r3
 8006246:	460c      	mov	r4, r1
 8006248:	2001      	movs	r0, #1
 800624a:	e7a8      	b.n	800619e <_vfiprintf_r+0xfe>
 800624c:	2300      	movs	r3, #0
 800624e:	3401      	adds	r4, #1
 8006250:	9305      	str	r3, [sp, #20]
 8006252:	4619      	mov	r1, r3
 8006254:	f04f 0c0a 	mov.w	ip, #10
 8006258:	4620      	mov	r0, r4
 800625a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800625e:	3a30      	subs	r2, #48	@ 0x30
 8006260:	2a09      	cmp	r2, #9
 8006262:	d903      	bls.n	800626c <_vfiprintf_r+0x1cc>
 8006264:	2b00      	cmp	r3, #0
 8006266:	d0c6      	beq.n	80061f6 <_vfiprintf_r+0x156>
 8006268:	9105      	str	r1, [sp, #20]
 800626a:	e7c4      	b.n	80061f6 <_vfiprintf_r+0x156>
 800626c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006270:	4604      	mov	r4, r0
 8006272:	2301      	movs	r3, #1
 8006274:	e7f0      	b.n	8006258 <_vfiprintf_r+0x1b8>
 8006276:	ab03      	add	r3, sp, #12
 8006278:	9300      	str	r3, [sp, #0]
 800627a:	462a      	mov	r2, r5
 800627c:	4b12      	ldr	r3, [pc, #72]	@ (80062c8 <_vfiprintf_r+0x228>)
 800627e:	a904      	add	r1, sp, #16
 8006280:	4630      	mov	r0, r6
 8006282:	f3af 8000 	nop.w
 8006286:	4607      	mov	r7, r0
 8006288:	1c78      	adds	r0, r7, #1
 800628a:	d1d6      	bne.n	800623a <_vfiprintf_r+0x19a>
 800628c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800628e:	07d9      	lsls	r1, r3, #31
 8006290:	d405      	bmi.n	800629e <_vfiprintf_r+0x1fe>
 8006292:	89ab      	ldrh	r3, [r5, #12]
 8006294:	059a      	lsls	r2, r3, #22
 8006296:	d402      	bmi.n	800629e <_vfiprintf_r+0x1fe>
 8006298:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800629a:	f7ff fddd 	bl	8005e58 <__retarget_lock_release_recursive>
 800629e:	89ab      	ldrh	r3, [r5, #12]
 80062a0:	065b      	lsls	r3, r3, #25
 80062a2:	f53f af1f 	bmi.w	80060e4 <_vfiprintf_r+0x44>
 80062a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80062a8:	e71e      	b.n	80060e8 <_vfiprintf_r+0x48>
 80062aa:	ab03      	add	r3, sp, #12
 80062ac:	9300      	str	r3, [sp, #0]
 80062ae:	462a      	mov	r2, r5
 80062b0:	4b05      	ldr	r3, [pc, #20]	@ (80062c8 <_vfiprintf_r+0x228>)
 80062b2:	a904      	add	r1, sp, #16
 80062b4:	4630      	mov	r0, r6
 80062b6:	f000 f879 	bl	80063ac <_printf_i>
 80062ba:	e7e4      	b.n	8006286 <_vfiprintf_r+0x1e6>
 80062bc:	080069f4 	.word	0x080069f4
 80062c0:	080069fe 	.word	0x080069fe
 80062c4:	00000000 	.word	0x00000000
 80062c8:	0800607b 	.word	0x0800607b
 80062cc:	080069fa 	.word	0x080069fa

080062d0 <_printf_common>:
 80062d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062d4:	4616      	mov	r6, r2
 80062d6:	4698      	mov	r8, r3
 80062d8:	688a      	ldr	r2, [r1, #8]
 80062da:	690b      	ldr	r3, [r1, #16]
 80062dc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80062e0:	4293      	cmp	r3, r2
 80062e2:	bfb8      	it	lt
 80062e4:	4613      	movlt	r3, r2
 80062e6:	6033      	str	r3, [r6, #0]
 80062e8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80062ec:	4607      	mov	r7, r0
 80062ee:	460c      	mov	r4, r1
 80062f0:	b10a      	cbz	r2, 80062f6 <_printf_common+0x26>
 80062f2:	3301      	adds	r3, #1
 80062f4:	6033      	str	r3, [r6, #0]
 80062f6:	6823      	ldr	r3, [r4, #0]
 80062f8:	0699      	lsls	r1, r3, #26
 80062fa:	bf42      	ittt	mi
 80062fc:	6833      	ldrmi	r3, [r6, #0]
 80062fe:	3302      	addmi	r3, #2
 8006300:	6033      	strmi	r3, [r6, #0]
 8006302:	6825      	ldr	r5, [r4, #0]
 8006304:	f015 0506 	ands.w	r5, r5, #6
 8006308:	d106      	bne.n	8006318 <_printf_common+0x48>
 800630a:	f104 0a19 	add.w	sl, r4, #25
 800630e:	68e3      	ldr	r3, [r4, #12]
 8006310:	6832      	ldr	r2, [r6, #0]
 8006312:	1a9b      	subs	r3, r3, r2
 8006314:	42ab      	cmp	r3, r5
 8006316:	dc26      	bgt.n	8006366 <_printf_common+0x96>
 8006318:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800631c:	6822      	ldr	r2, [r4, #0]
 800631e:	3b00      	subs	r3, #0
 8006320:	bf18      	it	ne
 8006322:	2301      	movne	r3, #1
 8006324:	0692      	lsls	r2, r2, #26
 8006326:	d42b      	bmi.n	8006380 <_printf_common+0xb0>
 8006328:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800632c:	4641      	mov	r1, r8
 800632e:	4638      	mov	r0, r7
 8006330:	47c8      	blx	r9
 8006332:	3001      	adds	r0, #1
 8006334:	d01e      	beq.n	8006374 <_printf_common+0xa4>
 8006336:	6823      	ldr	r3, [r4, #0]
 8006338:	6922      	ldr	r2, [r4, #16]
 800633a:	f003 0306 	and.w	r3, r3, #6
 800633e:	2b04      	cmp	r3, #4
 8006340:	bf02      	ittt	eq
 8006342:	68e5      	ldreq	r5, [r4, #12]
 8006344:	6833      	ldreq	r3, [r6, #0]
 8006346:	1aed      	subeq	r5, r5, r3
 8006348:	68a3      	ldr	r3, [r4, #8]
 800634a:	bf0c      	ite	eq
 800634c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006350:	2500      	movne	r5, #0
 8006352:	4293      	cmp	r3, r2
 8006354:	bfc4      	itt	gt
 8006356:	1a9b      	subgt	r3, r3, r2
 8006358:	18ed      	addgt	r5, r5, r3
 800635a:	2600      	movs	r6, #0
 800635c:	341a      	adds	r4, #26
 800635e:	42b5      	cmp	r5, r6
 8006360:	d11a      	bne.n	8006398 <_printf_common+0xc8>
 8006362:	2000      	movs	r0, #0
 8006364:	e008      	b.n	8006378 <_printf_common+0xa8>
 8006366:	2301      	movs	r3, #1
 8006368:	4652      	mov	r2, sl
 800636a:	4641      	mov	r1, r8
 800636c:	4638      	mov	r0, r7
 800636e:	47c8      	blx	r9
 8006370:	3001      	adds	r0, #1
 8006372:	d103      	bne.n	800637c <_printf_common+0xac>
 8006374:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800637c:	3501      	adds	r5, #1
 800637e:	e7c6      	b.n	800630e <_printf_common+0x3e>
 8006380:	18e1      	adds	r1, r4, r3
 8006382:	1c5a      	adds	r2, r3, #1
 8006384:	2030      	movs	r0, #48	@ 0x30
 8006386:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800638a:	4422      	add	r2, r4
 800638c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006390:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006394:	3302      	adds	r3, #2
 8006396:	e7c7      	b.n	8006328 <_printf_common+0x58>
 8006398:	2301      	movs	r3, #1
 800639a:	4622      	mov	r2, r4
 800639c:	4641      	mov	r1, r8
 800639e:	4638      	mov	r0, r7
 80063a0:	47c8      	blx	r9
 80063a2:	3001      	adds	r0, #1
 80063a4:	d0e6      	beq.n	8006374 <_printf_common+0xa4>
 80063a6:	3601      	adds	r6, #1
 80063a8:	e7d9      	b.n	800635e <_printf_common+0x8e>
	...

080063ac <_printf_i>:
 80063ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80063b0:	7e0f      	ldrb	r7, [r1, #24]
 80063b2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80063b4:	2f78      	cmp	r7, #120	@ 0x78
 80063b6:	4691      	mov	r9, r2
 80063b8:	4680      	mov	r8, r0
 80063ba:	460c      	mov	r4, r1
 80063bc:	469a      	mov	sl, r3
 80063be:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80063c2:	d807      	bhi.n	80063d4 <_printf_i+0x28>
 80063c4:	2f62      	cmp	r7, #98	@ 0x62
 80063c6:	d80a      	bhi.n	80063de <_printf_i+0x32>
 80063c8:	2f00      	cmp	r7, #0
 80063ca:	f000 80d2 	beq.w	8006572 <_printf_i+0x1c6>
 80063ce:	2f58      	cmp	r7, #88	@ 0x58
 80063d0:	f000 80b9 	beq.w	8006546 <_printf_i+0x19a>
 80063d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80063d8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80063dc:	e03a      	b.n	8006454 <_printf_i+0xa8>
 80063de:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80063e2:	2b15      	cmp	r3, #21
 80063e4:	d8f6      	bhi.n	80063d4 <_printf_i+0x28>
 80063e6:	a101      	add	r1, pc, #4	@ (adr r1, 80063ec <_printf_i+0x40>)
 80063e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80063ec:	08006445 	.word	0x08006445
 80063f0:	08006459 	.word	0x08006459
 80063f4:	080063d5 	.word	0x080063d5
 80063f8:	080063d5 	.word	0x080063d5
 80063fc:	080063d5 	.word	0x080063d5
 8006400:	080063d5 	.word	0x080063d5
 8006404:	08006459 	.word	0x08006459
 8006408:	080063d5 	.word	0x080063d5
 800640c:	080063d5 	.word	0x080063d5
 8006410:	080063d5 	.word	0x080063d5
 8006414:	080063d5 	.word	0x080063d5
 8006418:	08006559 	.word	0x08006559
 800641c:	08006483 	.word	0x08006483
 8006420:	08006513 	.word	0x08006513
 8006424:	080063d5 	.word	0x080063d5
 8006428:	080063d5 	.word	0x080063d5
 800642c:	0800657b 	.word	0x0800657b
 8006430:	080063d5 	.word	0x080063d5
 8006434:	08006483 	.word	0x08006483
 8006438:	080063d5 	.word	0x080063d5
 800643c:	080063d5 	.word	0x080063d5
 8006440:	0800651b 	.word	0x0800651b
 8006444:	6833      	ldr	r3, [r6, #0]
 8006446:	1d1a      	adds	r2, r3, #4
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	6032      	str	r2, [r6, #0]
 800644c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006450:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006454:	2301      	movs	r3, #1
 8006456:	e09d      	b.n	8006594 <_printf_i+0x1e8>
 8006458:	6833      	ldr	r3, [r6, #0]
 800645a:	6820      	ldr	r0, [r4, #0]
 800645c:	1d19      	adds	r1, r3, #4
 800645e:	6031      	str	r1, [r6, #0]
 8006460:	0606      	lsls	r6, r0, #24
 8006462:	d501      	bpl.n	8006468 <_printf_i+0xbc>
 8006464:	681d      	ldr	r5, [r3, #0]
 8006466:	e003      	b.n	8006470 <_printf_i+0xc4>
 8006468:	0645      	lsls	r5, r0, #25
 800646a:	d5fb      	bpl.n	8006464 <_printf_i+0xb8>
 800646c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006470:	2d00      	cmp	r5, #0
 8006472:	da03      	bge.n	800647c <_printf_i+0xd0>
 8006474:	232d      	movs	r3, #45	@ 0x2d
 8006476:	426d      	negs	r5, r5
 8006478:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800647c:	4859      	ldr	r0, [pc, #356]	@ (80065e4 <_printf_i+0x238>)
 800647e:	230a      	movs	r3, #10
 8006480:	e011      	b.n	80064a6 <_printf_i+0xfa>
 8006482:	6821      	ldr	r1, [r4, #0]
 8006484:	6833      	ldr	r3, [r6, #0]
 8006486:	0608      	lsls	r0, r1, #24
 8006488:	f853 5b04 	ldr.w	r5, [r3], #4
 800648c:	d402      	bmi.n	8006494 <_printf_i+0xe8>
 800648e:	0649      	lsls	r1, r1, #25
 8006490:	bf48      	it	mi
 8006492:	b2ad      	uxthmi	r5, r5
 8006494:	2f6f      	cmp	r7, #111	@ 0x6f
 8006496:	4853      	ldr	r0, [pc, #332]	@ (80065e4 <_printf_i+0x238>)
 8006498:	6033      	str	r3, [r6, #0]
 800649a:	bf14      	ite	ne
 800649c:	230a      	movne	r3, #10
 800649e:	2308      	moveq	r3, #8
 80064a0:	2100      	movs	r1, #0
 80064a2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80064a6:	6866      	ldr	r6, [r4, #4]
 80064a8:	60a6      	str	r6, [r4, #8]
 80064aa:	2e00      	cmp	r6, #0
 80064ac:	bfa2      	ittt	ge
 80064ae:	6821      	ldrge	r1, [r4, #0]
 80064b0:	f021 0104 	bicge.w	r1, r1, #4
 80064b4:	6021      	strge	r1, [r4, #0]
 80064b6:	b90d      	cbnz	r5, 80064bc <_printf_i+0x110>
 80064b8:	2e00      	cmp	r6, #0
 80064ba:	d04b      	beq.n	8006554 <_printf_i+0x1a8>
 80064bc:	4616      	mov	r6, r2
 80064be:	fbb5 f1f3 	udiv	r1, r5, r3
 80064c2:	fb03 5711 	mls	r7, r3, r1, r5
 80064c6:	5dc7      	ldrb	r7, [r0, r7]
 80064c8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80064cc:	462f      	mov	r7, r5
 80064ce:	42bb      	cmp	r3, r7
 80064d0:	460d      	mov	r5, r1
 80064d2:	d9f4      	bls.n	80064be <_printf_i+0x112>
 80064d4:	2b08      	cmp	r3, #8
 80064d6:	d10b      	bne.n	80064f0 <_printf_i+0x144>
 80064d8:	6823      	ldr	r3, [r4, #0]
 80064da:	07df      	lsls	r7, r3, #31
 80064dc:	d508      	bpl.n	80064f0 <_printf_i+0x144>
 80064de:	6923      	ldr	r3, [r4, #16]
 80064e0:	6861      	ldr	r1, [r4, #4]
 80064e2:	4299      	cmp	r1, r3
 80064e4:	bfde      	ittt	le
 80064e6:	2330      	movle	r3, #48	@ 0x30
 80064e8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80064ec:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80064f0:	1b92      	subs	r2, r2, r6
 80064f2:	6122      	str	r2, [r4, #16]
 80064f4:	f8cd a000 	str.w	sl, [sp]
 80064f8:	464b      	mov	r3, r9
 80064fa:	aa03      	add	r2, sp, #12
 80064fc:	4621      	mov	r1, r4
 80064fe:	4640      	mov	r0, r8
 8006500:	f7ff fee6 	bl	80062d0 <_printf_common>
 8006504:	3001      	adds	r0, #1
 8006506:	d14a      	bne.n	800659e <_printf_i+0x1f2>
 8006508:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800650c:	b004      	add	sp, #16
 800650e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006512:	6823      	ldr	r3, [r4, #0]
 8006514:	f043 0320 	orr.w	r3, r3, #32
 8006518:	6023      	str	r3, [r4, #0]
 800651a:	4833      	ldr	r0, [pc, #204]	@ (80065e8 <_printf_i+0x23c>)
 800651c:	2778      	movs	r7, #120	@ 0x78
 800651e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006522:	6823      	ldr	r3, [r4, #0]
 8006524:	6831      	ldr	r1, [r6, #0]
 8006526:	061f      	lsls	r7, r3, #24
 8006528:	f851 5b04 	ldr.w	r5, [r1], #4
 800652c:	d402      	bmi.n	8006534 <_printf_i+0x188>
 800652e:	065f      	lsls	r7, r3, #25
 8006530:	bf48      	it	mi
 8006532:	b2ad      	uxthmi	r5, r5
 8006534:	6031      	str	r1, [r6, #0]
 8006536:	07d9      	lsls	r1, r3, #31
 8006538:	bf44      	itt	mi
 800653a:	f043 0320 	orrmi.w	r3, r3, #32
 800653e:	6023      	strmi	r3, [r4, #0]
 8006540:	b11d      	cbz	r5, 800654a <_printf_i+0x19e>
 8006542:	2310      	movs	r3, #16
 8006544:	e7ac      	b.n	80064a0 <_printf_i+0xf4>
 8006546:	4827      	ldr	r0, [pc, #156]	@ (80065e4 <_printf_i+0x238>)
 8006548:	e7e9      	b.n	800651e <_printf_i+0x172>
 800654a:	6823      	ldr	r3, [r4, #0]
 800654c:	f023 0320 	bic.w	r3, r3, #32
 8006550:	6023      	str	r3, [r4, #0]
 8006552:	e7f6      	b.n	8006542 <_printf_i+0x196>
 8006554:	4616      	mov	r6, r2
 8006556:	e7bd      	b.n	80064d4 <_printf_i+0x128>
 8006558:	6833      	ldr	r3, [r6, #0]
 800655a:	6825      	ldr	r5, [r4, #0]
 800655c:	6961      	ldr	r1, [r4, #20]
 800655e:	1d18      	adds	r0, r3, #4
 8006560:	6030      	str	r0, [r6, #0]
 8006562:	062e      	lsls	r6, r5, #24
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	d501      	bpl.n	800656c <_printf_i+0x1c0>
 8006568:	6019      	str	r1, [r3, #0]
 800656a:	e002      	b.n	8006572 <_printf_i+0x1c6>
 800656c:	0668      	lsls	r0, r5, #25
 800656e:	d5fb      	bpl.n	8006568 <_printf_i+0x1bc>
 8006570:	8019      	strh	r1, [r3, #0]
 8006572:	2300      	movs	r3, #0
 8006574:	6123      	str	r3, [r4, #16]
 8006576:	4616      	mov	r6, r2
 8006578:	e7bc      	b.n	80064f4 <_printf_i+0x148>
 800657a:	6833      	ldr	r3, [r6, #0]
 800657c:	1d1a      	adds	r2, r3, #4
 800657e:	6032      	str	r2, [r6, #0]
 8006580:	681e      	ldr	r6, [r3, #0]
 8006582:	6862      	ldr	r2, [r4, #4]
 8006584:	2100      	movs	r1, #0
 8006586:	4630      	mov	r0, r6
 8006588:	f7f9 feaa 	bl	80002e0 <memchr>
 800658c:	b108      	cbz	r0, 8006592 <_printf_i+0x1e6>
 800658e:	1b80      	subs	r0, r0, r6
 8006590:	6060      	str	r0, [r4, #4]
 8006592:	6863      	ldr	r3, [r4, #4]
 8006594:	6123      	str	r3, [r4, #16]
 8006596:	2300      	movs	r3, #0
 8006598:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800659c:	e7aa      	b.n	80064f4 <_printf_i+0x148>
 800659e:	6923      	ldr	r3, [r4, #16]
 80065a0:	4632      	mov	r2, r6
 80065a2:	4649      	mov	r1, r9
 80065a4:	4640      	mov	r0, r8
 80065a6:	47d0      	blx	sl
 80065a8:	3001      	adds	r0, #1
 80065aa:	d0ad      	beq.n	8006508 <_printf_i+0x15c>
 80065ac:	6823      	ldr	r3, [r4, #0]
 80065ae:	079b      	lsls	r3, r3, #30
 80065b0:	d413      	bmi.n	80065da <_printf_i+0x22e>
 80065b2:	68e0      	ldr	r0, [r4, #12]
 80065b4:	9b03      	ldr	r3, [sp, #12]
 80065b6:	4298      	cmp	r0, r3
 80065b8:	bfb8      	it	lt
 80065ba:	4618      	movlt	r0, r3
 80065bc:	e7a6      	b.n	800650c <_printf_i+0x160>
 80065be:	2301      	movs	r3, #1
 80065c0:	4632      	mov	r2, r6
 80065c2:	4649      	mov	r1, r9
 80065c4:	4640      	mov	r0, r8
 80065c6:	47d0      	blx	sl
 80065c8:	3001      	adds	r0, #1
 80065ca:	d09d      	beq.n	8006508 <_printf_i+0x15c>
 80065cc:	3501      	adds	r5, #1
 80065ce:	68e3      	ldr	r3, [r4, #12]
 80065d0:	9903      	ldr	r1, [sp, #12]
 80065d2:	1a5b      	subs	r3, r3, r1
 80065d4:	42ab      	cmp	r3, r5
 80065d6:	dcf2      	bgt.n	80065be <_printf_i+0x212>
 80065d8:	e7eb      	b.n	80065b2 <_printf_i+0x206>
 80065da:	2500      	movs	r5, #0
 80065dc:	f104 0619 	add.w	r6, r4, #25
 80065e0:	e7f5      	b.n	80065ce <_printf_i+0x222>
 80065e2:	bf00      	nop
 80065e4:	08006a05 	.word	0x08006a05
 80065e8:	08006a16 	.word	0x08006a16

080065ec <__sflush_r>:
 80065ec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80065f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065f4:	0716      	lsls	r6, r2, #28
 80065f6:	4605      	mov	r5, r0
 80065f8:	460c      	mov	r4, r1
 80065fa:	d454      	bmi.n	80066a6 <__sflush_r+0xba>
 80065fc:	684b      	ldr	r3, [r1, #4]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	dc02      	bgt.n	8006608 <__sflush_r+0x1c>
 8006602:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006604:	2b00      	cmp	r3, #0
 8006606:	dd48      	ble.n	800669a <__sflush_r+0xae>
 8006608:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800660a:	2e00      	cmp	r6, #0
 800660c:	d045      	beq.n	800669a <__sflush_r+0xae>
 800660e:	2300      	movs	r3, #0
 8006610:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006614:	682f      	ldr	r7, [r5, #0]
 8006616:	6a21      	ldr	r1, [r4, #32]
 8006618:	602b      	str	r3, [r5, #0]
 800661a:	d030      	beq.n	800667e <__sflush_r+0x92>
 800661c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800661e:	89a3      	ldrh	r3, [r4, #12]
 8006620:	0759      	lsls	r1, r3, #29
 8006622:	d505      	bpl.n	8006630 <__sflush_r+0x44>
 8006624:	6863      	ldr	r3, [r4, #4]
 8006626:	1ad2      	subs	r2, r2, r3
 8006628:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800662a:	b10b      	cbz	r3, 8006630 <__sflush_r+0x44>
 800662c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800662e:	1ad2      	subs	r2, r2, r3
 8006630:	2300      	movs	r3, #0
 8006632:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006634:	6a21      	ldr	r1, [r4, #32]
 8006636:	4628      	mov	r0, r5
 8006638:	47b0      	blx	r6
 800663a:	1c43      	adds	r3, r0, #1
 800663c:	89a3      	ldrh	r3, [r4, #12]
 800663e:	d106      	bne.n	800664e <__sflush_r+0x62>
 8006640:	6829      	ldr	r1, [r5, #0]
 8006642:	291d      	cmp	r1, #29
 8006644:	d82b      	bhi.n	800669e <__sflush_r+0xb2>
 8006646:	4a2a      	ldr	r2, [pc, #168]	@ (80066f0 <__sflush_r+0x104>)
 8006648:	410a      	asrs	r2, r1
 800664a:	07d6      	lsls	r6, r2, #31
 800664c:	d427      	bmi.n	800669e <__sflush_r+0xb2>
 800664e:	2200      	movs	r2, #0
 8006650:	6062      	str	r2, [r4, #4]
 8006652:	04d9      	lsls	r1, r3, #19
 8006654:	6922      	ldr	r2, [r4, #16]
 8006656:	6022      	str	r2, [r4, #0]
 8006658:	d504      	bpl.n	8006664 <__sflush_r+0x78>
 800665a:	1c42      	adds	r2, r0, #1
 800665c:	d101      	bne.n	8006662 <__sflush_r+0x76>
 800665e:	682b      	ldr	r3, [r5, #0]
 8006660:	b903      	cbnz	r3, 8006664 <__sflush_r+0x78>
 8006662:	6560      	str	r0, [r4, #84]	@ 0x54
 8006664:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006666:	602f      	str	r7, [r5, #0]
 8006668:	b1b9      	cbz	r1, 800669a <__sflush_r+0xae>
 800666a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800666e:	4299      	cmp	r1, r3
 8006670:	d002      	beq.n	8006678 <__sflush_r+0x8c>
 8006672:	4628      	mov	r0, r5
 8006674:	f7ff fbf2 	bl	8005e5c <_free_r>
 8006678:	2300      	movs	r3, #0
 800667a:	6363      	str	r3, [r4, #52]	@ 0x34
 800667c:	e00d      	b.n	800669a <__sflush_r+0xae>
 800667e:	2301      	movs	r3, #1
 8006680:	4628      	mov	r0, r5
 8006682:	47b0      	blx	r6
 8006684:	4602      	mov	r2, r0
 8006686:	1c50      	adds	r0, r2, #1
 8006688:	d1c9      	bne.n	800661e <__sflush_r+0x32>
 800668a:	682b      	ldr	r3, [r5, #0]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d0c6      	beq.n	800661e <__sflush_r+0x32>
 8006690:	2b1d      	cmp	r3, #29
 8006692:	d001      	beq.n	8006698 <__sflush_r+0xac>
 8006694:	2b16      	cmp	r3, #22
 8006696:	d11e      	bne.n	80066d6 <__sflush_r+0xea>
 8006698:	602f      	str	r7, [r5, #0]
 800669a:	2000      	movs	r0, #0
 800669c:	e022      	b.n	80066e4 <__sflush_r+0xf8>
 800669e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80066a2:	b21b      	sxth	r3, r3
 80066a4:	e01b      	b.n	80066de <__sflush_r+0xf2>
 80066a6:	690f      	ldr	r7, [r1, #16]
 80066a8:	2f00      	cmp	r7, #0
 80066aa:	d0f6      	beq.n	800669a <__sflush_r+0xae>
 80066ac:	0793      	lsls	r3, r2, #30
 80066ae:	680e      	ldr	r6, [r1, #0]
 80066b0:	bf08      	it	eq
 80066b2:	694b      	ldreq	r3, [r1, #20]
 80066b4:	600f      	str	r7, [r1, #0]
 80066b6:	bf18      	it	ne
 80066b8:	2300      	movne	r3, #0
 80066ba:	eba6 0807 	sub.w	r8, r6, r7
 80066be:	608b      	str	r3, [r1, #8]
 80066c0:	f1b8 0f00 	cmp.w	r8, #0
 80066c4:	dde9      	ble.n	800669a <__sflush_r+0xae>
 80066c6:	6a21      	ldr	r1, [r4, #32]
 80066c8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80066ca:	4643      	mov	r3, r8
 80066cc:	463a      	mov	r2, r7
 80066ce:	4628      	mov	r0, r5
 80066d0:	47b0      	blx	r6
 80066d2:	2800      	cmp	r0, #0
 80066d4:	dc08      	bgt.n	80066e8 <__sflush_r+0xfc>
 80066d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80066da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80066de:	81a3      	strh	r3, [r4, #12]
 80066e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80066e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066e8:	4407      	add	r7, r0
 80066ea:	eba8 0800 	sub.w	r8, r8, r0
 80066ee:	e7e7      	b.n	80066c0 <__sflush_r+0xd4>
 80066f0:	dfbffffe 	.word	0xdfbffffe

080066f4 <_fflush_r>:
 80066f4:	b538      	push	{r3, r4, r5, lr}
 80066f6:	690b      	ldr	r3, [r1, #16]
 80066f8:	4605      	mov	r5, r0
 80066fa:	460c      	mov	r4, r1
 80066fc:	b913      	cbnz	r3, 8006704 <_fflush_r+0x10>
 80066fe:	2500      	movs	r5, #0
 8006700:	4628      	mov	r0, r5
 8006702:	bd38      	pop	{r3, r4, r5, pc}
 8006704:	b118      	cbz	r0, 800670e <_fflush_r+0x1a>
 8006706:	6a03      	ldr	r3, [r0, #32]
 8006708:	b90b      	cbnz	r3, 800670e <_fflush_r+0x1a>
 800670a:	f7ff fa9f 	bl	8005c4c <__sinit>
 800670e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d0f3      	beq.n	80066fe <_fflush_r+0xa>
 8006716:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006718:	07d0      	lsls	r0, r2, #31
 800671a:	d404      	bmi.n	8006726 <_fflush_r+0x32>
 800671c:	0599      	lsls	r1, r3, #22
 800671e:	d402      	bmi.n	8006726 <_fflush_r+0x32>
 8006720:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006722:	f7ff fb98 	bl	8005e56 <__retarget_lock_acquire_recursive>
 8006726:	4628      	mov	r0, r5
 8006728:	4621      	mov	r1, r4
 800672a:	f7ff ff5f 	bl	80065ec <__sflush_r>
 800672e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006730:	07da      	lsls	r2, r3, #31
 8006732:	4605      	mov	r5, r0
 8006734:	d4e4      	bmi.n	8006700 <_fflush_r+0xc>
 8006736:	89a3      	ldrh	r3, [r4, #12]
 8006738:	059b      	lsls	r3, r3, #22
 800673a:	d4e1      	bmi.n	8006700 <_fflush_r+0xc>
 800673c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800673e:	f7ff fb8b 	bl	8005e58 <__retarget_lock_release_recursive>
 8006742:	e7dd      	b.n	8006700 <_fflush_r+0xc>

08006744 <__swbuf_r>:
 8006744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006746:	460e      	mov	r6, r1
 8006748:	4614      	mov	r4, r2
 800674a:	4605      	mov	r5, r0
 800674c:	b118      	cbz	r0, 8006756 <__swbuf_r+0x12>
 800674e:	6a03      	ldr	r3, [r0, #32]
 8006750:	b90b      	cbnz	r3, 8006756 <__swbuf_r+0x12>
 8006752:	f7ff fa7b 	bl	8005c4c <__sinit>
 8006756:	69a3      	ldr	r3, [r4, #24]
 8006758:	60a3      	str	r3, [r4, #8]
 800675a:	89a3      	ldrh	r3, [r4, #12]
 800675c:	071a      	lsls	r2, r3, #28
 800675e:	d501      	bpl.n	8006764 <__swbuf_r+0x20>
 8006760:	6923      	ldr	r3, [r4, #16]
 8006762:	b943      	cbnz	r3, 8006776 <__swbuf_r+0x32>
 8006764:	4621      	mov	r1, r4
 8006766:	4628      	mov	r0, r5
 8006768:	f000 f82a 	bl	80067c0 <__swsetup_r>
 800676c:	b118      	cbz	r0, 8006776 <__swbuf_r+0x32>
 800676e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8006772:	4638      	mov	r0, r7
 8006774:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006776:	6823      	ldr	r3, [r4, #0]
 8006778:	6922      	ldr	r2, [r4, #16]
 800677a:	1a98      	subs	r0, r3, r2
 800677c:	6963      	ldr	r3, [r4, #20]
 800677e:	b2f6      	uxtb	r6, r6
 8006780:	4283      	cmp	r3, r0
 8006782:	4637      	mov	r7, r6
 8006784:	dc05      	bgt.n	8006792 <__swbuf_r+0x4e>
 8006786:	4621      	mov	r1, r4
 8006788:	4628      	mov	r0, r5
 800678a:	f7ff ffb3 	bl	80066f4 <_fflush_r>
 800678e:	2800      	cmp	r0, #0
 8006790:	d1ed      	bne.n	800676e <__swbuf_r+0x2a>
 8006792:	68a3      	ldr	r3, [r4, #8]
 8006794:	3b01      	subs	r3, #1
 8006796:	60a3      	str	r3, [r4, #8]
 8006798:	6823      	ldr	r3, [r4, #0]
 800679a:	1c5a      	adds	r2, r3, #1
 800679c:	6022      	str	r2, [r4, #0]
 800679e:	701e      	strb	r6, [r3, #0]
 80067a0:	6962      	ldr	r2, [r4, #20]
 80067a2:	1c43      	adds	r3, r0, #1
 80067a4:	429a      	cmp	r2, r3
 80067a6:	d004      	beq.n	80067b2 <__swbuf_r+0x6e>
 80067a8:	89a3      	ldrh	r3, [r4, #12]
 80067aa:	07db      	lsls	r3, r3, #31
 80067ac:	d5e1      	bpl.n	8006772 <__swbuf_r+0x2e>
 80067ae:	2e0a      	cmp	r6, #10
 80067b0:	d1df      	bne.n	8006772 <__swbuf_r+0x2e>
 80067b2:	4621      	mov	r1, r4
 80067b4:	4628      	mov	r0, r5
 80067b6:	f7ff ff9d 	bl	80066f4 <_fflush_r>
 80067ba:	2800      	cmp	r0, #0
 80067bc:	d0d9      	beq.n	8006772 <__swbuf_r+0x2e>
 80067be:	e7d6      	b.n	800676e <__swbuf_r+0x2a>

080067c0 <__swsetup_r>:
 80067c0:	b538      	push	{r3, r4, r5, lr}
 80067c2:	4b29      	ldr	r3, [pc, #164]	@ (8006868 <__swsetup_r+0xa8>)
 80067c4:	4605      	mov	r5, r0
 80067c6:	6818      	ldr	r0, [r3, #0]
 80067c8:	460c      	mov	r4, r1
 80067ca:	b118      	cbz	r0, 80067d4 <__swsetup_r+0x14>
 80067cc:	6a03      	ldr	r3, [r0, #32]
 80067ce:	b90b      	cbnz	r3, 80067d4 <__swsetup_r+0x14>
 80067d0:	f7ff fa3c 	bl	8005c4c <__sinit>
 80067d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067d8:	0719      	lsls	r1, r3, #28
 80067da:	d422      	bmi.n	8006822 <__swsetup_r+0x62>
 80067dc:	06da      	lsls	r2, r3, #27
 80067de:	d407      	bmi.n	80067f0 <__swsetup_r+0x30>
 80067e0:	2209      	movs	r2, #9
 80067e2:	602a      	str	r2, [r5, #0]
 80067e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80067e8:	81a3      	strh	r3, [r4, #12]
 80067ea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80067ee:	e033      	b.n	8006858 <__swsetup_r+0x98>
 80067f0:	0758      	lsls	r0, r3, #29
 80067f2:	d512      	bpl.n	800681a <__swsetup_r+0x5a>
 80067f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80067f6:	b141      	cbz	r1, 800680a <__swsetup_r+0x4a>
 80067f8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80067fc:	4299      	cmp	r1, r3
 80067fe:	d002      	beq.n	8006806 <__swsetup_r+0x46>
 8006800:	4628      	mov	r0, r5
 8006802:	f7ff fb2b 	bl	8005e5c <_free_r>
 8006806:	2300      	movs	r3, #0
 8006808:	6363      	str	r3, [r4, #52]	@ 0x34
 800680a:	89a3      	ldrh	r3, [r4, #12]
 800680c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006810:	81a3      	strh	r3, [r4, #12]
 8006812:	2300      	movs	r3, #0
 8006814:	6063      	str	r3, [r4, #4]
 8006816:	6923      	ldr	r3, [r4, #16]
 8006818:	6023      	str	r3, [r4, #0]
 800681a:	89a3      	ldrh	r3, [r4, #12]
 800681c:	f043 0308 	orr.w	r3, r3, #8
 8006820:	81a3      	strh	r3, [r4, #12]
 8006822:	6923      	ldr	r3, [r4, #16]
 8006824:	b94b      	cbnz	r3, 800683a <__swsetup_r+0x7a>
 8006826:	89a3      	ldrh	r3, [r4, #12]
 8006828:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800682c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006830:	d003      	beq.n	800683a <__swsetup_r+0x7a>
 8006832:	4621      	mov	r1, r4
 8006834:	4628      	mov	r0, r5
 8006836:	f000 f84f 	bl	80068d8 <__smakebuf_r>
 800683a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800683e:	f013 0201 	ands.w	r2, r3, #1
 8006842:	d00a      	beq.n	800685a <__swsetup_r+0x9a>
 8006844:	2200      	movs	r2, #0
 8006846:	60a2      	str	r2, [r4, #8]
 8006848:	6962      	ldr	r2, [r4, #20]
 800684a:	4252      	negs	r2, r2
 800684c:	61a2      	str	r2, [r4, #24]
 800684e:	6922      	ldr	r2, [r4, #16]
 8006850:	b942      	cbnz	r2, 8006864 <__swsetup_r+0xa4>
 8006852:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006856:	d1c5      	bne.n	80067e4 <__swsetup_r+0x24>
 8006858:	bd38      	pop	{r3, r4, r5, pc}
 800685a:	0799      	lsls	r1, r3, #30
 800685c:	bf58      	it	pl
 800685e:	6962      	ldrpl	r2, [r4, #20]
 8006860:	60a2      	str	r2, [r4, #8]
 8006862:	e7f4      	b.n	800684e <__swsetup_r+0x8e>
 8006864:	2000      	movs	r0, #0
 8006866:	e7f7      	b.n	8006858 <__swsetup_r+0x98>
 8006868:	24000038 	.word	0x24000038

0800686c <_sbrk_r>:
 800686c:	b538      	push	{r3, r4, r5, lr}
 800686e:	4d06      	ldr	r5, [pc, #24]	@ (8006888 <_sbrk_r+0x1c>)
 8006870:	2300      	movs	r3, #0
 8006872:	4604      	mov	r4, r0
 8006874:	4608      	mov	r0, r1
 8006876:	602b      	str	r3, [r5, #0]
 8006878:	f7fa faf6 	bl	8000e68 <_sbrk>
 800687c:	1c43      	adds	r3, r0, #1
 800687e:	d102      	bne.n	8006886 <_sbrk_r+0x1a>
 8006880:	682b      	ldr	r3, [r5, #0]
 8006882:	b103      	cbz	r3, 8006886 <_sbrk_r+0x1a>
 8006884:	6023      	str	r3, [r4, #0]
 8006886:	bd38      	pop	{r3, r4, r5, pc}
 8006888:	24000328 	.word	0x24000328

0800688c <__swhatbuf_r>:
 800688c:	b570      	push	{r4, r5, r6, lr}
 800688e:	460c      	mov	r4, r1
 8006890:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006894:	2900      	cmp	r1, #0
 8006896:	b096      	sub	sp, #88	@ 0x58
 8006898:	4615      	mov	r5, r2
 800689a:	461e      	mov	r6, r3
 800689c:	da0d      	bge.n	80068ba <__swhatbuf_r+0x2e>
 800689e:	89a3      	ldrh	r3, [r4, #12]
 80068a0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80068a4:	f04f 0100 	mov.w	r1, #0
 80068a8:	bf14      	ite	ne
 80068aa:	2340      	movne	r3, #64	@ 0x40
 80068ac:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80068b0:	2000      	movs	r0, #0
 80068b2:	6031      	str	r1, [r6, #0]
 80068b4:	602b      	str	r3, [r5, #0]
 80068b6:	b016      	add	sp, #88	@ 0x58
 80068b8:	bd70      	pop	{r4, r5, r6, pc}
 80068ba:	466a      	mov	r2, sp
 80068bc:	f000 f848 	bl	8006950 <_fstat_r>
 80068c0:	2800      	cmp	r0, #0
 80068c2:	dbec      	blt.n	800689e <__swhatbuf_r+0x12>
 80068c4:	9901      	ldr	r1, [sp, #4]
 80068c6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80068ca:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80068ce:	4259      	negs	r1, r3
 80068d0:	4159      	adcs	r1, r3
 80068d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80068d6:	e7eb      	b.n	80068b0 <__swhatbuf_r+0x24>

080068d8 <__smakebuf_r>:
 80068d8:	898b      	ldrh	r3, [r1, #12]
 80068da:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80068dc:	079d      	lsls	r5, r3, #30
 80068de:	4606      	mov	r6, r0
 80068e0:	460c      	mov	r4, r1
 80068e2:	d507      	bpl.n	80068f4 <__smakebuf_r+0x1c>
 80068e4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80068e8:	6023      	str	r3, [r4, #0]
 80068ea:	6123      	str	r3, [r4, #16]
 80068ec:	2301      	movs	r3, #1
 80068ee:	6163      	str	r3, [r4, #20]
 80068f0:	b003      	add	sp, #12
 80068f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80068f4:	ab01      	add	r3, sp, #4
 80068f6:	466a      	mov	r2, sp
 80068f8:	f7ff ffc8 	bl	800688c <__swhatbuf_r>
 80068fc:	9f00      	ldr	r7, [sp, #0]
 80068fe:	4605      	mov	r5, r0
 8006900:	4639      	mov	r1, r7
 8006902:	4630      	mov	r0, r6
 8006904:	f7ff fb16 	bl	8005f34 <_malloc_r>
 8006908:	b948      	cbnz	r0, 800691e <__smakebuf_r+0x46>
 800690a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800690e:	059a      	lsls	r2, r3, #22
 8006910:	d4ee      	bmi.n	80068f0 <__smakebuf_r+0x18>
 8006912:	f023 0303 	bic.w	r3, r3, #3
 8006916:	f043 0302 	orr.w	r3, r3, #2
 800691a:	81a3      	strh	r3, [r4, #12]
 800691c:	e7e2      	b.n	80068e4 <__smakebuf_r+0xc>
 800691e:	89a3      	ldrh	r3, [r4, #12]
 8006920:	6020      	str	r0, [r4, #0]
 8006922:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006926:	81a3      	strh	r3, [r4, #12]
 8006928:	9b01      	ldr	r3, [sp, #4]
 800692a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800692e:	b15b      	cbz	r3, 8006948 <__smakebuf_r+0x70>
 8006930:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006934:	4630      	mov	r0, r6
 8006936:	f000 f81d 	bl	8006974 <_isatty_r>
 800693a:	b128      	cbz	r0, 8006948 <__smakebuf_r+0x70>
 800693c:	89a3      	ldrh	r3, [r4, #12]
 800693e:	f023 0303 	bic.w	r3, r3, #3
 8006942:	f043 0301 	orr.w	r3, r3, #1
 8006946:	81a3      	strh	r3, [r4, #12]
 8006948:	89a3      	ldrh	r3, [r4, #12]
 800694a:	431d      	orrs	r5, r3
 800694c:	81a5      	strh	r5, [r4, #12]
 800694e:	e7cf      	b.n	80068f0 <__smakebuf_r+0x18>

08006950 <_fstat_r>:
 8006950:	b538      	push	{r3, r4, r5, lr}
 8006952:	4d07      	ldr	r5, [pc, #28]	@ (8006970 <_fstat_r+0x20>)
 8006954:	2300      	movs	r3, #0
 8006956:	4604      	mov	r4, r0
 8006958:	4608      	mov	r0, r1
 800695a:	4611      	mov	r1, r2
 800695c:	602b      	str	r3, [r5, #0]
 800695e:	f7fa fa5a 	bl	8000e16 <_fstat>
 8006962:	1c43      	adds	r3, r0, #1
 8006964:	d102      	bne.n	800696c <_fstat_r+0x1c>
 8006966:	682b      	ldr	r3, [r5, #0]
 8006968:	b103      	cbz	r3, 800696c <_fstat_r+0x1c>
 800696a:	6023      	str	r3, [r4, #0]
 800696c:	bd38      	pop	{r3, r4, r5, pc}
 800696e:	bf00      	nop
 8006970:	24000328 	.word	0x24000328

08006974 <_isatty_r>:
 8006974:	b538      	push	{r3, r4, r5, lr}
 8006976:	4d06      	ldr	r5, [pc, #24]	@ (8006990 <_isatty_r+0x1c>)
 8006978:	2300      	movs	r3, #0
 800697a:	4604      	mov	r4, r0
 800697c:	4608      	mov	r0, r1
 800697e:	602b      	str	r3, [r5, #0]
 8006980:	f7fa fa59 	bl	8000e36 <_isatty>
 8006984:	1c43      	adds	r3, r0, #1
 8006986:	d102      	bne.n	800698e <_isatty_r+0x1a>
 8006988:	682b      	ldr	r3, [r5, #0]
 800698a:	b103      	cbz	r3, 800698e <_isatty_r+0x1a>
 800698c:	6023      	str	r3, [r4, #0]
 800698e:	bd38      	pop	{r3, r4, r5, pc}
 8006990:	24000328 	.word	0x24000328

08006994 <_init>:
 8006994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006996:	bf00      	nop
 8006998:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800699a:	bc08      	pop	{r3}
 800699c:	469e      	mov	lr, r3
 800699e:	4770      	bx	lr

080069a0 <_fini>:
 80069a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069a2:	bf00      	nop
 80069a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069a6:	bc08      	pop	{r3}
 80069a8:	469e      	mov	lr, r3
 80069aa:	4770      	bx	lr
