
stm32H755_CAN_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007000  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  080072a0  080072a0  000082a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007388  08007388  0000906c  2**0
                  CONTENTS
  4 .ARM          00000008  08007388  08007388  00008388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007390  08007390  0000906c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007390  08007390  00008390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007394  08007394  00008394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  24000000  08007398  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000318  2400006c  08007404  0000906c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24000384  08007404  00009384  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000906c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014858  00000000  00000000  0000909a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024ca  00000000  00000000  0001d8f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f38  00000000  00000000  0001fdc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bb0  00000000  00000000  00020cf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003b565  00000000  00000000  000218a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000126a5  00000000  00000000  0005ce0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00186956  00000000  00000000  0006f4b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001f5e08  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047d4  00000000  00000000  001f5e4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  001fa620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400006c 	.word	0x2400006c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08007288 	.word	0x08007288

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000070 	.word	0x24000070
 80002dc:	08007288 	.word	0x08007288

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000390:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000394:	f000 b96a 	b.w	800066c <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	460c      	mov	r4, r1
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d14e      	bne.n	800045a <__udivmoddi4+0xaa>
 80003bc:	4694      	mov	ip, r2
 80003be:	458c      	cmp	ip, r1
 80003c0:	4686      	mov	lr, r0
 80003c2:	fab2 f282 	clz	r2, r2
 80003c6:	d962      	bls.n	800048e <__udivmoddi4+0xde>
 80003c8:	b14a      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003ca:	f1c2 0320 	rsb	r3, r2, #32
 80003ce:	4091      	lsls	r1, r2
 80003d0:	fa20 f303 	lsr.w	r3, r0, r3
 80003d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003d8:	4319      	orrs	r1, r3
 80003da:	fa00 fe02 	lsl.w	lr, r0, r2
 80003de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e2:	fa1f f68c 	uxth.w	r6, ip
 80003e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ee:	fb07 1114 	mls	r1, r7, r4, r1
 80003f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f6:	fb04 f106 	mul.w	r1, r4, r6
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000406:	f080 8112 	bcs.w	800062e <__udivmoddi4+0x27e>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 810f 	bls.w	800062e <__udivmoddi4+0x27e>
 8000410:	3c02      	subs	r4, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	fa1f f38e 	uxth.w	r3, lr
 800041a:	fbb1 f0f7 	udiv	r0, r1, r7
 800041e:	fb07 1110 	mls	r1, r7, r0, r1
 8000422:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000426:	fb00 f606 	mul.w	r6, r0, r6
 800042a:	429e      	cmp	r6, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x94>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000436:	f080 80fc 	bcs.w	8000632 <__udivmoddi4+0x282>
 800043a:	429e      	cmp	r6, r3
 800043c:	f240 80f9 	bls.w	8000632 <__udivmoddi4+0x282>
 8000440:	4463      	add	r3, ip
 8000442:	3802      	subs	r0, #2
 8000444:	1b9b      	subs	r3, r3, r6
 8000446:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800044a:	2100      	movs	r1, #0
 800044c:	b11d      	cbz	r5, 8000456 <__udivmoddi4+0xa6>
 800044e:	40d3      	lsrs	r3, r2
 8000450:	2200      	movs	r2, #0
 8000452:	e9c5 3200 	strd	r3, r2, [r5]
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d905      	bls.n	800046a <__udivmoddi4+0xba>
 800045e:	b10d      	cbz	r5, 8000464 <__udivmoddi4+0xb4>
 8000460:	e9c5 0100 	strd	r0, r1, [r5]
 8000464:	2100      	movs	r1, #0
 8000466:	4608      	mov	r0, r1
 8000468:	e7f5      	b.n	8000456 <__udivmoddi4+0xa6>
 800046a:	fab3 f183 	clz	r1, r3
 800046e:	2900      	cmp	r1, #0
 8000470:	d146      	bne.n	8000500 <__udivmoddi4+0x150>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d302      	bcc.n	800047c <__udivmoddi4+0xcc>
 8000476:	4290      	cmp	r0, r2
 8000478:	f0c0 80f0 	bcc.w	800065c <__udivmoddi4+0x2ac>
 800047c:	1a86      	subs	r6, r0, r2
 800047e:	eb64 0303 	sbc.w	r3, r4, r3
 8000482:	2001      	movs	r0, #1
 8000484:	2d00      	cmp	r5, #0
 8000486:	d0e6      	beq.n	8000456 <__udivmoddi4+0xa6>
 8000488:	e9c5 6300 	strd	r6, r3, [r5]
 800048c:	e7e3      	b.n	8000456 <__udivmoddi4+0xa6>
 800048e:	2a00      	cmp	r2, #0
 8000490:	f040 8090 	bne.w	80005b4 <__udivmoddi4+0x204>
 8000494:	eba1 040c 	sub.w	r4, r1, ip
 8000498:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800049c:	fa1f f78c 	uxth.w	r7, ip
 80004a0:	2101      	movs	r1, #1
 80004a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004aa:	fb08 4416 	mls	r4, r8, r6, r4
 80004ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004b2:	fb07 f006 	mul.w	r0, r7, r6
 80004b6:	4298      	cmp	r0, r3
 80004b8:	d908      	bls.n	80004cc <__udivmoddi4+0x11c>
 80004ba:	eb1c 0303 	adds.w	r3, ip, r3
 80004be:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x11a>
 80004c4:	4298      	cmp	r0, r3
 80004c6:	f200 80cd 	bhi.w	8000664 <__udivmoddi4+0x2b4>
 80004ca:	4626      	mov	r6, r4
 80004cc:	1a1c      	subs	r4, r3, r0
 80004ce:	fa1f f38e 	uxth.w	r3, lr
 80004d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004d6:	fb08 4410 	mls	r4, r8, r0, r4
 80004da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004de:	fb00 f707 	mul.w	r7, r0, r7
 80004e2:	429f      	cmp	r7, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x148>
 80004e6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ea:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80004ee:	d202      	bcs.n	80004f6 <__udivmoddi4+0x146>
 80004f0:	429f      	cmp	r7, r3
 80004f2:	f200 80b0 	bhi.w	8000656 <__udivmoddi4+0x2a6>
 80004f6:	4620      	mov	r0, r4
 80004f8:	1bdb      	subs	r3, r3, r7
 80004fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004fe:	e7a5      	b.n	800044c <__udivmoddi4+0x9c>
 8000500:	f1c1 0620 	rsb	r6, r1, #32
 8000504:	408b      	lsls	r3, r1
 8000506:	fa22 f706 	lsr.w	r7, r2, r6
 800050a:	431f      	orrs	r7, r3
 800050c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000510:	fa04 f301 	lsl.w	r3, r4, r1
 8000514:	ea43 030c 	orr.w	r3, r3, ip
 8000518:	40f4      	lsrs	r4, r6
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	0c38      	lsrs	r0, r7, #16
 8000520:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000524:	fbb4 fef0 	udiv	lr, r4, r0
 8000528:	fa1f fc87 	uxth.w	ip, r7
 800052c:	fb00 441e 	mls	r4, r0, lr, r4
 8000530:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000534:	fb0e f90c 	mul.w	r9, lr, ip
 8000538:	45a1      	cmp	r9, r4
 800053a:	fa02 f201 	lsl.w	r2, r2, r1
 800053e:	d90a      	bls.n	8000556 <__udivmoddi4+0x1a6>
 8000540:	193c      	adds	r4, r7, r4
 8000542:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000546:	f080 8084 	bcs.w	8000652 <__udivmoddi4+0x2a2>
 800054a:	45a1      	cmp	r9, r4
 800054c:	f240 8081 	bls.w	8000652 <__udivmoddi4+0x2a2>
 8000550:	f1ae 0e02 	sub.w	lr, lr, #2
 8000554:	443c      	add	r4, r7
 8000556:	eba4 0409 	sub.w	r4, r4, r9
 800055a:	fa1f f983 	uxth.w	r9, r3
 800055e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000562:	fb00 4413 	mls	r4, r0, r3, r4
 8000566:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800056a:	fb03 fc0c 	mul.w	ip, r3, ip
 800056e:	45a4      	cmp	ip, r4
 8000570:	d907      	bls.n	8000582 <__udivmoddi4+0x1d2>
 8000572:	193c      	adds	r4, r7, r4
 8000574:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000578:	d267      	bcs.n	800064a <__udivmoddi4+0x29a>
 800057a:	45a4      	cmp	ip, r4
 800057c:	d965      	bls.n	800064a <__udivmoddi4+0x29a>
 800057e:	3b02      	subs	r3, #2
 8000580:	443c      	add	r4, r7
 8000582:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000586:	fba0 9302 	umull	r9, r3, r0, r2
 800058a:	eba4 040c 	sub.w	r4, r4, ip
 800058e:	429c      	cmp	r4, r3
 8000590:	46ce      	mov	lr, r9
 8000592:	469c      	mov	ip, r3
 8000594:	d351      	bcc.n	800063a <__udivmoddi4+0x28a>
 8000596:	d04e      	beq.n	8000636 <__udivmoddi4+0x286>
 8000598:	b155      	cbz	r5, 80005b0 <__udivmoddi4+0x200>
 800059a:	ebb8 030e 	subs.w	r3, r8, lr
 800059e:	eb64 040c 	sbc.w	r4, r4, ip
 80005a2:	fa04 f606 	lsl.w	r6, r4, r6
 80005a6:	40cb      	lsrs	r3, r1
 80005a8:	431e      	orrs	r6, r3
 80005aa:	40cc      	lsrs	r4, r1
 80005ac:	e9c5 6400 	strd	r6, r4, [r5]
 80005b0:	2100      	movs	r1, #0
 80005b2:	e750      	b.n	8000456 <__udivmoddi4+0xa6>
 80005b4:	f1c2 0320 	rsb	r3, r2, #32
 80005b8:	fa20 f103 	lsr.w	r1, r0, r3
 80005bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005c0:	fa24 f303 	lsr.w	r3, r4, r3
 80005c4:	4094      	lsls	r4, r2
 80005c6:	430c      	orrs	r4, r1
 80005c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005d0:	fa1f f78c 	uxth.w	r7, ip
 80005d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005d8:	fb08 3110 	mls	r1, r8, r0, r3
 80005dc:	0c23      	lsrs	r3, r4, #16
 80005de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005e2:	fb00 f107 	mul.w	r1, r0, r7
 80005e6:	4299      	cmp	r1, r3
 80005e8:	d908      	bls.n	80005fc <__udivmoddi4+0x24c>
 80005ea:	eb1c 0303 	adds.w	r3, ip, r3
 80005ee:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80005f2:	d22c      	bcs.n	800064e <__udivmoddi4+0x29e>
 80005f4:	4299      	cmp	r1, r3
 80005f6:	d92a      	bls.n	800064e <__udivmoddi4+0x29e>
 80005f8:	3802      	subs	r0, #2
 80005fa:	4463      	add	r3, ip
 80005fc:	1a5b      	subs	r3, r3, r1
 80005fe:	b2a4      	uxth	r4, r4
 8000600:	fbb3 f1f8 	udiv	r1, r3, r8
 8000604:	fb08 3311 	mls	r3, r8, r1, r3
 8000608:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800060c:	fb01 f307 	mul.w	r3, r1, r7
 8000610:	42a3      	cmp	r3, r4
 8000612:	d908      	bls.n	8000626 <__udivmoddi4+0x276>
 8000614:	eb1c 0404 	adds.w	r4, ip, r4
 8000618:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800061c:	d213      	bcs.n	8000646 <__udivmoddi4+0x296>
 800061e:	42a3      	cmp	r3, r4
 8000620:	d911      	bls.n	8000646 <__udivmoddi4+0x296>
 8000622:	3902      	subs	r1, #2
 8000624:	4464      	add	r4, ip
 8000626:	1ae4      	subs	r4, r4, r3
 8000628:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800062c:	e739      	b.n	80004a2 <__udivmoddi4+0xf2>
 800062e:	4604      	mov	r4, r0
 8000630:	e6f0      	b.n	8000414 <__udivmoddi4+0x64>
 8000632:	4608      	mov	r0, r1
 8000634:	e706      	b.n	8000444 <__udivmoddi4+0x94>
 8000636:	45c8      	cmp	r8, r9
 8000638:	d2ae      	bcs.n	8000598 <__udivmoddi4+0x1e8>
 800063a:	ebb9 0e02 	subs.w	lr, r9, r2
 800063e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000642:	3801      	subs	r0, #1
 8000644:	e7a8      	b.n	8000598 <__udivmoddi4+0x1e8>
 8000646:	4631      	mov	r1, r6
 8000648:	e7ed      	b.n	8000626 <__udivmoddi4+0x276>
 800064a:	4603      	mov	r3, r0
 800064c:	e799      	b.n	8000582 <__udivmoddi4+0x1d2>
 800064e:	4630      	mov	r0, r6
 8000650:	e7d4      	b.n	80005fc <__udivmoddi4+0x24c>
 8000652:	46d6      	mov	lr, sl
 8000654:	e77f      	b.n	8000556 <__udivmoddi4+0x1a6>
 8000656:	4463      	add	r3, ip
 8000658:	3802      	subs	r0, #2
 800065a:	e74d      	b.n	80004f8 <__udivmoddi4+0x148>
 800065c:	4606      	mov	r6, r0
 800065e:	4623      	mov	r3, r4
 8000660:	4608      	mov	r0, r1
 8000662:	e70f      	b.n	8000484 <__udivmoddi4+0xd4>
 8000664:	3e02      	subs	r6, #2
 8000666:	4463      	add	r3, ip
 8000668:	e730      	b.n	80004cc <__udivmoddi4+0x11c>
 800066a:	bf00      	nop

0800066c <__aeabi_idiv0>:
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop

08000670 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000674:	4b3d      	ldr	r3, [pc, #244]	@ (800076c <SystemInit+0xfc>)
 8000676:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800067a:	4a3c      	ldr	r2, [pc, #240]	@ (800076c <SystemInit+0xfc>)
 800067c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000680:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000684:	4b39      	ldr	r3, [pc, #228]	@ (800076c <SystemInit+0xfc>)
 8000686:	691b      	ldr	r3, [r3, #16]
 8000688:	4a38      	ldr	r2, [pc, #224]	@ (800076c <SystemInit+0xfc>)
 800068a:	f043 0310 	orr.w	r3, r3, #16
 800068e:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000690:	4b37      	ldr	r3, [pc, #220]	@ (8000770 <SystemInit+0x100>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	f003 030f 	and.w	r3, r3, #15
 8000698:	2b06      	cmp	r3, #6
 800069a:	d807      	bhi.n	80006ac <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800069c:	4b34      	ldr	r3, [pc, #208]	@ (8000770 <SystemInit+0x100>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	f023 030f 	bic.w	r3, r3, #15
 80006a4:	4a32      	ldr	r2, [pc, #200]	@ (8000770 <SystemInit+0x100>)
 80006a6:	f043 0307 	orr.w	r3, r3, #7
 80006aa:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006ac:	4b31      	ldr	r3, [pc, #196]	@ (8000774 <SystemInit+0x104>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4a30      	ldr	r2, [pc, #192]	@ (8000774 <SystemInit+0x104>)
 80006b2:	f043 0301 	orr.w	r3, r3, #1
 80006b6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006b8:	4b2e      	ldr	r3, [pc, #184]	@ (8000774 <SystemInit+0x104>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006be:	4b2d      	ldr	r3, [pc, #180]	@ (8000774 <SystemInit+0x104>)
 80006c0:	681a      	ldr	r2, [r3, #0]
 80006c2:	492c      	ldr	r1, [pc, #176]	@ (8000774 <SystemInit+0x104>)
 80006c4:	4b2c      	ldr	r3, [pc, #176]	@ (8000778 <SystemInit+0x108>)
 80006c6:	4013      	ands	r3, r2
 80006c8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006ca:	4b29      	ldr	r3, [pc, #164]	@ (8000770 <SystemInit+0x100>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	f003 0308 	and.w	r3, r3, #8
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d007      	beq.n	80006e6 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006d6:	4b26      	ldr	r3, [pc, #152]	@ (8000770 <SystemInit+0x100>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	f023 030f 	bic.w	r3, r3, #15
 80006de:	4a24      	ldr	r2, [pc, #144]	@ (8000770 <SystemInit+0x100>)
 80006e0:	f043 0307 	orr.w	r3, r3, #7
 80006e4:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006e6:	4b23      	ldr	r3, [pc, #140]	@ (8000774 <SystemInit+0x104>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80006ec:	4b21      	ldr	r3, [pc, #132]	@ (8000774 <SystemInit+0x104>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80006f2:	4b20      	ldr	r3, [pc, #128]	@ (8000774 <SystemInit+0x104>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80006f8:	4b1e      	ldr	r3, [pc, #120]	@ (8000774 <SystemInit+0x104>)
 80006fa:	4a20      	ldr	r2, [pc, #128]	@ (800077c <SystemInit+0x10c>)
 80006fc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80006fe:	4b1d      	ldr	r3, [pc, #116]	@ (8000774 <SystemInit+0x104>)
 8000700:	4a1f      	ldr	r2, [pc, #124]	@ (8000780 <SystemInit+0x110>)
 8000702:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000704:	4b1b      	ldr	r3, [pc, #108]	@ (8000774 <SystemInit+0x104>)
 8000706:	4a1f      	ldr	r2, [pc, #124]	@ (8000784 <SystemInit+0x114>)
 8000708:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800070a:	4b1a      	ldr	r3, [pc, #104]	@ (8000774 <SystemInit+0x104>)
 800070c:	2200      	movs	r2, #0
 800070e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000710:	4b18      	ldr	r3, [pc, #96]	@ (8000774 <SystemInit+0x104>)
 8000712:	4a1c      	ldr	r2, [pc, #112]	@ (8000784 <SystemInit+0x114>)
 8000714:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000716:	4b17      	ldr	r3, [pc, #92]	@ (8000774 <SystemInit+0x104>)
 8000718:	2200      	movs	r2, #0
 800071a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800071c:	4b15      	ldr	r3, [pc, #84]	@ (8000774 <SystemInit+0x104>)
 800071e:	4a19      	ldr	r2, [pc, #100]	@ (8000784 <SystemInit+0x114>)
 8000720:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000722:	4b14      	ldr	r3, [pc, #80]	@ (8000774 <SystemInit+0x104>)
 8000724:	2200      	movs	r2, #0
 8000726:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000728:	4b12      	ldr	r3, [pc, #72]	@ (8000774 <SystemInit+0x104>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4a11      	ldr	r2, [pc, #68]	@ (8000774 <SystemInit+0x104>)
 800072e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000732:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000734:	4b0f      	ldr	r3, [pc, #60]	@ (8000774 <SystemInit+0x104>)
 8000736:	2200      	movs	r2, #0
 8000738:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800073a:	4b13      	ldr	r3, [pc, #76]	@ (8000788 <SystemInit+0x118>)
 800073c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800073e:	4a12      	ldr	r2, [pc, #72]	@ (8000788 <SystemInit+0x118>)
 8000740:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000744:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000746:	4b11      	ldr	r3, [pc, #68]	@ (800078c <SystemInit+0x11c>)
 8000748:	681a      	ldr	r2, [r3, #0]
 800074a:	4b11      	ldr	r3, [pc, #68]	@ (8000790 <SystemInit+0x120>)
 800074c:	4013      	ands	r3, r2
 800074e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000752:	d202      	bcs.n	800075a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000754:	4b0f      	ldr	r3, [pc, #60]	@ (8000794 <SystemInit+0x124>)
 8000756:	2201      	movs	r2, #1
 8000758:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800075a:	4b0f      	ldr	r3, [pc, #60]	@ (8000798 <SystemInit+0x128>)
 800075c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000760:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000762:	bf00      	nop
 8000764:	46bd      	mov	sp, r7
 8000766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076a:	4770      	bx	lr
 800076c:	e000ed00 	.word	0xe000ed00
 8000770:	52002000 	.word	0x52002000
 8000774:	58024400 	.word	0x58024400
 8000778:	eaf6ed7f 	.word	0xeaf6ed7f
 800077c:	02020200 	.word	0x02020200
 8000780:	01ff0000 	.word	0x01ff0000
 8000784:	01010280 	.word	0x01010280
 8000788:	580000c0 	.word	0x580000c0
 800078c:	5c001000 	.word	0x5c001000
 8000790:	ffff0000 	.word	0xffff0000
 8000794:	51008108 	.word	0x51008108
 8000798:	52004000 	.word	0x52004000

0800079c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80007a2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80007a6:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80007a8:	bf00      	nop
 80007aa:	4b2a      	ldr	r3, [pc, #168]	@ (8000854 <main+0xb8>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d004      	beq.n	80007c0 <main+0x24>
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	1e5a      	subs	r2, r3, #1
 80007ba:	607a      	str	r2, [r7, #4]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	dcf4      	bgt.n	80007aa <main+0xe>
  if ( timeout < 0 )
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	da01      	bge.n	80007ca <main+0x2e>
  {
  Error_Handler();
 80007c6:	f000 faa3 	bl	8000d10 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ca:	f000 fcb7 	bl	800113c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007ce:	f000 f84d 	bl	800086c <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80007d2:	4b20      	ldr	r3, [pc, #128]	@ (8000854 <main+0xb8>)
 80007d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007d8:	4a1e      	ldr	r2, [pc, #120]	@ (8000854 <main+0xb8>)
 80007da:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80007de:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007e2:	4b1c      	ldr	r3, [pc, #112]	@ (8000854 <main+0xb8>)
 80007e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80007ec:	603b      	str	r3, [r7, #0]
 80007ee:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80007f0:	2000      	movs	r0, #0
 80007f2:	f001 fe07 	bl	8002404 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 80007f6:	2100      	movs	r1, #0
 80007f8:	2000      	movs	r0, #0
 80007fa:	f001 fe1d 	bl	8002438 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 80007fe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000802:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000804:	bf00      	nop
 8000806:	4b13      	ldr	r3, [pc, #76]	@ (8000854 <main+0xb8>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800080e:	2b00      	cmp	r3, #0
 8000810:	d104      	bne.n	800081c <main+0x80>
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	1e5a      	subs	r2, r3, #1
 8000816:	607a      	str	r2, [r7, #4]
 8000818:	2b00      	cmp	r3, #0
 800081a:	dcf4      	bgt.n	8000806 <main+0x6a>
if ( timeout < 0 )
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	2b00      	cmp	r3, #0
 8000820:	da01      	bge.n	8000826 <main+0x8a>
{
Error_Handler();
 8000822:	f000 fa75 	bl	8000d10 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000826:	f000 f999 	bl	8000b5c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800082a:	f000 f94b 	bl	8000ac4 <MX_USART3_UART_Init>
  MX_FDCAN1_Init();
 800082e:	f000 f897 	bl	8000960 <MX_FDCAN1_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  /* USER CODE BEGIN WHILE */ /*AAO+*/
  printf("Welcome to the CANbus!!!\n\r");
 8000832:	4809      	ldr	r0, [pc, #36]	@ (8000858 <main+0xbc>)
 8000834:	f005 feac 	bl	8006590 <iprintf>
//		printf("No success\n\r");
//	}
//	HAL_Delay(1000); // Wait 1 second before sending the next message

      // Wait until a CAN message is received
      while (HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK);
 8000838:	bf00      	nop
 800083a:	4b08      	ldr	r3, [pc, #32]	@ (800085c <main+0xc0>)
 800083c:	4a08      	ldr	r2, [pc, #32]	@ (8000860 <main+0xc4>)
 800083e:	2140      	movs	r1, #64	@ 0x40
 8000840:	4808      	ldr	r0, [pc, #32]	@ (8000864 <main+0xc8>)
 8000842:	f001 f8a9 	bl	8001998 <HAL_FDCAN_GetRxMessage>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d1f6      	bne.n	800083a <main+0x9e>
//
//      // Delay for 100 ms
//      HAL_Delay(100);

//	  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
	  printf("A\n\r");
 800084c:	4806      	ldr	r0, [pc, #24]	@ (8000868 <main+0xcc>)
 800084e:	f005 fe9f 	bl	8006590 <iprintf>
      while (HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK);
 8000852:	e7f1      	b.n	8000838 <main+0x9c>
 8000854:	58024400 	.word	0x58024400
 8000858:	080072a0 	.word	0x080072a0
 800085c:	24000228 	.word	0x24000228
 8000860:	24000200 	.word	0x24000200
 8000864:	24000088 	.word	0x24000088
 8000868:	080072bc 	.word	0x080072bc

0800086c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b09c      	sub	sp, #112	@ 0x70
 8000870:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000872:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000876:	224c      	movs	r2, #76	@ 0x4c
 8000878:	2100      	movs	r1, #0
 800087a:	4618      	mov	r0, r3
 800087c:	f005 fedd 	bl	800663a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000880:	1d3b      	adds	r3, r7, #4
 8000882:	2220      	movs	r2, #32
 8000884:	2100      	movs	r1, #0
 8000886:	4618      	mov	r0, r3
 8000888:	f005 fed7 	bl	800663a <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800088c:	2004      	movs	r0, #4
 800088e:	f001 fde7 	bl	8002460 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000892:	2300      	movs	r3, #0
 8000894:	603b      	str	r3, [r7, #0]
 8000896:	4b30      	ldr	r3, [pc, #192]	@ (8000958 <SystemClock_Config+0xec>)
 8000898:	699b      	ldr	r3, [r3, #24]
 800089a:	4a2f      	ldr	r2, [pc, #188]	@ (8000958 <SystemClock_Config+0xec>)
 800089c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80008a0:	6193      	str	r3, [r2, #24]
 80008a2:	4b2d      	ldr	r3, [pc, #180]	@ (8000958 <SystemClock_Config+0xec>)
 80008a4:	699b      	ldr	r3, [r3, #24]
 80008a6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008aa:	603b      	str	r3, [r7, #0]
 80008ac:	4b2b      	ldr	r3, [pc, #172]	@ (800095c <SystemClock_Config+0xf0>)
 80008ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008b0:	4a2a      	ldr	r2, [pc, #168]	@ (800095c <SystemClock_Config+0xf0>)
 80008b2:	f043 0301 	orr.w	r3, r3, #1
 80008b6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80008b8:	4b28      	ldr	r3, [pc, #160]	@ (800095c <SystemClock_Config+0xf0>)
 80008ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008bc:	f003 0301 	and.w	r3, r3, #1
 80008c0:	603b      	str	r3, [r7, #0]
 80008c2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80008c4:	bf00      	nop
 80008c6:	4b24      	ldr	r3, [pc, #144]	@ (8000958 <SystemClock_Config+0xec>)
 80008c8:	699b      	ldr	r3, [r3, #24]
 80008ca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80008ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80008d2:	d1f8      	bne.n	80008c6 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008d4:	2301      	movs	r3, #1
 80008d6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80008d8:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80008dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008de:	2302      	movs	r3, #2
 80008e0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008e2:	2302      	movs	r3, #2
 80008e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 80008e6:	2302      	movs	r3, #2
 80008e8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 240;
 80008ea:	23f0      	movs	r3, #240	@ 0xf0
 80008ec:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80008ee:	2302      	movs	r3, #2
 80008f0:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 24;
 80008f2:	2318      	movs	r3, #24
 80008f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008f6:	2302      	movs	r3, #2
 80008f8:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80008fa:	2308      	movs	r3, #8
 80008fc:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80008fe:	2300      	movs	r3, #0
 8000900:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000902:	2300      	movs	r3, #0
 8000904:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000906:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800090a:	4618      	mov	r0, r3
 800090c:	f001 fe02 	bl	8002514 <HAL_RCC_OscConfig>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000916:	f000 f9fb 	bl	8000d10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800091a:	233f      	movs	r3, #63	@ 0x3f
 800091c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800091e:	2303      	movs	r3, #3
 8000920:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000922:	2300      	movs	r3, #0
 8000924:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000926:	2308      	movs	r3, #8
 8000928:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800092a:	2340      	movs	r3, #64	@ 0x40
 800092c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800092e:	2340      	movs	r3, #64	@ 0x40
 8000930:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000932:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000936:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000938:	2340      	movs	r3, #64	@ 0x40
 800093a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800093c:	1d3b      	adds	r3, r7, #4
 800093e:	2104      	movs	r1, #4
 8000940:	4618      	mov	r0, r3
 8000942:	f002 fa41 	bl	8002dc8 <HAL_RCC_ClockConfig>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 800094c:	f000 f9e0 	bl	8000d10 <Error_Handler>
  }
}
 8000950:	bf00      	nop
 8000952:	3770      	adds	r7, #112	@ 0x70
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	58024800 	.word	0x58024800
 800095c:	58000400 	.word	0x58000400

08000960 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af02      	add	r7, sp, #8
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000966:	4b53      	ldr	r3, [pc, #332]	@ (8000ab4 <MX_FDCAN1_Init+0x154>)
 8000968:	4a53      	ldr	r2, [pc, #332]	@ (8000ab8 <MX_FDCAN1_Init+0x158>)
 800096a:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800096c:	4b51      	ldr	r3, [pc, #324]	@ (8000ab4 <MX_FDCAN1_Init+0x154>)
 800096e:	2200      	movs	r2, #0
 8000970:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000972:	4b50      	ldr	r3, [pc, #320]	@ (8000ab4 <MX_FDCAN1_Init+0x154>)
 8000974:	2200      	movs	r2, #0
 8000976:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000978:	4b4e      	ldr	r3, [pc, #312]	@ (8000ab4 <MX_FDCAN1_Init+0x154>)
 800097a:	2200      	movs	r2, #0
 800097c:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800097e:	4b4d      	ldr	r3, [pc, #308]	@ (8000ab4 <MX_FDCAN1_Init+0x154>)
 8000980:	2200      	movs	r2, #0
 8000982:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = ENABLE;
 8000984:	4b4b      	ldr	r3, [pc, #300]	@ (8000ab4 <MX_FDCAN1_Init+0x154>)
 8000986:	2201      	movs	r2, #1
 8000988:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 2;
 800098a:	4b4a      	ldr	r3, [pc, #296]	@ (8000ab4 <MX_FDCAN1_Init+0x154>)
 800098c:	2202      	movs	r2, #2
 800098e:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 8;
 8000990:	4b48      	ldr	r3, [pc, #288]	@ (8000ab4 <MX_FDCAN1_Init+0x154>)
 8000992:	2208      	movs	r2, #8
 8000994:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 31 ;
 8000996:	4b47      	ldr	r3, [pc, #284]	@ (8000ab4 <MX_FDCAN1_Init+0x154>)
 8000998:	221f      	movs	r2, #31
 800099a:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 8;
 800099c:	4b45      	ldr	r3, [pc, #276]	@ (8000ab4 <MX_FDCAN1_Init+0x154>)
 800099e:	2208      	movs	r2, #8
 80009a0:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80009a2:	4b44      	ldr	r3, [pc, #272]	@ (8000ab4 <MX_FDCAN1_Init+0x154>)
 80009a4:	2201      	movs	r2, #1
 80009a6:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80009a8:	4b42      	ldr	r3, [pc, #264]	@ (8000ab4 <MX_FDCAN1_Init+0x154>)
 80009aa:	2201      	movs	r2, #1
 80009ac:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 80009ae:	4b41      	ldr	r3, [pc, #260]	@ (8000ab4 <MX_FDCAN1_Init+0x154>)
 80009b0:	2201      	movs	r2, #1
 80009b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 80009b4:	4b3f      	ldr	r3, [pc, #252]	@ (8000ab4 <MX_FDCAN1_Init+0x154>)
 80009b6:	2201      	movs	r2, #1
 80009b8:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 80009ba:	4b3e      	ldr	r3, [pc, #248]	@ (8000ab4 <MX_FDCAN1_Init+0x154>)
 80009bc:	2200      	movs	r2, #0
 80009be:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 80009c0:	4b3c      	ldr	r3, [pc, #240]	@ (8000ab4 <MX_FDCAN1_Init+0x154>)
 80009c2:	2201      	movs	r2, #1
 80009c4:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 80009c6:	4b3b      	ldr	r3, [pc, #236]	@ (8000ab4 <MX_FDCAN1_Init+0x154>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 1;
 80009cc:	4b39      	ldr	r3, [pc, #228]	@ (8000ab4 <MX_FDCAN1_Init+0x154>)
 80009ce:	2201      	movs	r2, #1
 80009d0:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 80009d2:	4b38      	ldr	r3, [pc, #224]	@ (8000ab4 <MX_FDCAN1_Init+0x154>)
 80009d4:	2204      	movs	r2, #4
 80009d6:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 80009d8:	4b36      	ldr	r3, [pc, #216]	@ (8000ab4 <MX_FDCAN1_Init+0x154>)
 80009da:	2200      	movs	r2, #0
 80009dc:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80009de:	4b35      	ldr	r3, [pc, #212]	@ (8000ab4 <MX_FDCAN1_Init+0x154>)
 80009e0:	2204      	movs	r2, #4
 80009e2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 80009e4:	4b33      	ldr	r3, [pc, #204]	@ (8000ab4 <MX_FDCAN1_Init+0x154>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80009ea:	4b32      	ldr	r3, [pc, #200]	@ (8000ab4 <MX_FDCAN1_Init+0x154>)
 80009ec:	2204      	movs	r2, #4
 80009ee:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 80009f0:	4b30      	ldr	r3, [pc, #192]	@ (8000ab4 <MX_FDCAN1_Init+0x154>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 80009f6:	4b2f      	ldr	r3, [pc, #188]	@ (8000ab4 <MX_FDCAN1_Init+0x154>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 1;
 80009fc:	4b2d      	ldr	r3, [pc, #180]	@ (8000ab4 <MX_FDCAN1_Init+0x154>)
 80009fe:	2201      	movs	r2, #1
 8000a00:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000a02:	4b2c      	ldr	r3, [pc, #176]	@ (8000ab4 <MX_FDCAN1_Init+0x154>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000a08:	4b2a      	ldr	r3, [pc, #168]	@ (8000ab4 <MX_FDCAN1_Init+0x154>)
 8000a0a:	2204      	movs	r2, #4
 8000a0c:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000a0e:	4829      	ldr	r0, [pc, #164]	@ (8000ab4 <MX_FDCAN1_Init+0x154>)
 8000a10:	f000 fd16 	bl	8001440 <HAL_FDCAN_Init>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <MX_FDCAN1_Init+0xbe>
  {
    Error_Handler();
 8000a1a:	f000 f979 	bl	8000d10 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  /*AAO+*/
   /* Configure Rx filter */
    sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8000a1e:	4b27      	ldr	r3, [pc, #156]	@ (8000abc <MX_FDCAN1_Init+0x15c>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	601a      	str	r2, [r3, #0]
    sFilterConfig.FilterIndex = 0;
 8000a24:	4b25      	ldr	r3, [pc, #148]	@ (8000abc <MX_FDCAN1_Init+0x15c>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	605a      	str	r2, [r3, #4]
    sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8000a2a:	4b24      	ldr	r3, [pc, #144]	@ (8000abc <MX_FDCAN1_Init+0x15c>)
 8000a2c:	2202      	movs	r2, #2
 8000a2e:	609a      	str	r2, [r3, #8]
    sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000a30:	4b22      	ldr	r3, [pc, #136]	@ (8000abc <MX_FDCAN1_Init+0x15c>)
 8000a32:	2201      	movs	r2, #1
 8000a34:	60da      	str	r2, [r3, #12]
    sFilterConfig.FilterID1 = 0x000;
 8000a36:	4b21      	ldr	r3, [pc, #132]	@ (8000abc <MX_FDCAN1_Init+0x15c>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	611a      	str	r2, [r3, #16]
    sFilterConfig.FilterID2 = 0x000;
 8000a3c:	4b1f      	ldr	r3, [pc, #124]	@ (8000abc <MX_FDCAN1_Init+0x15c>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	615a      	str	r2, [r3, #20]

    /* Configure global filter to reject all non-matching frames */
    HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, FDCAN_REJECT_REMOTE, FDCAN_REJECT_REMOTE);
 8000a42:	2301      	movs	r3, #1
 8000a44:	9300      	str	r3, [sp, #0]
 8000a46:	2301      	movs	r3, #1
 8000a48:	2202      	movs	r2, #2
 8000a4a:	2102      	movs	r1, #2
 8000a4c:	4819      	ldr	r0, [pc, #100]	@ (8000ab4 <MX_FDCAN1_Init+0x154>)
 8000a4e:	f000 ff4b 	bl	80018e8 <HAL_FDCAN_ConfigGlobalFilter>

    if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 8000a52:	491a      	ldr	r1, [pc, #104]	@ (8000abc <MX_FDCAN1_Init+0x15c>)
 8000a54:	4817      	ldr	r0, [pc, #92]	@ (8000ab4 <MX_FDCAN1_Init+0x154>)
 8000a56:	f000 fed1 	bl	80017fc <HAL_FDCAN_ConfigFilter>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <MX_FDCAN1_Init+0x104>
      {
         /* Filter configuration Error */
         Error_Handler();
 8000a60:	f000 f956 	bl	8000d10 <Error_Handler>
      }
     /* Start the FDCAN module */
    if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK) {
 8000a64:	4813      	ldr	r0, [pc, #76]	@ (8000ab4 <MX_FDCAN1_Init+0x154>)
 8000a66:	f000 ff6c 	bl	8001942 <HAL_FDCAN_Start>
      }
         /* Start Error */
    if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK) {
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	2101      	movs	r1, #1
 8000a6e:	4811      	ldr	r0, [pc, #68]	@ (8000ab4 <MX_FDCAN1_Init+0x154>)
 8000a70:	f001 f8fe 	bl	8001c70 <HAL_FDCAN_ActivateNotification>
      }
         /* Notification Error */

     /* Configure Tx buffer message */
    TxHeader.Identifier = 0x111;
 8000a74:	4b12      	ldr	r3, [pc, #72]	@ (8000ac0 <MX_FDCAN1_Init+0x160>)
 8000a76:	f240 1211 	movw	r2, #273	@ 0x111
 8000a7a:	601a      	str	r2, [r3, #0]
    TxHeader.IdType = FDCAN_STANDARD_ID;
 8000a7c:	4b10      	ldr	r3, [pc, #64]	@ (8000ac0 <MX_FDCAN1_Init+0x160>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	605a      	str	r2, [r3, #4]
    TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000a82:	4b0f      	ldr	r3, [pc, #60]	@ (8000ac0 <MX_FDCAN1_Init+0x160>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	609a      	str	r2, [r3, #8]
    TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8000a88:	4b0d      	ldr	r3, [pc, #52]	@ (8000ac0 <MX_FDCAN1_Init+0x160>)
 8000a8a:	2208      	movs	r2, #8
 8000a8c:	60da      	str	r2, [r3, #12]
    TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000a8e:	4b0c      	ldr	r3, [pc, #48]	@ (8000ac0 <MX_FDCAN1_Init+0x160>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	611a      	str	r2, [r3, #16]
    TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8000a94:	4b0a      	ldr	r3, [pc, #40]	@ (8000ac0 <MX_FDCAN1_Init+0x160>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	615a      	str	r2, [r3, #20]
    TxHeader.FDFormat = FDCAN_FD_CAN;
 8000a9a:	4b09      	ldr	r3, [pc, #36]	@ (8000ac0 <MX_FDCAN1_Init+0x160>)
 8000a9c:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000aa0:	619a      	str	r2, [r3, #24]
    TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000aa2:	4b07      	ldr	r3, [pc, #28]	@ (8000ac0 <MX_FDCAN1_Init+0x160>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	61da      	str	r2, [r3, #28]
    TxHeader.MessageMarker = 0x00;
 8000aa8:	4b05      	ldr	r3, [pc, #20]	@ (8000ac0 <MX_FDCAN1_Init+0x160>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	621a      	str	r2, [r3, #32]

     /* USER CODE END WHILE */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000aae:	bf00      	nop
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	24000088 	.word	0x24000088
 8000ab8:	4000a000 	.word	0x4000a000
 8000abc:	240001bc 	.word	0x240001bc
 8000ac0:	240001dc 	.word	0x240001dc

08000ac4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ac8:	4b22      	ldr	r3, [pc, #136]	@ (8000b54 <MX_USART3_UART_Init+0x90>)
 8000aca:	4a23      	ldr	r2, [pc, #140]	@ (8000b58 <MX_USART3_UART_Init+0x94>)
 8000acc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000ace:	4b21      	ldr	r3, [pc, #132]	@ (8000b54 <MX_USART3_UART_Init+0x90>)
 8000ad0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ad4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ad6:	4b1f      	ldr	r3, [pc, #124]	@ (8000b54 <MX_USART3_UART_Init+0x90>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000adc:	4b1d      	ldr	r3, [pc, #116]	@ (8000b54 <MX_USART3_UART_Init+0x90>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ae2:	4b1c      	ldr	r3, [pc, #112]	@ (8000b54 <MX_USART3_UART_Init+0x90>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ae8:	4b1a      	ldr	r3, [pc, #104]	@ (8000b54 <MX_USART3_UART_Init+0x90>)
 8000aea:	220c      	movs	r2, #12
 8000aec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aee:	4b19      	ldr	r3, [pc, #100]	@ (8000b54 <MX_USART3_UART_Init+0x90>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000af4:	4b17      	ldr	r3, [pc, #92]	@ (8000b54 <MX_USART3_UART_Init+0x90>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000afa:	4b16      	ldr	r3, [pc, #88]	@ (8000b54 <MX_USART3_UART_Init+0x90>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b00:	4b14      	ldr	r3, [pc, #80]	@ (8000b54 <MX_USART3_UART_Init+0x90>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b06:	4b13      	ldr	r3, [pc, #76]	@ (8000b54 <MX_USART3_UART_Init+0x90>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b0c:	4811      	ldr	r0, [pc, #68]	@ (8000b54 <MX_USART3_UART_Init+0x90>)
 8000b0e:	f004 fb13 	bl	8005138 <HAL_UART_Init>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000b18:	f000 f8fa 	bl	8000d10 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	480d      	ldr	r0, [pc, #52]	@ (8000b54 <MX_USART3_UART_Init+0x90>)
 8000b20:	f005 fba9 	bl	8006276 <HAL_UARTEx_SetTxFifoThreshold>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000b2a:	f000 f8f1 	bl	8000d10 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b2e:	2100      	movs	r1, #0
 8000b30:	4808      	ldr	r0, [pc, #32]	@ (8000b54 <MX_USART3_UART_Init+0x90>)
 8000b32:	f005 fbde 	bl	80062f2 <HAL_UARTEx_SetRxFifoThreshold>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000b3c:	f000 f8e8 	bl	8000d10 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000b40:	4804      	ldr	r0, [pc, #16]	@ (8000b54 <MX_USART3_UART_Init+0x90>)
 8000b42:	f005 fb5f 	bl	8006204 <HAL_UARTEx_DisableFifoMode>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000b4c:	f000 f8e0 	bl	8000d10 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b50:	bf00      	nop
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	24000128 	.word	0x24000128
 8000b58:	40004800 	.word	0x40004800

08000b5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b08a      	sub	sp, #40	@ 0x28
 8000b60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b62:	f107 0314 	add.w	r3, r7, #20
 8000b66:	2200      	movs	r2, #0
 8000b68:	601a      	str	r2, [r3, #0]
 8000b6a:	605a      	str	r2, [r3, #4]
 8000b6c:	609a      	str	r2, [r3, #8]
 8000b6e:	60da      	str	r2, [r3, #12]
 8000b70:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b72:	4b62      	ldr	r3, [pc, #392]	@ (8000cfc <MX_GPIO_Init+0x1a0>)
 8000b74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b78:	4a60      	ldr	r2, [pc, #384]	@ (8000cfc <MX_GPIO_Init+0x1a0>)
 8000b7a:	f043 0304 	orr.w	r3, r3, #4
 8000b7e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b82:	4b5e      	ldr	r3, [pc, #376]	@ (8000cfc <MX_GPIO_Init+0x1a0>)
 8000b84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b88:	f003 0304 	and.w	r3, r3, #4
 8000b8c:	613b      	str	r3, [r7, #16]
 8000b8e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b90:	4b5a      	ldr	r3, [pc, #360]	@ (8000cfc <MX_GPIO_Init+0x1a0>)
 8000b92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b96:	4a59      	ldr	r2, [pc, #356]	@ (8000cfc <MX_GPIO_Init+0x1a0>)
 8000b98:	f043 0301 	orr.w	r3, r3, #1
 8000b9c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ba0:	4b56      	ldr	r3, [pc, #344]	@ (8000cfc <MX_GPIO_Init+0x1a0>)
 8000ba2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ba6:	f003 0301 	and.w	r3, r3, #1
 8000baa:	60fb      	str	r3, [r7, #12]
 8000bac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bae:	4b53      	ldr	r3, [pc, #332]	@ (8000cfc <MX_GPIO_Init+0x1a0>)
 8000bb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bb4:	4a51      	ldr	r2, [pc, #324]	@ (8000cfc <MX_GPIO_Init+0x1a0>)
 8000bb6:	f043 0302 	orr.w	r3, r3, #2
 8000bba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bbe:	4b4f      	ldr	r3, [pc, #316]	@ (8000cfc <MX_GPIO_Init+0x1a0>)
 8000bc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bc4:	f003 0302 	and.w	r3, r3, #2
 8000bc8:	60bb      	str	r3, [r7, #8]
 8000bca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bcc:	4b4b      	ldr	r3, [pc, #300]	@ (8000cfc <MX_GPIO_Init+0x1a0>)
 8000bce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bd2:	4a4a      	ldr	r2, [pc, #296]	@ (8000cfc <MX_GPIO_Init+0x1a0>)
 8000bd4:	f043 0308 	orr.w	r3, r3, #8
 8000bd8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bdc:	4b47      	ldr	r3, [pc, #284]	@ (8000cfc <MX_GPIO_Init+0x1a0>)
 8000bde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000be2:	f003 0308 	and.w	r3, r3, #8
 8000be6:	607b      	str	r3, [r7, #4]
 8000be8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bea:	4b44      	ldr	r3, [pc, #272]	@ (8000cfc <MX_GPIO_Init+0x1a0>)
 8000bec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bf0:	4a42      	ldr	r2, [pc, #264]	@ (8000cfc <MX_GPIO_Init+0x1a0>)
 8000bf2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000bf6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bfa:	4b40      	ldr	r3, [pc, #256]	@ (8000cfc <MX_GPIO_Init+0x1a0>)
 8000bfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c04:	603b      	str	r3, [r7, #0]
 8000c06:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000c08:	2200      	movs	r2, #0
 8000c0a:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000c0e:	483c      	ldr	r0, [pc, #240]	@ (8000d00 <MX_GPIO_Init+0x1a4>)
 8000c10:	f001 fbde 	bl	80023d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c14:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c22:	f107 0314 	add.w	r3, r7, #20
 8000c26:	4619      	mov	r1, r3
 8000c28:	4836      	ldr	r0, [pc, #216]	@ (8000d04 <MX_GPIO_Init+0x1a8>)
 8000c2a:	f001 fa21 	bl	8002070 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000c2e:	2332      	movs	r3, #50	@ 0x32
 8000c30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c32:	2302      	movs	r3, #2
 8000c34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c36:	2300      	movs	r3, #0
 8000c38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c3e:	230b      	movs	r3, #11
 8000c40:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c42:	f107 0314 	add.w	r3, r7, #20
 8000c46:	4619      	mov	r1, r3
 8000c48:	482e      	ldr	r0, [pc, #184]	@ (8000d04 <MX_GPIO_Init+0x1a8>)
 8000c4a:	f001 fa11 	bl	8002070 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000c4e:	2386      	movs	r3, #134	@ 0x86
 8000c50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c52:	2302      	movs	r3, #2
 8000c54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c56:	2300      	movs	r3, #0
 8000c58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c5e:	230b      	movs	r3, #11
 8000c60:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c62:	f107 0314 	add.w	r3, r7, #20
 8000c66:	4619      	mov	r1, r3
 8000c68:	4827      	ldr	r0, [pc, #156]	@ (8000d08 <MX_GPIO_Init+0x1ac>)
 8000c6a:	f001 fa01 	bl	8002070 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000c6e:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000c72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c74:	2301      	movs	r3, #1
 8000c76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c80:	f107 0314 	add.w	r3, r7, #20
 8000c84:	4619      	mov	r1, r3
 8000c86:	481e      	ldr	r0, [pc, #120]	@ (8000d00 <MX_GPIO_Init+0x1a4>)
 8000c88:	f001 f9f2 	bl	8002070 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000c8c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c92:	2302      	movs	r3, #2
 8000c94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c96:	2300      	movs	r3, #0
 8000c98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c9e:	230b      	movs	r3, #11
 8000ca0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ca2:	f107 0314 	add.w	r3, r7, #20
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	4815      	ldr	r0, [pc, #84]	@ (8000d00 <MX_GPIO_Init+0x1a4>)
 8000caa:	f001 f9e1 	bl	8002070 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000cae:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000cb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb4:	2302      	movs	r3, #2
 8000cb6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000cc0:	230a      	movs	r3, #10
 8000cc2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc4:	f107 0314 	add.w	r3, r7, #20
 8000cc8:	4619      	mov	r1, r3
 8000cca:	480f      	ldr	r0, [pc, #60]	@ (8000d08 <MX_GPIO_Init+0x1ac>)
 8000ccc:	f001 f9d0 	bl	8002070 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000cd0:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000cd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ce2:	230b      	movs	r3, #11
 8000ce4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ce6:	f107 0314 	add.w	r3, r7, #20
 8000cea:	4619      	mov	r1, r3
 8000cec:	4807      	ldr	r0, [pc, #28]	@ (8000d0c <MX_GPIO_Init+0x1b0>)
 8000cee:	f001 f9bf 	bl	8002070 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cf2:	bf00      	nop
 8000cf4:	3728      	adds	r7, #40	@ 0x28
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	58024400 	.word	0x58024400
 8000d00:	58020400 	.word	0x58020400
 8000d04:	58020800 	.word	0x58020800
 8000d08:	58020000 	.word	0x58020000
 8000d0c:	58021800 	.word	0x58021800

08000d10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d14:	b672      	cpsid	i
}
 8000d16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d18:	bf00      	nop
 8000d1a:	e7fd      	b.n	8000d18 <Error_Handler+0x8>

08000d1c <__io_putchar>:
/**
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE {
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  /* write a character to the USART3 and Loop until the end of transmission*/
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000d24:	1d39      	adds	r1, r7, #4
 8000d26:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	4803      	ldr	r0, [pc, #12]	@ (8000d3c <__io_putchar+0x20>)
 8000d2e:	f004 fa53 	bl	80051d8 <HAL_UART_Transmit>
  return ch;
 8000d32:	687b      	ldr	r3, [r7, #4]
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	3708      	adds	r7, #8
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	24000128 	.word	0x24000128

08000d40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b083      	sub	sp, #12
 8000d44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d46:	4b0a      	ldr	r3, [pc, #40]	@ (8000d70 <HAL_MspInit+0x30>)
 8000d48:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d4c:	4a08      	ldr	r2, [pc, #32]	@ (8000d70 <HAL_MspInit+0x30>)
 8000d4e:	f043 0302 	orr.w	r3, r3, #2
 8000d52:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000d56:	4b06      	ldr	r3, [pc, #24]	@ (8000d70 <HAL_MspInit+0x30>)
 8000d58:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d5c:	f003 0302 	and.w	r3, r3, #2
 8000d60:	607b      	str	r3, [r7, #4]
 8000d62:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d64:	bf00      	nop
 8000d66:	370c      	adds	r7, #12
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr
 8000d70:	58024400 	.word	0x58024400

08000d74 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b0ba      	sub	sp, #232	@ 0xe8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d7c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000d80:	2200      	movs	r2, #0
 8000d82:	601a      	str	r2, [r3, #0]
 8000d84:	605a      	str	r2, [r3, #4]
 8000d86:	609a      	str	r2, [r3, #8]
 8000d88:	60da      	str	r2, [r3, #12]
 8000d8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d8c:	f107 0310 	add.w	r3, r7, #16
 8000d90:	22c0      	movs	r2, #192	@ 0xc0
 8000d92:	2100      	movs	r1, #0
 8000d94:	4618      	mov	r0, r3
 8000d96:	f005 fc50 	bl	800663a <memset>
  if(hfdcan->Instance==FDCAN1)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4a31      	ldr	r2, [pc, #196]	@ (8000e64 <HAL_FDCAN_MspInit+0xf0>)
 8000da0:	4293      	cmp	r3, r2
 8000da2:	d15b      	bne.n	8000e5c <HAL_FDCAN_MspInit+0xe8>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000da4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000da8:	f04f 0300 	mov.w	r3, #0
 8000dac:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8000db0:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000db4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000db8:	f107 0310 	add.w	r3, r7, #16
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f002 fb8f 	bl	80034e0 <HAL_RCCEx_PeriphCLKConfig>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 8000dc8:	f7ff ffa2 	bl	8000d10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000dcc:	4b26      	ldr	r3, [pc, #152]	@ (8000e68 <HAL_FDCAN_MspInit+0xf4>)
 8000dce:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8000dd2:	4a25      	ldr	r2, [pc, #148]	@ (8000e68 <HAL_FDCAN_MspInit+0xf4>)
 8000dd4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000dd8:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8000ddc:	4b22      	ldr	r3, [pc, #136]	@ (8000e68 <HAL_FDCAN_MspInit+0xf4>)
 8000dde:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8000de2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000de6:	60fb      	str	r3, [r7, #12]
 8000de8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dea:	4b1f      	ldr	r3, [pc, #124]	@ (8000e68 <HAL_FDCAN_MspInit+0xf4>)
 8000dec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000df0:	4a1d      	ldr	r2, [pc, #116]	@ (8000e68 <HAL_FDCAN_MspInit+0xf4>)
 8000df2:	f043 0308 	orr.w	r3, r3, #8
 8000df6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dfa:	4b1b      	ldr	r3, [pc, #108]	@ (8000e68 <HAL_FDCAN_MspInit+0xf4>)
 8000dfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e00:	f003 0308 	and.w	r3, r3, #8
 8000e04:	60bb      	str	r3, [r7, #8]
 8000e06:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = CAN_RX_Pin;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0e:	2302      	movs	r3, #2
 8000e10:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e14:	2300      	movs	r3, #0
 8000e16:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e1a:	2303      	movs	r3, #3
 8000e1c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000e20:	2309      	movs	r3, #9
 8000e22:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(CAN_RX_GPIO_Port, &GPIO_InitStruct);
 8000e26:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	480f      	ldr	r0, [pc, #60]	@ (8000e6c <HAL_FDCAN_MspInit+0xf8>)
 8000e2e:	f001 f91f 	bl	8002070 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CAN_TX_Pin;
 8000e32:	2302      	movs	r3, #2
 8000e34:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e38:	2302      	movs	r3, #2
 8000e3a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e44:	2303      	movs	r3, #3
 8000e46:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000e4a:	2309      	movs	r3, #9
 8000e4c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(CAN_TX_GPIO_Port, &GPIO_InitStruct);
 8000e50:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000e54:	4619      	mov	r1, r3
 8000e56:	4805      	ldr	r0, [pc, #20]	@ (8000e6c <HAL_FDCAN_MspInit+0xf8>)
 8000e58:	f001 f90a 	bl	8002070 <HAL_GPIO_Init>

  /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 8000e5c:	bf00      	nop
 8000e5e:	37e8      	adds	r7, #232	@ 0xe8
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	4000a000 	.word	0x4000a000
 8000e68:	58024400 	.word	0x58024400
 8000e6c:	58020c00 	.word	0x58020c00

08000e70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b0ba      	sub	sp, #232	@ 0xe8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e78:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	601a      	str	r2, [r3, #0]
 8000e80:	605a      	str	r2, [r3, #4]
 8000e82:	609a      	str	r2, [r3, #8]
 8000e84:	60da      	str	r2, [r3, #12]
 8000e86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e88:	f107 0310 	add.w	r3, r7, #16
 8000e8c:	22c0      	movs	r2, #192	@ 0xc0
 8000e8e:	2100      	movs	r1, #0
 8000e90:	4618      	mov	r0, r3
 8000e92:	f005 fbd2 	bl	800663a <memset>
  if(huart->Instance==USART3)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4a27      	ldr	r2, [pc, #156]	@ (8000f38 <HAL_UART_MspInit+0xc8>)
 8000e9c:	4293      	cmp	r3, r2
 8000e9e:	d146      	bne.n	8000f2e <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000ea0:	f04f 0202 	mov.w	r2, #2
 8000ea4:	f04f 0300 	mov.w	r3, #0
 8000ea8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000eac:	2300      	movs	r3, #0
 8000eae:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000eb2:	f107 0310 	add.w	r3, r7, #16
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f002 fb12 	bl	80034e0 <HAL_RCCEx_PeriphCLKConfig>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000ec2:	f7ff ff25 	bl	8000d10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ec6:	4b1d      	ldr	r3, [pc, #116]	@ (8000f3c <HAL_UART_MspInit+0xcc>)
 8000ec8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000ecc:	4a1b      	ldr	r2, [pc, #108]	@ (8000f3c <HAL_UART_MspInit+0xcc>)
 8000ece:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ed2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000ed6:	4b19      	ldr	r3, [pc, #100]	@ (8000f3c <HAL_UART_MspInit+0xcc>)
 8000ed8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000edc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000ee0:	60fb      	str	r3, [r7, #12]
 8000ee2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ee4:	4b15      	ldr	r3, [pc, #84]	@ (8000f3c <HAL_UART_MspInit+0xcc>)
 8000ee6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000eea:	4a14      	ldr	r2, [pc, #80]	@ (8000f3c <HAL_UART_MspInit+0xcc>)
 8000eec:	f043 0308 	orr.w	r3, r3, #8
 8000ef0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ef4:	4b11      	ldr	r3, [pc, #68]	@ (8000f3c <HAL_UART_MspInit+0xcc>)
 8000ef6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000efa:	f003 0308 	and.w	r3, r3, #8
 8000efe:	60bb      	str	r3, [r7, #8]
 8000f00:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f02:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000f06:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f10:	2300      	movs	r3, #0
 8000f12:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f16:	2300      	movs	r3, #0
 8000f18:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f1c:	2307      	movs	r3, #7
 8000f1e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f22:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000f26:	4619      	mov	r1, r3
 8000f28:	4805      	ldr	r0, [pc, #20]	@ (8000f40 <HAL_UART_MspInit+0xd0>)
 8000f2a:	f001 f8a1 	bl	8002070 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8000f2e:	bf00      	nop
 8000f30:	37e8      	adds	r7, #232	@ 0xe8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	40004800 	.word	0x40004800
 8000f3c:	58024400 	.word	0x58024400
 8000f40:	58020c00 	.word	0x58020c00

08000f44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f48:	bf00      	nop
 8000f4a:	e7fd      	b.n	8000f48 <NMI_Handler+0x4>

08000f4c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f50:	bf00      	nop
 8000f52:	e7fd      	b.n	8000f50 <HardFault_Handler+0x4>

08000f54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f58:	bf00      	nop
 8000f5a:	e7fd      	b.n	8000f58 <MemManage_Handler+0x4>

08000f5c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f60:	bf00      	nop
 8000f62:	e7fd      	b.n	8000f60 <BusFault_Handler+0x4>

08000f64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f68:	bf00      	nop
 8000f6a:	e7fd      	b.n	8000f68 <UsageFault_Handler+0x4>

08000f6c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f70:	bf00      	nop
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr

08000f7a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f7a:	b480      	push	{r7}
 8000f7c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f7e:	bf00      	nop
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr

08000f88 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f8c:	bf00      	nop
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr

08000f96 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f96:	b580      	push	{r7, lr}
 8000f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f9a:	f000 f941 	bl	8001220 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	bd80      	pop	{r7, pc}

08000fa2 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fa2:	b580      	push	{r7, lr}
 8000fa4:	b086      	sub	sp, #24
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	60f8      	str	r0, [r7, #12]
 8000faa:	60b9      	str	r1, [r7, #8]
 8000fac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fae:	2300      	movs	r3, #0
 8000fb0:	617b      	str	r3, [r7, #20]
 8000fb2:	e00a      	b.n	8000fca <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000fb4:	f3af 8000 	nop.w
 8000fb8:	4601      	mov	r1, r0
 8000fba:	68bb      	ldr	r3, [r7, #8]
 8000fbc:	1c5a      	adds	r2, r3, #1
 8000fbe:	60ba      	str	r2, [r7, #8]
 8000fc0:	b2ca      	uxtb	r2, r1
 8000fc2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	3301      	adds	r3, #1
 8000fc8:	617b      	str	r3, [r7, #20]
 8000fca:	697a      	ldr	r2, [r7, #20]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	429a      	cmp	r2, r3
 8000fd0:	dbf0      	blt.n	8000fb4 <_read+0x12>
  }

  return len;
 8000fd2:	687b      	ldr	r3, [r7, #4]
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	3718      	adds	r7, #24
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}

08000fdc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b086      	sub	sp, #24
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	60f8      	str	r0, [r7, #12]
 8000fe4:	60b9      	str	r1, [r7, #8]
 8000fe6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fe8:	2300      	movs	r3, #0
 8000fea:	617b      	str	r3, [r7, #20]
 8000fec:	e009      	b.n	8001002 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000fee:	68bb      	ldr	r3, [r7, #8]
 8000ff0:	1c5a      	adds	r2, r3, #1
 8000ff2:	60ba      	str	r2, [r7, #8]
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f7ff fe90 	bl	8000d1c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	3301      	adds	r3, #1
 8001000:	617b      	str	r3, [r7, #20]
 8001002:	697a      	ldr	r2, [r7, #20]
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	429a      	cmp	r2, r3
 8001008:	dbf1      	blt.n	8000fee <_write+0x12>
  }
  return len;
 800100a:	687b      	ldr	r3, [r7, #4]
}
 800100c:	4618      	mov	r0, r3
 800100e:	3718      	adds	r7, #24
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}

08001014 <_close>:

int _close(int file)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800101c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001020:	4618      	mov	r0, r3
 8001022:	370c      	adds	r7, #12
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr

0800102c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
 8001034:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800103c:	605a      	str	r2, [r3, #4]
  return 0;
 800103e:	2300      	movs	r3, #0
}
 8001040:	4618      	mov	r0, r3
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr

0800104c <_isatty>:

int _isatty(int file)
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001054:	2301      	movs	r3, #1
}
 8001056:	4618      	mov	r0, r3
 8001058:	370c      	adds	r7, #12
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr

08001062 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001062:	b480      	push	{r7}
 8001064:	b085      	sub	sp, #20
 8001066:	af00      	add	r7, sp, #0
 8001068:	60f8      	str	r0, [r7, #12]
 800106a:	60b9      	str	r1, [r7, #8]
 800106c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800106e:	2300      	movs	r3, #0
}
 8001070:	4618      	mov	r0, r3
 8001072:	3714      	adds	r7, #20
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr

0800107c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b086      	sub	sp, #24
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001084:	4a14      	ldr	r2, [pc, #80]	@ (80010d8 <_sbrk+0x5c>)
 8001086:	4b15      	ldr	r3, [pc, #84]	@ (80010dc <_sbrk+0x60>)
 8001088:	1ad3      	subs	r3, r2, r3
 800108a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001090:	4b13      	ldr	r3, [pc, #76]	@ (80010e0 <_sbrk+0x64>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d102      	bne.n	800109e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001098:	4b11      	ldr	r3, [pc, #68]	@ (80010e0 <_sbrk+0x64>)
 800109a:	4a12      	ldr	r2, [pc, #72]	@ (80010e4 <_sbrk+0x68>)
 800109c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800109e:	4b10      	ldr	r3, [pc, #64]	@ (80010e0 <_sbrk+0x64>)
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4413      	add	r3, r2
 80010a6:	693a      	ldr	r2, [r7, #16]
 80010a8:	429a      	cmp	r2, r3
 80010aa:	d207      	bcs.n	80010bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010ac:	f005 fb14 	bl	80066d8 <__errno>
 80010b0:	4603      	mov	r3, r0
 80010b2:	220c      	movs	r2, #12
 80010b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010b6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80010ba:	e009      	b.n	80010d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010bc:	4b08      	ldr	r3, [pc, #32]	@ (80010e0 <_sbrk+0x64>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010c2:	4b07      	ldr	r3, [pc, #28]	@ (80010e0 <_sbrk+0x64>)
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4413      	add	r3, r2
 80010ca:	4a05      	ldr	r2, [pc, #20]	@ (80010e0 <_sbrk+0x64>)
 80010cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010ce:	68fb      	ldr	r3, [r7, #12]
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	3718      	adds	r7, #24
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	24080000 	.word	0x24080000
 80010dc:	00000400 	.word	0x00000400
 80010e0:	24000230 	.word	0x24000230
 80010e4:	24000388 	.word	0x24000388

080010e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80010e8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001120 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80010ec:	f7ff fac0 	bl	8000670 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010f0:	480c      	ldr	r0, [pc, #48]	@ (8001124 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010f2:	490d      	ldr	r1, [pc, #52]	@ (8001128 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010f4:	4a0d      	ldr	r2, [pc, #52]	@ (800112c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010f8:	e002      	b.n	8001100 <LoopCopyDataInit>

080010fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010fe:	3304      	adds	r3, #4

08001100 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001100:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001102:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001104:	d3f9      	bcc.n	80010fa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001106:	4a0a      	ldr	r2, [pc, #40]	@ (8001130 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001108:	4c0a      	ldr	r4, [pc, #40]	@ (8001134 <LoopFillZerobss+0x22>)
  movs r3, #0
 800110a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800110c:	e001      	b.n	8001112 <LoopFillZerobss>

0800110e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800110e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001110:	3204      	adds	r2, #4

08001112 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001112:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001114:	d3fb      	bcc.n	800110e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001116:	f005 fae5 	bl	80066e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800111a:	f7ff fb3f 	bl	800079c <main>
  bx  lr
 800111e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001120:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001124:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001128:	2400006c 	.word	0x2400006c
  ldr r2, =_sidata
 800112c:	08007398 	.word	0x08007398
  ldr r2, =_sbss
 8001130:	2400006c 	.word	0x2400006c
  ldr r4, =_ebss
 8001134:	24000384 	.word	0x24000384

08001138 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001138:	e7fe      	b.n	8001138 <ADC3_IRQHandler>
	...

0800113c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001142:	2003      	movs	r0, #3
 8001144:	f000 f94a 	bl	80013dc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001148:	f001 fff4 	bl	8003134 <HAL_RCC_GetSysClockFreq>
 800114c:	4602      	mov	r2, r0
 800114e:	4b15      	ldr	r3, [pc, #84]	@ (80011a4 <HAL_Init+0x68>)
 8001150:	699b      	ldr	r3, [r3, #24]
 8001152:	0a1b      	lsrs	r3, r3, #8
 8001154:	f003 030f 	and.w	r3, r3, #15
 8001158:	4913      	ldr	r1, [pc, #76]	@ (80011a8 <HAL_Init+0x6c>)
 800115a:	5ccb      	ldrb	r3, [r1, r3]
 800115c:	f003 031f 	and.w	r3, r3, #31
 8001160:	fa22 f303 	lsr.w	r3, r2, r3
 8001164:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001166:	4b0f      	ldr	r3, [pc, #60]	@ (80011a4 <HAL_Init+0x68>)
 8001168:	699b      	ldr	r3, [r3, #24]
 800116a:	f003 030f 	and.w	r3, r3, #15
 800116e:	4a0e      	ldr	r2, [pc, #56]	@ (80011a8 <HAL_Init+0x6c>)
 8001170:	5cd3      	ldrb	r3, [r2, r3]
 8001172:	f003 031f 	and.w	r3, r3, #31
 8001176:	687a      	ldr	r2, [r7, #4]
 8001178:	fa22 f303 	lsr.w	r3, r2, r3
 800117c:	4a0b      	ldr	r2, [pc, #44]	@ (80011ac <HAL_Init+0x70>)
 800117e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001180:	4a0b      	ldr	r2, [pc, #44]	@ (80011b0 <HAL_Init+0x74>)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001186:	2000      	movs	r0, #0
 8001188:	f000 f814 	bl	80011b4 <HAL_InitTick>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001192:	2301      	movs	r3, #1
 8001194:	e002      	b.n	800119c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001196:	f7ff fdd3 	bl	8000d40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800119a:	2300      	movs	r3, #0
}
 800119c:	4618      	mov	r0, r3
 800119e:	3708      	adds	r7, #8
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	58024400 	.word	0x58024400
 80011a8:	0800730c 	.word	0x0800730c
 80011ac:	24000004 	.word	0x24000004
 80011b0:	24000000 	.word	0x24000000

080011b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80011bc:	4b15      	ldr	r3, [pc, #84]	@ (8001214 <HAL_InitTick+0x60>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d101      	bne.n	80011c8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80011c4:	2301      	movs	r3, #1
 80011c6:	e021      	b.n	800120c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80011c8:	4b13      	ldr	r3, [pc, #76]	@ (8001218 <HAL_InitTick+0x64>)
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	4b11      	ldr	r3, [pc, #68]	@ (8001214 <HAL_InitTick+0x60>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	4619      	mov	r1, r3
 80011d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80011da:	fbb2 f3f3 	udiv	r3, r2, r3
 80011de:	4618      	mov	r0, r3
 80011e0:	f000 f921 	bl	8001426 <HAL_SYSTICK_Config>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
 80011ec:	e00e      	b.n	800120c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2b0f      	cmp	r3, #15
 80011f2:	d80a      	bhi.n	800120a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011f4:	2200      	movs	r2, #0
 80011f6:	6879      	ldr	r1, [r7, #4]
 80011f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80011fc:	f000 f8f9 	bl	80013f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001200:	4a06      	ldr	r2, [pc, #24]	@ (800121c <HAL_InitTick+0x68>)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001206:	2300      	movs	r3, #0
 8001208:	e000      	b.n	800120c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800120a:	2301      	movs	r3, #1
}
 800120c:	4618      	mov	r0, r3
 800120e:	3708      	adds	r7, #8
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	2400000c 	.word	0x2400000c
 8001218:	24000000 	.word	0x24000000
 800121c:	24000008 	.word	0x24000008

08001220 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001224:	4b06      	ldr	r3, [pc, #24]	@ (8001240 <HAL_IncTick+0x20>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	461a      	mov	r2, r3
 800122a:	4b06      	ldr	r3, [pc, #24]	@ (8001244 <HAL_IncTick+0x24>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4413      	add	r3, r2
 8001230:	4a04      	ldr	r2, [pc, #16]	@ (8001244 <HAL_IncTick+0x24>)
 8001232:	6013      	str	r3, [r2, #0]
}
 8001234:	bf00      	nop
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	2400000c 	.word	0x2400000c
 8001244:	24000234 	.word	0x24000234

08001248 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  return uwTick;
 800124c:	4b03      	ldr	r3, [pc, #12]	@ (800125c <HAL_GetTick+0x14>)
 800124e:	681b      	ldr	r3, [r3, #0]
}
 8001250:	4618      	mov	r0, r3
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	24000234 	.word	0x24000234

08001260 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001264:	4b03      	ldr	r3, [pc, #12]	@ (8001274 <HAL_GetREVID+0x14>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	0c1b      	lsrs	r3, r3, #16
}
 800126a:	4618      	mov	r0, r3
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr
 8001274:	5c001000 	.word	0x5c001000

08001278 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001278:	b480      	push	{r7}
 800127a:	b085      	sub	sp, #20
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	f003 0307 	and.w	r3, r3, #7
 8001286:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001288:	4b0b      	ldr	r3, [pc, #44]	@ (80012b8 <__NVIC_SetPriorityGrouping+0x40>)
 800128a:	68db      	ldr	r3, [r3, #12]
 800128c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800128e:	68ba      	ldr	r2, [r7, #8]
 8001290:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001294:	4013      	ands	r3, r2
 8001296:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80012a0:	4b06      	ldr	r3, [pc, #24]	@ (80012bc <__NVIC_SetPriorityGrouping+0x44>)
 80012a2:	4313      	orrs	r3, r2
 80012a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012a6:	4a04      	ldr	r2, [pc, #16]	@ (80012b8 <__NVIC_SetPriorityGrouping+0x40>)
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	60d3      	str	r3, [r2, #12]
}
 80012ac:	bf00      	nop
 80012ae:	3714      	adds	r7, #20
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr
 80012b8:	e000ed00 	.word	0xe000ed00
 80012bc:	05fa0000 	.word	0x05fa0000

080012c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012c4:	4b04      	ldr	r3, [pc, #16]	@ (80012d8 <__NVIC_GetPriorityGrouping+0x18>)
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	0a1b      	lsrs	r3, r3, #8
 80012ca:	f003 0307 	and.w	r3, r3, #7
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr
 80012d8:	e000ed00 	.word	0xe000ed00

080012dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	4603      	mov	r3, r0
 80012e4:	6039      	str	r1, [r7, #0]
 80012e6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80012e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	db0a      	blt.n	8001306 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	b2da      	uxtb	r2, r3
 80012f4:	490c      	ldr	r1, [pc, #48]	@ (8001328 <__NVIC_SetPriority+0x4c>)
 80012f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012fa:	0112      	lsls	r2, r2, #4
 80012fc:	b2d2      	uxtb	r2, r2
 80012fe:	440b      	add	r3, r1
 8001300:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001304:	e00a      	b.n	800131c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	b2da      	uxtb	r2, r3
 800130a:	4908      	ldr	r1, [pc, #32]	@ (800132c <__NVIC_SetPriority+0x50>)
 800130c:	88fb      	ldrh	r3, [r7, #6]
 800130e:	f003 030f 	and.w	r3, r3, #15
 8001312:	3b04      	subs	r3, #4
 8001314:	0112      	lsls	r2, r2, #4
 8001316:	b2d2      	uxtb	r2, r2
 8001318:	440b      	add	r3, r1
 800131a:	761a      	strb	r2, [r3, #24]
}
 800131c:	bf00      	nop
 800131e:	370c      	adds	r7, #12
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr
 8001328:	e000e100 	.word	0xe000e100
 800132c:	e000ed00 	.word	0xe000ed00

08001330 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001330:	b480      	push	{r7}
 8001332:	b089      	sub	sp, #36	@ 0x24
 8001334:	af00      	add	r7, sp, #0
 8001336:	60f8      	str	r0, [r7, #12]
 8001338:	60b9      	str	r1, [r7, #8]
 800133a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	f003 0307 	and.w	r3, r3, #7
 8001342:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	f1c3 0307 	rsb	r3, r3, #7
 800134a:	2b04      	cmp	r3, #4
 800134c:	bf28      	it	cs
 800134e:	2304      	movcs	r3, #4
 8001350:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	3304      	adds	r3, #4
 8001356:	2b06      	cmp	r3, #6
 8001358:	d902      	bls.n	8001360 <NVIC_EncodePriority+0x30>
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	3b03      	subs	r3, #3
 800135e:	e000      	b.n	8001362 <NVIC_EncodePriority+0x32>
 8001360:	2300      	movs	r3, #0
 8001362:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001364:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001368:	69bb      	ldr	r3, [r7, #24]
 800136a:	fa02 f303 	lsl.w	r3, r2, r3
 800136e:	43da      	mvns	r2, r3
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	401a      	ands	r2, r3
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001378:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	fa01 f303 	lsl.w	r3, r1, r3
 8001382:	43d9      	mvns	r1, r3
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001388:	4313      	orrs	r3, r2
         );
}
 800138a:	4618      	mov	r0, r3
 800138c:	3724      	adds	r7, #36	@ 0x24
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
	...

08001398 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	3b01      	subs	r3, #1
 80013a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80013a8:	d301      	bcc.n	80013ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013aa:	2301      	movs	r3, #1
 80013ac:	e00f      	b.n	80013ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013ae:	4a0a      	ldr	r2, [pc, #40]	@ (80013d8 <SysTick_Config+0x40>)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	3b01      	subs	r3, #1
 80013b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013b6:	210f      	movs	r1, #15
 80013b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80013bc:	f7ff ff8e 	bl	80012dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013c0:	4b05      	ldr	r3, [pc, #20]	@ (80013d8 <SysTick_Config+0x40>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013c6:	4b04      	ldr	r3, [pc, #16]	@ (80013d8 <SysTick_Config+0x40>)
 80013c8:	2207      	movs	r2, #7
 80013ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013cc:	2300      	movs	r3, #0
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3708      	adds	r7, #8
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	e000e010 	.word	0xe000e010

080013dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	f7ff ff47 	bl	8001278 <__NVIC_SetPriorityGrouping>
}
 80013ea:	bf00      	nop
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}

080013f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013f2:	b580      	push	{r7, lr}
 80013f4:	b086      	sub	sp, #24
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	4603      	mov	r3, r0
 80013fa:	60b9      	str	r1, [r7, #8]
 80013fc:	607a      	str	r2, [r7, #4]
 80013fe:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001400:	f7ff ff5e 	bl	80012c0 <__NVIC_GetPriorityGrouping>
 8001404:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001406:	687a      	ldr	r2, [r7, #4]
 8001408:	68b9      	ldr	r1, [r7, #8]
 800140a:	6978      	ldr	r0, [r7, #20]
 800140c:	f7ff ff90 	bl	8001330 <NVIC_EncodePriority>
 8001410:	4602      	mov	r2, r0
 8001412:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001416:	4611      	mov	r1, r2
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff ff5f 	bl	80012dc <__NVIC_SetPriority>
}
 800141e:	bf00      	nop
 8001420:	3718      	adds	r7, #24
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}

08001426 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001426:	b580      	push	{r7, lr}
 8001428:	b082      	sub	sp, #8
 800142a:	af00      	add	r7, sp, #0
 800142c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800142e:	6878      	ldr	r0, [r7, #4]
 8001430:	f7ff ffb2 	bl	8001398 <SysTick_Config>
 8001434:	4603      	mov	r3, r0
}
 8001436:	4618      	mov	r0, r3
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
	...

08001440 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b098      	sub	sp, #96	@ 0x60
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8001448:	4a84      	ldr	r2, [pc, #528]	@ (800165c <HAL_FDCAN_Init+0x21c>)
 800144a:	f107 030c 	add.w	r3, r7, #12
 800144e:	4611      	mov	r1, r2
 8001450:	224c      	movs	r2, #76	@ 0x4c
 8001452:	4618      	mov	r0, r3
 8001454:	f005 f96d 	bl	8006732 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d101      	bne.n	8001462 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	e1c6      	b.n	80017f0 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a7e      	ldr	r2, [pc, #504]	@ (8001660 <HAL_FDCAN_Init+0x220>)
 8001468:	4293      	cmp	r3, r2
 800146a:	d106      	bne.n	800147a <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8001474:	461a      	mov	r2, r3
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8001480:	b2db      	uxtb	r3, r3
 8001482:	2b00      	cmp	r3, #0
 8001484:	d106      	bne.n	8001494 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2200      	movs	r2, #0
 800148a:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f7ff fc70 	bl	8000d74 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	699a      	ldr	r2, [r3, #24]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f022 0210 	bic.w	r2, r2, #16
 80014a2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014a4:	f7ff fed0 	bl	8001248 <HAL_GetTick>
 80014a8:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80014aa:	e014      	b.n	80014d6 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80014ac:	f7ff fecc 	bl	8001248 <HAL_GetTick>
 80014b0:	4602      	mov	r2, r0
 80014b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	2b0a      	cmp	r3, #10
 80014b8:	d90d      	bls.n	80014d6 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80014c0:	f043 0201 	orr.w	r2, r3, #1
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2203      	movs	r2, #3
 80014ce:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e18c      	b.n	80017f0 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	699b      	ldr	r3, [r3, #24]
 80014dc:	f003 0308 	and.w	r3, r3, #8
 80014e0:	2b08      	cmp	r3, #8
 80014e2:	d0e3      	beq.n	80014ac <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	699a      	ldr	r2, [r3, #24]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f042 0201 	orr.w	r2, r2, #1
 80014f2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014f4:	f7ff fea8 	bl	8001248 <HAL_GetTick>
 80014f8:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80014fa:	e014      	b.n	8001526 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80014fc:	f7ff fea4 	bl	8001248 <HAL_GetTick>
 8001500:	4602      	mov	r2, r0
 8001502:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	2b0a      	cmp	r3, #10
 8001508:	d90d      	bls.n	8001526 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001510:	f043 0201 	orr.w	r2, r3, #1
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2203      	movs	r2, #3
 800151e:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	e164      	b.n	80017f0 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	699b      	ldr	r3, [r3, #24]
 800152c:	f003 0301 	and.w	r3, r3, #1
 8001530:	2b00      	cmp	r3, #0
 8001532:	d0e3      	beq.n	80014fc <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	699a      	ldr	r2, [r3, #24]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f042 0202 	orr.w	r2, r2, #2
 8001542:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	7c1b      	ldrb	r3, [r3, #16]
 8001548:	2b01      	cmp	r3, #1
 800154a:	d108      	bne.n	800155e <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	699a      	ldr	r2, [r3, #24]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800155a:	619a      	str	r2, [r3, #24]
 800155c:	e007      	b.n	800156e <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	699a      	ldr	r2, [r3, #24]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800156c:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	7c5b      	ldrb	r3, [r3, #17]
 8001572:	2b01      	cmp	r3, #1
 8001574:	d108      	bne.n	8001588 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	699a      	ldr	r2, [r3, #24]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001584:	619a      	str	r2, [r3, #24]
 8001586:	e007      	b.n	8001598 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	699a      	ldr	r2, [r3, #24]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001596:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	7c9b      	ldrb	r3, [r3, #18]
 800159c:	2b01      	cmp	r3, #1
 800159e:	d108      	bne.n	80015b2 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	699a      	ldr	r2, [r3, #24]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80015ae:	619a      	str	r2, [r3, #24]
 80015b0:	e007      	b.n	80015c2 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	699a      	ldr	r2, [r3, #24]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80015c0:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	699b      	ldr	r3, [r3, #24]
 80015c8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	689a      	ldr	r2, [r3, #8]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	430a      	orrs	r2, r1
 80015d6:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	699a      	ldr	r2, [r3, #24]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 80015e6:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	691a      	ldr	r2, [r3, #16]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f022 0210 	bic.w	r2, r2, #16
 80015f6:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	68db      	ldr	r3, [r3, #12]
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d108      	bne.n	8001612 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	699a      	ldr	r2, [r3, #24]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f042 0204 	orr.w	r2, r2, #4
 800160e:	619a      	str	r2, [r3, #24]
 8001610:	e030      	b.n	8001674 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	68db      	ldr	r3, [r3, #12]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d02c      	beq.n	8001674 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	68db      	ldr	r3, [r3, #12]
 800161e:	2b02      	cmp	r3, #2
 8001620:	d020      	beq.n	8001664 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	699a      	ldr	r2, [r3, #24]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001630:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	691a      	ldr	r2, [r3, #16]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f042 0210 	orr.w	r2, r2, #16
 8001640:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	68db      	ldr	r3, [r3, #12]
 8001646:	2b03      	cmp	r3, #3
 8001648:	d114      	bne.n	8001674 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	699a      	ldr	r2, [r3, #24]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f042 0220 	orr.w	r2, r2, #32
 8001658:	619a      	str	r2, [r3, #24]
 800165a:	e00b      	b.n	8001674 <HAL_FDCAN_Init+0x234>
 800165c:	080072c0 	.word	0x080072c0
 8001660:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	699a      	ldr	r2, [r3, #24]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f042 0220 	orr.w	r2, r2, #32
 8001672:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	699b      	ldr	r3, [r3, #24]
 8001678:	3b01      	subs	r3, #1
 800167a:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	69db      	ldr	r3, [r3, #28]
 8001680:	3b01      	subs	r3, #1
 8001682:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001684:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6a1b      	ldr	r3, [r3, #32]
 800168a:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800168c:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	695b      	ldr	r3, [r3, #20]
 8001694:	3b01      	subs	r3, #1
 8001696:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800169c:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800169e:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80016a8:	d115      	bne.n	80016d6 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016ae:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016b4:	3b01      	subs	r3, #1
 80016b6:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80016b8:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016be:	3b01      	subs	r3, #1
 80016c0:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80016c2:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016ca:	3b01      	subs	r3, #1
 80016cc:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80016d2:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80016d4:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d00a      	beq.n	80016f4 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	430a      	orrs	r2, r1
 80016f0:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016fc:	4413      	add	r3, r2
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d011      	beq.n	8001726 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800170a:	f023 0107 	bic.w	r1, r3, #7
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	3360      	adds	r3, #96	@ 0x60
 8001716:	443b      	add	r3, r7
 8001718:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	430a      	orrs	r2, r1
 8001722:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800172a:	2b00      	cmp	r3, #0
 800172c:	d011      	beq.n	8001752 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8001736:	f023 0107 	bic.w	r1, r3, #7
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800173e:	009b      	lsls	r3, r3, #2
 8001740:	3360      	adds	r3, #96	@ 0x60
 8001742:	443b      	add	r3, r7
 8001744:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	430a      	orrs	r2, r1
 800174e:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001756:	2b00      	cmp	r3, #0
 8001758:	d012      	beq.n	8001780 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8001762:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	3360      	adds	r3, #96	@ 0x60
 800176e:	443b      	add	r3, r7
 8001770:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8001774:	011a      	lsls	r2, r3, #4
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	430a      	orrs	r2, r1
 800177c:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001784:	2b00      	cmp	r3, #0
 8001786:	d012      	beq.n	80017ae <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8001790:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	3360      	adds	r3, #96	@ 0x60
 800179c:	443b      	add	r3, r7
 800179e:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80017a2:	021a      	lsls	r2, r3, #8
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	430a      	orrs	r2, r1
 80017aa:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a11      	ldr	r2, [pc, #68]	@ (80017f8 <HAL_FDCAN_Init+0x3b8>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d107      	bne.n	80017c8 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	689a      	ldr	r2, [r3, #8]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	f022 0203 	bic.w	r2, r2, #3
 80017c6:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2200      	movs	r2, #0
 80017cc:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2200      	movs	r2, #0
 80017d4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2201      	movs	r2, #1
 80017dc:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80017e0:	6878      	ldr	r0, [r7, #4]
 80017e2:	f000 fabf 	bl	8001d64 <FDCAN_CalcultateRamBlockAddresses>
 80017e6:	4603      	mov	r3, r0
 80017e8:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 80017ec:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	3760      	adds	r7, #96	@ 0x60
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	4000a000 	.word	0x4000a000

080017fc <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b087      	sub	sp, #28
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800180c:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800180e:	7bfb      	ldrb	r3, [r7, #15]
 8001810:	2b01      	cmp	r3, #1
 8001812:	d002      	beq.n	800181a <HAL_FDCAN_ConfigFilter+0x1e>
 8001814:	7bfb      	ldrb	r3, [r7, #15]
 8001816:	2b02      	cmp	r3, #2
 8001818:	d157      	bne.n	80018ca <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d12b      	bne.n	800187a <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	68db      	ldr	r3, [r3, #12]
 8001826:	2b07      	cmp	r3, #7
 8001828:	d10d      	bne.n	8001846 <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	691b      	ldr	r3, [r3, #16]
 800182e:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	69db      	ldr	r3, [r3, #28]
 8001834:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 8001836:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 800183c:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 800183e:	f043 5360 	orr.w	r3, r3, #939524096	@ 0x38000000
 8001842:	617b      	str	r3, [r7, #20]
 8001844:	e00e      	b.n	8001864 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001852:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	691b      	ldr	r3, [r3, #16]
 8001858:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 800185a:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001860:	4313      	orrs	r3, r2
 8001862:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	4413      	add	r3, r2
 8001870:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	697a      	ldr	r2, [r7, #20]
 8001876:	601a      	str	r2, [r3, #0]
 8001878:	e025      	b.n	80018c6 <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	68db      	ldr	r3, [r3, #12]
 800187e:	075a      	lsls	r2, r3, #29
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	691b      	ldr	r3, [r3, #16]
 8001884:	4313      	orrs	r3, r2
 8001886:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	2b07      	cmp	r3, #7
 800188e:	d103      	bne.n	8001898 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	699b      	ldr	r3, [r3, #24]
 8001894:	613b      	str	r3, [r7, #16]
 8001896:	e006      	b.n	80018a6 <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	079a      	lsls	r2, r3, #30
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	695b      	ldr	r3, [r3, #20]
 80018a2:	4313      	orrs	r3, r2
 80018a4:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	00db      	lsls	r3, r3, #3
 80018b0:	4413      	add	r3, r2
 80018b2:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	697a      	ldr	r2, [r7, #20]
 80018b8:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	3304      	adds	r3, #4
 80018be:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	693a      	ldr	r2, [r7, #16]
 80018c4:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 80018c6:	2300      	movs	r3, #0
 80018c8:	e008      	b.n	80018dc <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80018d0:	f043 0202 	orr.w	r2, r3, #2
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
  }
}
 80018dc:	4618      	mov	r0, r3
 80018de:	371c      	adds	r7, #28
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr

080018e8 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b085      	sub	sp, #20
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	60f8      	str	r0, [r7, #12]
 80018f0:	60b9      	str	r1, [r7, #8]
 80018f2:	607a      	str	r2, [r7, #4]
 80018f4:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d110      	bne.n	8001924 <HAL_FDCAN_ConfigGlobalFilter+0x3c>
  {
    /* Configure global filter */
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	011a      	lsls	r2, r3, #4
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	009b      	lsls	r3, r3, #2
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 800190a:	431a      	orrs	r2, r3
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	005b      	lsls	r3, r3, #1
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 8001910:	ea42 0103 	orr.w	r1, r2, r3
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	681b      	ldr	r3, [r3, #0]
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8001918:	69ba      	ldr	r2, [r7, #24]
 800191a:	430a      	orrs	r2, r1
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 800191c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
                             (RejectRemoteExt << FDCAN_GFC_RRFE_Pos));

    /* Return function status */
    return HAL_OK;
 8001920:	2300      	movs	r3, #0
 8001922:	e008      	b.n	8001936 <HAL_FDCAN_ConfigGlobalFilter+0x4e>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800192a:	f043 0204 	orr.w	r2, r3, #4
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8001934:	2301      	movs	r3, #1
  }
}
 8001936:	4618      	mov	r0, r3
 8001938:	3714      	adds	r7, #20
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr

08001942 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8001942:	b480      	push	{r7}
 8001944:	b083      	sub	sp, #12
 8001946:	af00      	add	r7, sp, #0
 8001948:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8001950:	b2db      	uxtb	r3, r3
 8001952:	2b01      	cmp	r3, #1
 8001954:	d111      	bne.n	800197a <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2202      	movs	r2, #2
 800195a:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	699a      	ldr	r2, [r3, #24]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f022 0201 	bic.w	r2, r2, #1
 800196c:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2200      	movs	r2, #0
 8001972:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Return function status */
    return HAL_OK;
 8001976:	2300      	movs	r3, #0
 8001978:	e008      	b.n	800198c <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001980:	f043 0204 	orr.w	r2, r3, #4
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
  }
}
 800198c:	4618      	mov	r0, r3
 800198e:	370c      	adds	r7, #12
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr

08001998 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8001998:	b480      	push	{r7}
 800199a:	b08b      	sub	sp, #44	@ 0x2c
 800199c:	af00      	add	r7, sp, #0
 800199e:	60f8      	str	r0, [r7, #12]
 80019a0:	60b9      	str	r1, [r7, #8]
 80019a2:	607a      	str	r2, [r7, #4]
 80019a4:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 80019a6:	2300      	movs	r3, #0
 80019a8:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80019b0:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 80019b2:	7efb      	ldrb	r3, [r7, #27]
 80019b4:	2b02      	cmp	r3, #2
 80019b6:	f040 8149 	bne.w	8001c4c <HAL_FDCAN_GetRxMessage+0x2b4>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	2b40      	cmp	r3, #64	@ 0x40
 80019be:	d14c      	bne.n	8001a5a <HAL_FDCAN_GetRxMessage+0xc2>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80019c8:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d109      	bne.n	80019e4 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80019d6:	f043 0220 	orr.w	r2, r3, #32
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
 80019e2:	e13c      	b.n	8001c5e <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80019ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d109      	bne.n	8001a08 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80019fa:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8001a04:	2301      	movs	r3, #1
 8001a06:	e12a      	b.n	8001c5e <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001a10:	0e1b      	lsrs	r3, r3, #24
 8001a12:	f003 0301 	and.w	r3, r3, #1
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	d10a      	bne.n	8001a30 <HAL_FDCAN_GetRxMessage+0x98>
        {
          if (((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8001a22:	0fdb      	lsrs	r3, r3, #31
 8001a24:	f003 0301 	and.w	r3, r3, #1
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d101      	bne.n	8001a30 <HAL_FDCAN_GetRxMessage+0x98>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001a38:	0a1b      	lsrs	r3, r3, #8
 8001a3a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001a3e:	69fa      	ldr	r2, [r7, #28]
 8001a40:	4413      	add	r3, r2
 8001a42:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a4c:	69f9      	ldr	r1, [r7, #28]
 8001a4e:	fb01 f303 	mul.w	r3, r1, r3
 8001a52:	009b      	lsls	r3, r3, #2
 8001a54:	4413      	add	r3, r2
 8001a56:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a58:	e068      	b.n	8001b2c <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8001a5a:	68bb      	ldr	r3, [r7, #8]
 8001a5c:	2b41      	cmp	r3, #65	@ 0x41
 8001a5e:	d14c      	bne.n	8001afa <HAL_FDCAN_GetRxMessage+0x162>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8001a68:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d109      	bne.n	8001a84 <HAL_FDCAN_GetRxMessage+0xec>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001a76:	f043 0220 	orr.w	r2, r3, #32
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e0ec      	b.n	8001c5e <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8001a8c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d109      	bne.n	8001aa8 <HAL_FDCAN_GetRxMessage+0x110>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001a9a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e0da      	b.n	8001c5e <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8001ab0:	0e1b      	lsrs	r3, r3, #24
 8001ab2:	f003 0301 	and.w	r3, r3, #1
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	d10a      	bne.n	8001ad0 <HAL_FDCAN_GetRxMessage+0x138>
        {
          if (((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8001ac2:	0fdb      	lsrs	r3, r3, #31
 8001ac4:	f003 0301 	and.w	r3, r3, #1
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d101      	bne.n	8001ad0 <HAL_FDCAN_GetRxMessage+0x138>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001acc:	2301      	movs	r3, #1
 8001ace:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8001ad8:	0a1b      	lsrs	r3, r3, #8
 8001ada:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001ade:	69fa      	ldr	r2, [r7, #28]
 8001ae0:	4413      	add	r3, r2
 8001ae2:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aec:	69f9      	ldr	r1, [r7, #28]
 8001aee:	fb01 f303 	mul.w	r3, r1, r3
 8001af2:	009b      	lsls	r3, r3, #2
 8001af4:	4413      	add	r3, r2
 8001af6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001af8:	e018      	b.n	8001b2c <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001afe:	68ba      	ldr	r2, [r7, #8]
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d309      	bcc.n	8001b18 <HAL_FDCAN_GetRxMessage+0x180>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001b0a:	f043 0220 	orr.w	r2, r3, #32
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e0a2      	b.n	8001c5e <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b20:	68b9      	ldr	r1, [r7, #8]
 8001b22:	fb01 f303 	mul.w	r3, r1, r3
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	4413      	add	r3, r2
 8001b2a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8001b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d107      	bne.n	8001b50 <HAL_FDCAN_GetRxMessage+0x1b8>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8001b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	0c9b      	lsrs	r3, r3, #18
 8001b46:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	601a      	str	r2, [r3, #0]
 8001b4e:	e005      	b.n	8001b5c <HAL_FDCAN_GetRxMessage+0x1c4>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8001b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8001b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8001b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8001b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b76:	3304      	adds	r3, #4
 8001b78:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8001b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	b29a      	uxth	r2, r3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8001b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	0c1b      	lsrs	r3, r3, #16
 8001b8a:	f003 020f 	and.w	r2, r3, #15
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8001b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8001b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8001baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	0e1b      	lsrs	r3, r3, #24
 8001bb0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8001bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	0fda      	lsrs	r2, r3, #31
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8001bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bc4:	3304      	adds	r3, #4
 8001bc6:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8001bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bca:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8001bcc:	2300      	movs	r3, #0
 8001bce:	623b      	str	r3, [r7, #32]
 8001bd0:	e00a      	b.n	8001be8 <HAL_FDCAN_GetRxMessage+0x250>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8001bd2:	697a      	ldr	r2, [r7, #20]
 8001bd4:	6a3b      	ldr	r3, [r7, #32]
 8001bd6:	441a      	add	r2, r3
 8001bd8:	6839      	ldr	r1, [r7, #0]
 8001bda:	6a3b      	ldr	r3, [r7, #32]
 8001bdc:	440b      	add	r3, r1
 8001bde:	7812      	ldrb	r2, [r2, #0]
 8001be0:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8001be2:	6a3b      	ldr	r3, [r7, #32]
 8001be4:	3301      	adds	r3, #1
 8001be6:	623b      	str	r3, [r7, #32]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	4a1f      	ldr	r2, [pc, #124]	@ (8001c6c <HAL_FDCAN_GetRxMessage+0x2d4>)
 8001bee:	5cd3      	ldrb	r3, [r2, r3]
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	6a3b      	ldr	r3, [r7, #32]
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d3ec      	bcc.n	8001bd2 <HAL_FDCAN_GetRxMessage+0x23a>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	2b40      	cmp	r3, #64	@ 0x40
 8001bfc:	d105      	bne.n	8001c0a <HAL_FDCAN_GetRxMessage+0x272>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	69fa      	ldr	r2, [r7, #28]
 8001c04:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 8001c08:	e01e      	b.n	8001c48 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	2b41      	cmp	r3, #65	@ 0x41
 8001c0e:	d105      	bne.n	8001c1c <HAL_FDCAN_GetRxMessage+0x284>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	69fa      	ldr	r2, [r7, #28]
 8001c16:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 8001c1a:	e015      	b.n	8001c48 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	2b1f      	cmp	r3, #31
 8001c20:	d808      	bhi.n	8001c34 <HAL_FDCAN_GetRxMessage+0x29c>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1U << RxLocation);
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	2101      	movs	r1, #1
 8001c28:	68ba      	ldr	r2, [r7, #8]
 8001c2a:	fa01 f202 	lsl.w	r2, r1, r2
 8001c2e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 8001c32:	e009      	b.n	8001c48 <HAL_FDCAN_GetRxMessage+0x2b0>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1U << (RxLocation & 0x1FU));
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	f003 021f 	and.w	r2, r3, #31
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	2101      	movs	r1, #1
 8001c40:	fa01 f202 	lsl.w	r2, r1, r2
 8001c44:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	e008      	b.n	8001c5e <HAL_FDCAN_GetRxMessage+0x2c6>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001c52:	f043 0208 	orr.w	r2, r3, #8
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
  }
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	372c      	adds	r7, #44	@ 0x2c
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	0800731c 	.word	0x0800731c

08001c70 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b087      	sub	sp, #28
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	60f8      	str	r0, [r7, #12]
 8001c78:	60b9      	str	r1, [r7, #8]
 8001c7a:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8001c82:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001c84:	7dfb      	ldrb	r3, [r7, #23]
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d002      	beq.n	8001c90 <HAL_FDCAN_ActivateNotification+0x20>
 8001c8a:	7dfb      	ldrb	r3, [r7, #23]
 8001c8c:	2b02      	cmp	r3, #2
 8001c8e:	d155      	bne.n	8001d3c <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	4013      	ands	r3, r2
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d108      	bne.n	8001cb0 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f042 0201 	orr.w	r2, r2, #1
 8001cac:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001cae:	e014      	b.n	8001cda <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	4013      	ands	r3, r2
 8001cba:	68ba      	ldr	r2, [r7, #8]
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d108      	bne.n	8001cd2 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f042 0202 	orr.w	r2, r2, #2
 8001cce:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001cd0:	e003      	b.n	8001cda <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	2203      	movs	r2, #3
 8001cd8:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d009      	beq.n	8001cf8 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	687a      	ldr	r2, [r7, #4]
 8001cf2:	430a      	orrs	r2, r1
 8001cf4:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d009      	beq.n	8001d16 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	687a      	ldr	r2, [r7, #4]
 8001d10:	430a      	orrs	r2, r1
 8001d12:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8001d1c:	68ba      	ldr	r2, [r7, #8]
 8001d1e:	4b0f      	ldr	r3, [pc, #60]	@ (8001d5c <HAL_FDCAN_ActivateNotification+0xec>)
 8001d20:	4013      	ands	r3, r2
 8001d22:	68fa      	ldr	r2, [r7, #12]
 8001d24:	6812      	ldr	r2, [r2, #0]
 8001d26:	430b      	orrs	r3, r1
 8001d28:	6553      	str	r3, [r2, #84]	@ 0x54
 8001d2a:	4b0d      	ldr	r3, [pc, #52]	@ (8001d60 <HAL_FDCAN_ActivateNotification+0xf0>)
 8001d2c:	695a      	ldr	r2, [r3, #20]
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	0f9b      	lsrs	r3, r3, #30
 8001d32:	490b      	ldr	r1, [pc, #44]	@ (8001d60 <HAL_FDCAN_ActivateNotification+0xf0>)
 8001d34:	4313      	orrs	r3, r2
 8001d36:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	e008      	b.n	8001d4e <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001d42:	f043 0202 	orr.w	r2, r3, #2
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
  }
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	371c      	adds	r7, #28
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	3fcfffff 	.word	0x3fcfffff
 8001d60:	4000a800 	.word	0x4000a800

08001d64 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b085      	sub	sp, #20
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d70:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8001d7a:	4ba7      	ldr	r3, [pc, #668]	@ (8002018 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	68ba      	ldr	r2, [r7, #8]
 8001d80:	0091      	lsls	r1, r2, #2
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	6812      	ldr	r2, [r2, #0]
 8001d86:	430b      	orrs	r3, r1
 8001d88:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001d94:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d9c:	041a      	lsls	r2, r3, #16
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	430a      	orrs	r2, r1
 8001da4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001dac:	68ba      	ldr	r2, [r7, #8]
 8001dae:	4413      	add	r3, r2
 8001db0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8001dba:	4b97      	ldr	r3, [pc, #604]	@ (8002018 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	68ba      	ldr	r2, [r7, #8]
 8001dc0:	0091      	lsls	r1, r2, #2
 8001dc2:	687a      	ldr	r2, [r7, #4]
 8001dc4:	6812      	ldr	r2, [r2, #0]
 8001dc6:	430b      	orrs	r3, r1
 8001dc8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001dd4:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ddc:	041a      	lsls	r2, r3, #16
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	430a      	orrs	r2, r1
 8001de4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001dec:	005b      	lsls	r3, r3, #1
 8001dee:	68ba      	ldr	r2, [r7, #8]
 8001df0:	4413      	add	r3, r2
 8001df2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8001dfc:	4b86      	ldr	r3, [pc, #536]	@ (8002018 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001dfe:	4013      	ands	r3, r2
 8001e00:	68ba      	ldr	r2, [r7, #8]
 8001e02:	0091      	lsls	r1, r2, #2
 8001e04:	687a      	ldr	r2, [r7, #4]
 8001e06:	6812      	ldr	r2, [r2, #0]
 8001e08:	430b      	orrs	r3, r1
 8001e0a:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8001e16:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e1e:	041a      	lsls	r2, r3, #16
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	430a      	orrs	r2, r1
 8001e26:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001e32:	fb02 f303 	mul.w	r3, r2, r3
 8001e36:	68ba      	ldr	r2, [r7, #8]
 8001e38:	4413      	add	r3, r2
 8001e3a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001e44:	4b74      	ldr	r3, [pc, #464]	@ (8002018 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001e46:	4013      	ands	r3, r2
 8001e48:	68ba      	ldr	r2, [r7, #8]
 8001e4a:	0091      	lsls	r1, r2, #2
 8001e4c:	687a      	ldr	r2, [r7, #4]
 8001e4e:	6812      	ldr	r2, [r2, #0]
 8001e50:	430b      	orrs	r3, r1
 8001e52:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8001e5e:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e66:	041a      	lsls	r2, r3, #16
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	430a      	orrs	r2, r1
 8001e6e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001e7a:	fb02 f303 	mul.w	r3, r2, r3
 8001e7e:	68ba      	ldr	r2, [r7, #8]
 8001e80:	4413      	add	r3, r2
 8001e82:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8001e8c:	4b62      	ldr	r3, [pc, #392]	@ (8002018 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001e8e:	4013      	ands	r3, r2
 8001e90:	68ba      	ldr	r2, [r7, #8]
 8001e92:	0091      	lsls	r1, r2, #2
 8001e94:	687a      	ldr	r2, [r7, #4]
 8001e96:	6812      	ldr	r2, [r2, #0]
 8001e98:	430b      	orrs	r3, r1
 8001e9a:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8001ea6:	fb02 f303 	mul.w	r3, r2, r3
 8001eaa:	68ba      	ldr	r2, [r7, #8]
 8001eac:	4413      	add	r3, r2
 8001eae:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8001eb8:	4b57      	ldr	r3, [pc, #348]	@ (8002018 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001eba:	4013      	ands	r3, r2
 8001ebc:	68ba      	ldr	r2, [r7, #8]
 8001ebe:	0091      	lsls	r1, r2, #2
 8001ec0:	687a      	ldr	r2, [r7, #4]
 8001ec2:	6812      	ldr	r2, [r2, #0]
 8001ec4:	430b      	orrs	r3, r1
 8001ec6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001ed2:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eda:	041a      	lsls	r2, r3, #16
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	430a      	orrs	r2, r1
 8001ee2:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eea:	005b      	lsls	r3, r3, #1
 8001eec:	68ba      	ldr	r2, [r7, #8]
 8001eee:	4413      	add	r3, r2
 8001ef0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8001efa:	4b47      	ldr	r3, [pc, #284]	@ (8002018 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001efc:	4013      	ands	r3, r2
 8001efe:	68ba      	ldr	r2, [r7, #8]
 8001f00:	0091      	lsls	r1, r2, #2
 8001f02:	687a      	ldr	r2, [r7, #4]
 8001f04:	6812      	ldr	r2, [r2, #0]
 8001f06:	430b      	orrs	r3, r1
 8001f08:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001f14:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f1c:	041a      	lsls	r2, r3, #16
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	430a      	orrs	r2, r1
 8001f24:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001f30:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f38:	061a      	lsls	r2, r3, #24
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	430a      	orrs	r2, r1
 8001f40:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001f48:	4b34      	ldr	r3, [pc, #208]	@ (800201c <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8001f4a:	4413      	add	r3, r2
 8001f4c:	009a      	lsls	r2, r3, #2
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	441a      	add	r2, r3
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f6a:	00db      	lsls	r3, r3, #3
 8001f6c:	441a      	add	r2, r3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f7a:	6879      	ldr	r1, [r7, #4]
 8001f7c:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 8001f7e:	fb01 f303 	mul.w	r3, r1, r3
 8001f82:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8001f84:	441a      	add	r2, r3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f92:	6879      	ldr	r1, [r7, #4]
 8001f94:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 8001f96:	fb01 f303 	mul.w	r3, r1, r3
 8001f9a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8001f9c:	441a      	add	r2, r3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001faa:	6879      	ldr	r1, [r7, #4]
 8001fac:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 8001fae:	fb01 f303 	mul.w	r3, r1, r3
 8001fb2:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8001fb4:	441a      	add	r2, r3
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fc6:	00db      	lsls	r3, r3, #3
 8001fc8:	441a      	add	r2, r3
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fda:	6879      	ldr	r1, [r7, #4]
 8001fdc:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8001fde:	fb01 f303 	mul.w	r3, r1, r3
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	441a      	add	r2, r3
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ff6:	6879      	ldr	r1, [r7, #4]
 8001ff8:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8001ffa:	fb01 f303 	mul.w	r3, r1, r3
 8001ffe:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8002000:	441a      	add	r2, r3
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800200e:	4a04      	ldr	r2, [pc, #16]	@ (8002020 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d915      	bls.n	8002040 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8002014:	e006      	b.n	8002024 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8002016:	bf00      	nop
 8002018:	ffff0003 	.word	0xffff0003
 800201c:	10002b00 	.word	0x10002b00
 8002020:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800202a:	f043 0220 	orr.w	r2, r3, #32
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2203      	movs	r2, #3
 8002038:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	e010      	b.n	8002062 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002044:	60fb      	str	r3, [r7, #12]
 8002046:	e005      	b.n	8002054 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	2200      	movs	r2, #0
 800204c:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	3304      	adds	r3, #4
 8002052:	60fb      	str	r3, [r7, #12]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800205a:	68fa      	ldr	r2, [r7, #12]
 800205c:	429a      	cmp	r2, r3
 800205e:	d3f3      	bcc.n	8002048 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8002060:	2300      	movs	r3, #0
}
 8002062:	4618      	mov	r0, r3
 8002064:	3714      	adds	r7, #20
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop

08002070 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002070:	b480      	push	{r7}
 8002072:	b089      	sub	sp, #36	@ 0x24
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800207a:	2300      	movs	r3, #0
 800207c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800207e:	4b89      	ldr	r3, [pc, #548]	@ (80022a4 <HAL_GPIO_Init+0x234>)
 8002080:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002082:	e194      	b.n	80023ae <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	2101      	movs	r1, #1
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	fa01 f303 	lsl.w	r3, r1, r3
 8002090:	4013      	ands	r3, r2
 8002092:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	2b00      	cmp	r3, #0
 8002098:	f000 8186 	beq.w	80023a8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f003 0303 	and.w	r3, r3, #3
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d005      	beq.n	80020b4 <HAL_GPIO_Init+0x44>
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f003 0303 	and.w	r3, r3, #3
 80020b0:	2b02      	cmp	r3, #2
 80020b2:	d130      	bne.n	8002116 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	005b      	lsls	r3, r3, #1
 80020be:	2203      	movs	r2, #3
 80020c0:	fa02 f303 	lsl.w	r3, r2, r3
 80020c4:	43db      	mvns	r3, r3
 80020c6:	69ba      	ldr	r2, [r7, #24]
 80020c8:	4013      	ands	r3, r2
 80020ca:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	68da      	ldr	r2, [r3, #12]
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	005b      	lsls	r3, r3, #1
 80020d4:	fa02 f303 	lsl.w	r3, r2, r3
 80020d8:	69ba      	ldr	r2, [r7, #24]
 80020da:	4313      	orrs	r3, r2
 80020dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	69ba      	ldr	r2, [r7, #24]
 80020e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80020ea:	2201      	movs	r2, #1
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	fa02 f303 	lsl.w	r3, r2, r3
 80020f2:	43db      	mvns	r3, r3
 80020f4:	69ba      	ldr	r2, [r7, #24]
 80020f6:	4013      	ands	r3, r2
 80020f8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	091b      	lsrs	r3, r3, #4
 8002100:	f003 0201 	and.w	r2, r3, #1
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	fa02 f303 	lsl.w	r3, r2, r3
 800210a:	69ba      	ldr	r2, [r7, #24]
 800210c:	4313      	orrs	r3, r2
 800210e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	69ba      	ldr	r2, [r7, #24]
 8002114:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f003 0303 	and.w	r3, r3, #3
 800211e:	2b03      	cmp	r3, #3
 8002120:	d017      	beq.n	8002152 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	68db      	ldr	r3, [r3, #12]
 8002126:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	005b      	lsls	r3, r3, #1
 800212c:	2203      	movs	r2, #3
 800212e:	fa02 f303 	lsl.w	r3, r2, r3
 8002132:	43db      	mvns	r3, r3
 8002134:	69ba      	ldr	r2, [r7, #24]
 8002136:	4013      	ands	r3, r2
 8002138:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	689a      	ldr	r2, [r3, #8]
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	005b      	lsls	r3, r3, #1
 8002142:	fa02 f303 	lsl.w	r3, r2, r3
 8002146:	69ba      	ldr	r2, [r7, #24]
 8002148:	4313      	orrs	r3, r2
 800214a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	69ba      	ldr	r2, [r7, #24]
 8002150:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	f003 0303 	and.w	r3, r3, #3
 800215a:	2b02      	cmp	r3, #2
 800215c:	d123      	bne.n	80021a6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	08da      	lsrs	r2, r3, #3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	3208      	adds	r2, #8
 8002166:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800216a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	f003 0307 	and.w	r3, r3, #7
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	220f      	movs	r2, #15
 8002176:	fa02 f303 	lsl.w	r3, r2, r3
 800217a:	43db      	mvns	r3, r3
 800217c:	69ba      	ldr	r2, [r7, #24]
 800217e:	4013      	ands	r3, r2
 8002180:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	691a      	ldr	r2, [r3, #16]
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	f003 0307 	and.w	r3, r3, #7
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	fa02 f303 	lsl.w	r3, r2, r3
 8002192:	69ba      	ldr	r2, [r7, #24]
 8002194:	4313      	orrs	r3, r2
 8002196:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	08da      	lsrs	r2, r3, #3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	3208      	adds	r2, #8
 80021a0:	69b9      	ldr	r1, [r7, #24]
 80021a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	005b      	lsls	r3, r3, #1
 80021b0:	2203      	movs	r2, #3
 80021b2:	fa02 f303 	lsl.w	r3, r2, r3
 80021b6:	43db      	mvns	r3, r3
 80021b8:	69ba      	ldr	r2, [r7, #24]
 80021ba:	4013      	ands	r3, r2
 80021bc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	f003 0203 	and.w	r2, r3, #3
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	005b      	lsls	r3, r3, #1
 80021ca:	fa02 f303 	lsl.w	r3, r2, r3
 80021ce:	69ba      	ldr	r2, [r7, #24]
 80021d0:	4313      	orrs	r3, r2
 80021d2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	69ba      	ldr	r2, [r7, #24]
 80021d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	f000 80e0 	beq.w	80023a8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021e8:	4b2f      	ldr	r3, [pc, #188]	@ (80022a8 <HAL_GPIO_Init+0x238>)
 80021ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80021ee:	4a2e      	ldr	r2, [pc, #184]	@ (80022a8 <HAL_GPIO_Init+0x238>)
 80021f0:	f043 0302 	orr.w	r3, r3, #2
 80021f4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80021f8:	4b2b      	ldr	r3, [pc, #172]	@ (80022a8 <HAL_GPIO_Init+0x238>)
 80021fa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80021fe:	f003 0302 	and.w	r3, r3, #2
 8002202:	60fb      	str	r3, [r7, #12]
 8002204:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002206:	4a29      	ldr	r2, [pc, #164]	@ (80022ac <HAL_GPIO_Init+0x23c>)
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	089b      	lsrs	r3, r3, #2
 800220c:	3302      	adds	r3, #2
 800220e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002212:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	f003 0303 	and.w	r3, r3, #3
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	220f      	movs	r2, #15
 800221e:	fa02 f303 	lsl.w	r3, r2, r3
 8002222:	43db      	mvns	r3, r3
 8002224:	69ba      	ldr	r2, [r7, #24]
 8002226:	4013      	ands	r3, r2
 8002228:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4a20      	ldr	r2, [pc, #128]	@ (80022b0 <HAL_GPIO_Init+0x240>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d052      	beq.n	80022d8 <HAL_GPIO_Init+0x268>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4a1f      	ldr	r2, [pc, #124]	@ (80022b4 <HAL_GPIO_Init+0x244>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d031      	beq.n	800229e <HAL_GPIO_Init+0x22e>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a1e      	ldr	r2, [pc, #120]	@ (80022b8 <HAL_GPIO_Init+0x248>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d02b      	beq.n	800229a <HAL_GPIO_Init+0x22a>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4a1d      	ldr	r2, [pc, #116]	@ (80022bc <HAL_GPIO_Init+0x24c>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d025      	beq.n	8002296 <HAL_GPIO_Init+0x226>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4a1c      	ldr	r2, [pc, #112]	@ (80022c0 <HAL_GPIO_Init+0x250>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d01f      	beq.n	8002292 <HAL_GPIO_Init+0x222>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4a1b      	ldr	r2, [pc, #108]	@ (80022c4 <HAL_GPIO_Init+0x254>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d019      	beq.n	800228e <HAL_GPIO_Init+0x21e>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4a1a      	ldr	r2, [pc, #104]	@ (80022c8 <HAL_GPIO_Init+0x258>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d013      	beq.n	800228a <HAL_GPIO_Init+0x21a>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a19      	ldr	r2, [pc, #100]	@ (80022cc <HAL_GPIO_Init+0x25c>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d00d      	beq.n	8002286 <HAL_GPIO_Init+0x216>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a18      	ldr	r2, [pc, #96]	@ (80022d0 <HAL_GPIO_Init+0x260>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d007      	beq.n	8002282 <HAL_GPIO_Init+0x212>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4a17      	ldr	r2, [pc, #92]	@ (80022d4 <HAL_GPIO_Init+0x264>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d101      	bne.n	800227e <HAL_GPIO_Init+0x20e>
 800227a:	2309      	movs	r3, #9
 800227c:	e02d      	b.n	80022da <HAL_GPIO_Init+0x26a>
 800227e:	230a      	movs	r3, #10
 8002280:	e02b      	b.n	80022da <HAL_GPIO_Init+0x26a>
 8002282:	2308      	movs	r3, #8
 8002284:	e029      	b.n	80022da <HAL_GPIO_Init+0x26a>
 8002286:	2307      	movs	r3, #7
 8002288:	e027      	b.n	80022da <HAL_GPIO_Init+0x26a>
 800228a:	2306      	movs	r3, #6
 800228c:	e025      	b.n	80022da <HAL_GPIO_Init+0x26a>
 800228e:	2305      	movs	r3, #5
 8002290:	e023      	b.n	80022da <HAL_GPIO_Init+0x26a>
 8002292:	2304      	movs	r3, #4
 8002294:	e021      	b.n	80022da <HAL_GPIO_Init+0x26a>
 8002296:	2303      	movs	r3, #3
 8002298:	e01f      	b.n	80022da <HAL_GPIO_Init+0x26a>
 800229a:	2302      	movs	r3, #2
 800229c:	e01d      	b.n	80022da <HAL_GPIO_Init+0x26a>
 800229e:	2301      	movs	r3, #1
 80022a0:	e01b      	b.n	80022da <HAL_GPIO_Init+0x26a>
 80022a2:	bf00      	nop
 80022a4:	58000080 	.word	0x58000080
 80022a8:	58024400 	.word	0x58024400
 80022ac:	58000400 	.word	0x58000400
 80022b0:	58020000 	.word	0x58020000
 80022b4:	58020400 	.word	0x58020400
 80022b8:	58020800 	.word	0x58020800
 80022bc:	58020c00 	.word	0x58020c00
 80022c0:	58021000 	.word	0x58021000
 80022c4:	58021400 	.word	0x58021400
 80022c8:	58021800 	.word	0x58021800
 80022cc:	58021c00 	.word	0x58021c00
 80022d0:	58022000 	.word	0x58022000
 80022d4:	58022400 	.word	0x58022400
 80022d8:	2300      	movs	r3, #0
 80022da:	69fa      	ldr	r2, [r7, #28]
 80022dc:	f002 0203 	and.w	r2, r2, #3
 80022e0:	0092      	lsls	r2, r2, #2
 80022e2:	4093      	lsls	r3, r2
 80022e4:	69ba      	ldr	r2, [r7, #24]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022ea:	4938      	ldr	r1, [pc, #224]	@ (80023cc <HAL_GPIO_Init+0x35c>)
 80022ec:	69fb      	ldr	r3, [r7, #28]
 80022ee:	089b      	lsrs	r3, r3, #2
 80022f0:	3302      	adds	r3, #2
 80022f2:	69ba      	ldr	r2, [r7, #24]
 80022f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80022f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	43db      	mvns	r3, r3
 8002304:	69ba      	ldr	r2, [r7, #24]
 8002306:	4013      	ands	r3, r2
 8002308:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d003      	beq.n	800231e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002316:	69ba      	ldr	r2, [r7, #24]
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	4313      	orrs	r3, r2
 800231c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800231e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002322:	69bb      	ldr	r3, [r7, #24]
 8002324:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002326:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	43db      	mvns	r3, r3
 8002332:	69ba      	ldr	r2, [r7, #24]
 8002334:	4013      	ands	r3, r2
 8002336:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002340:	2b00      	cmp	r3, #0
 8002342:	d003      	beq.n	800234c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002344:	69ba      	ldr	r2, [r7, #24]
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	4313      	orrs	r3, r2
 800234a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800234c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002350:	69bb      	ldr	r3, [r7, #24]
 8002352:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	43db      	mvns	r3, r3
 800235e:	69ba      	ldr	r2, [r7, #24]
 8002360:	4013      	ands	r3, r2
 8002362:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d003      	beq.n	8002378 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002370:	69ba      	ldr	r2, [r7, #24]
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	4313      	orrs	r3, r2
 8002376:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	69ba      	ldr	r2, [r7, #24]
 800237c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	43db      	mvns	r3, r3
 8002388:	69ba      	ldr	r2, [r7, #24]
 800238a:	4013      	ands	r3, r2
 800238c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d003      	beq.n	80023a2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800239a:	69ba      	ldr	r2, [r7, #24]
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	4313      	orrs	r3, r2
 80023a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	69ba      	ldr	r2, [r7, #24]
 80023a6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80023a8:	69fb      	ldr	r3, [r7, #28]
 80023aa:	3301      	adds	r3, #1
 80023ac:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	fa22 f303 	lsr.w	r3, r2, r3
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	f47f ae63 	bne.w	8002084 <HAL_GPIO_Init+0x14>
  }
}
 80023be:	bf00      	nop
 80023c0:	bf00      	nop
 80023c2:	3724      	adds	r7, #36	@ 0x24
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr
 80023cc:	58000400 	.word	0x58000400

080023d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	460b      	mov	r3, r1
 80023da:	807b      	strh	r3, [r7, #2]
 80023dc:	4613      	mov	r3, r2
 80023de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80023e0:	787b      	ldrb	r3, [r7, #1]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d003      	beq.n	80023ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023e6:	887a      	ldrh	r2, [r7, #2]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80023ec:	e003      	b.n	80023f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80023ee:	887b      	ldrh	r3, [r7, #2]
 80023f0:	041a      	lsls	r2, r3, #16
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	619a      	str	r2, [r3, #24]
}
 80023f6:	bf00      	nop
 80023f8:	370c      	adds	r7, #12
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr
	...

08002404 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800240c:	4a08      	ldr	r2, [pc, #32]	@ (8002430 <HAL_HSEM_FastTake+0x2c>)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	3320      	adds	r3, #32
 8002412:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002416:	4a07      	ldr	r2, [pc, #28]	@ (8002434 <HAL_HSEM_FastTake+0x30>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d101      	bne.n	8002420 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 800241c:	2300      	movs	r3, #0
 800241e:	e000      	b.n	8002422 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8002420:	2301      	movs	r3, #1
}
 8002422:	4618      	mov	r0, r3
 8002424:	370c      	adds	r7, #12
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr
 800242e:	bf00      	nop
 8002430:	58026400 	.word	0x58026400
 8002434:	80000300 	.word	0x80000300

08002438 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8002442:	4906      	ldr	r1, [pc, #24]	@ (800245c <HAL_HSEM_Release+0x24>)
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8002450:	bf00      	nop
 8002452:	370c      	adds	r7, #12
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr
 800245c:	58026400 	.word	0x58026400

08002460 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002468:	4b29      	ldr	r3, [pc, #164]	@ (8002510 <HAL_PWREx_ConfigSupply+0xb0>)
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	f003 0307 	and.w	r3, r3, #7
 8002470:	2b06      	cmp	r3, #6
 8002472:	d00a      	beq.n	800248a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002474:	4b26      	ldr	r3, [pc, #152]	@ (8002510 <HAL_PWREx_ConfigSupply+0xb0>)
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	429a      	cmp	r2, r3
 8002480:	d001      	beq.n	8002486 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e040      	b.n	8002508 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002486:	2300      	movs	r3, #0
 8002488:	e03e      	b.n	8002508 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800248a:	4b21      	ldr	r3, [pc, #132]	@ (8002510 <HAL_PWREx_ConfigSupply+0xb0>)
 800248c:	68db      	ldr	r3, [r3, #12]
 800248e:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8002492:	491f      	ldr	r1, [pc, #124]	@ (8002510 <HAL_PWREx_ConfigSupply+0xb0>)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	4313      	orrs	r3, r2
 8002498:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800249a:	f7fe fed5 	bl	8001248 <HAL_GetTick>
 800249e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80024a0:	e009      	b.n	80024b6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80024a2:	f7fe fed1 	bl	8001248 <HAL_GetTick>
 80024a6:	4602      	mov	r2, r0
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	1ad3      	subs	r3, r2, r3
 80024ac:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80024b0:	d901      	bls.n	80024b6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e028      	b.n	8002508 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80024b6:	4b16      	ldr	r3, [pc, #88]	@ (8002510 <HAL_PWREx_ConfigSupply+0xb0>)
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80024be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80024c2:	d1ee      	bne.n	80024a2 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2b1e      	cmp	r3, #30
 80024c8:	d008      	beq.n	80024dc <HAL_PWREx_ConfigSupply+0x7c>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2b2e      	cmp	r3, #46	@ 0x2e
 80024ce:	d005      	beq.n	80024dc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2b1d      	cmp	r3, #29
 80024d4:	d002      	beq.n	80024dc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2b2d      	cmp	r3, #45	@ 0x2d
 80024da:	d114      	bne.n	8002506 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80024dc:	f7fe feb4 	bl	8001248 <HAL_GetTick>
 80024e0:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80024e2:	e009      	b.n	80024f8 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80024e4:	f7fe feb0 	bl	8001248 <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80024f2:	d901      	bls.n	80024f8 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e007      	b.n	8002508 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80024f8:	4b05      	ldr	r3, [pc, #20]	@ (8002510 <HAL_PWREx_ConfigSupply+0xb0>)
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002500:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002504:	d1ee      	bne.n	80024e4 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002506:	2300      	movs	r3, #0
}
 8002508:	4618      	mov	r0, r3
 800250a:	3710      	adds	r7, #16
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}
 8002510:	58024800 	.word	0x58024800

08002514 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b08c      	sub	sp, #48	@ 0x30
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d102      	bne.n	8002528 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	f000 bc48 	b.w	8002db8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0301 	and.w	r3, r3, #1
 8002530:	2b00      	cmp	r3, #0
 8002532:	f000 8088 	beq.w	8002646 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002536:	4b99      	ldr	r3, [pc, #612]	@ (800279c <HAL_RCC_OscConfig+0x288>)
 8002538:	691b      	ldr	r3, [r3, #16]
 800253a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800253e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002540:	4b96      	ldr	r3, [pc, #600]	@ (800279c <HAL_RCC_OscConfig+0x288>)
 8002542:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002544:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002546:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002548:	2b10      	cmp	r3, #16
 800254a:	d007      	beq.n	800255c <HAL_RCC_OscConfig+0x48>
 800254c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800254e:	2b18      	cmp	r3, #24
 8002550:	d111      	bne.n	8002576 <HAL_RCC_OscConfig+0x62>
 8002552:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002554:	f003 0303 	and.w	r3, r3, #3
 8002558:	2b02      	cmp	r3, #2
 800255a:	d10c      	bne.n	8002576 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800255c:	4b8f      	ldr	r3, [pc, #572]	@ (800279c <HAL_RCC_OscConfig+0x288>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002564:	2b00      	cmp	r3, #0
 8002566:	d06d      	beq.n	8002644 <HAL_RCC_OscConfig+0x130>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d169      	bne.n	8002644 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	f000 bc21 	b.w	8002db8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800257e:	d106      	bne.n	800258e <HAL_RCC_OscConfig+0x7a>
 8002580:	4b86      	ldr	r3, [pc, #536]	@ (800279c <HAL_RCC_OscConfig+0x288>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a85      	ldr	r2, [pc, #532]	@ (800279c <HAL_RCC_OscConfig+0x288>)
 8002586:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800258a:	6013      	str	r3, [r2, #0]
 800258c:	e02e      	b.n	80025ec <HAL_RCC_OscConfig+0xd8>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d10c      	bne.n	80025b0 <HAL_RCC_OscConfig+0x9c>
 8002596:	4b81      	ldr	r3, [pc, #516]	@ (800279c <HAL_RCC_OscConfig+0x288>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a80      	ldr	r2, [pc, #512]	@ (800279c <HAL_RCC_OscConfig+0x288>)
 800259c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025a0:	6013      	str	r3, [r2, #0]
 80025a2:	4b7e      	ldr	r3, [pc, #504]	@ (800279c <HAL_RCC_OscConfig+0x288>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a7d      	ldr	r2, [pc, #500]	@ (800279c <HAL_RCC_OscConfig+0x288>)
 80025a8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80025ac:	6013      	str	r3, [r2, #0]
 80025ae:	e01d      	b.n	80025ec <HAL_RCC_OscConfig+0xd8>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80025b8:	d10c      	bne.n	80025d4 <HAL_RCC_OscConfig+0xc0>
 80025ba:	4b78      	ldr	r3, [pc, #480]	@ (800279c <HAL_RCC_OscConfig+0x288>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a77      	ldr	r2, [pc, #476]	@ (800279c <HAL_RCC_OscConfig+0x288>)
 80025c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80025c4:	6013      	str	r3, [r2, #0]
 80025c6:	4b75      	ldr	r3, [pc, #468]	@ (800279c <HAL_RCC_OscConfig+0x288>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a74      	ldr	r2, [pc, #464]	@ (800279c <HAL_RCC_OscConfig+0x288>)
 80025cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025d0:	6013      	str	r3, [r2, #0]
 80025d2:	e00b      	b.n	80025ec <HAL_RCC_OscConfig+0xd8>
 80025d4:	4b71      	ldr	r3, [pc, #452]	@ (800279c <HAL_RCC_OscConfig+0x288>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a70      	ldr	r2, [pc, #448]	@ (800279c <HAL_RCC_OscConfig+0x288>)
 80025da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025de:	6013      	str	r3, [r2, #0]
 80025e0:	4b6e      	ldr	r3, [pc, #440]	@ (800279c <HAL_RCC_OscConfig+0x288>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a6d      	ldr	r2, [pc, #436]	@ (800279c <HAL_RCC_OscConfig+0x288>)
 80025e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80025ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d013      	beq.n	800261c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025f4:	f7fe fe28 	bl	8001248 <HAL_GetTick>
 80025f8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80025fa:	e008      	b.n	800260e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025fc:	f7fe fe24 	bl	8001248 <HAL_GetTick>
 8002600:	4602      	mov	r2, r0
 8002602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	2b64      	cmp	r3, #100	@ 0x64
 8002608:	d901      	bls.n	800260e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800260a:	2303      	movs	r3, #3
 800260c:	e3d4      	b.n	8002db8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800260e:	4b63      	ldr	r3, [pc, #396]	@ (800279c <HAL_RCC_OscConfig+0x288>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d0f0      	beq.n	80025fc <HAL_RCC_OscConfig+0xe8>
 800261a:	e014      	b.n	8002646 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800261c:	f7fe fe14 	bl	8001248 <HAL_GetTick>
 8002620:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002622:	e008      	b.n	8002636 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002624:	f7fe fe10 	bl	8001248 <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	2b64      	cmp	r3, #100	@ 0x64
 8002630:	d901      	bls.n	8002636 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	e3c0      	b.n	8002db8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002636:	4b59      	ldr	r3, [pc, #356]	@ (800279c <HAL_RCC_OscConfig+0x288>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d1f0      	bne.n	8002624 <HAL_RCC_OscConfig+0x110>
 8002642:	e000      	b.n	8002646 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002644:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0302 	and.w	r3, r3, #2
 800264e:	2b00      	cmp	r3, #0
 8002650:	f000 80ca 	beq.w	80027e8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002654:	4b51      	ldr	r3, [pc, #324]	@ (800279c <HAL_RCC_OscConfig+0x288>)
 8002656:	691b      	ldr	r3, [r3, #16]
 8002658:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800265c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800265e:	4b4f      	ldr	r3, [pc, #316]	@ (800279c <HAL_RCC_OscConfig+0x288>)
 8002660:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002662:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002664:	6a3b      	ldr	r3, [r7, #32]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d007      	beq.n	800267a <HAL_RCC_OscConfig+0x166>
 800266a:	6a3b      	ldr	r3, [r7, #32]
 800266c:	2b18      	cmp	r3, #24
 800266e:	d156      	bne.n	800271e <HAL_RCC_OscConfig+0x20a>
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	f003 0303 	and.w	r3, r3, #3
 8002676:	2b00      	cmp	r3, #0
 8002678:	d151      	bne.n	800271e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800267a:	4b48      	ldr	r3, [pc, #288]	@ (800279c <HAL_RCC_OscConfig+0x288>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0304 	and.w	r3, r3, #4
 8002682:	2b00      	cmp	r3, #0
 8002684:	d005      	beq.n	8002692 <HAL_RCC_OscConfig+0x17e>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	68db      	ldr	r3, [r3, #12]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d101      	bne.n	8002692 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e392      	b.n	8002db8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002692:	4b42      	ldr	r3, [pc, #264]	@ (800279c <HAL_RCC_OscConfig+0x288>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f023 0219 	bic.w	r2, r3, #25
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	68db      	ldr	r3, [r3, #12]
 800269e:	493f      	ldr	r1, [pc, #252]	@ (800279c <HAL_RCC_OscConfig+0x288>)
 80026a0:	4313      	orrs	r3, r2
 80026a2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026a4:	f7fe fdd0 	bl	8001248 <HAL_GetTick>
 80026a8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026aa:	e008      	b.n	80026be <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026ac:	f7fe fdcc 	bl	8001248 <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d901      	bls.n	80026be <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e37c      	b.n	8002db8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026be:	4b37      	ldr	r3, [pc, #220]	@ (800279c <HAL_RCC_OscConfig+0x288>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0304 	and.w	r3, r3, #4
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d0f0      	beq.n	80026ac <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026ca:	f7fe fdc9 	bl	8001260 <HAL_GetREVID>
 80026ce:	4603      	mov	r3, r0
 80026d0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d817      	bhi.n	8002708 <HAL_RCC_OscConfig+0x1f4>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	691b      	ldr	r3, [r3, #16]
 80026dc:	2b40      	cmp	r3, #64	@ 0x40
 80026de:	d108      	bne.n	80026f2 <HAL_RCC_OscConfig+0x1de>
 80026e0:	4b2e      	ldr	r3, [pc, #184]	@ (800279c <HAL_RCC_OscConfig+0x288>)
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80026e8:	4a2c      	ldr	r2, [pc, #176]	@ (800279c <HAL_RCC_OscConfig+0x288>)
 80026ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026ee:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026f0:	e07a      	b.n	80027e8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026f2:	4b2a      	ldr	r3, [pc, #168]	@ (800279c <HAL_RCC_OscConfig+0x288>)
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	691b      	ldr	r3, [r3, #16]
 80026fe:	031b      	lsls	r3, r3, #12
 8002700:	4926      	ldr	r1, [pc, #152]	@ (800279c <HAL_RCC_OscConfig+0x288>)
 8002702:	4313      	orrs	r3, r2
 8002704:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002706:	e06f      	b.n	80027e8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002708:	4b24      	ldr	r3, [pc, #144]	@ (800279c <HAL_RCC_OscConfig+0x288>)
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	691b      	ldr	r3, [r3, #16]
 8002714:	061b      	lsls	r3, r3, #24
 8002716:	4921      	ldr	r1, [pc, #132]	@ (800279c <HAL_RCC_OscConfig+0x288>)
 8002718:	4313      	orrs	r3, r2
 800271a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800271c:	e064      	b.n	80027e8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	68db      	ldr	r3, [r3, #12]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d047      	beq.n	80027b6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002726:	4b1d      	ldr	r3, [pc, #116]	@ (800279c <HAL_RCC_OscConfig+0x288>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f023 0219 	bic.w	r2, r3, #25
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	68db      	ldr	r3, [r3, #12]
 8002732:	491a      	ldr	r1, [pc, #104]	@ (800279c <HAL_RCC_OscConfig+0x288>)
 8002734:	4313      	orrs	r3, r2
 8002736:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002738:	f7fe fd86 	bl	8001248 <HAL_GetTick>
 800273c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800273e:	e008      	b.n	8002752 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002740:	f7fe fd82 	bl	8001248 <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	2b02      	cmp	r3, #2
 800274c:	d901      	bls.n	8002752 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	e332      	b.n	8002db8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002752:	4b12      	ldr	r3, [pc, #72]	@ (800279c <HAL_RCC_OscConfig+0x288>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0304 	and.w	r3, r3, #4
 800275a:	2b00      	cmp	r3, #0
 800275c:	d0f0      	beq.n	8002740 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800275e:	f7fe fd7f 	bl	8001260 <HAL_GetREVID>
 8002762:	4603      	mov	r3, r0
 8002764:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002768:	4293      	cmp	r3, r2
 800276a:	d819      	bhi.n	80027a0 <HAL_RCC_OscConfig+0x28c>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	691b      	ldr	r3, [r3, #16]
 8002770:	2b40      	cmp	r3, #64	@ 0x40
 8002772:	d108      	bne.n	8002786 <HAL_RCC_OscConfig+0x272>
 8002774:	4b09      	ldr	r3, [pc, #36]	@ (800279c <HAL_RCC_OscConfig+0x288>)
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800277c:	4a07      	ldr	r2, [pc, #28]	@ (800279c <HAL_RCC_OscConfig+0x288>)
 800277e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002782:	6053      	str	r3, [r2, #4]
 8002784:	e030      	b.n	80027e8 <HAL_RCC_OscConfig+0x2d4>
 8002786:	4b05      	ldr	r3, [pc, #20]	@ (800279c <HAL_RCC_OscConfig+0x288>)
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	691b      	ldr	r3, [r3, #16]
 8002792:	031b      	lsls	r3, r3, #12
 8002794:	4901      	ldr	r1, [pc, #4]	@ (800279c <HAL_RCC_OscConfig+0x288>)
 8002796:	4313      	orrs	r3, r2
 8002798:	604b      	str	r3, [r1, #4]
 800279a:	e025      	b.n	80027e8 <HAL_RCC_OscConfig+0x2d4>
 800279c:	58024400 	.word	0x58024400
 80027a0:	4b9a      	ldr	r3, [pc, #616]	@ (8002a0c <HAL_RCC_OscConfig+0x4f8>)
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	691b      	ldr	r3, [r3, #16]
 80027ac:	061b      	lsls	r3, r3, #24
 80027ae:	4997      	ldr	r1, [pc, #604]	@ (8002a0c <HAL_RCC_OscConfig+0x4f8>)
 80027b0:	4313      	orrs	r3, r2
 80027b2:	604b      	str	r3, [r1, #4]
 80027b4:	e018      	b.n	80027e8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027b6:	4b95      	ldr	r3, [pc, #596]	@ (8002a0c <HAL_RCC_OscConfig+0x4f8>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a94      	ldr	r2, [pc, #592]	@ (8002a0c <HAL_RCC_OscConfig+0x4f8>)
 80027bc:	f023 0301 	bic.w	r3, r3, #1
 80027c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027c2:	f7fe fd41 	bl	8001248 <HAL_GetTick>
 80027c6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80027c8:	e008      	b.n	80027dc <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027ca:	f7fe fd3d 	bl	8001248 <HAL_GetTick>
 80027ce:	4602      	mov	r2, r0
 80027d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	2b02      	cmp	r3, #2
 80027d6:	d901      	bls.n	80027dc <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80027d8:	2303      	movs	r3, #3
 80027da:	e2ed      	b.n	8002db8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80027dc:	4b8b      	ldr	r3, [pc, #556]	@ (8002a0c <HAL_RCC_OscConfig+0x4f8>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0304 	and.w	r3, r3, #4
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d1f0      	bne.n	80027ca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 0310 	and.w	r3, r3, #16
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	f000 80a9 	beq.w	8002948 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027f6:	4b85      	ldr	r3, [pc, #532]	@ (8002a0c <HAL_RCC_OscConfig+0x4f8>)
 80027f8:	691b      	ldr	r3, [r3, #16]
 80027fa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80027fe:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002800:	4b82      	ldr	r3, [pc, #520]	@ (8002a0c <HAL_RCC_OscConfig+0x4f8>)
 8002802:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002804:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002806:	69bb      	ldr	r3, [r7, #24]
 8002808:	2b08      	cmp	r3, #8
 800280a:	d007      	beq.n	800281c <HAL_RCC_OscConfig+0x308>
 800280c:	69bb      	ldr	r3, [r7, #24]
 800280e:	2b18      	cmp	r3, #24
 8002810:	d13a      	bne.n	8002888 <HAL_RCC_OscConfig+0x374>
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	f003 0303 	and.w	r3, r3, #3
 8002818:	2b01      	cmp	r3, #1
 800281a:	d135      	bne.n	8002888 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800281c:	4b7b      	ldr	r3, [pc, #492]	@ (8002a0c <HAL_RCC_OscConfig+0x4f8>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002824:	2b00      	cmp	r3, #0
 8002826:	d005      	beq.n	8002834 <HAL_RCC_OscConfig+0x320>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	69db      	ldr	r3, [r3, #28]
 800282c:	2b80      	cmp	r3, #128	@ 0x80
 800282e:	d001      	beq.n	8002834 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	e2c1      	b.n	8002db8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002834:	f7fe fd14 	bl	8001260 <HAL_GetREVID>
 8002838:	4603      	mov	r3, r0
 800283a:	f241 0203 	movw	r2, #4099	@ 0x1003
 800283e:	4293      	cmp	r3, r2
 8002840:	d817      	bhi.n	8002872 <HAL_RCC_OscConfig+0x35e>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6a1b      	ldr	r3, [r3, #32]
 8002846:	2b20      	cmp	r3, #32
 8002848:	d108      	bne.n	800285c <HAL_RCC_OscConfig+0x348>
 800284a:	4b70      	ldr	r3, [pc, #448]	@ (8002a0c <HAL_RCC_OscConfig+0x4f8>)
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002852:	4a6e      	ldr	r2, [pc, #440]	@ (8002a0c <HAL_RCC_OscConfig+0x4f8>)
 8002854:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002858:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800285a:	e075      	b.n	8002948 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800285c:	4b6b      	ldr	r3, [pc, #428]	@ (8002a0c <HAL_RCC_OscConfig+0x4f8>)
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6a1b      	ldr	r3, [r3, #32]
 8002868:	069b      	lsls	r3, r3, #26
 800286a:	4968      	ldr	r1, [pc, #416]	@ (8002a0c <HAL_RCC_OscConfig+0x4f8>)
 800286c:	4313      	orrs	r3, r2
 800286e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002870:	e06a      	b.n	8002948 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002872:	4b66      	ldr	r3, [pc, #408]	@ (8002a0c <HAL_RCC_OscConfig+0x4f8>)
 8002874:	68db      	ldr	r3, [r3, #12]
 8002876:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6a1b      	ldr	r3, [r3, #32]
 800287e:	061b      	lsls	r3, r3, #24
 8002880:	4962      	ldr	r1, [pc, #392]	@ (8002a0c <HAL_RCC_OscConfig+0x4f8>)
 8002882:	4313      	orrs	r3, r2
 8002884:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002886:	e05f      	b.n	8002948 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	69db      	ldr	r3, [r3, #28]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d042      	beq.n	8002916 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002890:	4b5e      	ldr	r3, [pc, #376]	@ (8002a0c <HAL_RCC_OscConfig+0x4f8>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a5d      	ldr	r2, [pc, #372]	@ (8002a0c <HAL_RCC_OscConfig+0x4f8>)
 8002896:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800289a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800289c:	f7fe fcd4 	bl	8001248 <HAL_GetTick>
 80028a0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80028a2:	e008      	b.n	80028b6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80028a4:	f7fe fcd0 	bl	8001248 <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	d901      	bls.n	80028b6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	e280      	b.n	8002db8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80028b6:	4b55      	ldr	r3, [pc, #340]	@ (8002a0c <HAL_RCC_OscConfig+0x4f8>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d0f0      	beq.n	80028a4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80028c2:	f7fe fccd 	bl	8001260 <HAL_GetREVID>
 80028c6:	4603      	mov	r3, r0
 80028c8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d817      	bhi.n	8002900 <HAL_RCC_OscConfig+0x3ec>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6a1b      	ldr	r3, [r3, #32]
 80028d4:	2b20      	cmp	r3, #32
 80028d6:	d108      	bne.n	80028ea <HAL_RCC_OscConfig+0x3d6>
 80028d8:	4b4c      	ldr	r3, [pc, #304]	@ (8002a0c <HAL_RCC_OscConfig+0x4f8>)
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80028e0:	4a4a      	ldr	r2, [pc, #296]	@ (8002a0c <HAL_RCC_OscConfig+0x4f8>)
 80028e2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80028e6:	6053      	str	r3, [r2, #4]
 80028e8:	e02e      	b.n	8002948 <HAL_RCC_OscConfig+0x434>
 80028ea:	4b48      	ldr	r3, [pc, #288]	@ (8002a0c <HAL_RCC_OscConfig+0x4f8>)
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6a1b      	ldr	r3, [r3, #32]
 80028f6:	069b      	lsls	r3, r3, #26
 80028f8:	4944      	ldr	r1, [pc, #272]	@ (8002a0c <HAL_RCC_OscConfig+0x4f8>)
 80028fa:	4313      	orrs	r3, r2
 80028fc:	604b      	str	r3, [r1, #4]
 80028fe:	e023      	b.n	8002948 <HAL_RCC_OscConfig+0x434>
 8002900:	4b42      	ldr	r3, [pc, #264]	@ (8002a0c <HAL_RCC_OscConfig+0x4f8>)
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6a1b      	ldr	r3, [r3, #32]
 800290c:	061b      	lsls	r3, r3, #24
 800290e:	493f      	ldr	r1, [pc, #252]	@ (8002a0c <HAL_RCC_OscConfig+0x4f8>)
 8002910:	4313      	orrs	r3, r2
 8002912:	60cb      	str	r3, [r1, #12]
 8002914:	e018      	b.n	8002948 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002916:	4b3d      	ldr	r3, [pc, #244]	@ (8002a0c <HAL_RCC_OscConfig+0x4f8>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a3c      	ldr	r2, [pc, #240]	@ (8002a0c <HAL_RCC_OscConfig+0x4f8>)
 800291c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002920:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002922:	f7fe fc91 	bl	8001248 <HAL_GetTick>
 8002926:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002928:	e008      	b.n	800293c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800292a:	f7fe fc8d 	bl	8001248 <HAL_GetTick>
 800292e:	4602      	mov	r2, r0
 8002930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002932:	1ad3      	subs	r3, r2, r3
 8002934:	2b02      	cmp	r3, #2
 8002936:	d901      	bls.n	800293c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002938:	2303      	movs	r3, #3
 800293a:	e23d      	b.n	8002db8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800293c:	4b33      	ldr	r3, [pc, #204]	@ (8002a0c <HAL_RCC_OscConfig+0x4f8>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002944:	2b00      	cmp	r3, #0
 8002946:	d1f0      	bne.n	800292a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0308 	and.w	r3, r3, #8
 8002950:	2b00      	cmp	r3, #0
 8002952:	d036      	beq.n	80029c2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	695b      	ldr	r3, [r3, #20]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d019      	beq.n	8002990 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800295c:	4b2b      	ldr	r3, [pc, #172]	@ (8002a0c <HAL_RCC_OscConfig+0x4f8>)
 800295e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002960:	4a2a      	ldr	r2, [pc, #168]	@ (8002a0c <HAL_RCC_OscConfig+0x4f8>)
 8002962:	f043 0301 	orr.w	r3, r3, #1
 8002966:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002968:	f7fe fc6e 	bl	8001248 <HAL_GetTick>
 800296c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800296e:	e008      	b.n	8002982 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002970:	f7fe fc6a 	bl	8001248 <HAL_GetTick>
 8002974:	4602      	mov	r2, r0
 8002976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	2b02      	cmp	r3, #2
 800297c:	d901      	bls.n	8002982 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800297e:	2303      	movs	r3, #3
 8002980:	e21a      	b.n	8002db8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002982:	4b22      	ldr	r3, [pc, #136]	@ (8002a0c <HAL_RCC_OscConfig+0x4f8>)
 8002984:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002986:	f003 0302 	and.w	r3, r3, #2
 800298a:	2b00      	cmp	r3, #0
 800298c:	d0f0      	beq.n	8002970 <HAL_RCC_OscConfig+0x45c>
 800298e:	e018      	b.n	80029c2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002990:	4b1e      	ldr	r3, [pc, #120]	@ (8002a0c <HAL_RCC_OscConfig+0x4f8>)
 8002992:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002994:	4a1d      	ldr	r2, [pc, #116]	@ (8002a0c <HAL_RCC_OscConfig+0x4f8>)
 8002996:	f023 0301 	bic.w	r3, r3, #1
 800299a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800299c:	f7fe fc54 	bl	8001248 <HAL_GetTick>
 80029a0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80029a2:	e008      	b.n	80029b6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029a4:	f7fe fc50 	bl	8001248 <HAL_GetTick>
 80029a8:	4602      	mov	r2, r0
 80029aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	2b02      	cmp	r3, #2
 80029b0:	d901      	bls.n	80029b6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e200      	b.n	8002db8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80029b6:	4b15      	ldr	r3, [pc, #84]	@ (8002a0c <HAL_RCC_OscConfig+0x4f8>)
 80029b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029ba:	f003 0302 	and.w	r3, r3, #2
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d1f0      	bne.n	80029a4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0320 	and.w	r3, r3, #32
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d039      	beq.n	8002a42 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	699b      	ldr	r3, [r3, #24]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d01c      	beq.n	8002a10 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80029d6:	4b0d      	ldr	r3, [pc, #52]	@ (8002a0c <HAL_RCC_OscConfig+0x4f8>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a0c      	ldr	r2, [pc, #48]	@ (8002a0c <HAL_RCC_OscConfig+0x4f8>)
 80029dc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80029e0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80029e2:	f7fe fc31 	bl	8001248 <HAL_GetTick>
 80029e6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80029e8:	e008      	b.n	80029fc <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80029ea:	f7fe fc2d 	bl	8001248 <HAL_GetTick>
 80029ee:	4602      	mov	r2, r0
 80029f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	2b02      	cmp	r3, #2
 80029f6:	d901      	bls.n	80029fc <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80029f8:	2303      	movs	r3, #3
 80029fa:	e1dd      	b.n	8002db8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80029fc:	4b03      	ldr	r3, [pc, #12]	@ (8002a0c <HAL_RCC_OscConfig+0x4f8>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d0f0      	beq.n	80029ea <HAL_RCC_OscConfig+0x4d6>
 8002a08:	e01b      	b.n	8002a42 <HAL_RCC_OscConfig+0x52e>
 8002a0a:	bf00      	nop
 8002a0c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002a10:	4b9b      	ldr	r3, [pc, #620]	@ (8002c80 <HAL_RCC_OscConfig+0x76c>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a9a      	ldr	r2, [pc, #616]	@ (8002c80 <HAL_RCC_OscConfig+0x76c>)
 8002a16:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002a1a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002a1c:	f7fe fc14 	bl	8001248 <HAL_GetTick>
 8002a20:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002a22:	e008      	b.n	8002a36 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a24:	f7fe fc10 	bl	8001248 <HAL_GetTick>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	2b02      	cmp	r3, #2
 8002a30:	d901      	bls.n	8002a36 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002a32:	2303      	movs	r3, #3
 8002a34:	e1c0      	b.n	8002db8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002a36:	4b92      	ldr	r3, [pc, #584]	@ (8002c80 <HAL_RCC_OscConfig+0x76c>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d1f0      	bne.n	8002a24 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0304 	and.w	r3, r3, #4
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	f000 8081 	beq.w	8002b52 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002a50:	4b8c      	ldr	r3, [pc, #560]	@ (8002c84 <HAL_RCC_OscConfig+0x770>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a8b      	ldr	r2, [pc, #556]	@ (8002c84 <HAL_RCC_OscConfig+0x770>)
 8002a56:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a5a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a5c:	f7fe fbf4 	bl	8001248 <HAL_GetTick>
 8002a60:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a62:	e008      	b.n	8002a76 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a64:	f7fe fbf0 	bl	8001248 <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	2b64      	cmp	r3, #100	@ 0x64
 8002a70:	d901      	bls.n	8002a76 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002a72:	2303      	movs	r3, #3
 8002a74:	e1a0      	b.n	8002db8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a76:	4b83      	ldr	r3, [pc, #524]	@ (8002c84 <HAL_RCC_OscConfig+0x770>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d0f0      	beq.n	8002a64 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d106      	bne.n	8002a98 <HAL_RCC_OscConfig+0x584>
 8002a8a:	4b7d      	ldr	r3, [pc, #500]	@ (8002c80 <HAL_RCC_OscConfig+0x76c>)
 8002a8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a8e:	4a7c      	ldr	r2, [pc, #496]	@ (8002c80 <HAL_RCC_OscConfig+0x76c>)
 8002a90:	f043 0301 	orr.w	r3, r3, #1
 8002a94:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a96:	e02d      	b.n	8002af4 <HAL_RCC_OscConfig+0x5e0>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d10c      	bne.n	8002aba <HAL_RCC_OscConfig+0x5a6>
 8002aa0:	4b77      	ldr	r3, [pc, #476]	@ (8002c80 <HAL_RCC_OscConfig+0x76c>)
 8002aa2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aa4:	4a76      	ldr	r2, [pc, #472]	@ (8002c80 <HAL_RCC_OscConfig+0x76c>)
 8002aa6:	f023 0301 	bic.w	r3, r3, #1
 8002aaa:	6713      	str	r3, [r2, #112]	@ 0x70
 8002aac:	4b74      	ldr	r3, [pc, #464]	@ (8002c80 <HAL_RCC_OscConfig+0x76c>)
 8002aae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ab0:	4a73      	ldr	r2, [pc, #460]	@ (8002c80 <HAL_RCC_OscConfig+0x76c>)
 8002ab2:	f023 0304 	bic.w	r3, r3, #4
 8002ab6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ab8:	e01c      	b.n	8002af4 <HAL_RCC_OscConfig+0x5e0>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	2b05      	cmp	r3, #5
 8002ac0:	d10c      	bne.n	8002adc <HAL_RCC_OscConfig+0x5c8>
 8002ac2:	4b6f      	ldr	r3, [pc, #444]	@ (8002c80 <HAL_RCC_OscConfig+0x76c>)
 8002ac4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ac6:	4a6e      	ldr	r2, [pc, #440]	@ (8002c80 <HAL_RCC_OscConfig+0x76c>)
 8002ac8:	f043 0304 	orr.w	r3, r3, #4
 8002acc:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ace:	4b6c      	ldr	r3, [pc, #432]	@ (8002c80 <HAL_RCC_OscConfig+0x76c>)
 8002ad0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ad2:	4a6b      	ldr	r2, [pc, #428]	@ (8002c80 <HAL_RCC_OscConfig+0x76c>)
 8002ad4:	f043 0301 	orr.w	r3, r3, #1
 8002ad8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ada:	e00b      	b.n	8002af4 <HAL_RCC_OscConfig+0x5e0>
 8002adc:	4b68      	ldr	r3, [pc, #416]	@ (8002c80 <HAL_RCC_OscConfig+0x76c>)
 8002ade:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ae0:	4a67      	ldr	r2, [pc, #412]	@ (8002c80 <HAL_RCC_OscConfig+0x76c>)
 8002ae2:	f023 0301 	bic.w	r3, r3, #1
 8002ae6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ae8:	4b65      	ldr	r3, [pc, #404]	@ (8002c80 <HAL_RCC_OscConfig+0x76c>)
 8002aea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aec:	4a64      	ldr	r2, [pc, #400]	@ (8002c80 <HAL_RCC_OscConfig+0x76c>)
 8002aee:	f023 0304 	bic.w	r3, r3, #4
 8002af2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d015      	beq.n	8002b28 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002afc:	f7fe fba4 	bl	8001248 <HAL_GetTick>
 8002b00:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b02:	e00a      	b.n	8002b1a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b04:	f7fe fba0 	bl	8001248 <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d901      	bls.n	8002b1a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e14e      	b.n	8002db8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b1a:	4b59      	ldr	r3, [pc, #356]	@ (8002c80 <HAL_RCC_OscConfig+0x76c>)
 8002b1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b1e:	f003 0302 	and.w	r3, r3, #2
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d0ee      	beq.n	8002b04 <HAL_RCC_OscConfig+0x5f0>
 8002b26:	e014      	b.n	8002b52 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b28:	f7fe fb8e 	bl	8001248 <HAL_GetTick>
 8002b2c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002b2e:	e00a      	b.n	8002b46 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b30:	f7fe fb8a 	bl	8001248 <HAL_GetTick>
 8002b34:	4602      	mov	r2, r0
 8002b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d901      	bls.n	8002b46 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e138      	b.n	8002db8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002b46:	4b4e      	ldr	r3, [pc, #312]	@ (8002c80 <HAL_RCC_OscConfig+0x76c>)
 8002b48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b4a:	f003 0302 	and.w	r3, r3, #2
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d1ee      	bne.n	8002b30 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	f000 812d 	beq.w	8002db6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002b5c:	4b48      	ldr	r3, [pc, #288]	@ (8002c80 <HAL_RCC_OscConfig+0x76c>)
 8002b5e:	691b      	ldr	r3, [r3, #16]
 8002b60:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002b64:	2b18      	cmp	r3, #24
 8002b66:	f000 80bd 	beq.w	8002ce4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	f040 809e 	bne.w	8002cb0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b74:	4b42      	ldr	r3, [pc, #264]	@ (8002c80 <HAL_RCC_OscConfig+0x76c>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a41      	ldr	r2, [pc, #260]	@ (8002c80 <HAL_RCC_OscConfig+0x76c>)
 8002b7a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b80:	f7fe fb62 	bl	8001248 <HAL_GetTick>
 8002b84:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b86:	e008      	b.n	8002b9a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b88:	f7fe fb5e 	bl	8001248 <HAL_GetTick>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d901      	bls.n	8002b9a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	e10e      	b.n	8002db8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b9a:	4b39      	ldr	r3, [pc, #228]	@ (8002c80 <HAL_RCC_OscConfig+0x76c>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d1f0      	bne.n	8002b88 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ba6:	4b36      	ldr	r3, [pc, #216]	@ (8002c80 <HAL_RCC_OscConfig+0x76c>)
 8002ba8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002baa:	4b37      	ldr	r3, [pc, #220]	@ (8002c88 <HAL_RCC_OscConfig+0x774>)
 8002bac:	4013      	ands	r3, r2
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002bb6:	0112      	lsls	r2, r2, #4
 8002bb8:	430a      	orrs	r2, r1
 8002bba:	4931      	ldr	r1, [pc, #196]	@ (8002c80 <HAL_RCC_OscConfig+0x76c>)
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	628b      	str	r3, [r1, #40]	@ 0x28
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bc4:	3b01      	subs	r3, #1
 8002bc6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bce:	3b01      	subs	r3, #1
 8002bd0:	025b      	lsls	r3, r3, #9
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	431a      	orrs	r2, r3
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bda:	3b01      	subs	r3, #1
 8002bdc:	041b      	lsls	r3, r3, #16
 8002bde:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002be2:	431a      	orrs	r2, r3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002be8:	3b01      	subs	r3, #1
 8002bea:	061b      	lsls	r3, r3, #24
 8002bec:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002bf0:	4923      	ldr	r1, [pc, #140]	@ (8002c80 <HAL_RCC_OscConfig+0x76c>)
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002bf6:	4b22      	ldr	r3, [pc, #136]	@ (8002c80 <HAL_RCC_OscConfig+0x76c>)
 8002bf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bfa:	4a21      	ldr	r2, [pc, #132]	@ (8002c80 <HAL_RCC_OscConfig+0x76c>)
 8002bfc:	f023 0301 	bic.w	r3, r3, #1
 8002c00:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002c02:	4b1f      	ldr	r3, [pc, #124]	@ (8002c80 <HAL_RCC_OscConfig+0x76c>)
 8002c04:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002c06:	4b21      	ldr	r3, [pc, #132]	@ (8002c8c <HAL_RCC_OscConfig+0x778>)
 8002c08:	4013      	ands	r3, r2
 8002c0a:	687a      	ldr	r2, [r7, #4]
 8002c0c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002c0e:	00d2      	lsls	r2, r2, #3
 8002c10:	491b      	ldr	r1, [pc, #108]	@ (8002c80 <HAL_RCC_OscConfig+0x76c>)
 8002c12:	4313      	orrs	r3, r2
 8002c14:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002c16:	4b1a      	ldr	r3, [pc, #104]	@ (8002c80 <HAL_RCC_OscConfig+0x76c>)
 8002c18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c1a:	f023 020c 	bic.w	r2, r3, #12
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c22:	4917      	ldr	r1, [pc, #92]	@ (8002c80 <HAL_RCC_OscConfig+0x76c>)
 8002c24:	4313      	orrs	r3, r2
 8002c26:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002c28:	4b15      	ldr	r3, [pc, #84]	@ (8002c80 <HAL_RCC_OscConfig+0x76c>)
 8002c2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c2c:	f023 0202 	bic.w	r2, r3, #2
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c34:	4912      	ldr	r1, [pc, #72]	@ (8002c80 <HAL_RCC_OscConfig+0x76c>)
 8002c36:	4313      	orrs	r3, r2
 8002c38:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002c3a:	4b11      	ldr	r3, [pc, #68]	@ (8002c80 <HAL_RCC_OscConfig+0x76c>)
 8002c3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c3e:	4a10      	ldr	r2, [pc, #64]	@ (8002c80 <HAL_RCC_OscConfig+0x76c>)
 8002c40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c44:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c46:	4b0e      	ldr	r3, [pc, #56]	@ (8002c80 <HAL_RCC_OscConfig+0x76c>)
 8002c48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c4a:	4a0d      	ldr	r2, [pc, #52]	@ (8002c80 <HAL_RCC_OscConfig+0x76c>)
 8002c4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c50:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002c52:	4b0b      	ldr	r3, [pc, #44]	@ (8002c80 <HAL_RCC_OscConfig+0x76c>)
 8002c54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c56:	4a0a      	ldr	r2, [pc, #40]	@ (8002c80 <HAL_RCC_OscConfig+0x76c>)
 8002c58:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c5c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002c5e:	4b08      	ldr	r3, [pc, #32]	@ (8002c80 <HAL_RCC_OscConfig+0x76c>)
 8002c60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c62:	4a07      	ldr	r2, [pc, #28]	@ (8002c80 <HAL_RCC_OscConfig+0x76c>)
 8002c64:	f043 0301 	orr.w	r3, r3, #1
 8002c68:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c6a:	4b05      	ldr	r3, [pc, #20]	@ (8002c80 <HAL_RCC_OscConfig+0x76c>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a04      	ldr	r2, [pc, #16]	@ (8002c80 <HAL_RCC_OscConfig+0x76c>)
 8002c70:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c76:	f7fe fae7 	bl	8001248 <HAL_GetTick>
 8002c7a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c7c:	e011      	b.n	8002ca2 <HAL_RCC_OscConfig+0x78e>
 8002c7e:	bf00      	nop
 8002c80:	58024400 	.word	0x58024400
 8002c84:	58024800 	.word	0x58024800
 8002c88:	fffffc0c 	.word	0xfffffc0c
 8002c8c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c90:	f7fe fada 	bl	8001248 <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d901      	bls.n	8002ca2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e08a      	b.n	8002db8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002ca2:	4b47      	ldr	r3, [pc, #284]	@ (8002dc0 <HAL_RCC_OscConfig+0x8ac>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d0f0      	beq.n	8002c90 <HAL_RCC_OscConfig+0x77c>
 8002cae:	e082      	b.n	8002db6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cb0:	4b43      	ldr	r3, [pc, #268]	@ (8002dc0 <HAL_RCC_OscConfig+0x8ac>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a42      	ldr	r2, [pc, #264]	@ (8002dc0 <HAL_RCC_OscConfig+0x8ac>)
 8002cb6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002cba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cbc:	f7fe fac4 	bl	8001248 <HAL_GetTick>
 8002cc0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002cc2:	e008      	b.n	8002cd6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cc4:	f7fe fac0 	bl	8001248 <HAL_GetTick>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	2b02      	cmp	r3, #2
 8002cd0:	d901      	bls.n	8002cd6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	e070      	b.n	8002db8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002cd6:	4b3a      	ldr	r3, [pc, #232]	@ (8002dc0 <HAL_RCC_OscConfig+0x8ac>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d1f0      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x7b0>
 8002ce2:	e068      	b.n	8002db6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002ce4:	4b36      	ldr	r3, [pc, #216]	@ (8002dc0 <HAL_RCC_OscConfig+0x8ac>)
 8002ce6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ce8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002cea:	4b35      	ldr	r3, [pc, #212]	@ (8002dc0 <HAL_RCC_OscConfig+0x8ac>)
 8002cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cee:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d031      	beq.n	8002d5c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	f003 0203 	and.w	r2, r3, #3
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d12a      	bne.n	8002d5c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	091b      	lsrs	r3, r3, #4
 8002d0a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d122      	bne.n	8002d5c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d20:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d11a      	bne.n	8002d5c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	0a5b      	lsrs	r3, r3, #9
 8002d2a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d32:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d111      	bne.n	8002d5c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	0c1b      	lsrs	r3, r3, #16
 8002d3c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d44:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d108      	bne.n	8002d5c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	0e1b      	lsrs	r3, r3, #24
 8002d4e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d56:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d001      	beq.n	8002d60 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e02b      	b.n	8002db8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002d60:	4b17      	ldr	r3, [pc, #92]	@ (8002dc0 <HAL_RCC_OscConfig+0x8ac>)
 8002d62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d64:	08db      	lsrs	r3, r3, #3
 8002d66:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002d6a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d70:	693a      	ldr	r2, [r7, #16]
 8002d72:	429a      	cmp	r2, r3
 8002d74:	d01f      	beq.n	8002db6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002d76:	4b12      	ldr	r3, [pc, #72]	@ (8002dc0 <HAL_RCC_OscConfig+0x8ac>)
 8002d78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d7a:	4a11      	ldr	r2, [pc, #68]	@ (8002dc0 <HAL_RCC_OscConfig+0x8ac>)
 8002d7c:	f023 0301 	bic.w	r3, r3, #1
 8002d80:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002d82:	f7fe fa61 	bl	8001248 <HAL_GetTick>
 8002d86:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002d88:	bf00      	nop
 8002d8a:	f7fe fa5d 	bl	8001248 <HAL_GetTick>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d0f9      	beq.n	8002d8a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002d96:	4b0a      	ldr	r3, [pc, #40]	@ (8002dc0 <HAL_RCC_OscConfig+0x8ac>)
 8002d98:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d9a:	4b0a      	ldr	r3, [pc, #40]	@ (8002dc4 <HAL_RCC_OscConfig+0x8b0>)
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002da2:	00d2      	lsls	r2, r2, #3
 8002da4:	4906      	ldr	r1, [pc, #24]	@ (8002dc0 <HAL_RCC_OscConfig+0x8ac>)
 8002da6:	4313      	orrs	r3, r2
 8002da8:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002daa:	4b05      	ldr	r3, [pc, #20]	@ (8002dc0 <HAL_RCC_OscConfig+0x8ac>)
 8002dac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dae:	4a04      	ldr	r2, [pc, #16]	@ (8002dc0 <HAL_RCC_OscConfig+0x8ac>)
 8002db0:	f043 0301 	orr.w	r3, r3, #1
 8002db4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002db6:	2300      	movs	r3, #0
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3730      	adds	r7, #48	@ 0x30
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	58024400 	.word	0x58024400
 8002dc4:	ffff0007 	.word	0xffff0007

08002dc8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b086      	sub	sp, #24
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d101      	bne.n	8002ddc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e19c      	b.n	8003116 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ddc:	4b8a      	ldr	r3, [pc, #552]	@ (8003008 <HAL_RCC_ClockConfig+0x240>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 030f 	and.w	r3, r3, #15
 8002de4:	683a      	ldr	r2, [r7, #0]
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d910      	bls.n	8002e0c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dea:	4b87      	ldr	r3, [pc, #540]	@ (8003008 <HAL_RCC_ClockConfig+0x240>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f023 020f 	bic.w	r2, r3, #15
 8002df2:	4985      	ldr	r1, [pc, #532]	@ (8003008 <HAL_RCC_ClockConfig+0x240>)
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dfa:	4b83      	ldr	r3, [pc, #524]	@ (8003008 <HAL_RCC_ClockConfig+0x240>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 030f 	and.w	r3, r3, #15
 8002e02:	683a      	ldr	r2, [r7, #0]
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d001      	beq.n	8002e0c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e184      	b.n	8003116 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0304 	and.w	r3, r3, #4
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d010      	beq.n	8002e3a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	691a      	ldr	r2, [r3, #16]
 8002e1c:	4b7b      	ldr	r3, [pc, #492]	@ (800300c <HAL_RCC_ClockConfig+0x244>)
 8002e1e:	699b      	ldr	r3, [r3, #24]
 8002e20:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d908      	bls.n	8002e3a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002e28:	4b78      	ldr	r3, [pc, #480]	@ (800300c <HAL_RCC_ClockConfig+0x244>)
 8002e2a:	699b      	ldr	r3, [r3, #24]
 8002e2c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	691b      	ldr	r3, [r3, #16]
 8002e34:	4975      	ldr	r1, [pc, #468]	@ (800300c <HAL_RCC_ClockConfig+0x244>)
 8002e36:	4313      	orrs	r3, r2
 8002e38:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0308 	and.w	r3, r3, #8
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d010      	beq.n	8002e68 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	695a      	ldr	r2, [r3, #20]
 8002e4a:	4b70      	ldr	r3, [pc, #448]	@ (800300c <HAL_RCC_ClockConfig+0x244>)
 8002e4c:	69db      	ldr	r3, [r3, #28]
 8002e4e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d908      	bls.n	8002e68 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002e56:	4b6d      	ldr	r3, [pc, #436]	@ (800300c <HAL_RCC_ClockConfig+0x244>)
 8002e58:	69db      	ldr	r3, [r3, #28]
 8002e5a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	695b      	ldr	r3, [r3, #20]
 8002e62:	496a      	ldr	r1, [pc, #424]	@ (800300c <HAL_RCC_ClockConfig+0x244>)
 8002e64:	4313      	orrs	r3, r2
 8002e66:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 0310 	and.w	r3, r3, #16
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d010      	beq.n	8002e96 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	699a      	ldr	r2, [r3, #24]
 8002e78:	4b64      	ldr	r3, [pc, #400]	@ (800300c <HAL_RCC_ClockConfig+0x244>)
 8002e7a:	69db      	ldr	r3, [r3, #28]
 8002e7c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d908      	bls.n	8002e96 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002e84:	4b61      	ldr	r3, [pc, #388]	@ (800300c <HAL_RCC_ClockConfig+0x244>)
 8002e86:	69db      	ldr	r3, [r3, #28]
 8002e88:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	699b      	ldr	r3, [r3, #24]
 8002e90:	495e      	ldr	r1, [pc, #376]	@ (800300c <HAL_RCC_ClockConfig+0x244>)
 8002e92:	4313      	orrs	r3, r2
 8002e94:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0320 	and.w	r3, r3, #32
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d010      	beq.n	8002ec4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	69da      	ldr	r2, [r3, #28]
 8002ea6:	4b59      	ldr	r3, [pc, #356]	@ (800300c <HAL_RCC_ClockConfig+0x244>)
 8002ea8:	6a1b      	ldr	r3, [r3, #32]
 8002eaa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d908      	bls.n	8002ec4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002eb2:	4b56      	ldr	r3, [pc, #344]	@ (800300c <HAL_RCC_ClockConfig+0x244>)
 8002eb4:	6a1b      	ldr	r3, [r3, #32]
 8002eb6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	69db      	ldr	r3, [r3, #28]
 8002ebe:	4953      	ldr	r1, [pc, #332]	@ (800300c <HAL_RCC_ClockConfig+0x244>)
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 0302 	and.w	r3, r3, #2
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d010      	beq.n	8002ef2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	68da      	ldr	r2, [r3, #12]
 8002ed4:	4b4d      	ldr	r3, [pc, #308]	@ (800300c <HAL_RCC_ClockConfig+0x244>)
 8002ed6:	699b      	ldr	r3, [r3, #24]
 8002ed8:	f003 030f 	and.w	r3, r3, #15
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d908      	bls.n	8002ef2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ee0:	4b4a      	ldr	r3, [pc, #296]	@ (800300c <HAL_RCC_ClockConfig+0x244>)
 8002ee2:	699b      	ldr	r3, [r3, #24]
 8002ee4:	f023 020f 	bic.w	r2, r3, #15
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	4947      	ldr	r1, [pc, #284]	@ (800300c <HAL_RCC_ClockConfig+0x244>)
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0301 	and.w	r3, r3, #1
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d055      	beq.n	8002faa <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002efe:	4b43      	ldr	r3, [pc, #268]	@ (800300c <HAL_RCC_ClockConfig+0x244>)
 8002f00:	699b      	ldr	r3, [r3, #24]
 8002f02:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	4940      	ldr	r1, [pc, #256]	@ (800300c <HAL_RCC_ClockConfig+0x244>)
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	2b02      	cmp	r3, #2
 8002f16:	d107      	bne.n	8002f28 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002f18:	4b3c      	ldr	r3, [pc, #240]	@ (800300c <HAL_RCC_ClockConfig+0x244>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d121      	bne.n	8002f68 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	e0f6      	b.n	8003116 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	2b03      	cmp	r3, #3
 8002f2e:	d107      	bne.n	8002f40 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002f30:	4b36      	ldr	r3, [pc, #216]	@ (800300c <HAL_RCC_ClockConfig+0x244>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d115      	bne.n	8002f68 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e0ea      	b.n	8003116 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d107      	bne.n	8002f58 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002f48:	4b30      	ldr	r3, [pc, #192]	@ (800300c <HAL_RCC_ClockConfig+0x244>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d109      	bne.n	8002f68 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	e0de      	b.n	8003116 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f58:	4b2c      	ldr	r3, [pc, #176]	@ (800300c <HAL_RCC_ClockConfig+0x244>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0304 	and.w	r3, r3, #4
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d101      	bne.n	8002f68 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e0d6      	b.n	8003116 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f68:	4b28      	ldr	r3, [pc, #160]	@ (800300c <HAL_RCC_ClockConfig+0x244>)
 8002f6a:	691b      	ldr	r3, [r3, #16]
 8002f6c:	f023 0207 	bic.w	r2, r3, #7
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	4925      	ldr	r1, [pc, #148]	@ (800300c <HAL_RCC_ClockConfig+0x244>)
 8002f76:	4313      	orrs	r3, r2
 8002f78:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f7a:	f7fe f965 	bl	8001248 <HAL_GetTick>
 8002f7e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f80:	e00a      	b.n	8002f98 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f82:	f7fe f961 	bl	8001248 <HAL_GetTick>
 8002f86:	4602      	mov	r2, r0
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	1ad3      	subs	r3, r2, r3
 8002f8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d901      	bls.n	8002f98 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002f94:	2303      	movs	r3, #3
 8002f96:	e0be      	b.n	8003116 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f98:	4b1c      	ldr	r3, [pc, #112]	@ (800300c <HAL_RCC_ClockConfig+0x244>)
 8002f9a:	691b      	ldr	r3, [r3, #16]
 8002f9c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	00db      	lsls	r3, r3, #3
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d1eb      	bne.n	8002f82 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 0302 	and.w	r3, r3, #2
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d010      	beq.n	8002fd8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	68da      	ldr	r2, [r3, #12]
 8002fba:	4b14      	ldr	r3, [pc, #80]	@ (800300c <HAL_RCC_ClockConfig+0x244>)
 8002fbc:	699b      	ldr	r3, [r3, #24]
 8002fbe:	f003 030f 	and.w	r3, r3, #15
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d208      	bcs.n	8002fd8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fc6:	4b11      	ldr	r3, [pc, #68]	@ (800300c <HAL_RCC_ClockConfig+0x244>)
 8002fc8:	699b      	ldr	r3, [r3, #24]
 8002fca:	f023 020f 	bic.w	r2, r3, #15
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	68db      	ldr	r3, [r3, #12]
 8002fd2:	490e      	ldr	r1, [pc, #56]	@ (800300c <HAL_RCC_ClockConfig+0x244>)
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002fd8:	4b0b      	ldr	r3, [pc, #44]	@ (8003008 <HAL_RCC_ClockConfig+0x240>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 030f 	and.w	r3, r3, #15
 8002fe0:	683a      	ldr	r2, [r7, #0]
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d214      	bcs.n	8003010 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fe6:	4b08      	ldr	r3, [pc, #32]	@ (8003008 <HAL_RCC_ClockConfig+0x240>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f023 020f 	bic.w	r2, r3, #15
 8002fee:	4906      	ldr	r1, [pc, #24]	@ (8003008 <HAL_RCC_ClockConfig+0x240>)
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ff6:	4b04      	ldr	r3, [pc, #16]	@ (8003008 <HAL_RCC_ClockConfig+0x240>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 030f 	and.w	r3, r3, #15
 8002ffe:	683a      	ldr	r2, [r7, #0]
 8003000:	429a      	cmp	r2, r3
 8003002:	d005      	beq.n	8003010 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e086      	b.n	8003116 <HAL_RCC_ClockConfig+0x34e>
 8003008:	52002000 	.word	0x52002000
 800300c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 0304 	and.w	r3, r3, #4
 8003018:	2b00      	cmp	r3, #0
 800301a:	d010      	beq.n	800303e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	691a      	ldr	r2, [r3, #16]
 8003020:	4b3f      	ldr	r3, [pc, #252]	@ (8003120 <HAL_RCC_ClockConfig+0x358>)
 8003022:	699b      	ldr	r3, [r3, #24]
 8003024:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003028:	429a      	cmp	r2, r3
 800302a:	d208      	bcs.n	800303e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800302c:	4b3c      	ldr	r3, [pc, #240]	@ (8003120 <HAL_RCC_ClockConfig+0x358>)
 800302e:	699b      	ldr	r3, [r3, #24]
 8003030:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	691b      	ldr	r3, [r3, #16]
 8003038:	4939      	ldr	r1, [pc, #228]	@ (8003120 <HAL_RCC_ClockConfig+0x358>)
 800303a:	4313      	orrs	r3, r2
 800303c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 0308 	and.w	r3, r3, #8
 8003046:	2b00      	cmp	r3, #0
 8003048:	d010      	beq.n	800306c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	695a      	ldr	r2, [r3, #20]
 800304e:	4b34      	ldr	r3, [pc, #208]	@ (8003120 <HAL_RCC_ClockConfig+0x358>)
 8003050:	69db      	ldr	r3, [r3, #28]
 8003052:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003056:	429a      	cmp	r2, r3
 8003058:	d208      	bcs.n	800306c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800305a:	4b31      	ldr	r3, [pc, #196]	@ (8003120 <HAL_RCC_ClockConfig+0x358>)
 800305c:	69db      	ldr	r3, [r3, #28]
 800305e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	695b      	ldr	r3, [r3, #20]
 8003066:	492e      	ldr	r1, [pc, #184]	@ (8003120 <HAL_RCC_ClockConfig+0x358>)
 8003068:	4313      	orrs	r3, r2
 800306a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 0310 	and.w	r3, r3, #16
 8003074:	2b00      	cmp	r3, #0
 8003076:	d010      	beq.n	800309a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	699a      	ldr	r2, [r3, #24]
 800307c:	4b28      	ldr	r3, [pc, #160]	@ (8003120 <HAL_RCC_ClockConfig+0x358>)
 800307e:	69db      	ldr	r3, [r3, #28]
 8003080:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003084:	429a      	cmp	r2, r3
 8003086:	d208      	bcs.n	800309a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003088:	4b25      	ldr	r3, [pc, #148]	@ (8003120 <HAL_RCC_ClockConfig+0x358>)
 800308a:	69db      	ldr	r3, [r3, #28]
 800308c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	699b      	ldr	r3, [r3, #24]
 8003094:	4922      	ldr	r1, [pc, #136]	@ (8003120 <HAL_RCC_ClockConfig+0x358>)
 8003096:	4313      	orrs	r3, r2
 8003098:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0320 	and.w	r3, r3, #32
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d010      	beq.n	80030c8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	69da      	ldr	r2, [r3, #28]
 80030aa:	4b1d      	ldr	r3, [pc, #116]	@ (8003120 <HAL_RCC_ClockConfig+0x358>)
 80030ac:	6a1b      	ldr	r3, [r3, #32]
 80030ae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d208      	bcs.n	80030c8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80030b6:	4b1a      	ldr	r3, [pc, #104]	@ (8003120 <HAL_RCC_ClockConfig+0x358>)
 80030b8:	6a1b      	ldr	r3, [r3, #32]
 80030ba:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	69db      	ldr	r3, [r3, #28]
 80030c2:	4917      	ldr	r1, [pc, #92]	@ (8003120 <HAL_RCC_ClockConfig+0x358>)
 80030c4:	4313      	orrs	r3, r2
 80030c6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80030c8:	f000 f834 	bl	8003134 <HAL_RCC_GetSysClockFreq>
 80030cc:	4602      	mov	r2, r0
 80030ce:	4b14      	ldr	r3, [pc, #80]	@ (8003120 <HAL_RCC_ClockConfig+0x358>)
 80030d0:	699b      	ldr	r3, [r3, #24]
 80030d2:	0a1b      	lsrs	r3, r3, #8
 80030d4:	f003 030f 	and.w	r3, r3, #15
 80030d8:	4912      	ldr	r1, [pc, #72]	@ (8003124 <HAL_RCC_ClockConfig+0x35c>)
 80030da:	5ccb      	ldrb	r3, [r1, r3]
 80030dc:	f003 031f 	and.w	r3, r3, #31
 80030e0:	fa22 f303 	lsr.w	r3, r2, r3
 80030e4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80030e6:	4b0e      	ldr	r3, [pc, #56]	@ (8003120 <HAL_RCC_ClockConfig+0x358>)
 80030e8:	699b      	ldr	r3, [r3, #24]
 80030ea:	f003 030f 	and.w	r3, r3, #15
 80030ee:	4a0d      	ldr	r2, [pc, #52]	@ (8003124 <HAL_RCC_ClockConfig+0x35c>)
 80030f0:	5cd3      	ldrb	r3, [r2, r3]
 80030f2:	f003 031f 	and.w	r3, r3, #31
 80030f6:	693a      	ldr	r2, [r7, #16]
 80030f8:	fa22 f303 	lsr.w	r3, r2, r3
 80030fc:	4a0a      	ldr	r2, [pc, #40]	@ (8003128 <HAL_RCC_ClockConfig+0x360>)
 80030fe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003100:	4a0a      	ldr	r2, [pc, #40]	@ (800312c <HAL_RCC_ClockConfig+0x364>)
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003106:	4b0a      	ldr	r3, [pc, #40]	@ (8003130 <HAL_RCC_ClockConfig+0x368>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4618      	mov	r0, r3
 800310c:	f7fe f852 	bl	80011b4 <HAL_InitTick>
 8003110:	4603      	mov	r3, r0
 8003112:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003114:	7bfb      	ldrb	r3, [r7, #15]
}
 8003116:	4618      	mov	r0, r3
 8003118:	3718      	adds	r7, #24
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	58024400 	.word	0x58024400
 8003124:	0800730c 	.word	0x0800730c
 8003128:	24000004 	.word	0x24000004
 800312c:	24000000 	.word	0x24000000
 8003130:	24000008 	.word	0x24000008

08003134 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003134:	b480      	push	{r7}
 8003136:	b089      	sub	sp, #36	@ 0x24
 8003138:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800313a:	4bb3      	ldr	r3, [pc, #716]	@ (8003408 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800313c:	691b      	ldr	r3, [r3, #16]
 800313e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003142:	2b18      	cmp	r3, #24
 8003144:	f200 8155 	bhi.w	80033f2 <HAL_RCC_GetSysClockFreq+0x2be>
 8003148:	a201      	add	r2, pc, #4	@ (adr r2, 8003150 <HAL_RCC_GetSysClockFreq+0x1c>)
 800314a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800314e:	bf00      	nop
 8003150:	080031b5 	.word	0x080031b5
 8003154:	080033f3 	.word	0x080033f3
 8003158:	080033f3 	.word	0x080033f3
 800315c:	080033f3 	.word	0x080033f3
 8003160:	080033f3 	.word	0x080033f3
 8003164:	080033f3 	.word	0x080033f3
 8003168:	080033f3 	.word	0x080033f3
 800316c:	080033f3 	.word	0x080033f3
 8003170:	080031db 	.word	0x080031db
 8003174:	080033f3 	.word	0x080033f3
 8003178:	080033f3 	.word	0x080033f3
 800317c:	080033f3 	.word	0x080033f3
 8003180:	080033f3 	.word	0x080033f3
 8003184:	080033f3 	.word	0x080033f3
 8003188:	080033f3 	.word	0x080033f3
 800318c:	080033f3 	.word	0x080033f3
 8003190:	080031e1 	.word	0x080031e1
 8003194:	080033f3 	.word	0x080033f3
 8003198:	080033f3 	.word	0x080033f3
 800319c:	080033f3 	.word	0x080033f3
 80031a0:	080033f3 	.word	0x080033f3
 80031a4:	080033f3 	.word	0x080033f3
 80031a8:	080033f3 	.word	0x080033f3
 80031ac:	080033f3 	.word	0x080033f3
 80031b0:	080031e7 	.word	0x080031e7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80031b4:	4b94      	ldr	r3, [pc, #592]	@ (8003408 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 0320 	and.w	r3, r3, #32
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d009      	beq.n	80031d4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80031c0:	4b91      	ldr	r3, [pc, #580]	@ (8003408 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	08db      	lsrs	r3, r3, #3
 80031c6:	f003 0303 	and.w	r3, r3, #3
 80031ca:	4a90      	ldr	r2, [pc, #576]	@ (800340c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80031cc:	fa22 f303 	lsr.w	r3, r2, r3
 80031d0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80031d2:	e111      	b.n	80033f8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80031d4:	4b8d      	ldr	r3, [pc, #564]	@ (800340c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80031d6:	61bb      	str	r3, [r7, #24]
      break;
 80031d8:	e10e      	b.n	80033f8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80031da:	4b8d      	ldr	r3, [pc, #564]	@ (8003410 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80031dc:	61bb      	str	r3, [r7, #24]
      break;
 80031de:	e10b      	b.n	80033f8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80031e0:	4b8c      	ldr	r3, [pc, #560]	@ (8003414 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80031e2:	61bb      	str	r3, [r7, #24]
      break;
 80031e4:	e108      	b.n	80033f8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80031e6:	4b88      	ldr	r3, [pc, #544]	@ (8003408 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031ea:	f003 0303 	and.w	r3, r3, #3
 80031ee:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80031f0:	4b85      	ldr	r3, [pc, #532]	@ (8003408 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031f4:	091b      	lsrs	r3, r3, #4
 80031f6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80031fa:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80031fc:	4b82      	ldr	r3, [pc, #520]	@ (8003408 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003200:	f003 0301 	and.w	r3, r3, #1
 8003204:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003206:	4b80      	ldr	r3, [pc, #512]	@ (8003408 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003208:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800320a:	08db      	lsrs	r3, r3, #3
 800320c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003210:	68fa      	ldr	r2, [r7, #12]
 8003212:	fb02 f303 	mul.w	r3, r2, r3
 8003216:	ee07 3a90 	vmov	s15, r3
 800321a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800321e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	2b00      	cmp	r3, #0
 8003226:	f000 80e1 	beq.w	80033ec <HAL_RCC_GetSysClockFreq+0x2b8>
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	2b02      	cmp	r3, #2
 800322e:	f000 8083 	beq.w	8003338 <HAL_RCC_GetSysClockFreq+0x204>
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	2b02      	cmp	r3, #2
 8003236:	f200 80a1 	bhi.w	800337c <HAL_RCC_GetSysClockFreq+0x248>
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d003      	beq.n	8003248 <HAL_RCC_GetSysClockFreq+0x114>
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	2b01      	cmp	r3, #1
 8003244:	d056      	beq.n	80032f4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003246:	e099      	b.n	800337c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003248:	4b6f      	ldr	r3, [pc, #444]	@ (8003408 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 0320 	and.w	r3, r3, #32
 8003250:	2b00      	cmp	r3, #0
 8003252:	d02d      	beq.n	80032b0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003254:	4b6c      	ldr	r3, [pc, #432]	@ (8003408 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	08db      	lsrs	r3, r3, #3
 800325a:	f003 0303 	and.w	r3, r3, #3
 800325e:	4a6b      	ldr	r2, [pc, #428]	@ (800340c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003260:	fa22 f303 	lsr.w	r3, r2, r3
 8003264:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	ee07 3a90 	vmov	s15, r3
 800326c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	ee07 3a90 	vmov	s15, r3
 8003276:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800327a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800327e:	4b62      	ldr	r3, [pc, #392]	@ (8003408 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003282:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003286:	ee07 3a90 	vmov	s15, r3
 800328a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800328e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003292:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003418 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003296:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800329a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800329e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80032a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032aa:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80032ae:	e087      	b.n	80033c0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	ee07 3a90 	vmov	s15, r3
 80032b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032ba:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800341c <HAL_RCC_GetSysClockFreq+0x2e8>
 80032be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032c2:	4b51      	ldr	r3, [pc, #324]	@ (8003408 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032ca:	ee07 3a90 	vmov	s15, r3
 80032ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80032d6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003418 <HAL_RCC_GetSysClockFreq+0x2e4>
 80032da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80032de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80032e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032ee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80032f2:	e065      	b.n	80033c0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	ee07 3a90 	vmov	s15, r3
 80032fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032fe:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003420 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003302:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003306:	4b40      	ldr	r3, [pc, #256]	@ (8003408 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800330a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800330e:	ee07 3a90 	vmov	s15, r3
 8003312:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003316:	ed97 6a02 	vldr	s12, [r7, #8]
 800331a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003418 <HAL_RCC_GetSysClockFreq+0x2e4>
 800331e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003322:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003326:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800332a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800332e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003332:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003336:	e043      	b.n	80033c0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	ee07 3a90 	vmov	s15, r3
 800333e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003342:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003424 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003346:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800334a:	4b2f      	ldr	r3, [pc, #188]	@ (8003408 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800334c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800334e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003352:	ee07 3a90 	vmov	s15, r3
 8003356:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800335a:	ed97 6a02 	vldr	s12, [r7, #8]
 800335e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003418 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003362:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003366:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800336a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800336e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003372:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003376:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800337a:	e021      	b.n	80033c0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	ee07 3a90 	vmov	s15, r3
 8003382:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003386:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003420 <HAL_RCC_GetSysClockFreq+0x2ec>
 800338a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800338e:	4b1e      	ldr	r3, [pc, #120]	@ (8003408 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003392:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003396:	ee07 3a90 	vmov	s15, r3
 800339a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800339e:	ed97 6a02 	vldr	s12, [r7, #8]
 80033a2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003418 <HAL_RCC_GetSysClockFreq+0x2e4>
 80033a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80033b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033ba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80033be:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80033c0:	4b11      	ldr	r3, [pc, #68]	@ (8003408 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033c4:	0a5b      	lsrs	r3, r3, #9
 80033c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80033ca:	3301      	adds	r3, #1
 80033cc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	ee07 3a90 	vmov	s15, r3
 80033d4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80033d8:	edd7 6a07 	vldr	s13, [r7, #28]
 80033dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80033e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80033e4:	ee17 3a90 	vmov	r3, s15
 80033e8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80033ea:	e005      	b.n	80033f8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80033ec:	2300      	movs	r3, #0
 80033ee:	61bb      	str	r3, [r7, #24]
      break;
 80033f0:	e002      	b.n	80033f8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80033f2:	4b07      	ldr	r3, [pc, #28]	@ (8003410 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80033f4:	61bb      	str	r3, [r7, #24]
      break;
 80033f6:	bf00      	nop
  }

  return sysclockfreq;
 80033f8:	69bb      	ldr	r3, [r7, #24]
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3724      	adds	r7, #36	@ 0x24
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr
 8003406:	bf00      	nop
 8003408:	58024400 	.word	0x58024400
 800340c:	03d09000 	.word	0x03d09000
 8003410:	003d0900 	.word	0x003d0900
 8003414:	007a1200 	.word	0x007a1200
 8003418:	46000000 	.word	0x46000000
 800341c:	4c742400 	.word	0x4c742400
 8003420:	4a742400 	.word	0x4a742400
 8003424:	4af42400 	.word	0x4af42400

08003428 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b082      	sub	sp, #8
 800342c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800342e:	f7ff fe81 	bl	8003134 <HAL_RCC_GetSysClockFreq>
 8003432:	4602      	mov	r2, r0
 8003434:	4b10      	ldr	r3, [pc, #64]	@ (8003478 <HAL_RCC_GetHCLKFreq+0x50>)
 8003436:	699b      	ldr	r3, [r3, #24]
 8003438:	0a1b      	lsrs	r3, r3, #8
 800343a:	f003 030f 	and.w	r3, r3, #15
 800343e:	490f      	ldr	r1, [pc, #60]	@ (800347c <HAL_RCC_GetHCLKFreq+0x54>)
 8003440:	5ccb      	ldrb	r3, [r1, r3]
 8003442:	f003 031f 	and.w	r3, r3, #31
 8003446:	fa22 f303 	lsr.w	r3, r2, r3
 800344a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800344c:	4b0a      	ldr	r3, [pc, #40]	@ (8003478 <HAL_RCC_GetHCLKFreq+0x50>)
 800344e:	699b      	ldr	r3, [r3, #24]
 8003450:	f003 030f 	and.w	r3, r3, #15
 8003454:	4a09      	ldr	r2, [pc, #36]	@ (800347c <HAL_RCC_GetHCLKFreq+0x54>)
 8003456:	5cd3      	ldrb	r3, [r2, r3]
 8003458:	f003 031f 	and.w	r3, r3, #31
 800345c:	687a      	ldr	r2, [r7, #4]
 800345e:	fa22 f303 	lsr.w	r3, r2, r3
 8003462:	4a07      	ldr	r2, [pc, #28]	@ (8003480 <HAL_RCC_GetHCLKFreq+0x58>)
 8003464:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003466:	4a07      	ldr	r2, [pc, #28]	@ (8003484 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800346c:	4b04      	ldr	r3, [pc, #16]	@ (8003480 <HAL_RCC_GetHCLKFreq+0x58>)
 800346e:	681b      	ldr	r3, [r3, #0]
}
 8003470:	4618      	mov	r0, r3
 8003472:	3708      	adds	r7, #8
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}
 8003478:	58024400 	.word	0x58024400
 800347c:	0800730c 	.word	0x0800730c
 8003480:	24000004 	.word	0x24000004
 8003484:	24000000 	.word	0x24000000

08003488 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800348c:	f7ff ffcc 	bl	8003428 <HAL_RCC_GetHCLKFreq>
 8003490:	4602      	mov	r2, r0
 8003492:	4b06      	ldr	r3, [pc, #24]	@ (80034ac <HAL_RCC_GetPCLK1Freq+0x24>)
 8003494:	69db      	ldr	r3, [r3, #28]
 8003496:	091b      	lsrs	r3, r3, #4
 8003498:	f003 0307 	and.w	r3, r3, #7
 800349c:	4904      	ldr	r1, [pc, #16]	@ (80034b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800349e:	5ccb      	ldrb	r3, [r1, r3]
 80034a0:	f003 031f 	and.w	r3, r3, #31
 80034a4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	bd80      	pop	{r7, pc}
 80034ac:	58024400 	.word	0x58024400
 80034b0:	0800730c 	.word	0x0800730c

080034b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80034b8:	f7ff ffb6 	bl	8003428 <HAL_RCC_GetHCLKFreq>
 80034bc:	4602      	mov	r2, r0
 80034be:	4b06      	ldr	r3, [pc, #24]	@ (80034d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034c0:	69db      	ldr	r3, [r3, #28]
 80034c2:	0a1b      	lsrs	r3, r3, #8
 80034c4:	f003 0307 	and.w	r3, r3, #7
 80034c8:	4904      	ldr	r1, [pc, #16]	@ (80034dc <HAL_RCC_GetPCLK2Freq+0x28>)
 80034ca:	5ccb      	ldrb	r3, [r1, r3]
 80034cc:	f003 031f 	and.w	r3, r3, #31
 80034d0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	bd80      	pop	{r7, pc}
 80034d8:	58024400 	.word	0x58024400
 80034dc:	0800730c 	.word	0x0800730c

080034e0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034e4:	b0ca      	sub	sp, #296	@ 0x128
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80034ec:	2300      	movs	r3, #0
 80034ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80034f2:	2300      	movs	r3, #0
 80034f4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80034f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003500:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003504:	2500      	movs	r5, #0
 8003506:	ea54 0305 	orrs.w	r3, r4, r5
 800350a:	d049      	beq.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800350c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003510:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003512:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003516:	d02f      	beq.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003518:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800351c:	d828      	bhi.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800351e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003522:	d01a      	beq.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003524:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003528:	d822      	bhi.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800352a:	2b00      	cmp	r3, #0
 800352c:	d003      	beq.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800352e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003532:	d007      	beq.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003534:	e01c      	b.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003536:	4bb8      	ldr	r3, [pc, #736]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003538:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800353a:	4ab7      	ldr	r2, [pc, #732]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800353c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003540:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003542:	e01a      	b.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003544:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003548:	3308      	adds	r3, #8
 800354a:	2102      	movs	r1, #2
 800354c:	4618      	mov	r0, r3
 800354e:	f001 fc8f 	bl	8004e70 <RCCEx_PLL2_Config>
 8003552:	4603      	mov	r3, r0
 8003554:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003558:	e00f      	b.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800355a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800355e:	3328      	adds	r3, #40	@ 0x28
 8003560:	2102      	movs	r1, #2
 8003562:	4618      	mov	r0, r3
 8003564:	f001 fd36 	bl	8004fd4 <RCCEx_PLL3_Config>
 8003568:	4603      	mov	r3, r0
 800356a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800356e:	e004      	b.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003576:	e000      	b.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003578:	bf00      	nop
    }

    if (ret == HAL_OK)
 800357a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800357e:	2b00      	cmp	r3, #0
 8003580:	d10a      	bne.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003582:	4ba5      	ldr	r3, [pc, #660]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003584:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003586:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800358a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800358e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003590:	4aa1      	ldr	r2, [pc, #644]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003592:	430b      	orrs	r3, r1
 8003594:	6513      	str	r3, [r2, #80]	@ 0x50
 8003596:	e003      	b.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003598:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800359c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80035a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035a8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80035ac:	f04f 0900 	mov.w	r9, #0
 80035b0:	ea58 0309 	orrs.w	r3, r8, r9
 80035b4:	d047      	beq.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80035b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035bc:	2b04      	cmp	r3, #4
 80035be:	d82a      	bhi.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80035c0:	a201      	add	r2, pc, #4	@ (adr r2, 80035c8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80035c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035c6:	bf00      	nop
 80035c8:	080035dd 	.word	0x080035dd
 80035cc:	080035eb 	.word	0x080035eb
 80035d0:	08003601 	.word	0x08003601
 80035d4:	0800361f 	.word	0x0800361f
 80035d8:	0800361f 	.word	0x0800361f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035dc:	4b8e      	ldr	r3, [pc, #568]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035e0:	4a8d      	ldr	r2, [pc, #564]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80035e8:	e01a      	b.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80035ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035ee:	3308      	adds	r3, #8
 80035f0:	2100      	movs	r1, #0
 80035f2:	4618      	mov	r0, r3
 80035f4:	f001 fc3c 	bl	8004e70 <RCCEx_PLL2_Config>
 80035f8:	4603      	mov	r3, r0
 80035fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80035fe:	e00f      	b.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003600:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003604:	3328      	adds	r3, #40	@ 0x28
 8003606:	2100      	movs	r1, #0
 8003608:	4618      	mov	r0, r3
 800360a:	f001 fce3 	bl	8004fd4 <RCCEx_PLL3_Config>
 800360e:	4603      	mov	r3, r0
 8003610:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003614:	e004      	b.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800361c:	e000      	b.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800361e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003620:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003624:	2b00      	cmp	r3, #0
 8003626:	d10a      	bne.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003628:	4b7b      	ldr	r3, [pc, #492]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800362a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800362c:	f023 0107 	bic.w	r1, r3, #7
 8003630:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003634:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003636:	4a78      	ldr	r2, [pc, #480]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003638:	430b      	orrs	r3, r1
 800363a:	6513      	str	r3, [r2, #80]	@ 0x50
 800363c:	e003      	b.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800363e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003642:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003646:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800364a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800364e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8003652:	f04f 0b00 	mov.w	fp, #0
 8003656:	ea5a 030b 	orrs.w	r3, sl, fp
 800365a:	d04c      	beq.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800365c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003660:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003662:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003666:	d030      	beq.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003668:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800366c:	d829      	bhi.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800366e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003670:	d02d      	beq.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003672:	2bc0      	cmp	r3, #192	@ 0xc0
 8003674:	d825      	bhi.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003676:	2b80      	cmp	r3, #128	@ 0x80
 8003678:	d018      	beq.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800367a:	2b80      	cmp	r3, #128	@ 0x80
 800367c:	d821      	bhi.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800367e:	2b00      	cmp	r3, #0
 8003680:	d002      	beq.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8003682:	2b40      	cmp	r3, #64	@ 0x40
 8003684:	d007      	beq.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8003686:	e01c      	b.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003688:	4b63      	ldr	r3, [pc, #396]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800368a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800368c:	4a62      	ldr	r2, [pc, #392]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800368e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003692:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003694:	e01c      	b.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003696:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800369a:	3308      	adds	r3, #8
 800369c:	2100      	movs	r1, #0
 800369e:	4618      	mov	r0, r3
 80036a0:	f001 fbe6 	bl	8004e70 <RCCEx_PLL2_Config>
 80036a4:	4603      	mov	r3, r0
 80036a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80036aa:	e011      	b.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80036ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036b0:	3328      	adds	r3, #40	@ 0x28
 80036b2:	2100      	movs	r1, #0
 80036b4:	4618      	mov	r0, r3
 80036b6:	f001 fc8d 	bl	8004fd4 <RCCEx_PLL3_Config>
 80036ba:	4603      	mov	r3, r0
 80036bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80036c0:	e006      	b.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80036c8:	e002      	b.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80036ca:	bf00      	nop
 80036cc:	e000      	b.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80036ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d10a      	bne.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80036d8:	4b4f      	ldr	r3, [pc, #316]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036dc:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80036e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036e6:	4a4c      	ldr	r2, [pc, #304]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036e8:	430b      	orrs	r3, r1
 80036ea:	6513      	str	r3, [r2, #80]	@ 0x50
 80036ec:	e003      	b.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80036f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036fe:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8003702:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8003706:	2300      	movs	r3, #0
 8003708:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800370c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8003710:	460b      	mov	r3, r1
 8003712:	4313      	orrs	r3, r2
 8003714:	d053      	beq.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003716:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800371a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800371e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003722:	d035      	beq.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003724:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003728:	d82e      	bhi.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800372a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800372e:	d031      	beq.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003730:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003734:	d828      	bhi.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003736:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800373a:	d01a      	beq.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800373c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003740:	d822      	bhi.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003742:	2b00      	cmp	r3, #0
 8003744:	d003      	beq.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003746:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800374a:	d007      	beq.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800374c:	e01c      	b.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800374e:	4b32      	ldr	r3, [pc, #200]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003750:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003752:	4a31      	ldr	r2, [pc, #196]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003754:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003758:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800375a:	e01c      	b.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800375c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003760:	3308      	adds	r3, #8
 8003762:	2100      	movs	r1, #0
 8003764:	4618      	mov	r0, r3
 8003766:	f001 fb83 	bl	8004e70 <RCCEx_PLL2_Config>
 800376a:	4603      	mov	r3, r0
 800376c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003770:	e011      	b.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003772:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003776:	3328      	adds	r3, #40	@ 0x28
 8003778:	2100      	movs	r1, #0
 800377a:	4618      	mov	r0, r3
 800377c:	f001 fc2a 	bl	8004fd4 <RCCEx_PLL3_Config>
 8003780:	4603      	mov	r3, r0
 8003782:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003786:	e006      	b.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800378e:	e002      	b.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003790:	bf00      	nop
 8003792:	e000      	b.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003794:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003796:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800379a:	2b00      	cmp	r3, #0
 800379c:	d10b      	bne.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800379e:	4b1e      	ldr	r3, [pc, #120]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037a2:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80037a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037aa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80037ae:	4a1a      	ldr	r2, [pc, #104]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037b0:	430b      	orrs	r3, r1
 80037b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80037b4:	e003      	b.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80037be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037c6:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80037ca:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80037ce:	2300      	movs	r3, #0
 80037d0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80037d4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80037d8:	460b      	mov	r3, r1
 80037da:	4313      	orrs	r3, r2
 80037dc:	d056      	beq.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80037de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037e2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80037e6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80037ea:	d038      	beq.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80037ec:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80037f0:	d831      	bhi.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80037f2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80037f6:	d034      	beq.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80037f8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80037fc:	d82b      	bhi.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80037fe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003802:	d01d      	beq.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003804:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003808:	d825      	bhi.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800380a:	2b00      	cmp	r3, #0
 800380c:	d006      	beq.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800380e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003812:	d00a      	beq.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003814:	e01f      	b.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003816:	bf00      	nop
 8003818:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800381c:	4ba2      	ldr	r3, [pc, #648]	@ (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800381e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003820:	4aa1      	ldr	r2, [pc, #644]	@ (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003822:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003826:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003828:	e01c      	b.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800382a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800382e:	3308      	adds	r3, #8
 8003830:	2100      	movs	r1, #0
 8003832:	4618      	mov	r0, r3
 8003834:	f001 fb1c 	bl	8004e70 <RCCEx_PLL2_Config>
 8003838:	4603      	mov	r3, r0
 800383a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800383e:	e011      	b.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003840:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003844:	3328      	adds	r3, #40	@ 0x28
 8003846:	2100      	movs	r1, #0
 8003848:	4618      	mov	r0, r3
 800384a:	f001 fbc3 	bl	8004fd4 <RCCEx_PLL3_Config>
 800384e:	4603      	mov	r3, r0
 8003850:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003854:	e006      	b.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800385c:	e002      	b.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800385e:	bf00      	nop
 8003860:	e000      	b.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003862:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003864:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003868:	2b00      	cmp	r3, #0
 800386a:	d10b      	bne.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800386c:	4b8e      	ldr	r3, [pc, #568]	@ (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800386e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003870:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003874:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003878:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800387c:	4a8a      	ldr	r2, [pc, #552]	@ (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800387e:	430b      	orrs	r3, r1
 8003880:	6593      	str	r3, [r2, #88]	@ 0x58
 8003882:	e003      	b.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003884:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003888:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800388c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003894:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003898:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800389c:	2300      	movs	r3, #0
 800389e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80038a2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80038a6:	460b      	mov	r3, r1
 80038a8:	4313      	orrs	r3, r2
 80038aa:	d03a      	beq.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80038ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038b2:	2b30      	cmp	r3, #48	@ 0x30
 80038b4:	d01f      	beq.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80038b6:	2b30      	cmp	r3, #48	@ 0x30
 80038b8:	d819      	bhi.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80038ba:	2b20      	cmp	r3, #32
 80038bc:	d00c      	beq.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80038be:	2b20      	cmp	r3, #32
 80038c0:	d815      	bhi.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d019      	beq.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80038c6:	2b10      	cmp	r3, #16
 80038c8:	d111      	bne.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038ca:	4b77      	ldr	r3, [pc, #476]	@ (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80038cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038ce:	4a76      	ldr	r2, [pc, #472]	@ (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80038d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80038d6:	e011      	b.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80038d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038dc:	3308      	adds	r3, #8
 80038de:	2102      	movs	r1, #2
 80038e0:	4618      	mov	r0, r3
 80038e2:	f001 fac5 	bl	8004e70 <RCCEx_PLL2_Config>
 80038e6:	4603      	mov	r3, r0
 80038e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80038ec:	e006      	b.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80038f4:	e002      	b.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80038f6:	bf00      	nop
 80038f8:	e000      	b.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80038fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003900:	2b00      	cmp	r3, #0
 8003902:	d10a      	bne.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003904:	4b68      	ldr	r3, [pc, #416]	@ (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003906:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003908:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800390c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003910:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003912:	4a65      	ldr	r2, [pc, #404]	@ (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003914:	430b      	orrs	r3, r1
 8003916:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003918:	e003      	b.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800391a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800391e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003922:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800392a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800392e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003932:	2300      	movs	r3, #0
 8003934:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003938:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800393c:	460b      	mov	r3, r1
 800393e:	4313      	orrs	r3, r2
 8003940:	d051      	beq.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003942:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003946:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003948:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800394c:	d035      	beq.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800394e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003952:	d82e      	bhi.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003954:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003958:	d031      	beq.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800395a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800395e:	d828      	bhi.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003960:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003964:	d01a      	beq.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003966:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800396a:	d822      	bhi.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800396c:	2b00      	cmp	r3, #0
 800396e:	d003      	beq.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003970:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003974:	d007      	beq.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003976:	e01c      	b.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003978:	4b4b      	ldr	r3, [pc, #300]	@ (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800397a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800397c:	4a4a      	ldr	r2, [pc, #296]	@ (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800397e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003982:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003984:	e01c      	b.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003986:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800398a:	3308      	adds	r3, #8
 800398c:	2100      	movs	r1, #0
 800398e:	4618      	mov	r0, r3
 8003990:	f001 fa6e 	bl	8004e70 <RCCEx_PLL2_Config>
 8003994:	4603      	mov	r3, r0
 8003996:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800399a:	e011      	b.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800399c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039a0:	3328      	adds	r3, #40	@ 0x28
 80039a2:	2100      	movs	r1, #0
 80039a4:	4618      	mov	r0, r3
 80039a6:	f001 fb15 	bl	8004fd4 <RCCEx_PLL3_Config>
 80039aa:	4603      	mov	r3, r0
 80039ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80039b0:	e006      	b.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80039b8:	e002      	b.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80039ba:	bf00      	nop
 80039bc:	e000      	b.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80039be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d10a      	bne.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80039c8:	4b37      	ldr	r3, [pc, #220]	@ (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039cc:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80039d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039d6:	4a34      	ldr	r2, [pc, #208]	@ (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039d8:	430b      	orrs	r3, r1
 80039da:	6513      	str	r3, [r2, #80]	@ 0x50
 80039dc:	e003      	b.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80039e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039ee:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80039f2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80039f6:	2300      	movs	r3, #0
 80039f8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80039fc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003a00:	460b      	mov	r3, r1
 8003a02:	4313      	orrs	r3, r2
 8003a04:	d056      	beq.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003a06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003a0c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a10:	d033      	beq.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003a12:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a16:	d82c      	bhi.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003a18:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003a1c:	d02f      	beq.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003a1e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003a22:	d826      	bhi.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003a24:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003a28:	d02b      	beq.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003a2a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003a2e:	d820      	bhi.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003a30:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003a34:	d012      	beq.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003a36:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003a3a:	d81a      	bhi.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d022      	beq.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003a40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a44:	d115      	bne.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003a46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a4a:	3308      	adds	r3, #8
 8003a4c:	2101      	movs	r1, #1
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f001 fa0e 	bl	8004e70 <RCCEx_PLL2_Config>
 8003a54:	4603      	mov	r3, r0
 8003a56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003a5a:	e015      	b.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003a5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a60:	3328      	adds	r3, #40	@ 0x28
 8003a62:	2101      	movs	r1, #1
 8003a64:	4618      	mov	r0, r3
 8003a66:	f001 fab5 	bl	8004fd4 <RCCEx_PLL3_Config>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003a70:	e00a      	b.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a78:	e006      	b.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003a7a:	bf00      	nop
 8003a7c:	e004      	b.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003a7e:	bf00      	nop
 8003a80:	e002      	b.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003a82:	bf00      	nop
 8003a84:	e000      	b.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003a86:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a88:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d10d      	bne.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003a90:	4b05      	ldr	r3, [pc, #20]	@ (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a94:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003a98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a9c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003a9e:	4a02      	ldr	r2, [pc, #8]	@ (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003aa0:	430b      	orrs	r3, r1
 8003aa2:	6513      	str	r3, [r2, #80]	@ 0x50
 8003aa4:	e006      	b.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003aa6:	bf00      	nop
 8003aa8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ab0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003ab4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003abc:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003ac0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003aca:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003ace:	460b      	mov	r3, r1
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	d055      	beq.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003ad4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ad8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003adc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003ae0:	d033      	beq.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003ae2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003ae6:	d82c      	bhi.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003ae8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003aec:	d02f      	beq.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003aee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003af2:	d826      	bhi.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003af4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003af8:	d02b      	beq.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003afa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003afe:	d820      	bhi.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003b00:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b04:	d012      	beq.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003b06:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b0a:	d81a      	bhi.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d022      	beq.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003b10:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003b14:	d115      	bne.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003b16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b1a:	3308      	adds	r3, #8
 8003b1c:	2101      	movs	r1, #1
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f001 f9a6 	bl	8004e70 <RCCEx_PLL2_Config>
 8003b24:	4603      	mov	r3, r0
 8003b26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003b2a:	e015      	b.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003b2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b30:	3328      	adds	r3, #40	@ 0x28
 8003b32:	2101      	movs	r1, #1
 8003b34:	4618      	mov	r0, r3
 8003b36:	f001 fa4d 	bl	8004fd4 <RCCEx_PLL3_Config>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003b40:	e00a      	b.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003b48:	e006      	b.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003b4a:	bf00      	nop
 8003b4c:	e004      	b.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003b4e:	bf00      	nop
 8003b50:	e002      	b.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003b52:	bf00      	nop
 8003b54:	e000      	b.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003b56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b58:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d10b      	bne.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003b60:	4ba3      	ldr	r3, [pc, #652]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b64:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003b68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b6c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003b70:	4a9f      	ldr	r2, [pc, #636]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b72:	430b      	orrs	r3, r1
 8003b74:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b76:	e003      	b.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b78:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b7c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003b80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b88:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003b8c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003b90:	2300      	movs	r3, #0
 8003b92:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003b96:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003b9a:	460b      	mov	r3, r1
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	d037      	beq.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003ba0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ba4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ba6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003baa:	d00e      	beq.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003bac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003bb0:	d816      	bhi.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d018      	beq.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003bb6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003bba:	d111      	bne.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bbc:	4b8c      	ldr	r3, [pc, #560]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bc0:	4a8b      	ldr	r2, [pc, #556]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bc2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003bc6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003bc8:	e00f      	b.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003bca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bce:	3308      	adds	r3, #8
 8003bd0:	2101      	movs	r1, #1
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f001 f94c 	bl	8004e70 <RCCEx_PLL2_Config>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003bde:	e004      	b.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003be6:	e000      	b.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003be8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d10a      	bne.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003bf2:	4b7f      	ldr	r3, [pc, #508]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bf4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bf6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003bfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bfe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c00:	4a7b      	ldr	r2, [pc, #492]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c02:	430b      	orrs	r3, r1
 8003c04:	6513      	str	r3, [r2, #80]	@ 0x50
 8003c06:	e003      	b.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c0c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003c10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c18:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003c1c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003c20:	2300      	movs	r3, #0
 8003c22:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003c26:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003c2a:	460b      	mov	r3, r1
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	d039      	beq.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003c30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c36:	2b03      	cmp	r3, #3
 8003c38:	d81c      	bhi.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003c3a:	a201      	add	r2, pc, #4	@ (adr r2, 8003c40 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c40:	08003c7d 	.word	0x08003c7d
 8003c44:	08003c51 	.word	0x08003c51
 8003c48:	08003c5f 	.word	0x08003c5f
 8003c4c:	08003c7d 	.word	0x08003c7d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c50:	4b67      	ldr	r3, [pc, #412]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c54:	4a66      	ldr	r2, [pc, #408]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c5a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003c5c:	e00f      	b.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003c5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c62:	3308      	adds	r3, #8
 8003c64:	2102      	movs	r1, #2
 8003c66:	4618      	mov	r0, r3
 8003c68:	f001 f902 	bl	8004e70 <RCCEx_PLL2_Config>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003c72:	e004      	b.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003c7a:	e000      	b.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003c7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d10a      	bne.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003c86:	4b5a      	ldr	r3, [pc, #360]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c8a:	f023 0103 	bic.w	r1, r3, #3
 8003c8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c94:	4a56      	ldr	r2, [pc, #344]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c96:	430b      	orrs	r3, r1
 8003c98:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003c9a:	e003      	b.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c9c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ca0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ca4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cac:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003cb0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003cba:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003cbe:	460b      	mov	r3, r1
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	f000 809f 	beq.w	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003cc6:	4b4b      	ldr	r3, [pc, #300]	@ (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a4a      	ldr	r2, [pc, #296]	@ (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003ccc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003cd0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003cd2:	f7fd fab9 	bl	8001248 <HAL_GetTick>
 8003cd6:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003cda:	e00b      	b.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cdc:	f7fd fab4 	bl	8001248 <HAL_GetTick>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003ce6:	1ad3      	subs	r3, r2, r3
 8003ce8:	2b64      	cmp	r3, #100	@ 0x64
 8003cea:	d903      	bls.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003cec:	2303      	movs	r3, #3
 8003cee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003cf2:	e005      	b.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003cf4:	4b3f      	ldr	r3, [pc, #252]	@ (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d0ed      	beq.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003d00:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d179      	bne.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003d08:	4b39      	ldr	r3, [pc, #228]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d0a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003d0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d10:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003d14:	4053      	eors	r3, r2
 8003d16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d015      	beq.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d1e:	4b34      	ldr	r3, [pc, #208]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d22:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d26:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d2a:	4b31      	ldr	r3, [pc, #196]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d2e:	4a30      	ldr	r2, [pc, #192]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d34:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d36:	4b2e      	ldr	r3, [pc, #184]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d3a:	4a2d      	ldr	r2, [pc, #180]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d3c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d40:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003d42:	4a2b      	ldr	r2, [pc, #172]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d44:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003d48:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003d4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d4e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003d52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d56:	d118      	bne.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d58:	f7fd fa76 	bl	8001248 <HAL_GetTick>
 8003d5c:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003d60:	e00d      	b.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d62:	f7fd fa71 	bl	8001248 <HAL_GetTick>
 8003d66:	4602      	mov	r2, r0
 8003d68:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003d6c:	1ad2      	subs	r2, r2, r3
 8003d6e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d903      	bls.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003d76:	2303      	movs	r3, #3
 8003d78:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8003d7c:	e005      	b.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003d7e:	4b1c      	ldr	r3, [pc, #112]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d82:	f003 0302 	and.w	r3, r3, #2
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d0eb      	beq.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003d8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d129      	bne.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d96:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003d9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d9e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003da2:	d10e      	bne.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003da4:	4b12      	ldr	r3, [pc, #72]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003da6:	691b      	ldr	r3, [r3, #16]
 8003da8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003dac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003db0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003db4:	091a      	lsrs	r2, r3, #4
 8003db6:	4b10      	ldr	r3, [pc, #64]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003db8:	4013      	ands	r3, r2
 8003dba:	4a0d      	ldr	r2, [pc, #52]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003dbc:	430b      	orrs	r3, r1
 8003dbe:	6113      	str	r3, [r2, #16]
 8003dc0:	e005      	b.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003dc2:	4b0b      	ldr	r3, [pc, #44]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003dc4:	691b      	ldr	r3, [r3, #16]
 8003dc6:	4a0a      	ldr	r2, [pc, #40]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003dc8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003dcc:	6113      	str	r3, [r2, #16]
 8003dce:	4b08      	ldr	r3, [pc, #32]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003dd0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003dd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dd6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003dda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dde:	4a04      	ldr	r2, [pc, #16]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003de0:	430b      	orrs	r3, r1
 8003de2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003de4:	e00e      	b.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003de6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003dea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8003dee:	e009      	b.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003df0:	58024400 	.word	0x58024400
 8003df4:	58024800 	.word	0x58024800
 8003df8:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dfc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e00:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003e04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e0c:	f002 0301 	and.w	r3, r2, #1
 8003e10:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003e14:	2300      	movs	r3, #0
 8003e16:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003e1a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003e1e:	460b      	mov	r3, r1
 8003e20:	4313      	orrs	r3, r2
 8003e22:	f000 8089 	beq.w	8003f38 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003e26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e2a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003e2c:	2b28      	cmp	r3, #40	@ 0x28
 8003e2e:	d86b      	bhi.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003e30:	a201      	add	r2, pc, #4	@ (adr r2, 8003e38 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003e32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e36:	bf00      	nop
 8003e38:	08003f11 	.word	0x08003f11
 8003e3c:	08003f09 	.word	0x08003f09
 8003e40:	08003f09 	.word	0x08003f09
 8003e44:	08003f09 	.word	0x08003f09
 8003e48:	08003f09 	.word	0x08003f09
 8003e4c:	08003f09 	.word	0x08003f09
 8003e50:	08003f09 	.word	0x08003f09
 8003e54:	08003f09 	.word	0x08003f09
 8003e58:	08003edd 	.word	0x08003edd
 8003e5c:	08003f09 	.word	0x08003f09
 8003e60:	08003f09 	.word	0x08003f09
 8003e64:	08003f09 	.word	0x08003f09
 8003e68:	08003f09 	.word	0x08003f09
 8003e6c:	08003f09 	.word	0x08003f09
 8003e70:	08003f09 	.word	0x08003f09
 8003e74:	08003f09 	.word	0x08003f09
 8003e78:	08003ef3 	.word	0x08003ef3
 8003e7c:	08003f09 	.word	0x08003f09
 8003e80:	08003f09 	.word	0x08003f09
 8003e84:	08003f09 	.word	0x08003f09
 8003e88:	08003f09 	.word	0x08003f09
 8003e8c:	08003f09 	.word	0x08003f09
 8003e90:	08003f09 	.word	0x08003f09
 8003e94:	08003f09 	.word	0x08003f09
 8003e98:	08003f11 	.word	0x08003f11
 8003e9c:	08003f09 	.word	0x08003f09
 8003ea0:	08003f09 	.word	0x08003f09
 8003ea4:	08003f09 	.word	0x08003f09
 8003ea8:	08003f09 	.word	0x08003f09
 8003eac:	08003f09 	.word	0x08003f09
 8003eb0:	08003f09 	.word	0x08003f09
 8003eb4:	08003f09 	.word	0x08003f09
 8003eb8:	08003f11 	.word	0x08003f11
 8003ebc:	08003f09 	.word	0x08003f09
 8003ec0:	08003f09 	.word	0x08003f09
 8003ec4:	08003f09 	.word	0x08003f09
 8003ec8:	08003f09 	.word	0x08003f09
 8003ecc:	08003f09 	.word	0x08003f09
 8003ed0:	08003f09 	.word	0x08003f09
 8003ed4:	08003f09 	.word	0x08003f09
 8003ed8:	08003f11 	.word	0x08003f11
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003edc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ee0:	3308      	adds	r3, #8
 8003ee2:	2101      	movs	r1, #1
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f000 ffc3 	bl	8004e70 <RCCEx_PLL2_Config>
 8003eea:	4603      	mov	r3, r0
 8003eec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003ef0:	e00f      	b.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003ef2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ef6:	3328      	adds	r3, #40	@ 0x28
 8003ef8:	2101      	movs	r1, #1
 8003efa:	4618      	mov	r0, r3
 8003efc:	f001 f86a 	bl	8004fd4 <RCCEx_PLL3_Config>
 8003f00:	4603      	mov	r3, r0
 8003f02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003f06:	e004      	b.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003f0e:	e000      	b.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003f10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d10a      	bne.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003f1a:	4bbf      	ldr	r3, [pc, #764]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f1e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003f22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f26:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f28:	4abb      	ldr	r2, [pc, #748]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f2a:	430b      	orrs	r3, r1
 8003f2c:	6553      	str	r3, [r2, #84]	@ 0x54
 8003f2e:	e003      	b.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f34:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003f38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f40:	f002 0302 	and.w	r3, r2, #2
 8003f44:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003f48:	2300      	movs	r3, #0
 8003f4a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003f4e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003f52:	460b      	mov	r3, r1
 8003f54:	4313      	orrs	r3, r2
 8003f56:	d041      	beq.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003f58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f5c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003f5e:	2b05      	cmp	r3, #5
 8003f60:	d824      	bhi.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003f62:	a201      	add	r2, pc, #4	@ (adr r2, 8003f68 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f68:	08003fb5 	.word	0x08003fb5
 8003f6c:	08003f81 	.word	0x08003f81
 8003f70:	08003f97 	.word	0x08003f97
 8003f74:	08003fb5 	.word	0x08003fb5
 8003f78:	08003fb5 	.word	0x08003fb5
 8003f7c:	08003fb5 	.word	0x08003fb5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003f80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f84:	3308      	adds	r3, #8
 8003f86:	2101      	movs	r1, #1
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f000 ff71 	bl	8004e70 <RCCEx_PLL2_Config>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003f94:	e00f      	b.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003f96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f9a:	3328      	adds	r3, #40	@ 0x28
 8003f9c:	2101      	movs	r1, #1
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f001 f818 	bl	8004fd4 <RCCEx_PLL3_Config>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003faa:	e004      	b.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003fb2:	e000      	b.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003fb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fb6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d10a      	bne.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003fbe:	4b96      	ldr	r3, [pc, #600]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003fc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fc2:	f023 0107 	bic.w	r1, r3, #7
 8003fc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fca:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003fcc:	4a92      	ldr	r2, [pc, #584]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003fce:	430b      	orrs	r3, r1
 8003fd0:	6553      	str	r3, [r2, #84]	@ 0x54
 8003fd2:	e003      	b.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fd4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fd8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003fdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fe4:	f002 0304 	and.w	r3, r2, #4
 8003fe8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003fec:	2300      	movs	r3, #0
 8003fee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003ff2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003ff6:	460b      	mov	r3, r1
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	d044      	beq.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003ffc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004000:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004004:	2b05      	cmp	r3, #5
 8004006:	d825      	bhi.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8004008:	a201      	add	r2, pc, #4	@ (adr r2, 8004010 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800400a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800400e:	bf00      	nop
 8004010:	0800405d 	.word	0x0800405d
 8004014:	08004029 	.word	0x08004029
 8004018:	0800403f 	.word	0x0800403f
 800401c:	0800405d 	.word	0x0800405d
 8004020:	0800405d 	.word	0x0800405d
 8004024:	0800405d 	.word	0x0800405d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004028:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800402c:	3308      	adds	r3, #8
 800402e:	2101      	movs	r1, #1
 8004030:	4618      	mov	r0, r3
 8004032:	f000 ff1d 	bl	8004e70 <RCCEx_PLL2_Config>
 8004036:	4603      	mov	r3, r0
 8004038:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800403c:	e00f      	b.n	800405e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800403e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004042:	3328      	adds	r3, #40	@ 0x28
 8004044:	2101      	movs	r1, #1
 8004046:	4618      	mov	r0, r3
 8004048:	f000 ffc4 	bl	8004fd4 <RCCEx_PLL3_Config>
 800404c:	4603      	mov	r3, r0
 800404e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004052:	e004      	b.n	800405e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800405a:	e000      	b.n	800405e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800405c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800405e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004062:	2b00      	cmp	r3, #0
 8004064:	d10b      	bne.n	800407e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004066:	4b6c      	ldr	r3, [pc, #432]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004068:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800406a:	f023 0107 	bic.w	r1, r3, #7
 800406e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004072:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004076:	4a68      	ldr	r2, [pc, #416]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004078:	430b      	orrs	r3, r1
 800407a:	6593      	str	r3, [r2, #88]	@ 0x58
 800407c:	e003      	b.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800407e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004082:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004086:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800408a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800408e:	f002 0320 	and.w	r3, r2, #32
 8004092:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004096:	2300      	movs	r3, #0
 8004098:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800409c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80040a0:	460b      	mov	r3, r1
 80040a2:	4313      	orrs	r3, r2
 80040a4:	d055      	beq.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80040a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80040b2:	d033      	beq.n	800411c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80040b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80040b8:	d82c      	bhi.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80040ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040be:	d02f      	beq.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80040c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040c4:	d826      	bhi.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80040c6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80040ca:	d02b      	beq.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80040cc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80040d0:	d820      	bhi.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80040d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80040d6:	d012      	beq.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80040d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80040dc:	d81a      	bhi.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d022      	beq.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80040e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80040e6:	d115      	bne.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80040e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040ec:	3308      	adds	r3, #8
 80040ee:	2100      	movs	r1, #0
 80040f0:	4618      	mov	r0, r3
 80040f2:	f000 febd 	bl	8004e70 <RCCEx_PLL2_Config>
 80040f6:	4603      	mov	r3, r0
 80040f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80040fc:	e015      	b.n	800412a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80040fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004102:	3328      	adds	r3, #40	@ 0x28
 8004104:	2102      	movs	r1, #2
 8004106:	4618      	mov	r0, r3
 8004108:	f000 ff64 	bl	8004fd4 <RCCEx_PLL3_Config>
 800410c:	4603      	mov	r3, r0
 800410e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004112:	e00a      	b.n	800412a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800411a:	e006      	b.n	800412a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800411c:	bf00      	nop
 800411e:	e004      	b.n	800412a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004120:	bf00      	nop
 8004122:	e002      	b.n	800412a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004124:	bf00      	nop
 8004126:	e000      	b.n	800412a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004128:	bf00      	nop
    }

    if (ret == HAL_OK)
 800412a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800412e:	2b00      	cmp	r3, #0
 8004130:	d10b      	bne.n	800414a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004132:	4b39      	ldr	r3, [pc, #228]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004134:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004136:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800413a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800413e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004142:	4a35      	ldr	r2, [pc, #212]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004144:	430b      	orrs	r3, r1
 8004146:	6553      	str	r3, [r2, #84]	@ 0x54
 8004148:	e003      	b.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800414a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800414e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004152:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800415a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800415e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004162:	2300      	movs	r3, #0
 8004164:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004168:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800416c:	460b      	mov	r3, r1
 800416e:	4313      	orrs	r3, r2
 8004170:	d058      	beq.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004172:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004176:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800417a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800417e:	d033      	beq.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004180:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004184:	d82c      	bhi.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004186:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800418a:	d02f      	beq.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800418c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004190:	d826      	bhi.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004192:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004196:	d02b      	beq.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8004198:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800419c:	d820      	bhi.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800419e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80041a2:	d012      	beq.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80041a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80041a8:	d81a      	bhi.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d022      	beq.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80041ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041b2:	d115      	bne.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80041b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041b8:	3308      	adds	r3, #8
 80041ba:	2100      	movs	r1, #0
 80041bc:	4618      	mov	r0, r3
 80041be:	f000 fe57 	bl	8004e70 <RCCEx_PLL2_Config>
 80041c2:	4603      	mov	r3, r0
 80041c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80041c8:	e015      	b.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80041ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041ce:	3328      	adds	r3, #40	@ 0x28
 80041d0:	2102      	movs	r1, #2
 80041d2:	4618      	mov	r0, r3
 80041d4:	f000 fefe 	bl	8004fd4 <RCCEx_PLL3_Config>
 80041d8:	4603      	mov	r3, r0
 80041da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80041de:	e00a      	b.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80041e6:	e006      	b.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80041e8:	bf00      	nop
 80041ea:	e004      	b.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80041ec:	bf00      	nop
 80041ee:	e002      	b.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80041f0:	bf00      	nop
 80041f2:	e000      	b.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80041f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d10e      	bne.n	800421c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80041fe:	4b06      	ldr	r3, [pc, #24]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004200:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004202:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8004206:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800420a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800420e:	4a02      	ldr	r2, [pc, #8]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004210:	430b      	orrs	r3, r1
 8004212:	6593      	str	r3, [r2, #88]	@ 0x58
 8004214:	e006      	b.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8004216:	bf00      	nop
 8004218:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800421c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004220:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004224:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800422c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004230:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004234:	2300      	movs	r3, #0
 8004236:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800423a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800423e:	460b      	mov	r3, r1
 8004240:	4313      	orrs	r3, r2
 8004242:	d055      	beq.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004244:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004248:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800424c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004250:	d033      	beq.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8004252:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004256:	d82c      	bhi.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004258:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800425c:	d02f      	beq.n	80042be <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800425e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004262:	d826      	bhi.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004264:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004268:	d02b      	beq.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800426a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800426e:	d820      	bhi.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004270:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004274:	d012      	beq.n	800429c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8004276:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800427a:	d81a      	bhi.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800427c:	2b00      	cmp	r3, #0
 800427e:	d022      	beq.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004280:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004284:	d115      	bne.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004286:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800428a:	3308      	adds	r3, #8
 800428c:	2100      	movs	r1, #0
 800428e:	4618      	mov	r0, r3
 8004290:	f000 fdee 	bl	8004e70 <RCCEx_PLL2_Config>
 8004294:	4603      	mov	r3, r0
 8004296:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800429a:	e015      	b.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800429c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042a0:	3328      	adds	r3, #40	@ 0x28
 80042a2:	2102      	movs	r1, #2
 80042a4:	4618      	mov	r0, r3
 80042a6:	f000 fe95 	bl	8004fd4 <RCCEx_PLL3_Config>
 80042aa:	4603      	mov	r3, r0
 80042ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80042b0:	e00a      	b.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80042b8:	e006      	b.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80042ba:	bf00      	nop
 80042bc:	e004      	b.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80042be:	bf00      	nop
 80042c0:	e002      	b.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80042c2:	bf00      	nop
 80042c4:	e000      	b.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80042c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d10b      	bne.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80042d0:	4ba1      	ldr	r3, [pc, #644]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042d4:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80042d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042dc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80042e0:	4a9d      	ldr	r2, [pc, #628]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042e2:	430b      	orrs	r3, r1
 80042e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80042e6:	e003      	b.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80042f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042f8:	f002 0308 	and.w	r3, r2, #8
 80042fc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004300:	2300      	movs	r3, #0
 8004302:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004306:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800430a:	460b      	mov	r3, r1
 800430c:	4313      	orrs	r3, r2
 800430e:	d01e      	beq.n	800434e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004310:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004314:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004318:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800431c:	d10c      	bne.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800431e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004322:	3328      	adds	r3, #40	@ 0x28
 8004324:	2102      	movs	r1, #2
 8004326:	4618      	mov	r0, r3
 8004328:	f000 fe54 	bl	8004fd4 <RCCEx_PLL3_Config>
 800432c:	4603      	mov	r3, r0
 800432e:	2b00      	cmp	r3, #0
 8004330:	d002      	beq.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004338:	4b87      	ldr	r3, [pc, #540]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800433a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800433c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004340:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004344:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004348:	4a83      	ldr	r2, [pc, #524]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800434a:	430b      	orrs	r3, r1
 800434c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800434e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004356:	f002 0310 	and.w	r3, r2, #16
 800435a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800435e:	2300      	movs	r3, #0
 8004360:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004364:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004368:	460b      	mov	r3, r1
 800436a:	4313      	orrs	r3, r2
 800436c:	d01e      	beq.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800436e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004372:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004376:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800437a:	d10c      	bne.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800437c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004380:	3328      	adds	r3, #40	@ 0x28
 8004382:	2102      	movs	r1, #2
 8004384:	4618      	mov	r0, r3
 8004386:	f000 fe25 	bl	8004fd4 <RCCEx_PLL3_Config>
 800438a:	4603      	mov	r3, r0
 800438c:	2b00      	cmp	r3, #0
 800438e:	d002      	beq.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004396:	4b70      	ldr	r3, [pc, #448]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004398:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800439a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800439e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80043a6:	4a6c      	ldr	r2, [pc, #432]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80043a8:	430b      	orrs	r3, r1
 80043aa:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80043ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043b4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80043b8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80043bc:	2300      	movs	r3, #0
 80043be:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80043c2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80043c6:	460b      	mov	r3, r1
 80043c8:	4313      	orrs	r3, r2
 80043ca:	d03e      	beq.n	800444a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80043cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043d0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80043d4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80043d8:	d022      	beq.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80043da:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80043de:	d81b      	bhi.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d003      	beq.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80043e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043e8:	d00b      	beq.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80043ea:	e015      	b.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80043ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043f0:	3308      	adds	r3, #8
 80043f2:	2100      	movs	r1, #0
 80043f4:	4618      	mov	r0, r3
 80043f6:	f000 fd3b 	bl	8004e70 <RCCEx_PLL2_Config>
 80043fa:	4603      	mov	r3, r0
 80043fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004400:	e00f      	b.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004402:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004406:	3328      	adds	r3, #40	@ 0x28
 8004408:	2102      	movs	r1, #2
 800440a:	4618      	mov	r0, r3
 800440c:	f000 fde2 	bl	8004fd4 <RCCEx_PLL3_Config>
 8004410:	4603      	mov	r3, r0
 8004412:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004416:	e004      	b.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800441e:	e000      	b.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004420:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004422:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004426:	2b00      	cmp	r3, #0
 8004428:	d10b      	bne.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800442a:	4b4b      	ldr	r3, [pc, #300]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800442c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800442e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004432:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004436:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800443a:	4a47      	ldr	r2, [pc, #284]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800443c:	430b      	orrs	r3, r1
 800443e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004440:	e003      	b.n	800444a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004442:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004446:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800444a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800444e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004452:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004456:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004458:	2300      	movs	r3, #0
 800445a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800445c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004460:	460b      	mov	r3, r1
 8004462:	4313      	orrs	r3, r2
 8004464:	d03b      	beq.n	80044de <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004466:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800446a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800446e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004472:	d01f      	beq.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004474:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004478:	d818      	bhi.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800447a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800447e:	d003      	beq.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004480:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004484:	d007      	beq.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8004486:	e011      	b.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004488:	4b33      	ldr	r3, [pc, #204]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800448a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800448c:	4a32      	ldr	r2, [pc, #200]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800448e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004492:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004494:	e00f      	b.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004496:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800449a:	3328      	adds	r3, #40	@ 0x28
 800449c:	2101      	movs	r1, #1
 800449e:	4618      	mov	r0, r3
 80044a0:	f000 fd98 	bl	8004fd4 <RCCEx_PLL3_Config>
 80044a4:	4603      	mov	r3, r0
 80044a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80044aa:	e004      	b.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80044b2:	e000      	b.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80044b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d10b      	bne.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80044be:	4b26      	ldr	r3, [pc, #152]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044c2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80044c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044ce:	4a22      	ldr	r2, [pc, #136]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044d0:	430b      	orrs	r3, r1
 80044d2:	6553      	str	r3, [r2, #84]	@ 0x54
 80044d4:	e003      	b.n	80044de <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80044de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044e6:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80044ea:	673b      	str	r3, [r7, #112]	@ 0x70
 80044ec:	2300      	movs	r3, #0
 80044ee:	677b      	str	r3, [r7, #116]	@ 0x74
 80044f0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80044f4:	460b      	mov	r3, r1
 80044f6:	4313      	orrs	r3, r2
 80044f8:	d034      	beq.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80044fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004500:	2b00      	cmp	r3, #0
 8004502:	d003      	beq.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004504:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004508:	d007      	beq.n	800451a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800450a:	e011      	b.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800450c:	4b12      	ldr	r3, [pc, #72]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800450e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004510:	4a11      	ldr	r2, [pc, #68]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004512:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004516:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004518:	e00e      	b.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800451a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800451e:	3308      	adds	r3, #8
 8004520:	2102      	movs	r1, #2
 8004522:	4618      	mov	r0, r3
 8004524:	f000 fca4 	bl	8004e70 <RCCEx_PLL2_Config>
 8004528:	4603      	mov	r3, r0
 800452a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800452e:	e003      	b.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004536:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004538:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800453c:	2b00      	cmp	r3, #0
 800453e:	d10d      	bne.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004540:	4b05      	ldr	r3, [pc, #20]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004542:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004544:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004548:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800454c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800454e:	4a02      	ldr	r2, [pc, #8]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004550:	430b      	orrs	r3, r1
 8004552:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004554:	e006      	b.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8004556:	bf00      	nop
 8004558:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800455c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004560:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004564:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800456c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004570:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004572:	2300      	movs	r3, #0
 8004574:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004576:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800457a:	460b      	mov	r3, r1
 800457c:	4313      	orrs	r3, r2
 800457e:	d00c      	beq.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004580:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004584:	3328      	adds	r3, #40	@ 0x28
 8004586:	2102      	movs	r1, #2
 8004588:	4618      	mov	r0, r3
 800458a:	f000 fd23 	bl	8004fd4 <RCCEx_PLL3_Config>
 800458e:	4603      	mov	r3, r0
 8004590:	2b00      	cmp	r3, #0
 8004592:	d002      	beq.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004594:	2301      	movs	r3, #1
 8004596:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800459a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800459e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045a2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80045a6:	663b      	str	r3, [r7, #96]	@ 0x60
 80045a8:	2300      	movs	r3, #0
 80045aa:	667b      	str	r3, [r7, #100]	@ 0x64
 80045ac:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80045b0:	460b      	mov	r3, r1
 80045b2:	4313      	orrs	r3, r2
 80045b4:	d038      	beq.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80045b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80045be:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80045c2:	d018      	beq.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80045c4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80045c8:	d811      	bhi.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80045ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80045ce:	d014      	beq.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80045d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80045d4:	d80b      	bhi.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d011      	beq.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80045da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80045de:	d106      	bne.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045e0:	4bc3      	ldr	r3, [pc, #780]	@ (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045e4:	4ac2      	ldr	r2, [pc, #776]	@ (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80045ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80045ec:	e008      	b.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80045f4:	e004      	b.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80045f6:	bf00      	nop
 80045f8:	e002      	b.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80045fa:	bf00      	nop
 80045fc:	e000      	b.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80045fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004600:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004604:	2b00      	cmp	r3, #0
 8004606:	d10b      	bne.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004608:	4bb9      	ldr	r3, [pc, #740]	@ (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800460a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800460c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004610:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004614:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004618:	4ab5      	ldr	r2, [pc, #724]	@ (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800461a:	430b      	orrs	r3, r1
 800461c:	6553      	str	r3, [r2, #84]	@ 0x54
 800461e:	e003      	b.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004620:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004624:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004628:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800462c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004630:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004634:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004636:	2300      	movs	r3, #0
 8004638:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800463a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800463e:	460b      	mov	r3, r1
 8004640:	4313      	orrs	r3, r2
 8004642:	d009      	beq.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004644:	4baa      	ldr	r3, [pc, #680]	@ (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004646:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004648:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800464c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004650:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004652:	4aa7      	ldr	r2, [pc, #668]	@ (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004654:	430b      	orrs	r3, r1
 8004656:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004658:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800465c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004660:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004664:	653b      	str	r3, [r7, #80]	@ 0x50
 8004666:	2300      	movs	r3, #0
 8004668:	657b      	str	r3, [r7, #84]	@ 0x54
 800466a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800466e:	460b      	mov	r3, r1
 8004670:	4313      	orrs	r3, r2
 8004672:	d00a      	beq.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004674:	4b9e      	ldr	r3, [pc, #632]	@ (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004676:	691b      	ldr	r3, [r3, #16]
 8004678:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800467c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004680:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004684:	4a9a      	ldr	r2, [pc, #616]	@ (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004686:	430b      	orrs	r3, r1
 8004688:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800468a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800468e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004692:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004696:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004698:	2300      	movs	r3, #0
 800469a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800469c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80046a0:	460b      	mov	r3, r1
 80046a2:	4313      	orrs	r3, r2
 80046a4:	d009      	beq.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80046a6:	4b92      	ldr	r3, [pc, #584]	@ (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046aa:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80046ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80046b4:	4a8e      	ldr	r2, [pc, #568]	@ (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046b6:	430b      	orrs	r3, r1
 80046b8:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80046ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046c2:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80046c6:	643b      	str	r3, [r7, #64]	@ 0x40
 80046c8:	2300      	movs	r3, #0
 80046ca:	647b      	str	r3, [r7, #68]	@ 0x44
 80046cc:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80046d0:	460b      	mov	r3, r1
 80046d2:	4313      	orrs	r3, r2
 80046d4:	d00e      	beq.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80046d6:	4b86      	ldr	r3, [pc, #536]	@ (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046d8:	691b      	ldr	r3, [r3, #16]
 80046da:	4a85      	ldr	r2, [pc, #532]	@ (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046dc:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80046e0:	6113      	str	r3, [r2, #16]
 80046e2:	4b83      	ldr	r3, [pc, #524]	@ (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046e4:	6919      	ldr	r1, [r3, #16]
 80046e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046ea:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80046ee:	4a80      	ldr	r2, [pc, #512]	@ (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046f0:	430b      	orrs	r3, r1
 80046f2:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80046f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046fc:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004700:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004702:	2300      	movs	r3, #0
 8004704:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004706:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800470a:	460b      	mov	r3, r1
 800470c:	4313      	orrs	r3, r2
 800470e:	d009      	beq.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004710:	4b77      	ldr	r3, [pc, #476]	@ (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004712:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004714:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004718:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800471c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800471e:	4a74      	ldr	r2, [pc, #464]	@ (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004720:	430b      	orrs	r3, r1
 8004722:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004724:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800472c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004730:	633b      	str	r3, [r7, #48]	@ 0x30
 8004732:	2300      	movs	r3, #0
 8004734:	637b      	str	r3, [r7, #52]	@ 0x34
 8004736:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800473a:	460b      	mov	r3, r1
 800473c:	4313      	orrs	r3, r2
 800473e:	d00a      	beq.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004740:	4b6b      	ldr	r3, [pc, #428]	@ (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004742:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004744:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004748:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800474c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004750:	4a67      	ldr	r2, [pc, #412]	@ (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004752:	430b      	orrs	r3, r1
 8004754:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004756:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800475a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800475e:	2100      	movs	r1, #0
 8004760:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004762:	f003 0301 	and.w	r3, r3, #1
 8004766:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004768:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800476c:	460b      	mov	r3, r1
 800476e:	4313      	orrs	r3, r2
 8004770:	d011      	beq.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004772:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004776:	3308      	adds	r3, #8
 8004778:	2100      	movs	r1, #0
 800477a:	4618      	mov	r0, r3
 800477c:	f000 fb78 	bl	8004e70 <RCCEx_PLL2_Config>
 8004780:	4603      	mov	r3, r0
 8004782:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004786:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800478a:	2b00      	cmp	r3, #0
 800478c:	d003      	beq.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800478e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004792:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004796:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800479a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800479e:	2100      	movs	r1, #0
 80047a0:	6239      	str	r1, [r7, #32]
 80047a2:	f003 0302 	and.w	r3, r3, #2
 80047a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80047a8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80047ac:	460b      	mov	r3, r1
 80047ae:	4313      	orrs	r3, r2
 80047b0:	d011      	beq.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80047b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047b6:	3308      	adds	r3, #8
 80047b8:	2101      	movs	r1, #1
 80047ba:	4618      	mov	r0, r3
 80047bc:	f000 fb58 	bl	8004e70 <RCCEx_PLL2_Config>
 80047c0:	4603      	mov	r3, r0
 80047c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80047c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d003      	beq.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80047d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047de:	2100      	movs	r1, #0
 80047e0:	61b9      	str	r1, [r7, #24]
 80047e2:	f003 0304 	and.w	r3, r3, #4
 80047e6:	61fb      	str	r3, [r7, #28]
 80047e8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80047ec:	460b      	mov	r3, r1
 80047ee:	4313      	orrs	r3, r2
 80047f0:	d011      	beq.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80047f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047f6:	3308      	adds	r3, #8
 80047f8:	2102      	movs	r1, #2
 80047fa:	4618      	mov	r0, r3
 80047fc:	f000 fb38 	bl	8004e70 <RCCEx_PLL2_Config>
 8004800:	4603      	mov	r3, r0
 8004802:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004806:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800480a:	2b00      	cmp	r3, #0
 800480c:	d003      	beq.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800480e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004812:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004816:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800481a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800481e:	2100      	movs	r1, #0
 8004820:	6139      	str	r1, [r7, #16]
 8004822:	f003 0308 	and.w	r3, r3, #8
 8004826:	617b      	str	r3, [r7, #20]
 8004828:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800482c:	460b      	mov	r3, r1
 800482e:	4313      	orrs	r3, r2
 8004830:	d011      	beq.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004832:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004836:	3328      	adds	r3, #40	@ 0x28
 8004838:	2100      	movs	r1, #0
 800483a:	4618      	mov	r0, r3
 800483c:	f000 fbca 	bl	8004fd4 <RCCEx_PLL3_Config>
 8004840:	4603      	mov	r3, r0
 8004842:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8004846:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800484a:	2b00      	cmp	r3, #0
 800484c:	d003      	beq.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800484e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004852:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004856:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800485a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800485e:	2100      	movs	r1, #0
 8004860:	60b9      	str	r1, [r7, #8]
 8004862:	f003 0310 	and.w	r3, r3, #16
 8004866:	60fb      	str	r3, [r7, #12]
 8004868:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800486c:	460b      	mov	r3, r1
 800486e:	4313      	orrs	r3, r2
 8004870:	d011      	beq.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004872:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004876:	3328      	adds	r3, #40	@ 0x28
 8004878:	2101      	movs	r1, #1
 800487a:	4618      	mov	r0, r3
 800487c:	f000 fbaa 	bl	8004fd4 <RCCEx_PLL3_Config>
 8004880:	4603      	mov	r3, r0
 8004882:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004886:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800488a:	2b00      	cmp	r3, #0
 800488c:	d003      	beq.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800488e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004892:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004896:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800489a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800489e:	2100      	movs	r1, #0
 80048a0:	6039      	str	r1, [r7, #0]
 80048a2:	f003 0320 	and.w	r3, r3, #32
 80048a6:	607b      	str	r3, [r7, #4]
 80048a8:	e9d7 1200 	ldrd	r1, r2, [r7]
 80048ac:	460b      	mov	r3, r1
 80048ae:	4313      	orrs	r3, r2
 80048b0:	d011      	beq.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80048b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048b6:	3328      	adds	r3, #40	@ 0x28
 80048b8:	2102      	movs	r1, #2
 80048ba:	4618      	mov	r0, r3
 80048bc:	f000 fb8a 	bl	8004fd4 <RCCEx_PLL3_Config>
 80048c0:	4603      	mov	r3, r0
 80048c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80048c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d003      	beq.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80048d6:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d101      	bne.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80048de:	2300      	movs	r3, #0
 80048e0:	e000      	b.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80048ea:	46bd      	mov	sp, r7
 80048ec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048f0:	58024400 	.word	0x58024400

080048f4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80048f8:	f7fe fd96 	bl	8003428 <HAL_RCC_GetHCLKFreq>
 80048fc:	4602      	mov	r2, r0
 80048fe:	4b06      	ldr	r3, [pc, #24]	@ (8004918 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004900:	6a1b      	ldr	r3, [r3, #32]
 8004902:	091b      	lsrs	r3, r3, #4
 8004904:	f003 0307 	and.w	r3, r3, #7
 8004908:	4904      	ldr	r1, [pc, #16]	@ (800491c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800490a:	5ccb      	ldrb	r3, [r1, r3]
 800490c:	f003 031f 	and.w	r3, r3, #31
 8004910:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004914:	4618      	mov	r0, r3
 8004916:	bd80      	pop	{r7, pc}
 8004918:	58024400 	.word	0x58024400
 800491c:	0800730c 	.word	0x0800730c

08004920 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004920:	b480      	push	{r7}
 8004922:	b089      	sub	sp, #36	@ 0x24
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004928:	4ba1      	ldr	r3, [pc, #644]	@ (8004bb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800492a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800492c:	f003 0303 	and.w	r3, r3, #3
 8004930:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004932:	4b9f      	ldr	r3, [pc, #636]	@ (8004bb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004934:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004936:	0b1b      	lsrs	r3, r3, #12
 8004938:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800493c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800493e:	4b9c      	ldr	r3, [pc, #624]	@ (8004bb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004940:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004942:	091b      	lsrs	r3, r3, #4
 8004944:	f003 0301 	and.w	r3, r3, #1
 8004948:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800494a:	4b99      	ldr	r3, [pc, #612]	@ (8004bb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800494c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800494e:	08db      	lsrs	r3, r3, #3
 8004950:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004954:	693a      	ldr	r2, [r7, #16]
 8004956:	fb02 f303 	mul.w	r3, r2, r3
 800495a:	ee07 3a90 	vmov	s15, r3
 800495e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004962:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	2b00      	cmp	r3, #0
 800496a:	f000 8111 	beq.w	8004b90 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800496e:	69bb      	ldr	r3, [r7, #24]
 8004970:	2b02      	cmp	r3, #2
 8004972:	f000 8083 	beq.w	8004a7c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004976:	69bb      	ldr	r3, [r7, #24]
 8004978:	2b02      	cmp	r3, #2
 800497a:	f200 80a1 	bhi.w	8004ac0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800497e:	69bb      	ldr	r3, [r7, #24]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d003      	beq.n	800498c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004984:	69bb      	ldr	r3, [r7, #24]
 8004986:	2b01      	cmp	r3, #1
 8004988:	d056      	beq.n	8004a38 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800498a:	e099      	b.n	8004ac0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800498c:	4b88      	ldr	r3, [pc, #544]	@ (8004bb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f003 0320 	and.w	r3, r3, #32
 8004994:	2b00      	cmp	r3, #0
 8004996:	d02d      	beq.n	80049f4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004998:	4b85      	ldr	r3, [pc, #532]	@ (8004bb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	08db      	lsrs	r3, r3, #3
 800499e:	f003 0303 	and.w	r3, r3, #3
 80049a2:	4a84      	ldr	r2, [pc, #528]	@ (8004bb4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80049a4:	fa22 f303 	lsr.w	r3, r2, r3
 80049a8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	ee07 3a90 	vmov	s15, r3
 80049b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	ee07 3a90 	vmov	s15, r3
 80049ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049c2:	4b7b      	ldr	r3, [pc, #492]	@ (8004bb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049ca:	ee07 3a90 	vmov	s15, r3
 80049ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80049d6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004bb8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80049da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80049e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049ee:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80049f2:	e087      	b.n	8004b04 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	ee07 3a90 	vmov	s15, r3
 80049fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049fe:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004bbc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004a02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a06:	4b6a      	ldr	r3, [pc, #424]	@ (8004bb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a0e:	ee07 3a90 	vmov	s15, r3
 8004a12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a16:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a1a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004bb8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004a1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a36:	e065      	b.n	8004b04 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	ee07 3a90 	vmov	s15, r3
 8004a3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a42:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004bc0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004a46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a4a:	4b59      	ldr	r3, [pc, #356]	@ (8004bb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a52:	ee07 3a90 	vmov	s15, r3
 8004a56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a5e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004bb8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004a62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a7a:	e043      	b.n	8004b04 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	ee07 3a90 	vmov	s15, r3
 8004a82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a86:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004a8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a8e:	4b48      	ldr	r3, [pc, #288]	@ (8004bb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a96:	ee07 3a90 	vmov	s15, r3
 8004a9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004aa2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004bb8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004aa6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004aaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004aae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ab2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ab6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004aba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004abe:	e021      	b.n	8004b04 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	ee07 3a90 	vmov	s15, r3
 8004ac6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004aca:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004bc0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004ace:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ad2:	4b37      	ldr	r3, [pc, #220]	@ (8004bb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ad4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ad6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ada:	ee07 3a90 	vmov	s15, r3
 8004ade:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ae2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ae6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004bb8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004aea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004aee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004af2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004af6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004afa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004afe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b02:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004b04:	4b2a      	ldr	r3, [pc, #168]	@ (8004bb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b08:	0a5b      	lsrs	r3, r3, #9
 8004b0a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b0e:	ee07 3a90 	vmov	s15, r3
 8004b12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b16:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004b1a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b1e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b2a:	ee17 2a90 	vmov	r2, s15
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004b32:	4b1f      	ldr	r3, [pc, #124]	@ (8004bb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b36:	0c1b      	lsrs	r3, r3, #16
 8004b38:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b3c:	ee07 3a90 	vmov	s15, r3
 8004b40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b44:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004b48:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b4c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b58:	ee17 2a90 	vmov	r2, s15
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004b60:	4b13      	ldr	r3, [pc, #76]	@ (8004bb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b64:	0e1b      	lsrs	r3, r3, #24
 8004b66:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b6a:	ee07 3a90 	vmov	s15, r3
 8004b6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b72:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004b76:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b7a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b86:	ee17 2a90 	vmov	r2, s15
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004b8e:	e008      	b.n	8004ba2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2200      	movs	r2, #0
 8004b94:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	609a      	str	r2, [r3, #8]
}
 8004ba2:	bf00      	nop
 8004ba4:	3724      	adds	r7, #36	@ 0x24
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bac:	4770      	bx	lr
 8004bae:	bf00      	nop
 8004bb0:	58024400 	.word	0x58024400
 8004bb4:	03d09000 	.word	0x03d09000
 8004bb8:	46000000 	.word	0x46000000
 8004bbc:	4c742400 	.word	0x4c742400
 8004bc0:	4a742400 	.word	0x4a742400
 8004bc4:	4af42400 	.word	0x4af42400

08004bc8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b089      	sub	sp, #36	@ 0x24
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004bd0:	4ba1      	ldr	r3, [pc, #644]	@ (8004e58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bd4:	f003 0303 	and.w	r3, r3, #3
 8004bd8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004bda:	4b9f      	ldr	r3, [pc, #636]	@ (8004e58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bde:	0d1b      	lsrs	r3, r3, #20
 8004be0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004be4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004be6:	4b9c      	ldr	r3, [pc, #624]	@ (8004e58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004be8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bea:	0a1b      	lsrs	r3, r3, #8
 8004bec:	f003 0301 	and.w	r3, r3, #1
 8004bf0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004bf2:	4b99      	ldr	r3, [pc, #612]	@ (8004e58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bf6:	08db      	lsrs	r3, r3, #3
 8004bf8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004bfc:	693a      	ldr	r2, [r7, #16]
 8004bfe:	fb02 f303 	mul.w	r3, r2, r3
 8004c02:	ee07 3a90 	vmov	s15, r3
 8004c06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c0a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	f000 8111 	beq.w	8004e38 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004c16:	69bb      	ldr	r3, [r7, #24]
 8004c18:	2b02      	cmp	r3, #2
 8004c1a:	f000 8083 	beq.w	8004d24 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004c1e:	69bb      	ldr	r3, [r7, #24]
 8004c20:	2b02      	cmp	r3, #2
 8004c22:	f200 80a1 	bhi.w	8004d68 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004c26:	69bb      	ldr	r3, [r7, #24]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d003      	beq.n	8004c34 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004c2c:	69bb      	ldr	r3, [r7, #24]
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d056      	beq.n	8004ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004c32:	e099      	b.n	8004d68 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c34:	4b88      	ldr	r3, [pc, #544]	@ (8004e58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f003 0320 	and.w	r3, r3, #32
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d02d      	beq.n	8004c9c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004c40:	4b85      	ldr	r3, [pc, #532]	@ (8004e58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	08db      	lsrs	r3, r3, #3
 8004c46:	f003 0303 	and.w	r3, r3, #3
 8004c4a:	4a84      	ldr	r2, [pc, #528]	@ (8004e5c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004c4c:	fa22 f303 	lsr.w	r3, r2, r3
 8004c50:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	ee07 3a90 	vmov	s15, r3
 8004c58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	ee07 3a90 	vmov	s15, r3
 8004c62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c6a:	4b7b      	ldr	r3, [pc, #492]	@ (8004e58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c72:	ee07 3a90 	vmov	s15, r3
 8004c76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c7e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004e60 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004c82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c96:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004c9a:	e087      	b.n	8004dac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	ee07 3a90 	vmov	s15, r3
 8004ca2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ca6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004e64 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004caa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cae:	4b6a      	ldr	r3, [pc, #424]	@ (8004e58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cb6:	ee07 3a90 	vmov	s15, r3
 8004cba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cbe:	ed97 6a03 	vldr	s12, [r7, #12]
 8004cc2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004e60 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004cc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004cd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cda:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004cde:	e065      	b.n	8004dac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	ee07 3a90 	vmov	s15, r3
 8004ce6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cea:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004e68 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004cee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cf2:	4b59      	ldr	r3, [pc, #356]	@ (8004e58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cfa:	ee07 3a90 	vmov	s15, r3
 8004cfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d02:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d06:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004e60 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004d0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d22:	e043      	b.n	8004dac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	ee07 3a90 	vmov	s15, r3
 8004d2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d2e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004e6c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004d32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d36:	4b48      	ldr	r3, [pc, #288]	@ (8004e58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d3e:	ee07 3a90 	vmov	s15, r3
 8004d42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d46:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d4a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004e60 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004d4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d66:	e021      	b.n	8004dac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	ee07 3a90 	vmov	s15, r3
 8004d6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d72:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004e68 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004d76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d7a:	4b37      	ldr	r3, [pc, #220]	@ (8004e58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d82:	ee07 3a90 	vmov	s15, r3
 8004d86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d8e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004e60 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004d92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004da2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004da6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004daa:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004dac:	4b2a      	ldr	r3, [pc, #168]	@ (8004e58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004dae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004db0:	0a5b      	lsrs	r3, r3, #9
 8004db2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004db6:	ee07 3a90 	vmov	s15, r3
 8004dba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dbe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004dc2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004dc6:	edd7 6a07 	vldr	s13, [r7, #28]
 8004dca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004dce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004dd2:	ee17 2a90 	vmov	r2, s15
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004dda:	4b1f      	ldr	r3, [pc, #124]	@ (8004e58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dde:	0c1b      	lsrs	r3, r3, #16
 8004de0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004de4:	ee07 3a90 	vmov	s15, r3
 8004de8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dec:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004df0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004df4:	edd7 6a07 	vldr	s13, [r7, #28]
 8004df8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004dfc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e00:	ee17 2a90 	vmov	r2, s15
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004e08:	4b13      	ldr	r3, [pc, #76]	@ (8004e58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e0c:	0e1b      	lsrs	r3, r3, #24
 8004e0e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e12:	ee07 3a90 	vmov	s15, r3
 8004e16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e1a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004e1e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e22:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e2e:	ee17 2a90 	vmov	r2, s15
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004e36:	e008      	b.n	8004e4a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2200      	movs	r2, #0
 8004e42:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2200      	movs	r2, #0
 8004e48:	609a      	str	r2, [r3, #8]
}
 8004e4a:	bf00      	nop
 8004e4c:	3724      	adds	r7, #36	@ 0x24
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e54:	4770      	bx	lr
 8004e56:	bf00      	nop
 8004e58:	58024400 	.word	0x58024400
 8004e5c:	03d09000 	.word	0x03d09000
 8004e60:	46000000 	.word	0x46000000
 8004e64:	4c742400 	.word	0x4c742400
 8004e68:	4a742400 	.word	0x4a742400
 8004e6c:	4af42400 	.word	0x4af42400

08004e70 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b084      	sub	sp, #16
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
 8004e78:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004e7e:	4b53      	ldr	r3, [pc, #332]	@ (8004fcc <RCCEx_PLL2_Config+0x15c>)
 8004e80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e82:	f003 0303 	and.w	r3, r3, #3
 8004e86:	2b03      	cmp	r3, #3
 8004e88:	d101      	bne.n	8004e8e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e099      	b.n	8004fc2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004e8e:	4b4f      	ldr	r3, [pc, #316]	@ (8004fcc <RCCEx_PLL2_Config+0x15c>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a4e      	ldr	r2, [pc, #312]	@ (8004fcc <RCCEx_PLL2_Config+0x15c>)
 8004e94:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004e98:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e9a:	f7fc f9d5 	bl	8001248 <HAL_GetTick>
 8004e9e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004ea0:	e008      	b.n	8004eb4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004ea2:	f7fc f9d1 	bl	8001248 <HAL_GetTick>
 8004ea6:	4602      	mov	r2, r0
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	1ad3      	subs	r3, r2, r3
 8004eac:	2b02      	cmp	r3, #2
 8004eae:	d901      	bls.n	8004eb4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004eb0:	2303      	movs	r3, #3
 8004eb2:	e086      	b.n	8004fc2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004eb4:	4b45      	ldr	r3, [pc, #276]	@ (8004fcc <RCCEx_PLL2_Config+0x15c>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d1f0      	bne.n	8004ea2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004ec0:	4b42      	ldr	r3, [pc, #264]	@ (8004fcc <RCCEx_PLL2_Config+0x15c>)
 8004ec2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ec4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	031b      	lsls	r3, r3, #12
 8004ece:	493f      	ldr	r1, [pc, #252]	@ (8004fcc <RCCEx_PLL2_Config+0x15c>)
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	628b      	str	r3, [r1, #40]	@ 0x28
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	3b01      	subs	r3, #1
 8004eda:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	3b01      	subs	r3, #1
 8004ee4:	025b      	lsls	r3, r3, #9
 8004ee6:	b29b      	uxth	r3, r3
 8004ee8:	431a      	orrs	r2, r3
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	68db      	ldr	r3, [r3, #12]
 8004eee:	3b01      	subs	r3, #1
 8004ef0:	041b      	lsls	r3, r3, #16
 8004ef2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004ef6:	431a      	orrs	r2, r3
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	691b      	ldr	r3, [r3, #16]
 8004efc:	3b01      	subs	r3, #1
 8004efe:	061b      	lsls	r3, r3, #24
 8004f00:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004f04:	4931      	ldr	r1, [pc, #196]	@ (8004fcc <RCCEx_PLL2_Config+0x15c>)
 8004f06:	4313      	orrs	r3, r2
 8004f08:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004f0a:	4b30      	ldr	r3, [pc, #192]	@ (8004fcc <RCCEx_PLL2_Config+0x15c>)
 8004f0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f0e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	695b      	ldr	r3, [r3, #20]
 8004f16:	492d      	ldr	r1, [pc, #180]	@ (8004fcc <RCCEx_PLL2_Config+0x15c>)
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004f1c:	4b2b      	ldr	r3, [pc, #172]	@ (8004fcc <RCCEx_PLL2_Config+0x15c>)
 8004f1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f20:	f023 0220 	bic.w	r2, r3, #32
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	699b      	ldr	r3, [r3, #24]
 8004f28:	4928      	ldr	r1, [pc, #160]	@ (8004fcc <RCCEx_PLL2_Config+0x15c>)
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004f2e:	4b27      	ldr	r3, [pc, #156]	@ (8004fcc <RCCEx_PLL2_Config+0x15c>)
 8004f30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f32:	4a26      	ldr	r2, [pc, #152]	@ (8004fcc <RCCEx_PLL2_Config+0x15c>)
 8004f34:	f023 0310 	bic.w	r3, r3, #16
 8004f38:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004f3a:	4b24      	ldr	r3, [pc, #144]	@ (8004fcc <RCCEx_PLL2_Config+0x15c>)
 8004f3c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004f3e:	4b24      	ldr	r3, [pc, #144]	@ (8004fd0 <RCCEx_PLL2_Config+0x160>)
 8004f40:	4013      	ands	r3, r2
 8004f42:	687a      	ldr	r2, [r7, #4]
 8004f44:	69d2      	ldr	r2, [r2, #28]
 8004f46:	00d2      	lsls	r2, r2, #3
 8004f48:	4920      	ldr	r1, [pc, #128]	@ (8004fcc <RCCEx_PLL2_Config+0x15c>)
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004f4e:	4b1f      	ldr	r3, [pc, #124]	@ (8004fcc <RCCEx_PLL2_Config+0x15c>)
 8004f50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f52:	4a1e      	ldr	r2, [pc, #120]	@ (8004fcc <RCCEx_PLL2_Config+0x15c>)
 8004f54:	f043 0310 	orr.w	r3, r3, #16
 8004f58:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d106      	bne.n	8004f6e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004f60:	4b1a      	ldr	r3, [pc, #104]	@ (8004fcc <RCCEx_PLL2_Config+0x15c>)
 8004f62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f64:	4a19      	ldr	r2, [pc, #100]	@ (8004fcc <RCCEx_PLL2_Config+0x15c>)
 8004f66:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004f6a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004f6c:	e00f      	b.n	8004f8e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	d106      	bne.n	8004f82 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004f74:	4b15      	ldr	r3, [pc, #84]	@ (8004fcc <RCCEx_PLL2_Config+0x15c>)
 8004f76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f78:	4a14      	ldr	r2, [pc, #80]	@ (8004fcc <RCCEx_PLL2_Config+0x15c>)
 8004f7a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004f7e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004f80:	e005      	b.n	8004f8e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004f82:	4b12      	ldr	r3, [pc, #72]	@ (8004fcc <RCCEx_PLL2_Config+0x15c>)
 8004f84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f86:	4a11      	ldr	r2, [pc, #68]	@ (8004fcc <RCCEx_PLL2_Config+0x15c>)
 8004f88:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004f8c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004f8e:	4b0f      	ldr	r3, [pc, #60]	@ (8004fcc <RCCEx_PLL2_Config+0x15c>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a0e      	ldr	r2, [pc, #56]	@ (8004fcc <RCCEx_PLL2_Config+0x15c>)
 8004f94:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004f98:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f9a:	f7fc f955 	bl	8001248 <HAL_GetTick>
 8004f9e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004fa0:	e008      	b.n	8004fb4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004fa2:	f7fc f951 	bl	8001248 <HAL_GetTick>
 8004fa6:	4602      	mov	r2, r0
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	1ad3      	subs	r3, r2, r3
 8004fac:	2b02      	cmp	r3, #2
 8004fae:	d901      	bls.n	8004fb4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004fb0:	2303      	movs	r3, #3
 8004fb2:	e006      	b.n	8004fc2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004fb4:	4b05      	ldr	r3, [pc, #20]	@ (8004fcc <RCCEx_PLL2_Config+0x15c>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d0f0      	beq.n	8004fa2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3710      	adds	r7, #16
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}
 8004fca:	bf00      	nop
 8004fcc:	58024400 	.word	0x58024400
 8004fd0:	ffff0007 	.word	0xffff0007

08004fd4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b084      	sub	sp, #16
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
 8004fdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004fe2:	4b53      	ldr	r3, [pc, #332]	@ (8005130 <RCCEx_PLL3_Config+0x15c>)
 8004fe4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fe6:	f003 0303 	and.w	r3, r3, #3
 8004fea:	2b03      	cmp	r3, #3
 8004fec:	d101      	bne.n	8004ff2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	e099      	b.n	8005126 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004ff2:	4b4f      	ldr	r3, [pc, #316]	@ (8005130 <RCCEx_PLL3_Config+0x15c>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a4e      	ldr	r2, [pc, #312]	@ (8005130 <RCCEx_PLL3_Config+0x15c>)
 8004ff8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004ffc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ffe:	f7fc f923 	bl	8001248 <HAL_GetTick>
 8005002:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005004:	e008      	b.n	8005018 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005006:	f7fc f91f 	bl	8001248 <HAL_GetTick>
 800500a:	4602      	mov	r2, r0
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	1ad3      	subs	r3, r2, r3
 8005010:	2b02      	cmp	r3, #2
 8005012:	d901      	bls.n	8005018 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005014:	2303      	movs	r3, #3
 8005016:	e086      	b.n	8005126 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005018:	4b45      	ldr	r3, [pc, #276]	@ (8005130 <RCCEx_PLL3_Config+0x15c>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005020:	2b00      	cmp	r3, #0
 8005022:	d1f0      	bne.n	8005006 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005024:	4b42      	ldr	r3, [pc, #264]	@ (8005130 <RCCEx_PLL3_Config+0x15c>)
 8005026:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005028:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	051b      	lsls	r3, r3, #20
 8005032:	493f      	ldr	r1, [pc, #252]	@ (8005130 <RCCEx_PLL3_Config+0x15c>)
 8005034:	4313      	orrs	r3, r2
 8005036:	628b      	str	r3, [r1, #40]	@ 0x28
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	3b01      	subs	r3, #1
 800503e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	3b01      	subs	r3, #1
 8005048:	025b      	lsls	r3, r3, #9
 800504a:	b29b      	uxth	r3, r3
 800504c:	431a      	orrs	r2, r3
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	68db      	ldr	r3, [r3, #12]
 8005052:	3b01      	subs	r3, #1
 8005054:	041b      	lsls	r3, r3, #16
 8005056:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800505a:	431a      	orrs	r2, r3
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	691b      	ldr	r3, [r3, #16]
 8005060:	3b01      	subs	r3, #1
 8005062:	061b      	lsls	r3, r3, #24
 8005064:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005068:	4931      	ldr	r1, [pc, #196]	@ (8005130 <RCCEx_PLL3_Config+0x15c>)
 800506a:	4313      	orrs	r3, r2
 800506c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800506e:	4b30      	ldr	r3, [pc, #192]	@ (8005130 <RCCEx_PLL3_Config+0x15c>)
 8005070:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005072:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	695b      	ldr	r3, [r3, #20]
 800507a:	492d      	ldr	r1, [pc, #180]	@ (8005130 <RCCEx_PLL3_Config+0x15c>)
 800507c:	4313      	orrs	r3, r2
 800507e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005080:	4b2b      	ldr	r3, [pc, #172]	@ (8005130 <RCCEx_PLL3_Config+0x15c>)
 8005082:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005084:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	699b      	ldr	r3, [r3, #24]
 800508c:	4928      	ldr	r1, [pc, #160]	@ (8005130 <RCCEx_PLL3_Config+0x15c>)
 800508e:	4313      	orrs	r3, r2
 8005090:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005092:	4b27      	ldr	r3, [pc, #156]	@ (8005130 <RCCEx_PLL3_Config+0x15c>)
 8005094:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005096:	4a26      	ldr	r2, [pc, #152]	@ (8005130 <RCCEx_PLL3_Config+0x15c>)
 8005098:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800509c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800509e:	4b24      	ldr	r3, [pc, #144]	@ (8005130 <RCCEx_PLL3_Config+0x15c>)
 80050a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80050a2:	4b24      	ldr	r3, [pc, #144]	@ (8005134 <RCCEx_PLL3_Config+0x160>)
 80050a4:	4013      	ands	r3, r2
 80050a6:	687a      	ldr	r2, [r7, #4]
 80050a8:	69d2      	ldr	r2, [r2, #28]
 80050aa:	00d2      	lsls	r2, r2, #3
 80050ac:	4920      	ldr	r1, [pc, #128]	@ (8005130 <RCCEx_PLL3_Config+0x15c>)
 80050ae:	4313      	orrs	r3, r2
 80050b0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80050b2:	4b1f      	ldr	r3, [pc, #124]	@ (8005130 <RCCEx_PLL3_Config+0x15c>)
 80050b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050b6:	4a1e      	ldr	r2, [pc, #120]	@ (8005130 <RCCEx_PLL3_Config+0x15c>)
 80050b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80050bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d106      	bne.n	80050d2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80050c4:	4b1a      	ldr	r3, [pc, #104]	@ (8005130 <RCCEx_PLL3_Config+0x15c>)
 80050c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050c8:	4a19      	ldr	r2, [pc, #100]	@ (8005130 <RCCEx_PLL3_Config+0x15c>)
 80050ca:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80050ce:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80050d0:	e00f      	b.n	80050f2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	2b01      	cmp	r3, #1
 80050d6:	d106      	bne.n	80050e6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80050d8:	4b15      	ldr	r3, [pc, #84]	@ (8005130 <RCCEx_PLL3_Config+0x15c>)
 80050da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050dc:	4a14      	ldr	r2, [pc, #80]	@ (8005130 <RCCEx_PLL3_Config+0x15c>)
 80050de:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80050e2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80050e4:	e005      	b.n	80050f2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80050e6:	4b12      	ldr	r3, [pc, #72]	@ (8005130 <RCCEx_PLL3_Config+0x15c>)
 80050e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050ea:	4a11      	ldr	r2, [pc, #68]	@ (8005130 <RCCEx_PLL3_Config+0x15c>)
 80050ec:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80050f0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80050f2:	4b0f      	ldr	r3, [pc, #60]	@ (8005130 <RCCEx_PLL3_Config+0x15c>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a0e      	ldr	r2, [pc, #56]	@ (8005130 <RCCEx_PLL3_Config+0x15c>)
 80050f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80050fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050fe:	f7fc f8a3 	bl	8001248 <HAL_GetTick>
 8005102:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005104:	e008      	b.n	8005118 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005106:	f7fc f89f 	bl	8001248 <HAL_GetTick>
 800510a:	4602      	mov	r2, r0
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	1ad3      	subs	r3, r2, r3
 8005110:	2b02      	cmp	r3, #2
 8005112:	d901      	bls.n	8005118 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005114:	2303      	movs	r3, #3
 8005116:	e006      	b.n	8005126 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005118:	4b05      	ldr	r3, [pc, #20]	@ (8005130 <RCCEx_PLL3_Config+0x15c>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005120:	2b00      	cmp	r3, #0
 8005122:	d0f0      	beq.n	8005106 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005124:	7bfb      	ldrb	r3, [r7, #15]
}
 8005126:	4618      	mov	r0, r3
 8005128:	3710      	adds	r7, #16
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}
 800512e:	bf00      	nop
 8005130:	58024400 	.word	0x58024400
 8005134:	ffff0007 	.word	0xffff0007

08005138 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b082      	sub	sp, #8
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d101      	bne.n	800514a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	e042      	b.n	80051d0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005150:	2b00      	cmp	r3, #0
 8005152:	d106      	bne.n	8005162 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2200      	movs	r2, #0
 8005158:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	f7fb fe87 	bl	8000e70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2224      	movs	r2, #36	@ 0x24
 8005166:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f022 0201 	bic.w	r2, r2, #1
 8005178:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800517e:	2b00      	cmp	r3, #0
 8005180:	d002      	beq.n	8005188 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f000 fe1e 	bl	8005dc4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005188:	6878      	ldr	r0, [r7, #4]
 800518a:	f000 f8b3 	bl	80052f4 <UART_SetConfig>
 800518e:	4603      	mov	r3, r0
 8005190:	2b01      	cmp	r3, #1
 8005192:	d101      	bne.n	8005198 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	e01b      	b.n	80051d0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	685a      	ldr	r2, [r3, #4]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80051a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	689a      	ldr	r2, [r3, #8]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80051b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f042 0201 	orr.w	r2, r2, #1
 80051c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	f000 fe9d 	bl	8005f08 <UART_CheckIdleState>
 80051ce:	4603      	mov	r3, r0
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	3708      	adds	r7, #8
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}

080051d8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b08a      	sub	sp, #40	@ 0x28
 80051dc:	af02      	add	r7, sp, #8
 80051de:	60f8      	str	r0, [r7, #12]
 80051e0:	60b9      	str	r1, [r7, #8]
 80051e2:	603b      	str	r3, [r7, #0]
 80051e4:	4613      	mov	r3, r2
 80051e6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051ee:	2b20      	cmp	r3, #32
 80051f0:	d17b      	bne.n	80052ea <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d002      	beq.n	80051fe <HAL_UART_Transmit+0x26>
 80051f8:	88fb      	ldrh	r3, [r7, #6]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d101      	bne.n	8005202 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	e074      	b.n	80052ec <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2200      	movs	r2, #0
 8005206:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2221      	movs	r2, #33	@ 0x21
 800520e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005212:	f7fc f819 	bl	8001248 <HAL_GetTick>
 8005216:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	88fa      	ldrh	r2, [r7, #6]
 800521c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	88fa      	ldrh	r2, [r7, #6]
 8005224:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005230:	d108      	bne.n	8005244 <HAL_UART_Transmit+0x6c>
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	691b      	ldr	r3, [r3, #16]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d104      	bne.n	8005244 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800523a:	2300      	movs	r3, #0
 800523c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	61bb      	str	r3, [r7, #24]
 8005242:	e003      	b.n	800524c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005248:	2300      	movs	r3, #0
 800524a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800524c:	e030      	b.n	80052b0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	9300      	str	r3, [sp, #0]
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	2200      	movs	r2, #0
 8005256:	2180      	movs	r1, #128	@ 0x80
 8005258:	68f8      	ldr	r0, [r7, #12]
 800525a:	f000 feff 	bl	800605c <UART_WaitOnFlagUntilTimeout>
 800525e:	4603      	mov	r3, r0
 8005260:	2b00      	cmp	r3, #0
 8005262:	d005      	beq.n	8005270 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2220      	movs	r2, #32
 8005268:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800526c:	2303      	movs	r3, #3
 800526e:	e03d      	b.n	80052ec <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005270:	69fb      	ldr	r3, [r7, #28]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d10b      	bne.n	800528e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005276:	69bb      	ldr	r3, [r7, #24]
 8005278:	881b      	ldrh	r3, [r3, #0]
 800527a:	461a      	mov	r2, r3
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005284:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005286:	69bb      	ldr	r3, [r7, #24]
 8005288:	3302      	adds	r3, #2
 800528a:	61bb      	str	r3, [r7, #24]
 800528c:	e007      	b.n	800529e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800528e:	69fb      	ldr	r3, [r7, #28]
 8005290:	781a      	ldrb	r2, [r3, #0]
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005298:	69fb      	ldr	r3, [r7, #28]
 800529a:	3301      	adds	r3, #1
 800529c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80052a4:	b29b      	uxth	r3, r3
 80052a6:	3b01      	subs	r3, #1
 80052a8:	b29a      	uxth	r2, r3
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80052b6:	b29b      	uxth	r3, r3
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d1c8      	bne.n	800524e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	9300      	str	r3, [sp, #0]
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	2200      	movs	r2, #0
 80052c4:	2140      	movs	r1, #64	@ 0x40
 80052c6:	68f8      	ldr	r0, [r7, #12]
 80052c8:	f000 fec8 	bl	800605c <UART_WaitOnFlagUntilTimeout>
 80052cc:	4603      	mov	r3, r0
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d005      	beq.n	80052de <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2220      	movs	r2, #32
 80052d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80052da:	2303      	movs	r3, #3
 80052dc:	e006      	b.n	80052ec <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2220      	movs	r2, #32
 80052e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80052e6:	2300      	movs	r3, #0
 80052e8:	e000      	b.n	80052ec <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80052ea:	2302      	movs	r3, #2
  }
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	3720      	adds	r7, #32
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bd80      	pop	{r7, pc}

080052f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80052f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80052f8:	b092      	sub	sp, #72	@ 0x48
 80052fa:	af00      	add	r7, sp, #0
 80052fc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80052fe:	2300      	movs	r3, #0
 8005300:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	689a      	ldr	r2, [r3, #8]
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	691b      	ldr	r3, [r3, #16]
 800530c:	431a      	orrs	r2, r3
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	695b      	ldr	r3, [r3, #20]
 8005312:	431a      	orrs	r2, r3
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	69db      	ldr	r3, [r3, #28]
 8005318:	4313      	orrs	r3, r2
 800531a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	4bbe      	ldr	r3, [pc, #760]	@ (800561c <UART_SetConfig+0x328>)
 8005324:	4013      	ands	r3, r2
 8005326:	697a      	ldr	r2, [r7, #20]
 8005328:	6812      	ldr	r2, [r2, #0]
 800532a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800532c:	430b      	orrs	r3, r1
 800532e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	68da      	ldr	r2, [r3, #12]
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	430a      	orrs	r2, r1
 8005344:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	699b      	ldr	r3, [r3, #24]
 800534a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4ab3      	ldr	r2, [pc, #716]	@ (8005620 <UART_SetConfig+0x32c>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d004      	beq.n	8005360 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	6a1b      	ldr	r3, [r3, #32]
 800535a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800535c:	4313      	orrs	r3, r2
 800535e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	689a      	ldr	r2, [r3, #8]
 8005366:	4baf      	ldr	r3, [pc, #700]	@ (8005624 <UART_SetConfig+0x330>)
 8005368:	4013      	ands	r3, r2
 800536a:	697a      	ldr	r2, [r7, #20]
 800536c:	6812      	ldr	r2, [r2, #0]
 800536e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005370:	430b      	orrs	r3, r1
 8005372:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800537a:	f023 010f 	bic.w	r1, r3, #15
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	430a      	orrs	r2, r1
 8005388:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4aa6      	ldr	r2, [pc, #664]	@ (8005628 <UART_SetConfig+0x334>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d177      	bne.n	8005484 <UART_SetConfig+0x190>
 8005394:	4ba5      	ldr	r3, [pc, #660]	@ (800562c <UART_SetConfig+0x338>)
 8005396:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005398:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800539c:	2b28      	cmp	r3, #40	@ 0x28
 800539e:	d86d      	bhi.n	800547c <UART_SetConfig+0x188>
 80053a0:	a201      	add	r2, pc, #4	@ (adr r2, 80053a8 <UART_SetConfig+0xb4>)
 80053a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053a6:	bf00      	nop
 80053a8:	0800544d 	.word	0x0800544d
 80053ac:	0800547d 	.word	0x0800547d
 80053b0:	0800547d 	.word	0x0800547d
 80053b4:	0800547d 	.word	0x0800547d
 80053b8:	0800547d 	.word	0x0800547d
 80053bc:	0800547d 	.word	0x0800547d
 80053c0:	0800547d 	.word	0x0800547d
 80053c4:	0800547d 	.word	0x0800547d
 80053c8:	08005455 	.word	0x08005455
 80053cc:	0800547d 	.word	0x0800547d
 80053d0:	0800547d 	.word	0x0800547d
 80053d4:	0800547d 	.word	0x0800547d
 80053d8:	0800547d 	.word	0x0800547d
 80053dc:	0800547d 	.word	0x0800547d
 80053e0:	0800547d 	.word	0x0800547d
 80053e4:	0800547d 	.word	0x0800547d
 80053e8:	0800545d 	.word	0x0800545d
 80053ec:	0800547d 	.word	0x0800547d
 80053f0:	0800547d 	.word	0x0800547d
 80053f4:	0800547d 	.word	0x0800547d
 80053f8:	0800547d 	.word	0x0800547d
 80053fc:	0800547d 	.word	0x0800547d
 8005400:	0800547d 	.word	0x0800547d
 8005404:	0800547d 	.word	0x0800547d
 8005408:	08005465 	.word	0x08005465
 800540c:	0800547d 	.word	0x0800547d
 8005410:	0800547d 	.word	0x0800547d
 8005414:	0800547d 	.word	0x0800547d
 8005418:	0800547d 	.word	0x0800547d
 800541c:	0800547d 	.word	0x0800547d
 8005420:	0800547d 	.word	0x0800547d
 8005424:	0800547d 	.word	0x0800547d
 8005428:	0800546d 	.word	0x0800546d
 800542c:	0800547d 	.word	0x0800547d
 8005430:	0800547d 	.word	0x0800547d
 8005434:	0800547d 	.word	0x0800547d
 8005438:	0800547d 	.word	0x0800547d
 800543c:	0800547d 	.word	0x0800547d
 8005440:	0800547d 	.word	0x0800547d
 8005444:	0800547d 	.word	0x0800547d
 8005448:	08005475 	.word	0x08005475
 800544c:	2301      	movs	r3, #1
 800544e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005452:	e222      	b.n	800589a <UART_SetConfig+0x5a6>
 8005454:	2304      	movs	r3, #4
 8005456:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800545a:	e21e      	b.n	800589a <UART_SetConfig+0x5a6>
 800545c:	2308      	movs	r3, #8
 800545e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005462:	e21a      	b.n	800589a <UART_SetConfig+0x5a6>
 8005464:	2310      	movs	r3, #16
 8005466:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800546a:	e216      	b.n	800589a <UART_SetConfig+0x5a6>
 800546c:	2320      	movs	r3, #32
 800546e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005472:	e212      	b.n	800589a <UART_SetConfig+0x5a6>
 8005474:	2340      	movs	r3, #64	@ 0x40
 8005476:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800547a:	e20e      	b.n	800589a <UART_SetConfig+0x5a6>
 800547c:	2380      	movs	r3, #128	@ 0x80
 800547e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005482:	e20a      	b.n	800589a <UART_SetConfig+0x5a6>
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a69      	ldr	r2, [pc, #420]	@ (8005630 <UART_SetConfig+0x33c>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d130      	bne.n	80054f0 <UART_SetConfig+0x1fc>
 800548e:	4b67      	ldr	r3, [pc, #412]	@ (800562c <UART_SetConfig+0x338>)
 8005490:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005492:	f003 0307 	and.w	r3, r3, #7
 8005496:	2b05      	cmp	r3, #5
 8005498:	d826      	bhi.n	80054e8 <UART_SetConfig+0x1f4>
 800549a:	a201      	add	r2, pc, #4	@ (adr r2, 80054a0 <UART_SetConfig+0x1ac>)
 800549c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054a0:	080054b9 	.word	0x080054b9
 80054a4:	080054c1 	.word	0x080054c1
 80054a8:	080054c9 	.word	0x080054c9
 80054ac:	080054d1 	.word	0x080054d1
 80054b0:	080054d9 	.word	0x080054d9
 80054b4:	080054e1 	.word	0x080054e1
 80054b8:	2300      	movs	r3, #0
 80054ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054be:	e1ec      	b.n	800589a <UART_SetConfig+0x5a6>
 80054c0:	2304      	movs	r3, #4
 80054c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054c6:	e1e8      	b.n	800589a <UART_SetConfig+0x5a6>
 80054c8:	2308      	movs	r3, #8
 80054ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054ce:	e1e4      	b.n	800589a <UART_SetConfig+0x5a6>
 80054d0:	2310      	movs	r3, #16
 80054d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054d6:	e1e0      	b.n	800589a <UART_SetConfig+0x5a6>
 80054d8:	2320      	movs	r3, #32
 80054da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054de:	e1dc      	b.n	800589a <UART_SetConfig+0x5a6>
 80054e0:	2340      	movs	r3, #64	@ 0x40
 80054e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054e6:	e1d8      	b.n	800589a <UART_SetConfig+0x5a6>
 80054e8:	2380      	movs	r3, #128	@ 0x80
 80054ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054ee:	e1d4      	b.n	800589a <UART_SetConfig+0x5a6>
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a4f      	ldr	r2, [pc, #316]	@ (8005634 <UART_SetConfig+0x340>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d130      	bne.n	800555c <UART_SetConfig+0x268>
 80054fa:	4b4c      	ldr	r3, [pc, #304]	@ (800562c <UART_SetConfig+0x338>)
 80054fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054fe:	f003 0307 	and.w	r3, r3, #7
 8005502:	2b05      	cmp	r3, #5
 8005504:	d826      	bhi.n	8005554 <UART_SetConfig+0x260>
 8005506:	a201      	add	r2, pc, #4	@ (adr r2, 800550c <UART_SetConfig+0x218>)
 8005508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800550c:	08005525 	.word	0x08005525
 8005510:	0800552d 	.word	0x0800552d
 8005514:	08005535 	.word	0x08005535
 8005518:	0800553d 	.word	0x0800553d
 800551c:	08005545 	.word	0x08005545
 8005520:	0800554d 	.word	0x0800554d
 8005524:	2300      	movs	r3, #0
 8005526:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800552a:	e1b6      	b.n	800589a <UART_SetConfig+0x5a6>
 800552c:	2304      	movs	r3, #4
 800552e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005532:	e1b2      	b.n	800589a <UART_SetConfig+0x5a6>
 8005534:	2308      	movs	r3, #8
 8005536:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800553a:	e1ae      	b.n	800589a <UART_SetConfig+0x5a6>
 800553c:	2310      	movs	r3, #16
 800553e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005542:	e1aa      	b.n	800589a <UART_SetConfig+0x5a6>
 8005544:	2320      	movs	r3, #32
 8005546:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800554a:	e1a6      	b.n	800589a <UART_SetConfig+0x5a6>
 800554c:	2340      	movs	r3, #64	@ 0x40
 800554e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005552:	e1a2      	b.n	800589a <UART_SetConfig+0x5a6>
 8005554:	2380      	movs	r3, #128	@ 0x80
 8005556:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800555a:	e19e      	b.n	800589a <UART_SetConfig+0x5a6>
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a35      	ldr	r2, [pc, #212]	@ (8005638 <UART_SetConfig+0x344>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d130      	bne.n	80055c8 <UART_SetConfig+0x2d4>
 8005566:	4b31      	ldr	r3, [pc, #196]	@ (800562c <UART_SetConfig+0x338>)
 8005568:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800556a:	f003 0307 	and.w	r3, r3, #7
 800556e:	2b05      	cmp	r3, #5
 8005570:	d826      	bhi.n	80055c0 <UART_SetConfig+0x2cc>
 8005572:	a201      	add	r2, pc, #4	@ (adr r2, 8005578 <UART_SetConfig+0x284>)
 8005574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005578:	08005591 	.word	0x08005591
 800557c:	08005599 	.word	0x08005599
 8005580:	080055a1 	.word	0x080055a1
 8005584:	080055a9 	.word	0x080055a9
 8005588:	080055b1 	.word	0x080055b1
 800558c:	080055b9 	.word	0x080055b9
 8005590:	2300      	movs	r3, #0
 8005592:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005596:	e180      	b.n	800589a <UART_SetConfig+0x5a6>
 8005598:	2304      	movs	r3, #4
 800559a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800559e:	e17c      	b.n	800589a <UART_SetConfig+0x5a6>
 80055a0:	2308      	movs	r3, #8
 80055a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055a6:	e178      	b.n	800589a <UART_SetConfig+0x5a6>
 80055a8:	2310      	movs	r3, #16
 80055aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055ae:	e174      	b.n	800589a <UART_SetConfig+0x5a6>
 80055b0:	2320      	movs	r3, #32
 80055b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055b6:	e170      	b.n	800589a <UART_SetConfig+0x5a6>
 80055b8:	2340      	movs	r3, #64	@ 0x40
 80055ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055be:	e16c      	b.n	800589a <UART_SetConfig+0x5a6>
 80055c0:	2380      	movs	r3, #128	@ 0x80
 80055c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055c6:	e168      	b.n	800589a <UART_SetConfig+0x5a6>
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a1b      	ldr	r2, [pc, #108]	@ (800563c <UART_SetConfig+0x348>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d142      	bne.n	8005658 <UART_SetConfig+0x364>
 80055d2:	4b16      	ldr	r3, [pc, #88]	@ (800562c <UART_SetConfig+0x338>)
 80055d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055d6:	f003 0307 	and.w	r3, r3, #7
 80055da:	2b05      	cmp	r3, #5
 80055dc:	d838      	bhi.n	8005650 <UART_SetConfig+0x35c>
 80055de:	a201      	add	r2, pc, #4	@ (adr r2, 80055e4 <UART_SetConfig+0x2f0>)
 80055e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055e4:	080055fd 	.word	0x080055fd
 80055e8:	08005605 	.word	0x08005605
 80055ec:	0800560d 	.word	0x0800560d
 80055f0:	08005615 	.word	0x08005615
 80055f4:	08005641 	.word	0x08005641
 80055f8:	08005649 	.word	0x08005649
 80055fc:	2300      	movs	r3, #0
 80055fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005602:	e14a      	b.n	800589a <UART_SetConfig+0x5a6>
 8005604:	2304      	movs	r3, #4
 8005606:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800560a:	e146      	b.n	800589a <UART_SetConfig+0x5a6>
 800560c:	2308      	movs	r3, #8
 800560e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005612:	e142      	b.n	800589a <UART_SetConfig+0x5a6>
 8005614:	2310      	movs	r3, #16
 8005616:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800561a:	e13e      	b.n	800589a <UART_SetConfig+0x5a6>
 800561c:	cfff69f3 	.word	0xcfff69f3
 8005620:	58000c00 	.word	0x58000c00
 8005624:	11fff4ff 	.word	0x11fff4ff
 8005628:	40011000 	.word	0x40011000
 800562c:	58024400 	.word	0x58024400
 8005630:	40004400 	.word	0x40004400
 8005634:	40004800 	.word	0x40004800
 8005638:	40004c00 	.word	0x40004c00
 800563c:	40005000 	.word	0x40005000
 8005640:	2320      	movs	r3, #32
 8005642:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005646:	e128      	b.n	800589a <UART_SetConfig+0x5a6>
 8005648:	2340      	movs	r3, #64	@ 0x40
 800564a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800564e:	e124      	b.n	800589a <UART_SetConfig+0x5a6>
 8005650:	2380      	movs	r3, #128	@ 0x80
 8005652:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005656:	e120      	b.n	800589a <UART_SetConfig+0x5a6>
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4acb      	ldr	r2, [pc, #812]	@ (800598c <UART_SetConfig+0x698>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d176      	bne.n	8005750 <UART_SetConfig+0x45c>
 8005662:	4bcb      	ldr	r3, [pc, #812]	@ (8005990 <UART_SetConfig+0x69c>)
 8005664:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005666:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800566a:	2b28      	cmp	r3, #40	@ 0x28
 800566c:	d86c      	bhi.n	8005748 <UART_SetConfig+0x454>
 800566e:	a201      	add	r2, pc, #4	@ (adr r2, 8005674 <UART_SetConfig+0x380>)
 8005670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005674:	08005719 	.word	0x08005719
 8005678:	08005749 	.word	0x08005749
 800567c:	08005749 	.word	0x08005749
 8005680:	08005749 	.word	0x08005749
 8005684:	08005749 	.word	0x08005749
 8005688:	08005749 	.word	0x08005749
 800568c:	08005749 	.word	0x08005749
 8005690:	08005749 	.word	0x08005749
 8005694:	08005721 	.word	0x08005721
 8005698:	08005749 	.word	0x08005749
 800569c:	08005749 	.word	0x08005749
 80056a0:	08005749 	.word	0x08005749
 80056a4:	08005749 	.word	0x08005749
 80056a8:	08005749 	.word	0x08005749
 80056ac:	08005749 	.word	0x08005749
 80056b0:	08005749 	.word	0x08005749
 80056b4:	08005729 	.word	0x08005729
 80056b8:	08005749 	.word	0x08005749
 80056bc:	08005749 	.word	0x08005749
 80056c0:	08005749 	.word	0x08005749
 80056c4:	08005749 	.word	0x08005749
 80056c8:	08005749 	.word	0x08005749
 80056cc:	08005749 	.word	0x08005749
 80056d0:	08005749 	.word	0x08005749
 80056d4:	08005731 	.word	0x08005731
 80056d8:	08005749 	.word	0x08005749
 80056dc:	08005749 	.word	0x08005749
 80056e0:	08005749 	.word	0x08005749
 80056e4:	08005749 	.word	0x08005749
 80056e8:	08005749 	.word	0x08005749
 80056ec:	08005749 	.word	0x08005749
 80056f0:	08005749 	.word	0x08005749
 80056f4:	08005739 	.word	0x08005739
 80056f8:	08005749 	.word	0x08005749
 80056fc:	08005749 	.word	0x08005749
 8005700:	08005749 	.word	0x08005749
 8005704:	08005749 	.word	0x08005749
 8005708:	08005749 	.word	0x08005749
 800570c:	08005749 	.word	0x08005749
 8005710:	08005749 	.word	0x08005749
 8005714:	08005741 	.word	0x08005741
 8005718:	2301      	movs	r3, #1
 800571a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800571e:	e0bc      	b.n	800589a <UART_SetConfig+0x5a6>
 8005720:	2304      	movs	r3, #4
 8005722:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005726:	e0b8      	b.n	800589a <UART_SetConfig+0x5a6>
 8005728:	2308      	movs	r3, #8
 800572a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800572e:	e0b4      	b.n	800589a <UART_SetConfig+0x5a6>
 8005730:	2310      	movs	r3, #16
 8005732:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005736:	e0b0      	b.n	800589a <UART_SetConfig+0x5a6>
 8005738:	2320      	movs	r3, #32
 800573a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800573e:	e0ac      	b.n	800589a <UART_SetConfig+0x5a6>
 8005740:	2340      	movs	r3, #64	@ 0x40
 8005742:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005746:	e0a8      	b.n	800589a <UART_SetConfig+0x5a6>
 8005748:	2380      	movs	r3, #128	@ 0x80
 800574a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800574e:	e0a4      	b.n	800589a <UART_SetConfig+0x5a6>
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a8f      	ldr	r2, [pc, #572]	@ (8005994 <UART_SetConfig+0x6a0>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d130      	bne.n	80057bc <UART_SetConfig+0x4c8>
 800575a:	4b8d      	ldr	r3, [pc, #564]	@ (8005990 <UART_SetConfig+0x69c>)
 800575c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800575e:	f003 0307 	and.w	r3, r3, #7
 8005762:	2b05      	cmp	r3, #5
 8005764:	d826      	bhi.n	80057b4 <UART_SetConfig+0x4c0>
 8005766:	a201      	add	r2, pc, #4	@ (adr r2, 800576c <UART_SetConfig+0x478>)
 8005768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800576c:	08005785 	.word	0x08005785
 8005770:	0800578d 	.word	0x0800578d
 8005774:	08005795 	.word	0x08005795
 8005778:	0800579d 	.word	0x0800579d
 800577c:	080057a5 	.word	0x080057a5
 8005780:	080057ad 	.word	0x080057ad
 8005784:	2300      	movs	r3, #0
 8005786:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800578a:	e086      	b.n	800589a <UART_SetConfig+0x5a6>
 800578c:	2304      	movs	r3, #4
 800578e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005792:	e082      	b.n	800589a <UART_SetConfig+0x5a6>
 8005794:	2308      	movs	r3, #8
 8005796:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800579a:	e07e      	b.n	800589a <UART_SetConfig+0x5a6>
 800579c:	2310      	movs	r3, #16
 800579e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057a2:	e07a      	b.n	800589a <UART_SetConfig+0x5a6>
 80057a4:	2320      	movs	r3, #32
 80057a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057aa:	e076      	b.n	800589a <UART_SetConfig+0x5a6>
 80057ac:	2340      	movs	r3, #64	@ 0x40
 80057ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057b2:	e072      	b.n	800589a <UART_SetConfig+0x5a6>
 80057b4:	2380      	movs	r3, #128	@ 0x80
 80057b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057ba:	e06e      	b.n	800589a <UART_SetConfig+0x5a6>
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a75      	ldr	r2, [pc, #468]	@ (8005998 <UART_SetConfig+0x6a4>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d130      	bne.n	8005828 <UART_SetConfig+0x534>
 80057c6:	4b72      	ldr	r3, [pc, #456]	@ (8005990 <UART_SetConfig+0x69c>)
 80057c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057ca:	f003 0307 	and.w	r3, r3, #7
 80057ce:	2b05      	cmp	r3, #5
 80057d0:	d826      	bhi.n	8005820 <UART_SetConfig+0x52c>
 80057d2:	a201      	add	r2, pc, #4	@ (adr r2, 80057d8 <UART_SetConfig+0x4e4>)
 80057d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057d8:	080057f1 	.word	0x080057f1
 80057dc:	080057f9 	.word	0x080057f9
 80057e0:	08005801 	.word	0x08005801
 80057e4:	08005809 	.word	0x08005809
 80057e8:	08005811 	.word	0x08005811
 80057ec:	08005819 	.word	0x08005819
 80057f0:	2300      	movs	r3, #0
 80057f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057f6:	e050      	b.n	800589a <UART_SetConfig+0x5a6>
 80057f8:	2304      	movs	r3, #4
 80057fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057fe:	e04c      	b.n	800589a <UART_SetConfig+0x5a6>
 8005800:	2308      	movs	r3, #8
 8005802:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005806:	e048      	b.n	800589a <UART_SetConfig+0x5a6>
 8005808:	2310      	movs	r3, #16
 800580a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800580e:	e044      	b.n	800589a <UART_SetConfig+0x5a6>
 8005810:	2320      	movs	r3, #32
 8005812:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005816:	e040      	b.n	800589a <UART_SetConfig+0x5a6>
 8005818:	2340      	movs	r3, #64	@ 0x40
 800581a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800581e:	e03c      	b.n	800589a <UART_SetConfig+0x5a6>
 8005820:	2380      	movs	r3, #128	@ 0x80
 8005822:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005826:	e038      	b.n	800589a <UART_SetConfig+0x5a6>
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a5b      	ldr	r2, [pc, #364]	@ (800599c <UART_SetConfig+0x6a8>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d130      	bne.n	8005894 <UART_SetConfig+0x5a0>
 8005832:	4b57      	ldr	r3, [pc, #348]	@ (8005990 <UART_SetConfig+0x69c>)
 8005834:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005836:	f003 0307 	and.w	r3, r3, #7
 800583a:	2b05      	cmp	r3, #5
 800583c:	d826      	bhi.n	800588c <UART_SetConfig+0x598>
 800583e:	a201      	add	r2, pc, #4	@ (adr r2, 8005844 <UART_SetConfig+0x550>)
 8005840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005844:	0800585d 	.word	0x0800585d
 8005848:	08005865 	.word	0x08005865
 800584c:	0800586d 	.word	0x0800586d
 8005850:	08005875 	.word	0x08005875
 8005854:	0800587d 	.word	0x0800587d
 8005858:	08005885 	.word	0x08005885
 800585c:	2302      	movs	r3, #2
 800585e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005862:	e01a      	b.n	800589a <UART_SetConfig+0x5a6>
 8005864:	2304      	movs	r3, #4
 8005866:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800586a:	e016      	b.n	800589a <UART_SetConfig+0x5a6>
 800586c:	2308      	movs	r3, #8
 800586e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005872:	e012      	b.n	800589a <UART_SetConfig+0x5a6>
 8005874:	2310      	movs	r3, #16
 8005876:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800587a:	e00e      	b.n	800589a <UART_SetConfig+0x5a6>
 800587c:	2320      	movs	r3, #32
 800587e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005882:	e00a      	b.n	800589a <UART_SetConfig+0x5a6>
 8005884:	2340      	movs	r3, #64	@ 0x40
 8005886:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800588a:	e006      	b.n	800589a <UART_SetConfig+0x5a6>
 800588c:	2380      	movs	r3, #128	@ 0x80
 800588e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005892:	e002      	b.n	800589a <UART_SetConfig+0x5a6>
 8005894:	2380      	movs	r3, #128	@ 0x80
 8005896:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a3f      	ldr	r2, [pc, #252]	@ (800599c <UART_SetConfig+0x6a8>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	f040 80f8 	bne.w	8005a96 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80058a6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80058aa:	2b20      	cmp	r3, #32
 80058ac:	dc46      	bgt.n	800593c <UART_SetConfig+0x648>
 80058ae:	2b02      	cmp	r3, #2
 80058b0:	f2c0 8082 	blt.w	80059b8 <UART_SetConfig+0x6c4>
 80058b4:	3b02      	subs	r3, #2
 80058b6:	2b1e      	cmp	r3, #30
 80058b8:	d87e      	bhi.n	80059b8 <UART_SetConfig+0x6c4>
 80058ba:	a201      	add	r2, pc, #4	@ (adr r2, 80058c0 <UART_SetConfig+0x5cc>)
 80058bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058c0:	08005943 	.word	0x08005943
 80058c4:	080059b9 	.word	0x080059b9
 80058c8:	0800594b 	.word	0x0800594b
 80058cc:	080059b9 	.word	0x080059b9
 80058d0:	080059b9 	.word	0x080059b9
 80058d4:	080059b9 	.word	0x080059b9
 80058d8:	0800595b 	.word	0x0800595b
 80058dc:	080059b9 	.word	0x080059b9
 80058e0:	080059b9 	.word	0x080059b9
 80058e4:	080059b9 	.word	0x080059b9
 80058e8:	080059b9 	.word	0x080059b9
 80058ec:	080059b9 	.word	0x080059b9
 80058f0:	080059b9 	.word	0x080059b9
 80058f4:	080059b9 	.word	0x080059b9
 80058f8:	0800596b 	.word	0x0800596b
 80058fc:	080059b9 	.word	0x080059b9
 8005900:	080059b9 	.word	0x080059b9
 8005904:	080059b9 	.word	0x080059b9
 8005908:	080059b9 	.word	0x080059b9
 800590c:	080059b9 	.word	0x080059b9
 8005910:	080059b9 	.word	0x080059b9
 8005914:	080059b9 	.word	0x080059b9
 8005918:	080059b9 	.word	0x080059b9
 800591c:	080059b9 	.word	0x080059b9
 8005920:	080059b9 	.word	0x080059b9
 8005924:	080059b9 	.word	0x080059b9
 8005928:	080059b9 	.word	0x080059b9
 800592c:	080059b9 	.word	0x080059b9
 8005930:	080059b9 	.word	0x080059b9
 8005934:	080059b9 	.word	0x080059b9
 8005938:	080059ab 	.word	0x080059ab
 800593c:	2b40      	cmp	r3, #64	@ 0x40
 800593e:	d037      	beq.n	80059b0 <UART_SetConfig+0x6bc>
 8005940:	e03a      	b.n	80059b8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005942:	f7fe ffd7 	bl	80048f4 <HAL_RCCEx_GetD3PCLK1Freq>
 8005946:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005948:	e03c      	b.n	80059c4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800594a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800594e:	4618      	mov	r0, r3
 8005950:	f7fe ffe6 	bl	8004920 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005954:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005956:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005958:	e034      	b.n	80059c4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800595a:	f107 0318 	add.w	r3, r7, #24
 800595e:	4618      	mov	r0, r3
 8005960:	f7ff f932 	bl	8004bc8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005964:	69fb      	ldr	r3, [r7, #28]
 8005966:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005968:	e02c      	b.n	80059c4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800596a:	4b09      	ldr	r3, [pc, #36]	@ (8005990 <UART_SetConfig+0x69c>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f003 0320 	and.w	r3, r3, #32
 8005972:	2b00      	cmp	r3, #0
 8005974:	d016      	beq.n	80059a4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005976:	4b06      	ldr	r3, [pc, #24]	@ (8005990 <UART_SetConfig+0x69c>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	08db      	lsrs	r3, r3, #3
 800597c:	f003 0303 	and.w	r3, r3, #3
 8005980:	4a07      	ldr	r2, [pc, #28]	@ (80059a0 <UART_SetConfig+0x6ac>)
 8005982:	fa22 f303 	lsr.w	r3, r2, r3
 8005986:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005988:	e01c      	b.n	80059c4 <UART_SetConfig+0x6d0>
 800598a:	bf00      	nop
 800598c:	40011400 	.word	0x40011400
 8005990:	58024400 	.word	0x58024400
 8005994:	40007800 	.word	0x40007800
 8005998:	40007c00 	.word	0x40007c00
 800599c:	58000c00 	.word	0x58000c00
 80059a0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80059a4:	4b9d      	ldr	r3, [pc, #628]	@ (8005c1c <UART_SetConfig+0x928>)
 80059a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80059a8:	e00c      	b.n	80059c4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80059aa:	4b9d      	ldr	r3, [pc, #628]	@ (8005c20 <UART_SetConfig+0x92c>)
 80059ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80059ae:	e009      	b.n	80059c4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059b0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80059b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80059b6:	e005      	b.n	80059c4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80059b8:	2300      	movs	r3, #0
 80059ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80059bc:	2301      	movs	r3, #1
 80059be:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80059c2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80059c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	f000 81de 	beq.w	8005d88 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059d0:	4a94      	ldr	r2, [pc, #592]	@ (8005c24 <UART_SetConfig+0x930>)
 80059d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80059d6:	461a      	mov	r2, r3
 80059d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059da:	fbb3 f3f2 	udiv	r3, r3, r2
 80059de:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	685a      	ldr	r2, [r3, #4]
 80059e4:	4613      	mov	r3, r2
 80059e6:	005b      	lsls	r3, r3, #1
 80059e8:	4413      	add	r3, r2
 80059ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059ec:	429a      	cmp	r2, r3
 80059ee:	d305      	bcc.n	80059fc <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80059f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059f8:	429a      	cmp	r2, r3
 80059fa:	d903      	bls.n	8005a04 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80059fc:	2301      	movs	r3, #1
 80059fe:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005a02:	e1c1      	b.n	8005d88 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a06:	2200      	movs	r2, #0
 8005a08:	60bb      	str	r3, [r7, #8]
 8005a0a:	60fa      	str	r2, [r7, #12]
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a10:	4a84      	ldr	r2, [pc, #528]	@ (8005c24 <UART_SetConfig+0x930>)
 8005a12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a16:	b29b      	uxth	r3, r3
 8005a18:	2200      	movs	r2, #0
 8005a1a:	603b      	str	r3, [r7, #0]
 8005a1c:	607a      	str	r2, [r7, #4]
 8005a1e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a22:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005a26:	f7fa fcab 	bl	8000380 <__aeabi_uldivmod>
 8005a2a:	4602      	mov	r2, r0
 8005a2c:	460b      	mov	r3, r1
 8005a2e:	4610      	mov	r0, r2
 8005a30:	4619      	mov	r1, r3
 8005a32:	f04f 0200 	mov.w	r2, #0
 8005a36:	f04f 0300 	mov.w	r3, #0
 8005a3a:	020b      	lsls	r3, r1, #8
 8005a3c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005a40:	0202      	lsls	r2, r0, #8
 8005a42:	6979      	ldr	r1, [r7, #20]
 8005a44:	6849      	ldr	r1, [r1, #4]
 8005a46:	0849      	lsrs	r1, r1, #1
 8005a48:	2000      	movs	r0, #0
 8005a4a:	460c      	mov	r4, r1
 8005a4c:	4605      	mov	r5, r0
 8005a4e:	eb12 0804 	adds.w	r8, r2, r4
 8005a52:	eb43 0905 	adc.w	r9, r3, r5
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	469a      	mov	sl, r3
 8005a5e:	4693      	mov	fp, r2
 8005a60:	4652      	mov	r2, sl
 8005a62:	465b      	mov	r3, fp
 8005a64:	4640      	mov	r0, r8
 8005a66:	4649      	mov	r1, r9
 8005a68:	f7fa fc8a 	bl	8000380 <__aeabi_uldivmod>
 8005a6c:	4602      	mov	r2, r0
 8005a6e:	460b      	mov	r3, r1
 8005a70:	4613      	mov	r3, r2
 8005a72:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005a74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a76:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005a7a:	d308      	bcc.n	8005a8e <UART_SetConfig+0x79a>
 8005a7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a7e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005a82:	d204      	bcs.n	8005a8e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005a8a:	60da      	str	r2, [r3, #12]
 8005a8c:	e17c      	b.n	8005d88 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005a94:	e178      	b.n	8005d88 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	69db      	ldr	r3, [r3, #28]
 8005a9a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005a9e:	f040 80c5 	bne.w	8005c2c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8005aa2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005aa6:	2b20      	cmp	r3, #32
 8005aa8:	dc48      	bgt.n	8005b3c <UART_SetConfig+0x848>
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	db7b      	blt.n	8005ba6 <UART_SetConfig+0x8b2>
 8005aae:	2b20      	cmp	r3, #32
 8005ab0:	d879      	bhi.n	8005ba6 <UART_SetConfig+0x8b2>
 8005ab2:	a201      	add	r2, pc, #4	@ (adr r2, 8005ab8 <UART_SetConfig+0x7c4>)
 8005ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ab8:	08005b43 	.word	0x08005b43
 8005abc:	08005b4b 	.word	0x08005b4b
 8005ac0:	08005ba7 	.word	0x08005ba7
 8005ac4:	08005ba7 	.word	0x08005ba7
 8005ac8:	08005b53 	.word	0x08005b53
 8005acc:	08005ba7 	.word	0x08005ba7
 8005ad0:	08005ba7 	.word	0x08005ba7
 8005ad4:	08005ba7 	.word	0x08005ba7
 8005ad8:	08005b63 	.word	0x08005b63
 8005adc:	08005ba7 	.word	0x08005ba7
 8005ae0:	08005ba7 	.word	0x08005ba7
 8005ae4:	08005ba7 	.word	0x08005ba7
 8005ae8:	08005ba7 	.word	0x08005ba7
 8005aec:	08005ba7 	.word	0x08005ba7
 8005af0:	08005ba7 	.word	0x08005ba7
 8005af4:	08005ba7 	.word	0x08005ba7
 8005af8:	08005b73 	.word	0x08005b73
 8005afc:	08005ba7 	.word	0x08005ba7
 8005b00:	08005ba7 	.word	0x08005ba7
 8005b04:	08005ba7 	.word	0x08005ba7
 8005b08:	08005ba7 	.word	0x08005ba7
 8005b0c:	08005ba7 	.word	0x08005ba7
 8005b10:	08005ba7 	.word	0x08005ba7
 8005b14:	08005ba7 	.word	0x08005ba7
 8005b18:	08005ba7 	.word	0x08005ba7
 8005b1c:	08005ba7 	.word	0x08005ba7
 8005b20:	08005ba7 	.word	0x08005ba7
 8005b24:	08005ba7 	.word	0x08005ba7
 8005b28:	08005ba7 	.word	0x08005ba7
 8005b2c:	08005ba7 	.word	0x08005ba7
 8005b30:	08005ba7 	.word	0x08005ba7
 8005b34:	08005ba7 	.word	0x08005ba7
 8005b38:	08005b99 	.word	0x08005b99
 8005b3c:	2b40      	cmp	r3, #64	@ 0x40
 8005b3e:	d02e      	beq.n	8005b9e <UART_SetConfig+0x8aa>
 8005b40:	e031      	b.n	8005ba6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b42:	f7fd fca1 	bl	8003488 <HAL_RCC_GetPCLK1Freq>
 8005b46:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005b48:	e033      	b.n	8005bb2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b4a:	f7fd fcb3 	bl	80034b4 <HAL_RCC_GetPCLK2Freq>
 8005b4e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005b50:	e02f      	b.n	8005bb2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005b52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005b56:	4618      	mov	r0, r3
 8005b58:	f7fe fee2 	bl	8004920 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005b5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b60:	e027      	b.n	8005bb2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005b62:	f107 0318 	add.w	r3, r7, #24
 8005b66:	4618      	mov	r0, r3
 8005b68:	f7ff f82e 	bl	8004bc8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005b6c:	69fb      	ldr	r3, [r7, #28]
 8005b6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b70:	e01f      	b.n	8005bb2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b72:	4b2d      	ldr	r3, [pc, #180]	@ (8005c28 <UART_SetConfig+0x934>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f003 0320 	and.w	r3, r3, #32
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d009      	beq.n	8005b92 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005b7e:	4b2a      	ldr	r3, [pc, #168]	@ (8005c28 <UART_SetConfig+0x934>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	08db      	lsrs	r3, r3, #3
 8005b84:	f003 0303 	and.w	r3, r3, #3
 8005b88:	4a24      	ldr	r2, [pc, #144]	@ (8005c1c <UART_SetConfig+0x928>)
 8005b8a:	fa22 f303 	lsr.w	r3, r2, r3
 8005b8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005b90:	e00f      	b.n	8005bb2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005b92:	4b22      	ldr	r3, [pc, #136]	@ (8005c1c <UART_SetConfig+0x928>)
 8005b94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b96:	e00c      	b.n	8005bb2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005b98:	4b21      	ldr	r3, [pc, #132]	@ (8005c20 <UART_SetConfig+0x92c>)
 8005b9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b9c:	e009      	b.n	8005bb2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b9e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005ba2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ba4:	e005      	b.n	8005bb2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005baa:	2301      	movs	r3, #1
 8005bac:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005bb0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005bb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	f000 80e7 	beq.w	8005d88 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bbe:	4a19      	ldr	r2, [pc, #100]	@ (8005c24 <UART_SetConfig+0x930>)
 8005bc0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005bc4:	461a      	mov	r2, r3
 8005bc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005bc8:	fbb3 f3f2 	udiv	r3, r3, r2
 8005bcc:	005a      	lsls	r2, r3, #1
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	085b      	lsrs	r3, r3, #1
 8005bd4:	441a      	add	r2, r3
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bde:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005be0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005be2:	2b0f      	cmp	r3, #15
 8005be4:	d916      	bls.n	8005c14 <UART_SetConfig+0x920>
 8005be6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005be8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005bec:	d212      	bcs.n	8005c14 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005bee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bf0:	b29b      	uxth	r3, r3
 8005bf2:	f023 030f 	bic.w	r3, r3, #15
 8005bf6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005bf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bfa:	085b      	lsrs	r3, r3, #1
 8005bfc:	b29b      	uxth	r3, r3
 8005bfe:	f003 0307 	and.w	r3, r3, #7
 8005c02:	b29a      	uxth	r2, r3
 8005c04:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005c06:	4313      	orrs	r3, r2
 8005c08:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8005c10:	60da      	str	r2, [r3, #12]
 8005c12:	e0b9      	b.n	8005d88 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005c14:	2301      	movs	r3, #1
 8005c16:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005c1a:	e0b5      	b.n	8005d88 <UART_SetConfig+0xa94>
 8005c1c:	03d09000 	.word	0x03d09000
 8005c20:	003d0900 	.word	0x003d0900
 8005c24:	0800732c 	.word	0x0800732c
 8005c28:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8005c2c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005c30:	2b20      	cmp	r3, #32
 8005c32:	dc49      	bgt.n	8005cc8 <UART_SetConfig+0x9d4>
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	db7c      	blt.n	8005d32 <UART_SetConfig+0xa3e>
 8005c38:	2b20      	cmp	r3, #32
 8005c3a:	d87a      	bhi.n	8005d32 <UART_SetConfig+0xa3e>
 8005c3c:	a201      	add	r2, pc, #4	@ (adr r2, 8005c44 <UART_SetConfig+0x950>)
 8005c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c42:	bf00      	nop
 8005c44:	08005ccf 	.word	0x08005ccf
 8005c48:	08005cd7 	.word	0x08005cd7
 8005c4c:	08005d33 	.word	0x08005d33
 8005c50:	08005d33 	.word	0x08005d33
 8005c54:	08005cdf 	.word	0x08005cdf
 8005c58:	08005d33 	.word	0x08005d33
 8005c5c:	08005d33 	.word	0x08005d33
 8005c60:	08005d33 	.word	0x08005d33
 8005c64:	08005cef 	.word	0x08005cef
 8005c68:	08005d33 	.word	0x08005d33
 8005c6c:	08005d33 	.word	0x08005d33
 8005c70:	08005d33 	.word	0x08005d33
 8005c74:	08005d33 	.word	0x08005d33
 8005c78:	08005d33 	.word	0x08005d33
 8005c7c:	08005d33 	.word	0x08005d33
 8005c80:	08005d33 	.word	0x08005d33
 8005c84:	08005cff 	.word	0x08005cff
 8005c88:	08005d33 	.word	0x08005d33
 8005c8c:	08005d33 	.word	0x08005d33
 8005c90:	08005d33 	.word	0x08005d33
 8005c94:	08005d33 	.word	0x08005d33
 8005c98:	08005d33 	.word	0x08005d33
 8005c9c:	08005d33 	.word	0x08005d33
 8005ca0:	08005d33 	.word	0x08005d33
 8005ca4:	08005d33 	.word	0x08005d33
 8005ca8:	08005d33 	.word	0x08005d33
 8005cac:	08005d33 	.word	0x08005d33
 8005cb0:	08005d33 	.word	0x08005d33
 8005cb4:	08005d33 	.word	0x08005d33
 8005cb8:	08005d33 	.word	0x08005d33
 8005cbc:	08005d33 	.word	0x08005d33
 8005cc0:	08005d33 	.word	0x08005d33
 8005cc4:	08005d25 	.word	0x08005d25
 8005cc8:	2b40      	cmp	r3, #64	@ 0x40
 8005cca:	d02e      	beq.n	8005d2a <UART_SetConfig+0xa36>
 8005ccc:	e031      	b.n	8005d32 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005cce:	f7fd fbdb 	bl	8003488 <HAL_RCC_GetPCLK1Freq>
 8005cd2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005cd4:	e033      	b.n	8005d3e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005cd6:	f7fd fbed 	bl	80034b4 <HAL_RCC_GetPCLK2Freq>
 8005cda:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005cdc:	e02f      	b.n	8005d3e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005cde:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f7fe fe1c 	bl	8004920 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005ce8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005cec:	e027      	b.n	8005d3e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005cee:	f107 0318 	add.w	r3, r7, #24
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f7fe ff68 	bl	8004bc8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005cf8:	69fb      	ldr	r3, [r7, #28]
 8005cfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005cfc:	e01f      	b.n	8005d3e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005cfe:	4b2d      	ldr	r3, [pc, #180]	@ (8005db4 <UART_SetConfig+0xac0>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f003 0320 	and.w	r3, r3, #32
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d009      	beq.n	8005d1e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005d0a:	4b2a      	ldr	r3, [pc, #168]	@ (8005db4 <UART_SetConfig+0xac0>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	08db      	lsrs	r3, r3, #3
 8005d10:	f003 0303 	and.w	r3, r3, #3
 8005d14:	4a28      	ldr	r2, [pc, #160]	@ (8005db8 <UART_SetConfig+0xac4>)
 8005d16:	fa22 f303 	lsr.w	r3, r2, r3
 8005d1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005d1c:	e00f      	b.n	8005d3e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8005d1e:	4b26      	ldr	r3, [pc, #152]	@ (8005db8 <UART_SetConfig+0xac4>)
 8005d20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d22:	e00c      	b.n	8005d3e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005d24:	4b25      	ldr	r3, [pc, #148]	@ (8005dbc <UART_SetConfig+0xac8>)
 8005d26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d28:	e009      	b.n	8005d3e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005d2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d30:	e005      	b.n	8005d3e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8005d32:	2300      	movs	r3, #0
 8005d34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005d36:	2301      	movs	r3, #1
 8005d38:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005d3c:	bf00      	nop
    }

    if (pclk != 0U)
 8005d3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d021      	beq.n	8005d88 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d48:	4a1d      	ldr	r2, [pc, #116]	@ (8005dc0 <UART_SetConfig+0xacc>)
 8005d4a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d4e:	461a      	mov	r2, r3
 8005d50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d52:	fbb3 f2f2 	udiv	r2, r3, r2
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	685b      	ldr	r3, [r3, #4]
 8005d5a:	085b      	lsrs	r3, r3, #1
 8005d5c:	441a      	add	r2, r3
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d66:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d6a:	2b0f      	cmp	r3, #15
 8005d6c:	d909      	bls.n	8005d82 <UART_SetConfig+0xa8e>
 8005d6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d74:	d205      	bcs.n	8005d82 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005d76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d78:	b29a      	uxth	r2, r3
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	60da      	str	r2, [r3, #12]
 8005d80:	e002      	b.n	8005d88 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005d82:	2301      	movs	r3, #1
 8005d84:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	2201      	movs	r2, #1
 8005d94:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005d98:	697b      	ldr	r3, [r7, #20]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	2200      	movs	r2, #0
 8005da2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005da4:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	3748      	adds	r7, #72	@ 0x48
 8005dac:	46bd      	mov	sp, r7
 8005dae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005db2:	bf00      	nop
 8005db4:	58024400 	.word	0x58024400
 8005db8:	03d09000 	.word	0x03d09000
 8005dbc:	003d0900 	.word	0x003d0900
 8005dc0:	0800732c 	.word	0x0800732c

08005dc4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b083      	sub	sp, #12
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dd0:	f003 0308 	and.w	r3, r3, #8
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d00a      	beq.n	8005dee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	430a      	orrs	r2, r1
 8005dec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005df2:	f003 0301 	and.w	r3, r3, #1
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d00a      	beq.n	8005e10 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	430a      	orrs	r2, r1
 8005e0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e14:	f003 0302 	and.w	r3, r3, #2
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d00a      	beq.n	8005e32 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	430a      	orrs	r2, r1
 8005e30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e36:	f003 0304 	and.w	r3, r3, #4
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d00a      	beq.n	8005e54 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	430a      	orrs	r2, r1
 8005e52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e58:	f003 0310 	and.w	r3, r3, #16
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d00a      	beq.n	8005e76 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	689b      	ldr	r3, [r3, #8]
 8005e66:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	430a      	orrs	r2, r1
 8005e74:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e7a:	f003 0320 	and.w	r3, r3, #32
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d00a      	beq.n	8005e98 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	689b      	ldr	r3, [r3, #8]
 8005e88:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	430a      	orrs	r2, r1
 8005e96:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d01a      	beq.n	8005eda <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	430a      	orrs	r2, r1
 8005eb8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ebe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005ec2:	d10a      	bne.n	8005eda <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	430a      	orrs	r2, r1
 8005ed8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ede:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d00a      	beq.n	8005efc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	685b      	ldr	r3, [r3, #4]
 8005eec:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	430a      	orrs	r2, r1
 8005efa:	605a      	str	r2, [r3, #4]
  }
}
 8005efc:	bf00      	nop
 8005efe:	370c      	adds	r7, #12
 8005f00:	46bd      	mov	sp, r7
 8005f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f06:	4770      	bx	lr

08005f08 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b098      	sub	sp, #96	@ 0x60
 8005f0c:	af02      	add	r7, sp, #8
 8005f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2200      	movs	r2, #0
 8005f14:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005f18:	f7fb f996 	bl	8001248 <HAL_GetTick>
 8005f1c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f003 0308 	and.w	r3, r3, #8
 8005f28:	2b08      	cmp	r3, #8
 8005f2a:	d12f      	bne.n	8005f8c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f2c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005f30:	9300      	str	r3, [sp, #0]
 8005f32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005f34:	2200      	movs	r2, #0
 8005f36:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f000 f88e 	bl	800605c <UART_WaitOnFlagUntilTimeout>
 8005f40:	4603      	mov	r3, r0
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d022      	beq.n	8005f8c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f4e:	e853 3f00 	ldrex	r3, [r3]
 8005f52:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005f54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f56:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005f5a:	653b      	str	r3, [r7, #80]	@ 0x50
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	461a      	mov	r2, r3
 8005f62:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005f64:	647b      	str	r3, [r7, #68]	@ 0x44
 8005f66:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f68:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005f6a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005f6c:	e841 2300 	strex	r3, r2, [r1]
 8005f70:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005f72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d1e6      	bne.n	8005f46 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2220      	movs	r2, #32
 8005f7c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2200      	movs	r2, #0
 8005f84:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f88:	2303      	movs	r3, #3
 8005f8a:	e063      	b.n	8006054 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f003 0304 	and.w	r3, r3, #4
 8005f96:	2b04      	cmp	r3, #4
 8005f98:	d149      	bne.n	800602e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f9a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005f9e:	9300      	str	r3, [sp, #0]
 8005fa0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	f000 f857 	bl	800605c <UART_WaitOnFlagUntilTimeout>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d03c      	beq.n	800602e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fbc:	e853 3f00 	ldrex	r3, [r3]
 8005fc0:	623b      	str	r3, [r7, #32]
   return(result);
 8005fc2:	6a3b      	ldr	r3, [r7, #32]
 8005fc4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005fc8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	461a      	mov	r2, r3
 8005fd0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005fd2:	633b      	str	r3, [r7, #48]	@ 0x30
 8005fd4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fd6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005fd8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005fda:	e841 2300 	strex	r3, r2, [r1]
 8005fde:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005fe0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d1e6      	bne.n	8005fb4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	3308      	adds	r3, #8
 8005fec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	e853 3f00 	ldrex	r3, [r3]
 8005ff4:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	f023 0301 	bic.w	r3, r3, #1
 8005ffc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	3308      	adds	r3, #8
 8006004:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006006:	61fa      	str	r2, [r7, #28]
 8006008:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800600a:	69b9      	ldr	r1, [r7, #24]
 800600c:	69fa      	ldr	r2, [r7, #28]
 800600e:	e841 2300 	strex	r3, r2, [r1]
 8006012:	617b      	str	r3, [r7, #20]
   return(result);
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d1e5      	bne.n	8005fe6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2220      	movs	r2, #32
 800601e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2200      	movs	r2, #0
 8006026:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800602a:	2303      	movs	r3, #3
 800602c:	e012      	b.n	8006054 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2220      	movs	r2, #32
 8006032:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2220      	movs	r2, #32
 800603a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2200      	movs	r2, #0
 8006042:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2200      	movs	r2, #0
 8006048:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2200      	movs	r2, #0
 800604e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006052:	2300      	movs	r3, #0
}
 8006054:	4618      	mov	r0, r3
 8006056:	3758      	adds	r7, #88	@ 0x58
 8006058:	46bd      	mov	sp, r7
 800605a:	bd80      	pop	{r7, pc}

0800605c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b084      	sub	sp, #16
 8006060:	af00      	add	r7, sp, #0
 8006062:	60f8      	str	r0, [r7, #12]
 8006064:	60b9      	str	r1, [r7, #8]
 8006066:	603b      	str	r3, [r7, #0]
 8006068:	4613      	mov	r3, r2
 800606a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800606c:	e04f      	b.n	800610e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800606e:	69bb      	ldr	r3, [r7, #24]
 8006070:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006074:	d04b      	beq.n	800610e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006076:	f7fb f8e7 	bl	8001248 <HAL_GetTick>
 800607a:	4602      	mov	r2, r0
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	1ad3      	subs	r3, r2, r3
 8006080:	69ba      	ldr	r2, [r7, #24]
 8006082:	429a      	cmp	r2, r3
 8006084:	d302      	bcc.n	800608c <UART_WaitOnFlagUntilTimeout+0x30>
 8006086:	69bb      	ldr	r3, [r7, #24]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d101      	bne.n	8006090 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800608c:	2303      	movs	r3, #3
 800608e:	e04e      	b.n	800612e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f003 0304 	and.w	r3, r3, #4
 800609a:	2b00      	cmp	r3, #0
 800609c:	d037      	beq.n	800610e <UART_WaitOnFlagUntilTimeout+0xb2>
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	2b80      	cmp	r3, #128	@ 0x80
 80060a2:	d034      	beq.n	800610e <UART_WaitOnFlagUntilTimeout+0xb2>
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	2b40      	cmp	r3, #64	@ 0x40
 80060a8:	d031      	beq.n	800610e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	69db      	ldr	r3, [r3, #28]
 80060b0:	f003 0308 	and.w	r3, r3, #8
 80060b4:	2b08      	cmp	r3, #8
 80060b6:	d110      	bne.n	80060da <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	2208      	movs	r2, #8
 80060be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80060c0:	68f8      	ldr	r0, [r7, #12]
 80060c2:	f000 f839 	bl	8006138 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	2208      	movs	r2, #8
 80060ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	2200      	movs	r2, #0
 80060d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80060d6:	2301      	movs	r3, #1
 80060d8:	e029      	b.n	800612e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	69db      	ldr	r3, [r3, #28]
 80060e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80060e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80060e8:	d111      	bne.n	800610e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80060f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80060f4:	68f8      	ldr	r0, [r7, #12]
 80060f6:	f000 f81f 	bl	8006138 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	2220      	movs	r2, #32
 80060fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	2200      	movs	r2, #0
 8006106:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800610a:	2303      	movs	r3, #3
 800610c:	e00f      	b.n	800612e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	69da      	ldr	r2, [r3, #28]
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	4013      	ands	r3, r2
 8006118:	68ba      	ldr	r2, [r7, #8]
 800611a:	429a      	cmp	r2, r3
 800611c:	bf0c      	ite	eq
 800611e:	2301      	moveq	r3, #1
 8006120:	2300      	movne	r3, #0
 8006122:	b2db      	uxtb	r3, r3
 8006124:	461a      	mov	r2, r3
 8006126:	79fb      	ldrb	r3, [r7, #7]
 8006128:	429a      	cmp	r2, r3
 800612a:	d0a0      	beq.n	800606e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800612c:	2300      	movs	r3, #0
}
 800612e:	4618      	mov	r0, r3
 8006130:	3710      	adds	r7, #16
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}
	...

08006138 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006138:	b480      	push	{r7}
 800613a:	b095      	sub	sp, #84	@ 0x54
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006146:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006148:	e853 3f00 	ldrex	r3, [r3]
 800614c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800614e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006150:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006154:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	461a      	mov	r2, r3
 800615c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800615e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006160:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006162:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006164:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006166:	e841 2300 	strex	r3, r2, [r1]
 800616a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800616c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800616e:	2b00      	cmp	r3, #0
 8006170:	d1e6      	bne.n	8006140 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	3308      	adds	r3, #8
 8006178:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800617a:	6a3b      	ldr	r3, [r7, #32]
 800617c:	e853 3f00 	ldrex	r3, [r3]
 8006180:	61fb      	str	r3, [r7, #28]
   return(result);
 8006182:	69fa      	ldr	r2, [r7, #28]
 8006184:	4b1e      	ldr	r3, [pc, #120]	@ (8006200 <UART_EndRxTransfer+0xc8>)
 8006186:	4013      	ands	r3, r2
 8006188:	64bb      	str	r3, [r7, #72]	@ 0x48
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	3308      	adds	r3, #8
 8006190:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006192:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006194:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006196:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006198:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800619a:	e841 2300 	strex	r3, r2, [r1]
 800619e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80061a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d1e5      	bne.n	8006172 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80061aa:	2b01      	cmp	r3, #1
 80061ac:	d118      	bne.n	80061e0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	e853 3f00 	ldrex	r3, [r3]
 80061ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	f023 0310 	bic.w	r3, r3, #16
 80061c2:	647b      	str	r3, [r7, #68]	@ 0x44
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	461a      	mov	r2, r3
 80061ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80061cc:	61bb      	str	r3, [r7, #24]
 80061ce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061d0:	6979      	ldr	r1, [r7, #20]
 80061d2:	69ba      	ldr	r2, [r7, #24]
 80061d4:	e841 2300 	strex	r3, r2, [r1]
 80061d8:	613b      	str	r3, [r7, #16]
   return(result);
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d1e6      	bne.n	80061ae <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2220      	movs	r2, #32
 80061e4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2200      	movs	r2, #0
 80061ec:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2200      	movs	r2, #0
 80061f2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80061f4:	bf00      	nop
 80061f6:	3754      	adds	r7, #84	@ 0x54
 80061f8:	46bd      	mov	sp, r7
 80061fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fe:	4770      	bx	lr
 8006200:	effffffe 	.word	0xeffffffe

08006204 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006204:	b480      	push	{r7}
 8006206:	b085      	sub	sp, #20
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006212:	2b01      	cmp	r3, #1
 8006214:	d101      	bne.n	800621a <HAL_UARTEx_DisableFifoMode+0x16>
 8006216:	2302      	movs	r3, #2
 8006218:	e027      	b.n	800626a <HAL_UARTEx_DisableFifoMode+0x66>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2201      	movs	r2, #1
 800621e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2224      	movs	r2, #36	@ 0x24
 8006226:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	681a      	ldr	r2, [r3, #0]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f022 0201 	bic.w	r2, r2, #1
 8006240:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006248:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2200      	movs	r2, #0
 800624e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	68fa      	ldr	r2, [r7, #12]
 8006256:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2220      	movs	r2, #32
 800625c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2200      	movs	r2, #0
 8006264:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006268:	2300      	movs	r3, #0
}
 800626a:	4618      	mov	r0, r3
 800626c:	3714      	adds	r7, #20
 800626e:	46bd      	mov	sp, r7
 8006270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006274:	4770      	bx	lr

08006276 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006276:	b580      	push	{r7, lr}
 8006278:	b084      	sub	sp, #16
 800627a:	af00      	add	r7, sp, #0
 800627c:	6078      	str	r0, [r7, #4]
 800627e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006286:	2b01      	cmp	r3, #1
 8006288:	d101      	bne.n	800628e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800628a:	2302      	movs	r3, #2
 800628c:	e02d      	b.n	80062ea <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2201      	movs	r2, #1
 8006292:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2224      	movs	r2, #36	@ 0x24
 800629a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	681a      	ldr	r2, [r3, #0]
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f022 0201 	bic.w	r2, r2, #1
 80062b4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	689b      	ldr	r3, [r3, #8]
 80062bc:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	683a      	ldr	r2, [r7, #0]
 80062c6:	430a      	orrs	r2, r1
 80062c8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f000 f850 	bl	8006370 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	68fa      	ldr	r2, [r7, #12]
 80062d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2220      	movs	r2, #32
 80062dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2200      	movs	r2, #0
 80062e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80062e8:	2300      	movs	r3, #0
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	3710      	adds	r7, #16
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bd80      	pop	{r7, pc}

080062f2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80062f2:	b580      	push	{r7, lr}
 80062f4:	b084      	sub	sp, #16
 80062f6:	af00      	add	r7, sp, #0
 80062f8:	6078      	str	r0, [r7, #4]
 80062fa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006302:	2b01      	cmp	r3, #1
 8006304:	d101      	bne.n	800630a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006306:	2302      	movs	r3, #2
 8006308:	e02d      	b.n	8006366 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2201      	movs	r2, #1
 800630e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2224      	movs	r2, #36	@ 0x24
 8006316:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	681a      	ldr	r2, [r3, #0]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f022 0201 	bic.w	r2, r2, #1
 8006330:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	689b      	ldr	r3, [r3, #8]
 8006338:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	683a      	ldr	r2, [r7, #0]
 8006342:	430a      	orrs	r2, r1
 8006344:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006346:	6878      	ldr	r0, [r7, #4]
 8006348:	f000 f812 	bl	8006370 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	68fa      	ldr	r2, [r7, #12]
 8006352:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2220      	movs	r2, #32
 8006358:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2200      	movs	r2, #0
 8006360:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006364:	2300      	movs	r3, #0
}
 8006366:	4618      	mov	r0, r3
 8006368:	3710      	adds	r7, #16
 800636a:	46bd      	mov	sp, r7
 800636c:	bd80      	pop	{r7, pc}
	...

08006370 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006370:	b480      	push	{r7}
 8006372:	b085      	sub	sp, #20
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800637c:	2b00      	cmp	r3, #0
 800637e:	d108      	bne.n	8006392 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2201      	movs	r2, #1
 8006384:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2201      	movs	r2, #1
 800638c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006390:	e031      	b.n	80063f6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006392:	2310      	movs	r3, #16
 8006394:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006396:	2310      	movs	r3, #16
 8006398:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	689b      	ldr	r3, [r3, #8]
 80063a0:	0e5b      	lsrs	r3, r3, #25
 80063a2:	b2db      	uxtb	r3, r3
 80063a4:	f003 0307 	and.w	r3, r3, #7
 80063a8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	689b      	ldr	r3, [r3, #8]
 80063b0:	0f5b      	lsrs	r3, r3, #29
 80063b2:	b2db      	uxtb	r3, r3
 80063b4:	f003 0307 	and.w	r3, r3, #7
 80063b8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80063ba:	7bbb      	ldrb	r3, [r7, #14]
 80063bc:	7b3a      	ldrb	r2, [r7, #12]
 80063be:	4911      	ldr	r1, [pc, #68]	@ (8006404 <UARTEx_SetNbDataToProcess+0x94>)
 80063c0:	5c8a      	ldrb	r2, [r1, r2]
 80063c2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80063c6:	7b3a      	ldrb	r2, [r7, #12]
 80063c8:	490f      	ldr	r1, [pc, #60]	@ (8006408 <UARTEx_SetNbDataToProcess+0x98>)
 80063ca:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80063cc:	fb93 f3f2 	sdiv	r3, r3, r2
 80063d0:	b29a      	uxth	r2, r3
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80063d8:	7bfb      	ldrb	r3, [r7, #15]
 80063da:	7b7a      	ldrb	r2, [r7, #13]
 80063dc:	4909      	ldr	r1, [pc, #36]	@ (8006404 <UARTEx_SetNbDataToProcess+0x94>)
 80063de:	5c8a      	ldrb	r2, [r1, r2]
 80063e0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80063e4:	7b7a      	ldrb	r2, [r7, #13]
 80063e6:	4908      	ldr	r1, [pc, #32]	@ (8006408 <UARTEx_SetNbDataToProcess+0x98>)
 80063e8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80063ea:	fb93 f3f2 	sdiv	r3, r3, r2
 80063ee:	b29a      	uxth	r2, r3
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80063f6:	bf00      	nop
 80063f8:	3714      	adds	r7, #20
 80063fa:	46bd      	mov	sp, r7
 80063fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006400:	4770      	bx	lr
 8006402:	bf00      	nop
 8006404:	08007344 	.word	0x08007344
 8006408:	0800734c 	.word	0x0800734c

0800640c <std>:
 800640c:	2300      	movs	r3, #0
 800640e:	b510      	push	{r4, lr}
 8006410:	4604      	mov	r4, r0
 8006412:	e9c0 3300 	strd	r3, r3, [r0]
 8006416:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800641a:	6083      	str	r3, [r0, #8]
 800641c:	8181      	strh	r1, [r0, #12]
 800641e:	6643      	str	r3, [r0, #100]	@ 0x64
 8006420:	81c2      	strh	r2, [r0, #14]
 8006422:	6183      	str	r3, [r0, #24]
 8006424:	4619      	mov	r1, r3
 8006426:	2208      	movs	r2, #8
 8006428:	305c      	adds	r0, #92	@ 0x5c
 800642a:	f000 f906 	bl	800663a <memset>
 800642e:	4b0d      	ldr	r3, [pc, #52]	@ (8006464 <std+0x58>)
 8006430:	6263      	str	r3, [r4, #36]	@ 0x24
 8006432:	4b0d      	ldr	r3, [pc, #52]	@ (8006468 <std+0x5c>)
 8006434:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006436:	4b0d      	ldr	r3, [pc, #52]	@ (800646c <std+0x60>)
 8006438:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800643a:	4b0d      	ldr	r3, [pc, #52]	@ (8006470 <std+0x64>)
 800643c:	6323      	str	r3, [r4, #48]	@ 0x30
 800643e:	4b0d      	ldr	r3, [pc, #52]	@ (8006474 <std+0x68>)
 8006440:	6224      	str	r4, [r4, #32]
 8006442:	429c      	cmp	r4, r3
 8006444:	d006      	beq.n	8006454 <std+0x48>
 8006446:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800644a:	4294      	cmp	r4, r2
 800644c:	d002      	beq.n	8006454 <std+0x48>
 800644e:	33d0      	adds	r3, #208	@ 0xd0
 8006450:	429c      	cmp	r4, r3
 8006452:	d105      	bne.n	8006460 <std+0x54>
 8006454:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006458:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800645c:	f000 b966 	b.w	800672c <__retarget_lock_init_recursive>
 8006460:	bd10      	pop	{r4, pc}
 8006462:	bf00      	nop
 8006464:	080065b5 	.word	0x080065b5
 8006468:	080065d7 	.word	0x080065d7
 800646c:	0800660f 	.word	0x0800660f
 8006470:	08006633 	.word	0x08006633
 8006474:	24000238 	.word	0x24000238

08006478 <stdio_exit_handler>:
 8006478:	4a02      	ldr	r2, [pc, #8]	@ (8006484 <stdio_exit_handler+0xc>)
 800647a:	4903      	ldr	r1, [pc, #12]	@ (8006488 <stdio_exit_handler+0x10>)
 800647c:	4803      	ldr	r0, [pc, #12]	@ (800648c <stdio_exit_handler+0x14>)
 800647e:	f000 b869 	b.w	8006554 <_fwalk_sglue>
 8006482:	bf00      	nop
 8006484:	24000010 	.word	0x24000010
 8006488:	08006fe9 	.word	0x08006fe9
 800648c:	24000020 	.word	0x24000020

08006490 <cleanup_stdio>:
 8006490:	6841      	ldr	r1, [r0, #4]
 8006492:	4b0c      	ldr	r3, [pc, #48]	@ (80064c4 <cleanup_stdio+0x34>)
 8006494:	4299      	cmp	r1, r3
 8006496:	b510      	push	{r4, lr}
 8006498:	4604      	mov	r4, r0
 800649a:	d001      	beq.n	80064a0 <cleanup_stdio+0x10>
 800649c:	f000 fda4 	bl	8006fe8 <_fflush_r>
 80064a0:	68a1      	ldr	r1, [r4, #8]
 80064a2:	4b09      	ldr	r3, [pc, #36]	@ (80064c8 <cleanup_stdio+0x38>)
 80064a4:	4299      	cmp	r1, r3
 80064a6:	d002      	beq.n	80064ae <cleanup_stdio+0x1e>
 80064a8:	4620      	mov	r0, r4
 80064aa:	f000 fd9d 	bl	8006fe8 <_fflush_r>
 80064ae:	68e1      	ldr	r1, [r4, #12]
 80064b0:	4b06      	ldr	r3, [pc, #24]	@ (80064cc <cleanup_stdio+0x3c>)
 80064b2:	4299      	cmp	r1, r3
 80064b4:	d004      	beq.n	80064c0 <cleanup_stdio+0x30>
 80064b6:	4620      	mov	r0, r4
 80064b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80064bc:	f000 bd94 	b.w	8006fe8 <_fflush_r>
 80064c0:	bd10      	pop	{r4, pc}
 80064c2:	bf00      	nop
 80064c4:	24000238 	.word	0x24000238
 80064c8:	240002a0 	.word	0x240002a0
 80064cc:	24000308 	.word	0x24000308

080064d0 <global_stdio_init.part.0>:
 80064d0:	b510      	push	{r4, lr}
 80064d2:	4b0b      	ldr	r3, [pc, #44]	@ (8006500 <global_stdio_init.part.0+0x30>)
 80064d4:	4c0b      	ldr	r4, [pc, #44]	@ (8006504 <global_stdio_init.part.0+0x34>)
 80064d6:	4a0c      	ldr	r2, [pc, #48]	@ (8006508 <global_stdio_init.part.0+0x38>)
 80064d8:	601a      	str	r2, [r3, #0]
 80064da:	4620      	mov	r0, r4
 80064dc:	2200      	movs	r2, #0
 80064de:	2104      	movs	r1, #4
 80064e0:	f7ff ff94 	bl	800640c <std>
 80064e4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80064e8:	2201      	movs	r2, #1
 80064ea:	2109      	movs	r1, #9
 80064ec:	f7ff ff8e 	bl	800640c <std>
 80064f0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80064f4:	2202      	movs	r2, #2
 80064f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80064fa:	2112      	movs	r1, #18
 80064fc:	f7ff bf86 	b.w	800640c <std>
 8006500:	24000370 	.word	0x24000370
 8006504:	24000238 	.word	0x24000238
 8006508:	08006479 	.word	0x08006479

0800650c <__sfp_lock_acquire>:
 800650c:	4801      	ldr	r0, [pc, #4]	@ (8006514 <__sfp_lock_acquire+0x8>)
 800650e:	f000 b90e 	b.w	800672e <__retarget_lock_acquire_recursive>
 8006512:	bf00      	nop
 8006514:	24000379 	.word	0x24000379

08006518 <__sfp_lock_release>:
 8006518:	4801      	ldr	r0, [pc, #4]	@ (8006520 <__sfp_lock_release+0x8>)
 800651a:	f000 b909 	b.w	8006730 <__retarget_lock_release_recursive>
 800651e:	bf00      	nop
 8006520:	24000379 	.word	0x24000379

08006524 <__sinit>:
 8006524:	b510      	push	{r4, lr}
 8006526:	4604      	mov	r4, r0
 8006528:	f7ff fff0 	bl	800650c <__sfp_lock_acquire>
 800652c:	6a23      	ldr	r3, [r4, #32]
 800652e:	b11b      	cbz	r3, 8006538 <__sinit+0x14>
 8006530:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006534:	f7ff bff0 	b.w	8006518 <__sfp_lock_release>
 8006538:	4b04      	ldr	r3, [pc, #16]	@ (800654c <__sinit+0x28>)
 800653a:	6223      	str	r3, [r4, #32]
 800653c:	4b04      	ldr	r3, [pc, #16]	@ (8006550 <__sinit+0x2c>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d1f5      	bne.n	8006530 <__sinit+0xc>
 8006544:	f7ff ffc4 	bl	80064d0 <global_stdio_init.part.0>
 8006548:	e7f2      	b.n	8006530 <__sinit+0xc>
 800654a:	bf00      	nop
 800654c:	08006491 	.word	0x08006491
 8006550:	24000370 	.word	0x24000370

08006554 <_fwalk_sglue>:
 8006554:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006558:	4607      	mov	r7, r0
 800655a:	4688      	mov	r8, r1
 800655c:	4614      	mov	r4, r2
 800655e:	2600      	movs	r6, #0
 8006560:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006564:	f1b9 0901 	subs.w	r9, r9, #1
 8006568:	d505      	bpl.n	8006576 <_fwalk_sglue+0x22>
 800656a:	6824      	ldr	r4, [r4, #0]
 800656c:	2c00      	cmp	r4, #0
 800656e:	d1f7      	bne.n	8006560 <_fwalk_sglue+0xc>
 8006570:	4630      	mov	r0, r6
 8006572:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006576:	89ab      	ldrh	r3, [r5, #12]
 8006578:	2b01      	cmp	r3, #1
 800657a:	d907      	bls.n	800658c <_fwalk_sglue+0x38>
 800657c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006580:	3301      	adds	r3, #1
 8006582:	d003      	beq.n	800658c <_fwalk_sglue+0x38>
 8006584:	4629      	mov	r1, r5
 8006586:	4638      	mov	r0, r7
 8006588:	47c0      	blx	r8
 800658a:	4306      	orrs	r6, r0
 800658c:	3568      	adds	r5, #104	@ 0x68
 800658e:	e7e9      	b.n	8006564 <_fwalk_sglue+0x10>

08006590 <iprintf>:
 8006590:	b40f      	push	{r0, r1, r2, r3}
 8006592:	b507      	push	{r0, r1, r2, lr}
 8006594:	4906      	ldr	r1, [pc, #24]	@ (80065b0 <iprintf+0x20>)
 8006596:	ab04      	add	r3, sp, #16
 8006598:	6808      	ldr	r0, [r1, #0]
 800659a:	f853 2b04 	ldr.w	r2, [r3], #4
 800659e:	6881      	ldr	r1, [r0, #8]
 80065a0:	9301      	str	r3, [sp, #4]
 80065a2:	f000 f9f7 	bl	8006994 <_vfiprintf_r>
 80065a6:	b003      	add	sp, #12
 80065a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80065ac:	b004      	add	sp, #16
 80065ae:	4770      	bx	lr
 80065b0:	2400001c 	.word	0x2400001c

080065b4 <__sread>:
 80065b4:	b510      	push	{r4, lr}
 80065b6:	460c      	mov	r4, r1
 80065b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065bc:	f000 f868 	bl	8006690 <_read_r>
 80065c0:	2800      	cmp	r0, #0
 80065c2:	bfab      	itete	ge
 80065c4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80065c6:	89a3      	ldrhlt	r3, [r4, #12]
 80065c8:	181b      	addge	r3, r3, r0
 80065ca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80065ce:	bfac      	ite	ge
 80065d0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80065d2:	81a3      	strhlt	r3, [r4, #12]
 80065d4:	bd10      	pop	{r4, pc}

080065d6 <__swrite>:
 80065d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065da:	461f      	mov	r7, r3
 80065dc:	898b      	ldrh	r3, [r1, #12]
 80065de:	05db      	lsls	r3, r3, #23
 80065e0:	4605      	mov	r5, r0
 80065e2:	460c      	mov	r4, r1
 80065e4:	4616      	mov	r6, r2
 80065e6:	d505      	bpl.n	80065f4 <__swrite+0x1e>
 80065e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065ec:	2302      	movs	r3, #2
 80065ee:	2200      	movs	r2, #0
 80065f0:	f000 f83c 	bl	800666c <_lseek_r>
 80065f4:	89a3      	ldrh	r3, [r4, #12]
 80065f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80065fa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80065fe:	81a3      	strh	r3, [r4, #12]
 8006600:	4632      	mov	r2, r6
 8006602:	463b      	mov	r3, r7
 8006604:	4628      	mov	r0, r5
 8006606:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800660a:	f000 b853 	b.w	80066b4 <_write_r>

0800660e <__sseek>:
 800660e:	b510      	push	{r4, lr}
 8006610:	460c      	mov	r4, r1
 8006612:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006616:	f000 f829 	bl	800666c <_lseek_r>
 800661a:	1c43      	adds	r3, r0, #1
 800661c:	89a3      	ldrh	r3, [r4, #12]
 800661e:	bf15      	itete	ne
 8006620:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006622:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006626:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800662a:	81a3      	strheq	r3, [r4, #12]
 800662c:	bf18      	it	ne
 800662e:	81a3      	strhne	r3, [r4, #12]
 8006630:	bd10      	pop	{r4, pc}

08006632 <__sclose>:
 8006632:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006636:	f000 b809 	b.w	800664c <_close_r>

0800663a <memset>:
 800663a:	4402      	add	r2, r0
 800663c:	4603      	mov	r3, r0
 800663e:	4293      	cmp	r3, r2
 8006640:	d100      	bne.n	8006644 <memset+0xa>
 8006642:	4770      	bx	lr
 8006644:	f803 1b01 	strb.w	r1, [r3], #1
 8006648:	e7f9      	b.n	800663e <memset+0x4>
	...

0800664c <_close_r>:
 800664c:	b538      	push	{r3, r4, r5, lr}
 800664e:	4d06      	ldr	r5, [pc, #24]	@ (8006668 <_close_r+0x1c>)
 8006650:	2300      	movs	r3, #0
 8006652:	4604      	mov	r4, r0
 8006654:	4608      	mov	r0, r1
 8006656:	602b      	str	r3, [r5, #0]
 8006658:	f7fa fcdc 	bl	8001014 <_close>
 800665c:	1c43      	adds	r3, r0, #1
 800665e:	d102      	bne.n	8006666 <_close_r+0x1a>
 8006660:	682b      	ldr	r3, [r5, #0]
 8006662:	b103      	cbz	r3, 8006666 <_close_r+0x1a>
 8006664:	6023      	str	r3, [r4, #0]
 8006666:	bd38      	pop	{r3, r4, r5, pc}
 8006668:	24000374 	.word	0x24000374

0800666c <_lseek_r>:
 800666c:	b538      	push	{r3, r4, r5, lr}
 800666e:	4d07      	ldr	r5, [pc, #28]	@ (800668c <_lseek_r+0x20>)
 8006670:	4604      	mov	r4, r0
 8006672:	4608      	mov	r0, r1
 8006674:	4611      	mov	r1, r2
 8006676:	2200      	movs	r2, #0
 8006678:	602a      	str	r2, [r5, #0]
 800667a:	461a      	mov	r2, r3
 800667c:	f7fa fcf1 	bl	8001062 <_lseek>
 8006680:	1c43      	adds	r3, r0, #1
 8006682:	d102      	bne.n	800668a <_lseek_r+0x1e>
 8006684:	682b      	ldr	r3, [r5, #0]
 8006686:	b103      	cbz	r3, 800668a <_lseek_r+0x1e>
 8006688:	6023      	str	r3, [r4, #0]
 800668a:	bd38      	pop	{r3, r4, r5, pc}
 800668c:	24000374 	.word	0x24000374

08006690 <_read_r>:
 8006690:	b538      	push	{r3, r4, r5, lr}
 8006692:	4d07      	ldr	r5, [pc, #28]	@ (80066b0 <_read_r+0x20>)
 8006694:	4604      	mov	r4, r0
 8006696:	4608      	mov	r0, r1
 8006698:	4611      	mov	r1, r2
 800669a:	2200      	movs	r2, #0
 800669c:	602a      	str	r2, [r5, #0]
 800669e:	461a      	mov	r2, r3
 80066a0:	f7fa fc7f 	bl	8000fa2 <_read>
 80066a4:	1c43      	adds	r3, r0, #1
 80066a6:	d102      	bne.n	80066ae <_read_r+0x1e>
 80066a8:	682b      	ldr	r3, [r5, #0]
 80066aa:	b103      	cbz	r3, 80066ae <_read_r+0x1e>
 80066ac:	6023      	str	r3, [r4, #0]
 80066ae:	bd38      	pop	{r3, r4, r5, pc}
 80066b0:	24000374 	.word	0x24000374

080066b4 <_write_r>:
 80066b4:	b538      	push	{r3, r4, r5, lr}
 80066b6:	4d07      	ldr	r5, [pc, #28]	@ (80066d4 <_write_r+0x20>)
 80066b8:	4604      	mov	r4, r0
 80066ba:	4608      	mov	r0, r1
 80066bc:	4611      	mov	r1, r2
 80066be:	2200      	movs	r2, #0
 80066c0:	602a      	str	r2, [r5, #0]
 80066c2:	461a      	mov	r2, r3
 80066c4:	f7fa fc8a 	bl	8000fdc <_write>
 80066c8:	1c43      	adds	r3, r0, #1
 80066ca:	d102      	bne.n	80066d2 <_write_r+0x1e>
 80066cc:	682b      	ldr	r3, [r5, #0]
 80066ce:	b103      	cbz	r3, 80066d2 <_write_r+0x1e>
 80066d0:	6023      	str	r3, [r4, #0]
 80066d2:	bd38      	pop	{r3, r4, r5, pc}
 80066d4:	24000374 	.word	0x24000374

080066d8 <__errno>:
 80066d8:	4b01      	ldr	r3, [pc, #4]	@ (80066e0 <__errno+0x8>)
 80066da:	6818      	ldr	r0, [r3, #0]
 80066dc:	4770      	bx	lr
 80066de:	bf00      	nop
 80066e0:	2400001c 	.word	0x2400001c

080066e4 <__libc_init_array>:
 80066e4:	b570      	push	{r4, r5, r6, lr}
 80066e6:	4d0d      	ldr	r5, [pc, #52]	@ (800671c <__libc_init_array+0x38>)
 80066e8:	4c0d      	ldr	r4, [pc, #52]	@ (8006720 <__libc_init_array+0x3c>)
 80066ea:	1b64      	subs	r4, r4, r5
 80066ec:	10a4      	asrs	r4, r4, #2
 80066ee:	2600      	movs	r6, #0
 80066f0:	42a6      	cmp	r6, r4
 80066f2:	d109      	bne.n	8006708 <__libc_init_array+0x24>
 80066f4:	4d0b      	ldr	r5, [pc, #44]	@ (8006724 <__libc_init_array+0x40>)
 80066f6:	4c0c      	ldr	r4, [pc, #48]	@ (8006728 <__libc_init_array+0x44>)
 80066f8:	f000 fdc6 	bl	8007288 <_init>
 80066fc:	1b64      	subs	r4, r4, r5
 80066fe:	10a4      	asrs	r4, r4, #2
 8006700:	2600      	movs	r6, #0
 8006702:	42a6      	cmp	r6, r4
 8006704:	d105      	bne.n	8006712 <__libc_init_array+0x2e>
 8006706:	bd70      	pop	{r4, r5, r6, pc}
 8006708:	f855 3b04 	ldr.w	r3, [r5], #4
 800670c:	4798      	blx	r3
 800670e:	3601      	adds	r6, #1
 8006710:	e7ee      	b.n	80066f0 <__libc_init_array+0xc>
 8006712:	f855 3b04 	ldr.w	r3, [r5], #4
 8006716:	4798      	blx	r3
 8006718:	3601      	adds	r6, #1
 800671a:	e7f2      	b.n	8006702 <__libc_init_array+0x1e>
 800671c:	08007390 	.word	0x08007390
 8006720:	08007390 	.word	0x08007390
 8006724:	08007390 	.word	0x08007390
 8006728:	08007394 	.word	0x08007394

0800672c <__retarget_lock_init_recursive>:
 800672c:	4770      	bx	lr

0800672e <__retarget_lock_acquire_recursive>:
 800672e:	4770      	bx	lr

08006730 <__retarget_lock_release_recursive>:
 8006730:	4770      	bx	lr

08006732 <memcpy>:
 8006732:	440a      	add	r2, r1
 8006734:	4291      	cmp	r1, r2
 8006736:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800673a:	d100      	bne.n	800673e <memcpy+0xc>
 800673c:	4770      	bx	lr
 800673e:	b510      	push	{r4, lr}
 8006740:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006744:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006748:	4291      	cmp	r1, r2
 800674a:	d1f9      	bne.n	8006740 <memcpy+0xe>
 800674c:	bd10      	pop	{r4, pc}
	...

08006750 <_free_r>:
 8006750:	b538      	push	{r3, r4, r5, lr}
 8006752:	4605      	mov	r5, r0
 8006754:	2900      	cmp	r1, #0
 8006756:	d041      	beq.n	80067dc <_free_r+0x8c>
 8006758:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800675c:	1f0c      	subs	r4, r1, #4
 800675e:	2b00      	cmp	r3, #0
 8006760:	bfb8      	it	lt
 8006762:	18e4      	addlt	r4, r4, r3
 8006764:	f000 f8e0 	bl	8006928 <__malloc_lock>
 8006768:	4a1d      	ldr	r2, [pc, #116]	@ (80067e0 <_free_r+0x90>)
 800676a:	6813      	ldr	r3, [r2, #0]
 800676c:	b933      	cbnz	r3, 800677c <_free_r+0x2c>
 800676e:	6063      	str	r3, [r4, #4]
 8006770:	6014      	str	r4, [r2, #0]
 8006772:	4628      	mov	r0, r5
 8006774:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006778:	f000 b8dc 	b.w	8006934 <__malloc_unlock>
 800677c:	42a3      	cmp	r3, r4
 800677e:	d908      	bls.n	8006792 <_free_r+0x42>
 8006780:	6820      	ldr	r0, [r4, #0]
 8006782:	1821      	adds	r1, r4, r0
 8006784:	428b      	cmp	r3, r1
 8006786:	bf01      	itttt	eq
 8006788:	6819      	ldreq	r1, [r3, #0]
 800678a:	685b      	ldreq	r3, [r3, #4]
 800678c:	1809      	addeq	r1, r1, r0
 800678e:	6021      	streq	r1, [r4, #0]
 8006790:	e7ed      	b.n	800676e <_free_r+0x1e>
 8006792:	461a      	mov	r2, r3
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	b10b      	cbz	r3, 800679c <_free_r+0x4c>
 8006798:	42a3      	cmp	r3, r4
 800679a:	d9fa      	bls.n	8006792 <_free_r+0x42>
 800679c:	6811      	ldr	r1, [r2, #0]
 800679e:	1850      	adds	r0, r2, r1
 80067a0:	42a0      	cmp	r0, r4
 80067a2:	d10b      	bne.n	80067bc <_free_r+0x6c>
 80067a4:	6820      	ldr	r0, [r4, #0]
 80067a6:	4401      	add	r1, r0
 80067a8:	1850      	adds	r0, r2, r1
 80067aa:	4283      	cmp	r3, r0
 80067ac:	6011      	str	r1, [r2, #0]
 80067ae:	d1e0      	bne.n	8006772 <_free_r+0x22>
 80067b0:	6818      	ldr	r0, [r3, #0]
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	6053      	str	r3, [r2, #4]
 80067b6:	4408      	add	r0, r1
 80067b8:	6010      	str	r0, [r2, #0]
 80067ba:	e7da      	b.n	8006772 <_free_r+0x22>
 80067bc:	d902      	bls.n	80067c4 <_free_r+0x74>
 80067be:	230c      	movs	r3, #12
 80067c0:	602b      	str	r3, [r5, #0]
 80067c2:	e7d6      	b.n	8006772 <_free_r+0x22>
 80067c4:	6820      	ldr	r0, [r4, #0]
 80067c6:	1821      	adds	r1, r4, r0
 80067c8:	428b      	cmp	r3, r1
 80067ca:	bf04      	itt	eq
 80067cc:	6819      	ldreq	r1, [r3, #0]
 80067ce:	685b      	ldreq	r3, [r3, #4]
 80067d0:	6063      	str	r3, [r4, #4]
 80067d2:	bf04      	itt	eq
 80067d4:	1809      	addeq	r1, r1, r0
 80067d6:	6021      	streq	r1, [r4, #0]
 80067d8:	6054      	str	r4, [r2, #4]
 80067da:	e7ca      	b.n	8006772 <_free_r+0x22>
 80067dc:	bd38      	pop	{r3, r4, r5, pc}
 80067de:	bf00      	nop
 80067e0:	24000380 	.word	0x24000380

080067e4 <sbrk_aligned>:
 80067e4:	b570      	push	{r4, r5, r6, lr}
 80067e6:	4e0f      	ldr	r6, [pc, #60]	@ (8006824 <sbrk_aligned+0x40>)
 80067e8:	460c      	mov	r4, r1
 80067ea:	6831      	ldr	r1, [r6, #0]
 80067ec:	4605      	mov	r5, r0
 80067ee:	b911      	cbnz	r1, 80067f6 <sbrk_aligned+0x12>
 80067f0:	f000 fcb6 	bl	8007160 <_sbrk_r>
 80067f4:	6030      	str	r0, [r6, #0]
 80067f6:	4621      	mov	r1, r4
 80067f8:	4628      	mov	r0, r5
 80067fa:	f000 fcb1 	bl	8007160 <_sbrk_r>
 80067fe:	1c43      	adds	r3, r0, #1
 8006800:	d103      	bne.n	800680a <sbrk_aligned+0x26>
 8006802:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8006806:	4620      	mov	r0, r4
 8006808:	bd70      	pop	{r4, r5, r6, pc}
 800680a:	1cc4      	adds	r4, r0, #3
 800680c:	f024 0403 	bic.w	r4, r4, #3
 8006810:	42a0      	cmp	r0, r4
 8006812:	d0f8      	beq.n	8006806 <sbrk_aligned+0x22>
 8006814:	1a21      	subs	r1, r4, r0
 8006816:	4628      	mov	r0, r5
 8006818:	f000 fca2 	bl	8007160 <_sbrk_r>
 800681c:	3001      	adds	r0, #1
 800681e:	d1f2      	bne.n	8006806 <sbrk_aligned+0x22>
 8006820:	e7ef      	b.n	8006802 <sbrk_aligned+0x1e>
 8006822:	bf00      	nop
 8006824:	2400037c 	.word	0x2400037c

08006828 <_malloc_r>:
 8006828:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800682c:	1ccd      	adds	r5, r1, #3
 800682e:	f025 0503 	bic.w	r5, r5, #3
 8006832:	3508      	adds	r5, #8
 8006834:	2d0c      	cmp	r5, #12
 8006836:	bf38      	it	cc
 8006838:	250c      	movcc	r5, #12
 800683a:	2d00      	cmp	r5, #0
 800683c:	4606      	mov	r6, r0
 800683e:	db01      	blt.n	8006844 <_malloc_r+0x1c>
 8006840:	42a9      	cmp	r1, r5
 8006842:	d904      	bls.n	800684e <_malloc_r+0x26>
 8006844:	230c      	movs	r3, #12
 8006846:	6033      	str	r3, [r6, #0]
 8006848:	2000      	movs	r0, #0
 800684a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800684e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006924 <_malloc_r+0xfc>
 8006852:	f000 f869 	bl	8006928 <__malloc_lock>
 8006856:	f8d8 3000 	ldr.w	r3, [r8]
 800685a:	461c      	mov	r4, r3
 800685c:	bb44      	cbnz	r4, 80068b0 <_malloc_r+0x88>
 800685e:	4629      	mov	r1, r5
 8006860:	4630      	mov	r0, r6
 8006862:	f7ff ffbf 	bl	80067e4 <sbrk_aligned>
 8006866:	1c43      	adds	r3, r0, #1
 8006868:	4604      	mov	r4, r0
 800686a:	d158      	bne.n	800691e <_malloc_r+0xf6>
 800686c:	f8d8 4000 	ldr.w	r4, [r8]
 8006870:	4627      	mov	r7, r4
 8006872:	2f00      	cmp	r7, #0
 8006874:	d143      	bne.n	80068fe <_malloc_r+0xd6>
 8006876:	2c00      	cmp	r4, #0
 8006878:	d04b      	beq.n	8006912 <_malloc_r+0xea>
 800687a:	6823      	ldr	r3, [r4, #0]
 800687c:	4639      	mov	r1, r7
 800687e:	4630      	mov	r0, r6
 8006880:	eb04 0903 	add.w	r9, r4, r3
 8006884:	f000 fc6c 	bl	8007160 <_sbrk_r>
 8006888:	4581      	cmp	r9, r0
 800688a:	d142      	bne.n	8006912 <_malloc_r+0xea>
 800688c:	6821      	ldr	r1, [r4, #0]
 800688e:	1a6d      	subs	r5, r5, r1
 8006890:	4629      	mov	r1, r5
 8006892:	4630      	mov	r0, r6
 8006894:	f7ff ffa6 	bl	80067e4 <sbrk_aligned>
 8006898:	3001      	adds	r0, #1
 800689a:	d03a      	beq.n	8006912 <_malloc_r+0xea>
 800689c:	6823      	ldr	r3, [r4, #0]
 800689e:	442b      	add	r3, r5
 80068a0:	6023      	str	r3, [r4, #0]
 80068a2:	f8d8 3000 	ldr.w	r3, [r8]
 80068a6:	685a      	ldr	r2, [r3, #4]
 80068a8:	bb62      	cbnz	r2, 8006904 <_malloc_r+0xdc>
 80068aa:	f8c8 7000 	str.w	r7, [r8]
 80068ae:	e00f      	b.n	80068d0 <_malloc_r+0xa8>
 80068b0:	6822      	ldr	r2, [r4, #0]
 80068b2:	1b52      	subs	r2, r2, r5
 80068b4:	d420      	bmi.n	80068f8 <_malloc_r+0xd0>
 80068b6:	2a0b      	cmp	r2, #11
 80068b8:	d917      	bls.n	80068ea <_malloc_r+0xc2>
 80068ba:	1961      	adds	r1, r4, r5
 80068bc:	42a3      	cmp	r3, r4
 80068be:	6025      	str	r5, [r4, #0]
 80068c0:	bf18      	it	ne
 80068c2:	6059      	strne	r1, [r3, #4]
 80068c4:	6863      	ldr	r3, [r4, #4]
 80068c6:	bf08      	it	eq
 80068c8:	f8c8 1000 	streq.w	r1, [r8]
 80068cc:	5162      	str	r2, [r4, r5]
 80068ce:	604b      	str	r3, [r1, #4]
 80068d0:	4630      	mov	r0, r6
 80068d2:	f000 f82f 	bl	8006934 <__malloc_unlock>
 80068d6:	f104 000b 	add.w	r0, r4, #11
 80068da:	1d23      	adds	r3, r4, #4
 80068dc:	f020 0007 	bic.w	r0, r0, #7
 80068e0:	1ac2      	subs	r2, r0, r3
 80068e2:	bf1c      	itt	ne
 80068e4:	1a1b      	subne	r3, r3, r0
 80068e6:	50a3      	strne	r3, [r4, r2]
 80068e8:	e7af      	b.n	800684a <_malloc_r+0x22>
 80068ea:	6862      	ldr	r2, [r4, #4]
 80068ec:	42a3      	cmp	r3, r4
 80068ee:	bf0c      	ite	eq
 80068f0:	f8c8 2000 	streq.w	r2, [r8]
 80068f4:	605a      	strne	r2, [r3, #4]
 80068f6:	e7eb      	b.n	80068d0 <_malloc_r+0xa8>
 80068f8:	4623      	mov	r3, r4
 80068fa:	6864      	ldr	r4, [r4, #4]
 80068fc:	e7ae      	b.n	800685c <_malloc_r+0x34>
 80068fe:	463c      	mov	r4, r7
 8006900:	687f      	ldr	r7, [r7, #4]
 8006902:	e7b6      	b.n	8006872 <_malloc_r+0x4a>
 8006904:	461a      	mov	r2, r3
 8006906:	685b      	ldr	r3, [r3, #4]
 8006908:	42a3      	cmp	r3, r4
 800690a:	d1fb      	bne.n	8006904 <_malloc_r+0xdc>
 800690c:	2300      	movs	r3, #0
 800690e:	6053      	str	r3, [r2, #4]
 8006910:	e7de      	b.n	80068d0 <_malloc_r+0xa8>
 8006912:	230c      	movs	r3, #12
 8006914:	6033      	str	r3, [r6, #0]
 8006916:	4630      	mov	r0, r6
 8006918:	f000 f80c 	bl	8006934 <__malloc_unlock>
 800691c:	e794      	b.n	8006848 <_malloc_r+0x20>
 800691e:	6005      	str	r5, [r0, #0]
 8006920:	e7d6      	b.n	80068d0 <_malloc_r+0xa8>
 8006922:	bf00      	nop
 8006924:	24000380 	.word	0x24000380

08006928 <__malloc_lock>:
 8006928:	4801      	ldr	r0, [pc, #4]	@ (8006930 <__malloc_lock+0x8>)
 800692a:	f7ff bf00 	b.w	800672e <__retarget_lock_acquire_recursive>
 800692e:	bf00      	nop
 8006930:	24000378 	.word	0x24000378

08006934 <__malloc_unlock>:
 8006934:	4801      	ldr	r0, [pc, #4]	@ (800693c <__malloc_unlock+0x8>)
 8006936:	f7ff befb 	b.w	8006730 <__retarget_lock_release_recursive>
 800693a:	bf00      	nop
 800693c:	24000378 	.word	0x24000378

08006940 <__sfputc_r>:
 8006940:	6893      	ldr	r3, [r2, #8]
 8006942:	3b01      	subs	r3, #1
 8006944:	2b00      	cmp	r3, #0
 8006946:	b410      	push	{r4}
 8006948:	6093      	str	r3, [r2, #8]
 800694a:	da08      	bge.n	800695e <__sfputc_r+0x1e>
 800694c:	6994      	ldr	r4, [r2, #24]
 800694e:	42a3      	cmp	r3, r4
 8006950:	db01      	blt.n	8006956 <__sfputc_r+0x16>
 8006952:	290a      	cmp	r1, #10
 8006954:	d103      	bne.n	800695e <__sfputc_r+0x1e>
 8006956:	f85d 4b04 	ldr.w	r4, [sp], #4
 800695a:	f000 bb6d 	b.w	8007038 <__swbuf_r>
 800695e:	6813      	ldr	r3, [r2, #0]
 8006960:	1c58      	adds	r0, r3, #1
 8006962:	6010      	str	r0, [r2, #0]
 8006964:	7019      	strb	r1, [r3, #0]
 8006966:	4608      	mov	r0, r1
 8006968:	f85d 4b04 	ldr.w	r4, [sp], #4
 800696c:	4770      	bx	lr

0800696e <__sfputs_r>:
 800696e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006970:	4606      	mov	r6, r0
 8006972:	460f      	mov	r7, r1
 8006974:	4614      	mov	r4, r2
 8006976:	18d5      	adds	r5, r2, r3
 8006978:	42ac      	cmp	r4, r5
 800697a:	d101      	bne.n	8006980 <__sfputs_r+0x12>
 800697c:	2000      	movs	r0, #0
 800697e:	e007      	b.n	8006990 <__sfputs_r+0x22>
 8006980:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006984:	463a      	mov	r2, r7
 8006986:	4630      	mov	r0, r6
 8006988:	f7ff ffda 	bl	8006940 <__sfputc_r>
 800698c:	1c43      	adds	r3, r0, #1
 800698e:	d1f3      	bne.n	8006978 <__sfputs_r+0xa>
 8006990:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006994 <_vfiprintf_r>:
 8006994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006998:	460d      	mov	r5, r1
 800699a:	b09d      	sub	sp, #116	@ 0x74
 800699c:	4614      	mov	r4, r2
 800699e:	4698      	mov	r8, r3
 80069a0:	4606      	mov	r6, r0
 80069a2:	b118      	cbz	r0, 80069ac <_vfiprintf_r+0x18>
 80069a4:	6a03      	ldr	r3, [r0, #32]
 80069a6:	b90b      	cbnz	r3, 80069ac <_vfiprintf_r+0x18>
 80069a8:	f7ff fdbc 	bl	8006524 <__sinit>
 80069ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80069ae:	07d9      	lsls	r1, r3, #31
 80069b0:	d405      	bmi.n	80069be <_vfiprintf_r+0x2a>
 80069b2:	89ab      	ldrh	r3, [r5, #12]
 80069b4:	059a      	lsls	r2, r3, #22
 80069b6:	d402      	bmi.n	80069be <_vfiprintf_r+0x2a>
 80069b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80069ba:	f7ff feb8 	bl	800672e <__retarget_lock_acquire_recursive>
 80069be:	89ab      	ldrh	r3, [r5, #12]
 80069c0:	071b      	lsls	r3, r3, #28
 80069c2:	d501      	bpl.n	80069c8 <_vfiprintf_r+0x34>
 80069c4:	692b      	ldr	r3, [r5, #16]
 80069c6:	b99b      	cbnz	r3, 80069f0 <_vfiprintf_r+0x5c>
 80069c8:	4629      	mov	r1, r5
 80069ca:	4630      	mov	r0, r6
 80069cc:	f000 fb72 	bl	80070b4 <__swsetup_r>
 80069d0:	b170      	cbz	r0, 80069f0 <_vfiprintf_r+0x5c>
 80069d2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80069d4:	07dc      	lsls	r4, r3, #31
 80069d6:	d504      	bpl.n	80069e2 <_vfiprintf_r+0x4e>
 80069d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80069dc:	b01d      	add	sp, #116	@ 0x74
 80069de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069e2:	89ab      	ldrh	r3, [r5, #12]
 80069e4:	0598      	lsls	r0, r3, #22
 80069e6:	d4f7      	bmi.n	80069d8 <_vfiprintf_r+0x44>
 80069e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80069ea:	f7ff fea1 	bl	8006730 <__retarget_lock_release_recursive>
 80069ee:	e7f3      	b.n	80069d8 <_vfiprintf_r+0x44>
 80069f0:	2300      	movs	r3, #0
 80069f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80069f4:	2320      	movs	r3, #32
 80069f6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80069fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80069fe:	2330      	movs	r3, #48	@ 0x30
 8006a00:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006bb0 <_vfiprintf_r+0x21c>
 8006a04:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006a08:	f04f 0901 	mov.w	r9, #1
 8006a0c:	4623      	mov	r3, r4
 8006a0e:	469a      	mov	sl, r3
 8006a10:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006a14:	b10a      	cbz	r2, 8006a1a <_vfiprintf_r+0x86>
 8006a16:	2a25      	cmp	r2, #37	@ 0x25
 8006a18:	d1f9      	bne.n	8006a0e <_vfiprintf_r+0x7a>
 8006a1a:	ebba 0b04 	subs.w	fp, sl, r4
 8006a1e:	d00b      	beq.n	8006a38 <_vfiprintf_r+0xa4>
 8006a20:	465b      	mov	r3, fp
 8006a22:	4622      	mov	r2, r4
 8006a24:	4629      	mov	r1, r5
 8006a26:	4630      	mov	r0, r6
 8006a28:	f7ff ffa1 	bl	800696e <__sfputs_r>
 8006a2c:	3001      	adds	r0, #1
 8006a2e:	f000 80a7 	beq.w	8006b80 <_vfiprintf_r+0x1ec>
 8006a32:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006a34:	445a      	add	r2, fp
 8006a36:	9209      	str	r2, [sp, #36]	@ 0x24
 8006a38:	f89a 3000 	ldrb.w	r3, [sl]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	f000 809f 	beq.w	8006b80 <_vfiprintf_r+0x1ec>
 8006a42:	2300      	movs	r3, #0
 8006a44:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006a48:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006a4c:	f10a 0a01 	add.w	sl, sl, #1
 8006a50:	9304      	str	r3, [sp, #16]
 8006a52:	9307      	str	r3, [sp, #28]
 8006a54:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006a58:	931a      	str	r3, [sp, #104]	@ 0x68
 8006a5a:	4654      	mov	r4, sl
 8006a5c:	2205      	movs	r2, #5
 8006a5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a62:	4853      	ldr	r0, [pc, #332]	@ (8006bb0 <_vfiprintf_r+0x21c>)
 8006a64:	f7f9 fc3c 	bl	80002e0 <memchr>
 8006a68:	9a04      	ldr	r2, [sp, #16]
 8006a6a:	b9d8      	cbnz	r0, 8006aa4 <_vfiprintf_r+0x110>
 8006a6c:	06d1      	lsls	r1, r2, #27
 8006a6e:	bf44      	itt	mi
 8006a70:	2320      	movmi	r3, #32
 8006a72:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006a76:	0713      	lsls	r3, r2, #28
 8006a78:	bf44      	itt	mi
 8006a7a:	232b      	movmi	r3, #43	@ 0x2b
 8006a7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006a80:	f89a 3000 	ldrb.w	r3, [sl]
 8006a84:	2b2a      	cmp	r3, #42	@ 0x2a
 8006a86:	d015      	beq.n	8006ab4 <_vfiprintf_r+0x120>
 8006a88:	9a07      	ldr	r2, [sp, #28]
 8006a8a:	4654      	mov	r4, sl
 8006a8c:	2000      	movs	r0, #0
 8006a8e:	f04f 0c0a 	mov.w	ip, #10
 8006a92:	4621      	mov	r1, r4
 8006a94:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006a98:	3b30      	subs	r3, #48	@ 0x30
 8006a9a:	2b09      	cmp	r3, #9
 8006a9c:	d94b      	bls.n	8006b36 <_vfiprintf_r+0x1a2>
 8006a9e:	b1b0      	cbz	r0, 8006ace <_vfiprintf_r+0x13a>
 8006aa0:	9207      	str	r2, [sp, #28]
 8006aa2:	e014      	b.n	8006ace <_vfiprintf_r+0x13a>
 8006aa4:	eba0 0308 	sub.w	r3, r0, r8
 8006aa8:	fa09 f303 	lsl.w	r3, r9, r3
 8006aac:	4313      	orrs	r3, r2
 8006aae:	9304      	str	r3, [sp, #16]
 8006ab0:	46a2      	mov	sl, r4
 8006ab2:	e7d2      	b.n	8006a5a <_vfiprintf_r+0xc6>
 8006ab4:	9b03      	ldr	r3, [sp, #12]
 8006ab6:	1d19      	adds	r1, r3, #4
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	9103      	str	r1, [sp, #12]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	bfbb      	ittet	lt
 8006ac0:	425b      	neglt	r3, r3
 8006ac2:	f042 0202 	orrlt.w	r2, r2, #2
 8006ac6:	9307      	strge	r3, [sp, #28]
 8006ac8:	9307      	strlt	r3, [sp, #28]
 8006aca:	bfb8      	it	lt
 8006acc:	9204      	strlt	r2, [sp, #16]
 8006ace:	7823      	ldrb	r3, [r4, #0]
 8006ad0:	2b2e      	cmp	r3, #46	@ 0x2e
 8006ad2:	d10a      	bne.n	8006aea <_vfiprintf_r+0x156>
 8006ad4:	7863      	ldrb	r3, [r4, #1]
 8006ad6:	2b2a      	cmp	r3, #42	@ 0x2a
 8006ad8:	d132      	bne.n	8006b40 <_vfiprintf_r+0x1ac>
 8006ada:	9b03      	ldr	r3, [sp, #12]
 8006adc:	1d1a      	adds	r2, r3, #4
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	9203      	str	r2, [sp, #12]
 8006ae2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006ae6:	3402      	adds	r4, #2
 8006ae8:	9305      	str	r3, [sp, #20]
 8006aea:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006bc0 <_vfiprintf_r+0x22c>
 8006aee:	7821      	ldrb	r1, [r4, #0]
 8006af0:	2203      	movs	r2, #3
 8006af2:	4650      	mov	r0, sl
 8006af4:	f7f9 fbf4 	bl	80002e0 <memchr>
 8006af8:	b138      	cbz	r0, 8006b0a <_vfiprintf_r+0x176>
 8006afa:	9b04      	ldr	r3, [sp, #16]
 8006afc:	eba0 000a 	sub.w	r0, r0, sl
 8006b00:	2240      	movs	r2, #64	@ 0x40
 8006b02:	4082      	lsls	r2, r0
 8006b04:	4313      	orrs	r3, r2
 8006b06:	3401      	adds	r4, #1
 8006b08:	9304      	str	r3, [sp, #16]
 8006b0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b0e:	4829      	ldr	r0, [pc, #164]	@ (8006bb4 <_vfiprintf_r+0x220>)
 8006b10:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006b14:	2206      	movs	r2, #6
 8006b16:	f7f9 fbe3 	bl	80002e0 <memchr>
 8006b1a:	2800      	cmp	r0, #0
 8006b1c:	d03f      	beq.n	8006b9e <_vfiprintf_r+0x20a>
 8006b1e:	4b26      	ldr	r3, [pc, #152]	@ (8006bb8 <_vfiprintf_r+0x224>)
 8006b20:	bb1b      	cbnz	r3, 8006b6a <_vfiprintf_r+0x1d6>
 8006b22:	9b03      	ldr	r3, [sp, #12]
 8006b24:	3307      	adds	r3, #7
 8006b26:	f023 0307 	bic.w	r3, r3, #7
 8006b2a:	3308      	adds	r3, #8
 8006b2c:	9303      	str	r3, [sp, #12]
 8006b2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b30:	443b      	add	r3, r7
 8006b32:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b34:	e76a      	b.n	8006a0c <_vfiprintf_r+0x78>
 8006b36:	fb0c 3202 	mla	r2, ip, r2, r3
 8006b3a:	460c      	mov	r4, r1
 8006b3c:	2001      	movs	r0, #1
 8006b3e:	e7a8      	b.n	8006a92 <_vfiprintf_r+0xfe>
 8006b40:	2300      	movs	r3, #0
 8006b42:	3401      	adds	r4, #1
 8006b44:	9305      	str	r3, [sp, #20]
 8006b46:	4619      	mov	r1, r3
 8006b48:	f04f 0c0a 	mov.w	ip, #10
 8006b4c:	4620      	mov	r0, r4
 8006b4e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006b52:	3a30      	subs	r2, #48	@ 0x30
 8006b54:	2a09      	cmp	r2, #9
 8006b56:	d903      	bls.n	8006b60 <_vfiprintf_r+0x1cc>
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d0c6      	beq.n	8006aea <_vfiprintf_r+0x156>
 8006b5c:	9105      	str	r1, [sp, #20]
 8006b5e:	e7c4      	b.n	8006aea <_vfiprintf_r+0x156>
 8006b60:	fb0c 2101 	mla	r1, ip, r1, r2
 8006b64:	4604      	mov	r4, r0
 8006b66:	2301      	movs	r3, #1
 8006b68:	e7f0      	b.n	8006b4c <_vfiprintf_r+0x1b8>
 8006b6a:	ab03      	add	r3, sp, #12
 8006b6c:	9300      	str	r3, [sp, #0]
 8006b6e:	462a      	mov	r2, r5
 8006b70:	4b12      	ldr	r3, [pc, #72]	@ (8006bbc <_vfiprintf_r+0x228>)
 8006b72:	a904      	add	r1, sp, #16
 8006b74:	4630      	mov	r0, r6
 8006b76:	f3af 8000 	nop.w
 8006b7a:	4607      	mov	r7, r0
 8006b7c:	1c78      	adds	r0, r7, #1
 8006b7e:	d1d6      	bne.n	8006b2e <_vfiprintf_r+0x19a>
 8006b80:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006b82:	07d9      	lsls	r1, r3, #31
 8006b84:	d405      	bmi.n	8006b92 <_vfiprintf_r+0x1fe>
 8006b86:	89ab      	ldrh	r3, [r5, #12]
 8006b88:	059a      	lsls	r2, r3, #22
 8006b8a:	d402      	bmi.n	8006b92 <_vfiprintf_r+0x1fe>
 8006b8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006b8e:	f7ff fdcf 	bl	8006730 <__retarget_lock_release_recursive>
 8006b92:	89ab      	ldrh	r3, [r5, #12]
 8006b94:	065b      	lsls	r3, r3, #25
 8006b96:	f53f af1f 	bmi.w	80069d8 <_vfiprintf_r+0x44>
 8006b9a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006b9c:	e71e      	b.n	80069dc <_vfiprintf_r+0x48>
 8006b9e:	ab03      	add	r3, sp, #12
 8006ba0:	9300      	str	r3, [sp, #0]
 8006ba2:	462a      	mov	r2, r5
 8006ba4:	4b05      	ldr	r3, [pc, #20]	@ (8006bbc <_vfiprintf_r+0x228>)
 8006ba6:	a904      	add	r1, sp, #16
 8006ba8:	4630      	mov	r0, r6
 8006baa:	f000 f879 	bl	8006ca0 <_printf_i>
 8006bae:	e7e4      	b.n	8006b7a <_vfiprintf_r+0x1e6>
 8006bb0:	08007354 	.word	0x08007354
 8006bb4:	0800735e 	.word	0x0800735e
 8006bb8:	00000000 	.word	0x00000000
 8006bbc:	0800696f 	.word	0x0800696f
 8006bc0:	0800735a 	.word	0x0800735a

08006bc4 <_printf_common>:
 8006bc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006bc8:	4616      	mov	r6, r2
 8006bca:	4698      	mov	r8, r3
 8006bcc:	688a      	ldr	r2, [r1, #8]
 8006bce:	690b      	ldr	r3, [r1, #16]
 8006bd0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	bfb8      	it	lt
 8006bd8:	4613      	movlt	r3, r2
 8006bda:	6033      	str	r3, [r6, #0]
 8006bdc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006be0:	4607      	mov	r7, r0
 8006be2:	460c      	mov	r4, r1
 8006be4:	b10a      	cbz	r2, 8006bea <_printf_common+0x26>
 8006be6:	3301      	adds	r3, #1
 8006be8:	6033      	str	r3, [r6, #0]
 8006bea:	6823      	ldr	r3, [r4, #0]
 8006bec:	0699      	lsls	r1, r3, #26
 8006bee:	bf42      	ittt	mi
 8006bf0:	6833      	ldrmi	r3, [r6, #0]
 8006bf2:	3302      	addmi	r3, #2
 8006bf4:	6033      	strmi	r3, [r6, #0]
 8006bf6:	6825      	ldr	r5, [r4, #0]
 8006bf8:	f015 0506 	ands.w	r5, r5, #6
 8006bfc:	d106      	bne.n	8006c0c <_printf_common+0x48>
 8006bfe:	f104 0a19 	add.w	sl, r4, #25
 8006c02:	68e3      	ldr	r3, [r4, #12]
 8006c04:	6832      	ldr	r2, [r6, #0]
 8006c06:	1a9b      	subs	r3, r3, r2
 8006c08:	42ab      	cmp	r3, r5
 8006c0a:	dc26      	bgt.n	8006c5a <_printf_common+0x96>
 8006c0c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006c10:	6822      	ldr	r2, [r4, #0]
 8006c12:	3b00      	subs	r3, #0
 8006c14:	bf18      	it	ne
 8006c16:	2301      	movne	r3, #1
 8006c18:	0692      	lsls	r2, r2, #26
 8006c1a:	d42b      	bmi.n	8006c74 <_printf_common+0xb0>
 8006c1c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006c20:	4641      	mov	r1, r8
 8006c22:	4638      	mov	r0, r7
 8006c24:	47c8      	blx	r9
 8006c26:	3001      	adds	r0, #1
 8006c28:	d01e      	beq.n	8006c68 <_printf_common+0xa4>
 8006c2a:	6823      	ldr	r3, [r4, #0]
 8006c2c:	6922      	ldr	r2, [r4, #16]
 8006c2e:	f003 0306 	and.w	r3, r3, #6
 8006c32:	2b04      	cmp	r3, #4
 8006c34:	bf02      	ittt	eq
 8006c36:	68e5      	ldreq	r5, [r4, #12]
 8006c38:	6833      	ldreq	r3, [r6, #0]
 8006c3a:	1aed      	subeq	r5, r5, r3
 8006c3c:	68a3      	ldr	r3, [r4, #8]
 8006c3e:	bf0c      	ite	eq
 8006c40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006c44:	2500      	movne	r5, #0
 8006c46:	4293      	cmp	r3, r2
 8006c48:	bfc4      	itt	gt
 8006c4a:	1a9b      	subgt	r3, r3, r2
 8006c4c:	18ed      	addgt	r5, r5, r3
 8006c4e:	2600      	movs	r6, #0
 8006c50:	341a      	adds	r4, #26
 8006c52:	42b5      	cmp	r5, r6
 8006c54:	d11a      	bne.n	8006c8c <_printf_common+0xc8>
 8006c56:	2000      	movs	r0, #0
 8006c58:	e008      	b.n	8006c6c <_printf_common+0xa8>
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	4652      	mov	r2, sl
 8006c5e:	4641      	mov	r1, r8
 8006c60:	4638      	mov	r0, r7
 8006c62:	47c8      	blx	r9
 8006c64:	3001      	adds	r0, #1
 8006c66:	d103      	bne.n	8006c70 <_printf_common+0xac>
 8006c68:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006c6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c70:	3501      	adds	r5, #1
 8006c72:	e7c6      	b.n	8006c02 <_printf_common+0x3e>
 8006c74:	18e1      	adds	r1, r4, r3
 8006c76:	1c5a      	adds	r2, r3, #1
 8006c78:	2030      	movs	r0, #48	@ 0x30
 8006c7a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006c7e:	4422      	add	r2, r4
 8006c80:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006c84:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006c88:	3302      	adds	r3, #2
 8006c8a:	e7c7      	b.n	8006c1c <_printf_common+0x58>
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	4622      	mov	r2, r4
 8006c90:	4641      	mov	r1, r8
 8006c92:	4638      	mov	r0, r7
 8006c94:	47c8      	blx	r9
 8006c96:	3001      	adds	r0, #1
 8006c98:	d0e6      	beq.n	8006c68 <_printf_common+0xa4>
 8006c9a:	3601      	adds	r6, #1
 8006c9c:	e7d9      	b.n	8006c52 <_printf_common+0x8e>
	...

08006ca0 <_printf_i>:
 8006ca0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ca4:	7e0f      	ldrb	r7, [r1, #24]
 8006ca6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006ca8:	2f78      	cmp	r7, #120	@ 0x78
 8006caa:	4691      	mov	r9, r2
 8006cac:	4680      	mov	r8, r0
 8006cae:	460c      	mov	r4, r1
 8006cb0:	469a      	mov	sl, r3
 8006cb2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006cb6:	d807      	bhi.n	8006cc8 <_printf_i+0x28>
 8006cb8:	2f62      	cmp	r7, #98	@ 0x62
 8006cba:	d80a      	bhi.n	8006cd2 <_printf_i+0x32>
 8006cbc:	2f00      	cmp	r7, #0
 8006cbe:	f000 80d2 	beq.w	8006e66 <_printf_i+0x1c6>
 8006cc2:	2f58      	cmp	r7, #88	@ 0x58
 8006cc4:	f000 80b9 	beq.w	8006e3a <_printf_i+0x19a>
 8006cc8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006ccc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006cd0:	e03a      	b.n	8006d48 <_printf_i+0xa8>
 8006cd2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006cd6:	2b15      	cmp	r3, #21
 8006cd8:	d8f6      	bhi.n	8006cc8 <_printf_i+0x28>
 8006cda:	a101      	add	r1, pc, #4	@ (adr r1, 8006ce0 <_printf_i+0x40>)
 8006cdc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006ce0:	08006d39 	.word	0x08006d39
 8006ce4:	08006d4d 	.word	0x08006d4d
 8006ce8:	08006cc9 	.word	0x08006cc9
 8006cec:	08006cc9 	.word	0x08006cc9
 8006cf0:	08006cc9 	.word	0x08006cc9
 8006cf4:	08006cc9 	.word	0x08006cc9
 8006cf8:	08006d4d 	.word	0x08006d4d
 8006cfc:	08006cc9 	.word	0x08006cc9
 8006d00:	08006cc9 	.word	0x08006cc9
 8006d04:	08006cc9 	.word	0x08006cc9
 8006d08:	08006cc9 	.word	0x08006cc9
 8006d0c:	08006e4d 	.word	0x08006e4d
 8006d10:	08006d77 	.word	0x08006d77
 8006d14:	08006e07 	.word	0x08006e07
 8006d18:	08006cc9 	.word	0x08006cc9
 8006d1c:	08006cc9 	.word	0x08006cc9
 8006d20:	08006e6f 	.word	0x08006e6f
 8006d24:	08006cc9 	.word	0x08006cc9
 8006d28:	08006d77 	.word	0x08006d77
 8006d2c:	08006cc9 	.word	0x08006cc9
 8006d30:	08006cc9 	.word	0x08006cc9
 8006d34:	08006e0f 	.word	0x08006e0f
 8006d38:	6833      	ldr	r3, [r6, #0]
 8006d3a:	1d1a      	adds	r2, r3, #4
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	6032      	str	r2, [r6, #0]
 8006d40:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006d44:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006d48:	2301      	movs	r3, #1
 8006d4a:	e09d      	b.n	8006e88 <_printf_i+0x1e8>
 8006d4c:	6833      	ldr	r3, [r6, #0]
 8006d4e:	6820      	ldr	r0, [r4, #0]
 8006d50:	1d19      	adds	r1, r3, #4
 8006d52:	6031      	str	r1, [r6, #0]
 8006d54:	0606      	lsls	r6, r0, #24
 8006d56:	d501      	bpl.n	8006d5c <_printf_i+0xbc>
 8006d58:	681d      	ldr	r5, [r3, #0]
 8006d5a:	e003      	b.n	8006d64 <_printf_i+0xc4>
 8006d5c:	0645      	lsls	r5, r0, #25
 8006d5e:	d5fb      	bpl.n	8006d58 <_printf_i+0xb8>
 8006d60:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006d64:	2d00      	cmp	r5, #0
 8006d66:	da03      	bge.n	8006d70 <_printf_i+0xd0>
 8006d68:	232d      	movs	r3, #45	@ 0x2d
 8006d6a:	426d      	negs	r5, r5
 8006d6c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006d70:	4859      	ldr	r0, [pc, #356]	@ (8006ed8 <_printf_i+0x238>)
 8006d72:	230a      	movs	r3, #10
 8006d74:	e011      	b.n	8006d9a <_printf_i+0xfa>
 8006d76:	6821      	ldr	r1, [r4, #0]
 8006d78:	6833      	ldr	r3, [r6, #0]
 8006d7a:	0608      	lsls	r0, r1, #24
 8006d7c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006d80:	d402      	bmi.n	8006d88 <_printf_i+0xe8>
 8006d82:	0649      	lsls	r1, r1, #25
 8006d84:	bf48      	it	mi
 8006d86:	b2ad      	uxthmi	r5, r5
 8006d88:	2f6f      	cmp	r7, #111	@ 0x6f
 8006d8a:	4853      	ldr	r0, [pc, #332]	@ (8006ed8 <_printf_i+0x238>)
 8006d8c:	6033      	str	r3, [r6, #0]
 8006d8e:	bf14      	ite	ne
 8006d90:	230a      	movne	r3, #10
 8006d92:	2308      	moveq	r3, #8
 8006d94:	2100      	movs	r1, #0
 8006d96:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006d9a:	6866      	ldr	r6, [r4, #4]
 8006d9c:	60a6      	str	r6, [r4, #8]
 8006d9e:	2e00      	cmp	r6, #0
 8006da0:	bfa2      	ittt	ge
 8006da2:	6821      	ldrge	r1, [r4, #0]
 8006da4:	f021 0104 	bicge.w	r1, r1, #4
 8006da8:	6021      	strge	r1, [r4, #0]
 8006daa:	b90d      	cbnz	r5, 8006db0 <_printf_i+0x110>
 8006dac:	2e00      	cmp	r6, #0
 8006dae:	d04b      	beq.n	8006e48 <_printf_i+0x1a8>
 8006db0:	4616      	mov	r6, r2
 8006db2:	fbb5 f1f3 	udiv	r1, r5, r3
 8006db6:	fb03 5711 	mls	r7, r3, r1, r5
 8006dba:	5dc7      	ldrb	r7, [r0, r7]
 8006dbc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006dc0:	462f      	mov	r7, r5
 8006dc2:	42bb      	cmp	r3, r7
 8006dc4:	460d      	mov	r5, r1
 8006dc6:	d9f4      	bls.n	8006db2 <_printf_i+0x112>
 8006dc8:	2b08      	cmp	r3, #8
 8006dca:	d10b      	bne.n	8006de4 <_printf_i+0x144>
 8006dcc:	6823      	ldr	r3, [r4, #0]
 8006dce:	07df      	lsls	r7, r3, #31
 8006dd0:	d508      	bpl.n	8006de4 <_printf_i+0x144>
 8006dd2:	6923      	ldr	r3, [r4, #16]
 8006dd4:	6861      	ldr	r1, [r4, #4]
 8006dd6:	4299      	cmp	r1, r3
 8006dd8:	bfde      	ittt	le
 8006dda:	2330      	movle	r3, #48	@ 0x30
 8006ddc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006de0:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8006de4:	1b92      	subs	r2, r2, r6
 8006de6:	6122      	str	r2, [r4, #16]
 8006de8:	f8cd a000 	str.w	sl, [sp]
 8006dec:	464b      	mov	r3, r9
 8006dee:	aa03      	add	r2, sp, #12
 8006df0:	4621      	mov	r1, r4
 8006df2:	4640      	mov	r0, r8
 8006df4:	f7ff fee6 	bl	8006bc4 <_printf_common>
 8006df8:	3001      	adds	r0, #1
 8006dfa:	d14a      	bne.n	8006e92 <_printf_i+0x1f2>
 8006dfc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006e00:	b004      	add	sp, #16
 8006e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e06:	6823      	ldr	r3, [r4, #0]
 8006e08:	f043 0320 	orr.w	r3, r3, #32
 8006e0c:	6023      	str	r3, [r4, #0]
 8006e0e:	4833      	ldr	r0, [pc, #204]	@ (8006edc <_printf_i+0x23c>)
 8006e10:	2778      	movs	r7, #120	@ 0x78
 8006e12:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006e16:	6823      	ldr	r3, [r4, #0]
 8006e18:	6831      	ldr	r1, [r6, #0]
 8006e1a:	061f      	lsls	r7, r3, #24
 8006e1c:	f851 5b04 	ldr.w	r5, [r1], #4
 8006e20:	d402      	bmi.n	8006e28 <_printf_i+0x188>
 8006e22:	065f      	lsls	r7, r3, #25
 8006e24:	bf48      	it	mi
 8006e26:	b2ad      	uxthmi	r5, r5
 8006e28:	6031      	str	r1, [r6, #0]
 8006e2a:	07d9      	lsls	r1, r3, #31
 8006e2c:	bf44      	itt	mi
 8006e2e:	f043 0320 	orrmi.w	r3, r3, #32
 8006e32:	6023      	strmi	r3, [r4, #0]
 8006e34:	b11d      	cbz	r5, 8006e3e <_printf_i+0x19e>
 8006e36:	2310      	movs	r3, #16
 8006e38:	e7ac      	b.n	8006d94 <_printf_i+0xf4>
 8006e3a:	4827      	ldr	r0, [pc, #156]	@ (8006ed8 <_printf_i+0x238>)
 8006e3c:	e7e9      	b.n	8006e12 <_printf_i+0x172>
 8006e3e:	6823      	ldr	r3, [r4, #0]
 8006e40:	f023 0320 	bic.w	r3, r3, #32
 8006e44:	6023      	str	r3, [r4, #0]
 8006e46:	e7f6      	b.n	8006e36 <_printf_i+0x196>
 8006e48:	4616      	mov	r6, r2
 8006e4a:	e7bd      	b.n	8006dc8 <_printf_i+0x128>
 8006e4c:	6833      	ldr	r3, [r6, #0]
 8006e4e:	6825      	ldr	r5, [r4, #0]
 8006e50:	6961      	ldr	r1, [r4, #20]
 8006e52:	1d18      	adds	r0, r3, #4
 8006e54:	6030      	str	r0, [r6, #0]
 8006e56:	062e      	lsls	r6, r5, #24
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	d501      	bpl.n	8006e60 <_printf_i+0x1c0>
 8006e5c:	6019      	str	r1, [r3, #0]
 8006e5e:	e002      	b.n	8006e66 <_printf_i+0x1c6>
 8006e60:	0668      	lsls	r0, r5, #25
 8006e62:	d5fb      	bpl.n	8006e5c <_printf_i+0x1bc>
 8006e64:	8019      	strh	r1, [r3, #0]
 8006e66:	2300      	movs	r3, #0
 8006e68:	6123      	str	r3, [r4, #16]
 8006e6a:	4616      	mov	r6, r2
 8006e6c:	e7bc      	b.n	8006de8 <_printf_i+0x148>
 8006e6e:	6833      	ldr	r3, [r6, #0]
 8006e70:	1d1a      	adds	r2, r3, #4
 8006e72:	6032      	str	r2, [r6, #0]
 8006e74:	681e      	ldr	r6, [r3, #0]
 8006e76:	6862      	ldr	r2, [r4, #4]
 8006e78:	2100      	movs	r1, #0
 8006e7a:	4630      	mov	r0, r6
 8006e7c:	f7f9 fa30 	bl	80002e0 <memchr>
 8006e80:	b108      	cbz	r0, 8006e86 <_printf_i+0x1e6>
 8006e82:	1b80      	subs	r0, r0, r6
 8006e84:	6060      	str	r0, [r4, #4]
 8006e86:	6863      	ldr	r3, [r4, #4]
 8006e88:	6123      	str	r3, [r4, #16]
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006e90:	e7aa      	b.n	8006de8 <_printf_i+0x148>
 8006e92:	6923      	ldr	r3, [r4, #16]
 8006e94:	4632      	mov	r2, r6
 8006e96:	4649      	mov	r1, r9
 8006e98:	4640      	mov	r0, r8
 8006e9a:	47d0      	blx	sl
 8006e9c:	3001      	adds	r0, #1
 8006e9e:	d0ad      	beq.n	8006dfc <_printf_i+0x15c>
 8006ea0:	6823      	ldr	r3, [r4, #0]
 8006ea2:	079b      	lsls	r3, r3, #30
 8006ea4:	d413      	bmi.n	8006ece <_printf_i+0x22e>
 8006ea6:	68e0      	ldr	r0, [r4, #12]
 8006ea8:	9b03      	ldr	r3, [sp, #12]
 8006eaa:	4298      	cmp	r0, r3
 8006eac:	bfb8      	it	lt
 8006eae:	4618      	movlt	r0, r3
 8006eb0:	e7a6      	b.n	8006e00 <_printf_i+0x160>
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	4632      	mov	r2, r6
 8006eb6:	4649      	mov	r1, r9
 8006eb8:	4640      	mov	r0, r8
 8006eba:	47d0      	blx	sl
 8006ebc:	3001      	adds	r0, #1
 8006ebe:	d09d      	beq.n	8006dfc <_printf_i+0x15c>
 8006ec0:	3501      	adds	r5, #1
 8006ec2:	68e3      	ldr	r3, [r4, #12]
 8006ec4:	9903      	ldr	r1, [sp, #12]
 8006ec6:	1a5b      	subs	r3, r3, r1
 8006ec8:	42ab      	cmp	r3, r5
 8006eca:	dcf2      	bgt.n	8006eb2 <_printf_i+0x212>
 8006ecc:	e7eb      	b.n	8006ea6 <_printf_i+0x206>
 8006ece:	2500      	movs	r5, #0
 8006ed0:	f104 0619 	add.w	r6, r4, #25
 8006ed4:	e7f5      	b.n	8006ec2 <_printf_i+0x222>
 8006ed6:	bf00      	nop
 8006ed8:	08007365 	.word	0x08007365
 8006edc:	08007376 	.word	0x08007376

08006ee0 <__sflush_r>:
 8006ee0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006ee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ee8:	0716      	lsls	r6, r2, #28
 8006eea:	4605      	mov	r5, r0
 8006eec:	460c      	mov	r4, r1
 8006eee:	d454      	bmi.n	8006f9a <__sflush_r+0xba>
 8006ef0:	684b      	ldr	r3, [r1, #4]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	dc02      	bgt.n	8006efc <__sflush_r+0x1c>
 8006ef6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	dd48      	ble.n	8006f8e <__sflush_r+0xae>
 8006efc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006efe:	2e00      	cmp	r6, #0
 8006f00:	d045      	beq.n	8006f8e <__sflush_r+0xae>
 8006f02:	2300      	movs	r3, #0
 8006f04:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006f08:	682f      	ldr	r7, [r5, #0]
 8006f0a:	6a21      	ldr	r1, [r4, #32]
 8006f0c:	602b      	str	r3, [r5, #0]
 8006f0e:	d030      	beq.n	8006f72 <__sflush_r+0x92>
 8006f10:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006f12:	89a3      	ldrh	r3, [r4, #12]
 8006f14:	0759      	lsls	r1, r3, #29
 8006f16:	d505      	bpl.n	8006f24 <__sflush_r+0x44>
 8006f18:	6863      	ldr	r3, [r4, #4]
 8006f1a:	1ad2      	subs	r2, r2, r3
 8006f1c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006f1e:	b10b      	cbz	r3, 8006f24 <__sflush_r+0x44>
 8006f20:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006f22:	1ad2      	subs	r2, r2, r3
 8006f24:	2300      	movs	r3, #0
 8006f26:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006f28:	6a21      	ldr	r1, [r4, #32]
 8006f2a:	4628      	mov	r0, r5
 8006f2c:	47b0      	blx	r6
 8006f2e:	1c43      	adds	r3, r0, #1
 8006f30:	89a3      	ldrh	r3, [r4, #12]
 8006f32:	d106      	bne.n	8006f42 <__sflush_r+0x62>
 8006f34:	6829      	ldr	r1, [r5, #0]
 8006f36:	291d      	cmp	r1, #29
 8006f38:	d82b      	bhi.n	8006f92 <__sflush_r+0xb2>
 8006f3a:	4a2a      	ldr	r2, [pc, #168]	@ (8006fe4 <__sflush_r+0x104>)
 8006f3c:	410a      	asrs	r2, r1
 8006f3e:	07d6      	lsls	r6, r2, #31
 8006f40:	d427      	bmi.n	8006f92 <__sflush_r+0xb2>
 8006f42:	2200      	movs	r2, #0
 8006f44:	6062      	str	r2, [r4, #4]
 8006f46:	04d9      	lsls	r1, r3, #19
 8006f48:	6922      	ldr	r2, [r4, #16]
 8006f4a:	6022      	str	r2, [r4, #0]
 8006f4c:	d504      	bpl.n	8006f58 <__sflush_r+0x78>
 8006f4e:	1c42      	adds	r2, r0, #1
 8006f50:	d101      	bne.n	8006f56 <__sflush_r+0x76>
 8006f52:	682b      	ldr	r3, [r5, #0]
 8006f54:	b903      	cbnz	r3, 8006f58 <__sflush_r+0x78>
 8006f56:	6560      	str	r0, [r4, #84]	@ 0x54
 8006f58:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006f5a:	602f      	str	r7, [r5, #0]
 8006f5c:	b1b9      	cbz	r1, 8006f8e <__sflush_r+0xae>
 8006f5e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006f62:	4299      	cmp	r1, r3
 8006f64:	d002      	beq.n	8006f6c <__sflush_r+0x8c>
 8006f66:	4628      	mov	r0, r5
 8006f68:	f7ff fbf2 	bl	8006750 <_free_r>
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	6363      	str	r3, [r4, #52]	@ 0x34
 8006f70:	e00d      	b.n	8006f8e <__sflush_r+0xae>
 8006f72:	2301      	movs	r3, #1
 8006f74:	4628      	mov	r0, r5
 8006f76:	47b0      	blx	r6
 8006f78:	4602      	mov	r2, r0
 8006f7a:	1c50      	adds	r0, r2, #1
 8006f7c:	d1c9      	bne.n	8006f12 <__sflush_r+0x32>
 8006f7e:	682b      	ldr	r3, [r5, #0]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d0c6      	beq.n	8006f12 <__sflush_r+0x32>
 8006f84:	2b1d      	cmp	r3, #29
 8006f86:	d001      	beq.n	8006f8c <__sflush_r+0xac>
 8006f88:	2b16      	cmp	r3, #22
 8006f8a:	d11e      	bne.n	8006fca <__sflush_r+0xea>
 8006f8c:	602f      	str	r7, [r5, #0]
 8006f8e:	2000      	movs	r0, #0
 8006f90:	e022      	b.n	8006fd8 <__sflush_r+0xf8>
 8006f92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006f96:	b21b      	sxth	r3, r3
 8006f98:	e01b      	b.n	8006fd2 <__sflush_r+0xf2>
 8006f9a:	690f      	ldr	r7, [r1, #16]
 8006f9c:	2f00      	cmp	r7, #0
 8006f9e:	d0f6      	beq.n	8006f8e <__sflush_r+0xae>
 8006fa0:	0793      	lsls	r3, r2, #30
 8006fa2:	680e      	ldr	r6, [r1, #0]
 8006fa4:	bf08      	it	eq
 8006fa6:	694b      	ldreq	r3, [r1, #20]
 8006fa8:	600f      	str	r7, [r1, #0]
 8006faa:	bf18      	it	ne
 8006fac:	2300      	movne	r3, #0
 8006fae:	eba6 0807 	sub.w	r8, r6, r7
 8006fb2:	608b      	str	r3, [r1, #8]
 8006fb4:	f1b8 0f00 	cmp.w	r8, #0
 8006fb8:	dde9      	ble.n	8006f8e <__sflush_r+0xae>
 8006fba:	6a21      	ldr	r1, [r4, #32]
 8006fbc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006fbe:	4643      	mov	r3, r8
 8006fc0:	463a      	mov	r2, r7
 8006fc2:	4628      	mov	r0, r5
 8006fc4:	47b0      	blx	r6
 8006fc6:	2800      	cmp	r0, #0
 8006fc8:	dc08      	bgt.n	8006fdc <__sflush_r+0xfc>
 8006fca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006fce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006fd2:	81a3      	strh	r3, [r4, #12]
 8006fd4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006fd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006fdc:	4407      	add	r7, r0
 8006fde:	eba8 0800 	sub.w	r8, r8, r0
 8006fe2:	e7e7      	b.n	8006fb4 <__sflush_r+0xd4>
 8006fe4:	dfbffffe 	.word	0xdfbffffe

08006fe8 <_fflush_r>:
 8006fe8:	b538      	push	{r3, r4, r5, lr}
 8006fea:	690b      	ldr	r3, [r1, #16]
 8006fec:	4605      	mov	r5, r0
 8006fee:	460c      	mov	r4, r1
 8006ff0:	b913      	cbnz	r3, 8006ff8 <_fflush_r+0x10>
 8006ff2:	2500      	movs	r5, #0
 8006ff4:	4628      	mov	r0, r5
 8006ff6:	bd38      	pop	{r3, r4, r5, pc}
 8006ff8:	b118      	cbz	r0, 8007002 <_fflush_r+0x1a>
 8006ffa:	6a03      	ldr	r3, [r0, #32]
 8006ffc:	b90b      	cbnz	r3, 8007002 <_fflush_r+0x1a>
 8006ffe:	f7ff fa91 	bl	8006524 <__sinit>
 8007002:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d0f3      	beq.n	8006ff2 <_fflush_r+0xa>
 800700a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800700c:	07d0      	lsls	r0, r2, #31
 800700e:	d404      	bmi.n	800701a <_fflush_r+0x32>
 8007010:	0599      	lsls	r1, r3, #22
 8007012:	d402      	bmi.n	800701a <_fflush_r+0x32>
 8007014:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007016:	f7ff fb8a 	bl	800672e <__retarget_lock_acquire_recursive>
 800701a:	4628      	mov	r0, r5
 800701c:	4621      	mov	r1, r4
 800701e:	f7ff ff5f 	bl	8006ee0 <__sflush_r>
 8007022:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007024:	07da      	lsls	r2, r3, #31
 8007026:	4605      	mov	r5, r0
 8007028:	d4e4      	bmi.n	8006ff4 <_fflush_r+0xc>
 800702a:	89a3      	ldrh	r3, [r4, #12]
 800702c:	059b      	lsls	r3, r3, #22
 800702e:	d4e1      	bmi.n	8006ff4 <_fflush_r+0xc>
 8007030:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007032:	f7ff fb7d 	bl	8006730 <__retarget_lock_release_recursive>
 8007036:	e7dd      	b.n	8006ff4 <_fflush_r+0xc>

08007038 <__swbuf_r>:
 8007038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800703a:	460e      	mov	r6, r1
 800703c:	4614      	mov	r4, r2
 800703e:	4605      	mov	r5, r0
 8007040:	b118      	cbz	r0, 800704a <__swbuf_r+0x12>
 8007042:	6a03      	ldr	r3, [r0, #32]
 8007044:	b90b      	cbnz	r3, 800704a <__swbuf_r+0x12>
 8007046:	f7ff fa6d 	bl	8006524 <__sinit>
 800704a:	69a3      	ldr	r3, [r4, #24]
 800704c:	60a3      	str	r3, [r4, #8]
 800704e:	89a3      	ldrh	r3, [r4, #12]
 8007050:	071a      	lsls	r2, r3, #28
 8007052:	d501      	bpl.n	8007058 <__swbuf_r+0x20>
 8007054:	6923      	ldr	r3, [r4, #16]
 8007056:	b943      	cbnz	r3, 800706a <__swbuf_r+0x32>
 8007058:	4621      	mov	r1, r4
 800705a:	4628      	mov	r0, r5
 800705c:	f000 f82a 	bl	80070b4 <__swsetup_r>
 8007060:	b118      	cbz	r0, 800706a <__swbuf_r+0x32>
 8007062:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8007066:	4638      	mov	r0, r7
 8007068:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800706a:	6823      	ldr	r3, [r4, #0]
 800706c:	6922      	ldr	r2, [r4, #16]
 800706e:	1a98      	subs	r0, r3, r2
 8007070:	6963      	ldr	r3, [r4, #20]
 8007072:	b2f6      	uxtb	r6, r6
 8007074:	4283      	cmp	r3, r0
 8007076:	4637      	mov	r7, r6
 8007078:	dc05      	bgt.n	8007086 <__swbuf_r+0x4e>
 800707a:	4621      	mov	r1, r4
 800707c:	4628      	mov	r0, r5
 800707e:	f7ff ffb3 	bl	8006fe8 <_fflush_r>
 8007082:	2800      	cmp	r0, #0
 8007084:	d1ed      	bne.n	8007062 <__swbuf_r+0x2a>
 8007086:	68a3      	ldr	r3, [r4, #8]
 8007088:	3b01      	subs	r3, #1
 800708a:	60a3      	str	r3, [r4, #8]
 800708c:	6823      	ldr	r3, [r4, #0]
 800708e:	1c5a      	adds	r2, r3, #1
 8007090:	6022      	str	r2, [r4, #0]
 8007092:	701e      	strb	r6, [r3, #0]
 8007094:	6962      	ldr	r2, [r4, #20]
 8007096:	1c43      	adds	r3, r0, #1
 8007098:	429a      	cmp	r2, r3
 800709a:	d004      	beq.n	80070a6 <__swbuf_r+0x6e>
 800709c:	89a3      	ldrh	r3, [r4, #12]
 800709e:	07db      	lsls	r3, r3, #31
 80070a0:	d5e1      	bpl.n	8007066 <__swbuf_r+0x2e>
 80070a2:	2e0a      	cmp	r6, #10
 80070a4:	d1df      	bne.n	8007066 <__swbuf_r+0x2e>
 80070a6:	4621      	mov	r1, r4
 80070a8:	4628      	mov	r0, r5
 80070aa:	f7ff ff9d 	bl	8006fe8 <_fflush_r>
 80070ae:	2800      	cmp	r0, #0
 80070b0:	d0d9      	beq.n	8007066 <__swbuf_r+0x2e>
 80070b2:	e7d6      	b.n	8007062 <__swbuf_r+0x2a>

080070b4 <__swsetup_r>:
 80070b4:	b538      	push	{r3, r4, r5, lr}
 80070b6:	4b29      	ldr	r3, [pc, #164]	@ (800715c <__swsetup_r+0xa8>)
 80070b8:	4605      	mov	r5, r0
 80070ba:	6818      	ldr	r0, [r3, #0]
 80070bc:	460c      	mov	r4, r1
 80070be:	b118      	cbz	r0, 80070c8 <__swsetup_r+0x14>
 80070c0:	6a03      	ldr	r3, [r0, #32]
 80070c2:	b90b      	cbnz	r3, 80070c8 <__swsetup_r+0x14>
 80070c4:	f7ff fa2e 	bl	8006524 <__sinit>
 80070c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070cc:	0719      	lsls	r1, r3, #28
 80070ce:	d422      	bmi.n	8007116 <__swsetup_r+0x62>
 80070d0:	06da      	lsls	r2, r3, #27
 80070d2:	d407      	bmi.n	80070e4 <__swsetup_r+0x30>
 80070d4:	2209      	movs	r2, #9
 80070d6:	602a      	str	r2, [r5, #0]
 80070d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80070dc:	81a3      	strh	r3, [r4, #12]
 80070de:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80070e2:	e033      	b.n	800714c <__swsetup_r+0x98>
 80070e4:	0758      	lsls	r0, r3, #29
 80070e6:	d512      	bpl.n	800710e <__swsetup_r+0x5a>
 80070e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80070ea:	b141      	cbz	r1, 80070fe <__swsetup_r+0x4a>
 80070ec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80070f0:	4299      	cmp	r1, r3
 80070f2:	d002      	beq.n	80070fa <__swsetup_r+0x46>
 80070f4:	4628      	mov	r0, r5
 80070f6:	f7ff fb2b 	bl	8006750 <_free_r>
 80070fa:	2300      	movs	r3, #0
 80070fc:	6363      	str	r3, [r4, #52]	@ 0x34
 80070fe:	89a3      	ldrh	r3, [r4, #12]
 8007100:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007104:	81a3      	strh	r3, [r4, #12]
 8007106:	2300      	movs	r3, #0
 8007108:	6063      	str	r3, [r4, #4]
 800710a:	6923      	ldr	r3, [r4, #16]
 800710c:	6023      	str	r3, [r4, #0]
 800710e:	89a3      	ldrh	r3, [r4, #12]
 8007110:	f043 0308 	orr.w	r3, r3, #8
 8007114:	81a3      	strh	r3, [r4, #12]
 8007116:	6923      	ldr	r3, [r4, #16]
 8007118:	b94b      	cbnz	r3, 800712e <__swsetup_r+0x7a>
 800711a:	89a3      	ldrh	r3, [r4, #12]
 800711c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007120:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007124:	d003      	beq.n	800712e <__swsetup_r+0x7a>
 8007126:	4621      	mov	r1, r4
 8007128:	4628      	mov	r0, r5
 800712a:	f000 f84f 	bl	80071cc <__smakebuf_r>
 800712e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007132:	f013 0201 	ands.w	r2, r3, #1
 8007136:	d00a      	beq.n	800714e <__swsetup_r+0x9a>
 8007138:	2200      	movs	r2, #0
 800713a:	60a2      	str	r2, [r4, #8]
 800713c:	6962      	ldr	r2, [r4, #20]
 800713e:	4252      	negs	r2, r2
 8007140:	61a2      	str	r2, [r4, #24]
 8007142:	6922      	ldr	r2, [r4, #16]
 8007144:	b942      	cbnz	r2, 8007158 <__swsetup_r+0xa4>
 8007146:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800714a:	d1c5      	bne.n	80070d8 <__swsetup_r+0x24>
 800714c:	bd38      	pop	{r3, r4, r5, pc}
 800714e:	0799      	lsls	r1, r3, #30
 8007150:	bf58      	it	pl
 8007152:	6962      	ldrpl	r2, [r4, #20]
 8007154:	60a2      	str	r2, [r4, #8]
 8007156:	e7f4      	b.n	8007142 <__swsetup_r+0x8e>
 8007158:	2000      	movs	r0, #0
 800715a:	e7f7      	b.n	800714c <__swsetup_r+0x98>
 800715c:	2400001c 	.word	0x2400001c

08007160 <_sbrk_r>:
 8007160:	b538      	push	{r3, r4, r5, lr}
 8007162:	4d06      	ldr	r5, [pc, #24]	@ (800717c <_sbrk_r+0x1c>)
 8007164:	2300      	movs	r3, #0
 8007166:	4604      	mov	r4, r0
 8007168:	4608      	mov	r0, r1
 800716a:	602b      	str	r3, [r5, #0]
 800716c:	f7f9 ff86 	bl	800107c <_sbrk>
 8007170:	1c43      	adds	r3, r0, #1
 8007172:	d102      	bne.n	800717a <_sbrk_r+0x1a>
 8007174:	682b      	ldr	r3, [r5, #0]
 8007176:	b103      	cbz	r3, 800717a <_sbrk_r+0x1a>
 8007178:	6023      	str	r3, [r4, #0]
 800717a:	bd38      	pop	{r3, r4, r5, pc}
 800717c:	24000374 	.word	0x24000374

08007180 <__swhatbuf_r>:
 8007180:	b570      	push	{r4, r5, r6, lr}
 8007182:	460c      	mov	r4, r1
 8007184:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007188:	2900      	cmp	r1, #0
 800718a:	b096      	sub	sp, #88	@ 0x58
 800718c:	4615      	mov	r5, r2
 800718e:	461e      	mov	r6, r3
 8007190:	da0d      	bge.n	80071ae <__swhatbuf_r+0x2e>
 8007192:	89a3      	ldrh	r3, [r4, #12]
 8007194:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007198:	f04f 0100 	mov.w	r1, #0
 800719c:	bf14      	ite	ne
 800719e:	2340      	movne	r3, #64	@ 0x40
 80071a0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80071a4:	2000      	movs	r0, #0
 80071a6:	6031      	str	r1, [r6, #0]
 80071a8:	602b      	str	r3, [r5, #0]
 80071aa:	b016      	add	sp, #88	@ 0x58
 80071ac:	bd70      	pop	{r4, r5, r6, pc}
 80071ae:	466a      	mov	r2, sp
 80071b0:	f000 f848 	bl	8007244 <_fstat_r>
 80071b4:	2800      	cmp	r0, #0
 80071b6:	dbec      	blt.n	8007192 <__swhatbuf_r+0x12>
 80071b8:	9901      	ldr	r1, [sp, #4]
 80071ba:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80071be:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80071c2:	4259      	negs	r1, r3
 80071c4:	4159      	adcs	r1, r3
 80071c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80071ca:	e7eb      	b.n	80071a4 <__swhatbuf_r+0x24>

080071cc <__smakebuf_r>:
 80071cc:	898b      	ldrh	r3, [r1, #12]
 80071ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80071d0:	079d      	lsls	r5, r3, #30
 80071d2:	4606      	mov	r6, r0
 80071d4:	460c      	mov	r4, r1
 80071d6:	d507      	bpl.n	80071e8 <__smakebuf_r+0x1c>
 80071d8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80071dc:	6023      	str	r3, [r4, #0]
 80071de:	6123      	str	r3, [r4, #16]
 80071e0:	2301      	movs	r3, #1
 80071e2:	6163      	str	r3, [r4, #20]
 80071e4:	b003      	add	sp, #12
 80071e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80071e8:	ab01      	add	r3, sp, #4
 80071ea:	466a      	mov	r2, sp
 80071ec:	f7ff ffc8 	bl	8007180 <__swhatbuf_r>
 80071f0:	9f00      	ldr	r7, [sp, #0]
 80071f2:	4605      	mov	r5, r0
 80071f4:	4639      	mov	r1, r7
 80071f6:	4630      	mov	r0, r6
 80071f8:	f7ff fb16 	bl	8006828 <_malloc_r>
 80071fc:	b948      	cbnz	r0, 8007212 <__smakebuf_r+0x46>
 80071fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007202:	059a      	lsls	r2, r3, #22
 8007204:	d4ee      	bmi.n	80071e4 <__smakebuf_r+0x18>
 8007206:	f023 0303 	bic.w	r3, r3, #3
 800720a:	f043 0302 	orr.w	r3, r3, #2
 800720e:	81a3      	strh	r3, [r4, #12]
 8007210:	e7e2      	b.n	80071d8 <__smakebuf_r+0xc>
 8007212:	89a3      	ldrh	r3, [r4, #12]
 8007214:	6020      	str	r0, [r4, #0]
 8007216:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800721a:	81a3      	strh	r3, [r4, #12]
 800721c:	9b01      	ldr	r3, [sp, #4]
 800721e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007222:	b15b      	cbz	r3, 800723c <__smakebuf_r+0x70>
 8007224:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007228:	4630      	mov	r0, r6
 800722a:	f000 f81d 	bl	8007268 <_isatty_r>
 800722e:	b128      	cbz	r0, 800723c <__smakebuf_r+0x70>
 8007230:	89a3      	ldrh	r3, [r4, #12]
 8007232:	f023 0303 	bic.w	r3, r3, #3
 8007236:	f043 0301 	orr.w	r3, r3, #1
 800723a:	81a3      	strh	r3, [r4, #12]
 800723c:	89a3      	ldrh	r3, [r4, #12]
 800723e:	431d      	orrs	r5, r3
 8007240:	81a5      	strh	r5, [r4, #12]
 8007242:	e7cf      	b.n	80071e4 <__smakebuf_r+0x18>

08007244 <_fstat_r>:
 8007244:	b538      	push	{r3, r4, r5, lr}
 8007246:	4d07      	ldr	r5, [pc, #28]	@ (8007264 <_fstat_r+0x20>)
 8007248:	2300      	movs	r3, #0
 800724a:	4604      	mov	r4, r0
 800724c:	4608      	mov	r0, r1
 800724e:	4611      	mov	r1, r2
 8007250:	602b      	str	r3, [r5, #0]
 8007252:	f7f9 feeb 	bl	800102c <_fstat>
 8007256:	1c43      	adds	r3, r0, #1
 8007258:	d102      	bne.n	8007260 <_fstat_r+0x1c>
 800725a:	682b      	ldr	r3, [r5, #0]
 800725c:	b103      	cbz	r3, 8007260 <_fstat_r+0x1c>
 800725e:	6023      	str	r3, [r4, #0]
 8007260:	bd38      	pop	{r3, r4, r5, pc}
 8007262:	bf00      	nop
 8007264:	24000374 	.word	0x24000374

08007268 <_isatty_r>:
 8007268:	b538      	push	{r3, r4, r5, lr}
 800726a:	4d06      	ldr	r5, [pc, #24]	@ (8007284 <_isatty_r+0x1c>)
 800726c:	2300      	movs	r3, #0
 800726e:	4604      	mov	r4, r0
 8007270:	4608      	mov	r0, r1
 8007272:	602b      	str	r3, [r5, #0]
 8007274:	f7f9 feea 	bl	800104c <_isatty>
 8007278:	1c43      	adds	r3, r0, #1
 800727a:	d102      	bne.n	8007282 <_isatty_r+0x1a>
 800727c:	682b      	ldr	r3, [r5, #0]
 800727e:	b103      	cbz	r3, 8007282 <_isatty_r+0x1a>
 8007280:	6023      	str	r3, [r4, #0]
 8007282:	bd38      	pop	{r3, r4, r5, pc}
 8007284:	24000374 	.word	0x24000374

08007288 <_init>:
 8007288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800728a:	bf00      	nop
 800728c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800728e:	bc08      	pop	{r3}
 8007290:	469e      	mov	lr, r3
 8007292:	4770      	bx	lr

08007294 <_fini>:
 8007294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007296:	bf00      	nop
 8007298:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800729a:	bc08      	pop	{r3}
 800729c:	469e      	mov	lr, r3
 800729e:	4770      	bx	lr
