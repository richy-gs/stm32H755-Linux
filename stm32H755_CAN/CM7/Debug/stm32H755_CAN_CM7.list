
stm32H755_CAN_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007068  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000178  08007308  08007308  00008308  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007480  08007480  0000906c  2**0
                  CONTENTS
  4 .ARM          00000008  08007480  08007480  00008480  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007488  08007488  0000906c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007488  08007488  00008488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800748c  0800748c  0000848c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  24000000  08007490  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000318  2400006c  080074fc  0000906c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24000384  080074fc  00009384  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000906c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000148da  00000000  00000000  0000909a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024f6  00000000  00000000  0001d974  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f40  00000000  00000000  0001fe70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bb6  00000000  00000000  00020db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003b565  00000000  00000000  00021966  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000126f7  00000000  00000000  0005cecb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00186956  00000000  00000000  0006f5c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001f5f18  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047f8  00000000  00000000  001f5f5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  001fa754  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400006c 	.word	0x2400006c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080072f0 	.word	0x080072f0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000070 	.word	0x24000070
 80002dc:	080072f0 	.word	0x080072f0

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000390:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000394:	f000 b96a 	b.w	800066c <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	460c      	mov	r4, r1
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d14e      	bne.n	800045a <__udivmoddi4+0xaa>
 80003bc:	4694      	mov	ip, r2
 80003be:	458c      	cmp	ip, r1
 80003c0:	4686      	mov	lr, r0
 80003c2:	fab2 f282 	clz	r2, r2
 80003c6:	d962      	bls.n	800048e <__udivmoddi4+0xde>
 80003c8:	b14a      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003ca:	f1c2 0320 	rsb	r3, r2, #32
 80003ce:	4091      	lsls	r1, r2
 80003d0:	fa20 f303 	lsr.w	r3, r0, r3
 80003d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003d8:	4319      	orrs	r1, r3
 80003da:	fa00 fe02 	lsl.w	lr, r0, r2
 80003de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e2:	fa1f f68c 	uxth.w	r6, ip
 80003e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ee:	fb07 1114 	mls	r1, r7, r4, r1
 80003f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f6:	fb04 f106 	mul.w	r1, r4, r6
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000406:	f080 8112 	bcs.w	800062e <__udivmoddi4+0x27e>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 810f 	bls.w	800062e <__udivmoddi4+0x27e>
 8000410:	3c02      	subs	r4, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	fa1f f38e 	uxth.w	r3, lr
 800041a:	fbb1 f0f7 	udiv	r0, r1, r7
 800041e:	fb07 1110 	mls	r1, r7, r0, r1
 8000422:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000426:	fb00 f606 	mul.w	r6, r0, r6
 800042a:	429e      	cmp	r6, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x94>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000436:	f080 80fc 	bcs.w	8000632 <__udivmoddi4+0x282>
 800043a:	429e      	cmp	r6, r3
 800043c:	f240 80f9 	bls.w	8000632 <__udivmoddi4+0x282>
 8000440:	4463      	add	r3, ip
 8000442:	3802      	subs	r0, #2
 8000444:	1b9b      	subs	r3, r3, r6
 8000446:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800044a:	2100      	movs	r1, #0
 800044c:	b11d      	cbz	r5, 8000456 <__udivmoddi4+0xa6>
 800044e:	40d3      	lsrs	r3, r2
 8000450:	2200      	movs	r2, #0
 8000452:	e9c5 3200 	strd	r3, r2, [r5]
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d905      	bls.n	800046a <__udivmoddi4+0xba>
 800045e:	b10d      	cbz	r5, 8000464 <__udivmoddi4+0xb4>
 8000460:	e9c5 0100 	strd	r0, r1, [r5]
 8000464:	2100      	movs	r1, #0
 8000466:	4608      	mov	r0, r1
 8000468:	e7f5      	b.n	8000456 <__udivmoddi4+0xa6>
 800046a:	fab3 f183 	clz	r1, r3
 800046e:	2900      	cmp	r1, #0
 8000470:	d146      	bne.n	8000500 <__udivmoddi4+0x150>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d302      	bcc.n	800047c <__udivmoddi4+0xcc>
 8000476:	4290      	cmp	r0, r2
 8000478:	f0c0 80f0 	bcc.w	800065c <__udivmoddi4+0x2ac>
 800047c:	1a86      	subs	r6, r0, r2
 800047e:	eb64 0303 	sbc.w	r3, r4, r3
 8000482:	2001      	movs	r0, #1
 8000484:	2d00      	cmp	r5, #0
 8000486:	d0e6      	beq.n	8000456 <__udivmoddi4+0xa6>
 8000488:	e9c5 6300 	strd	r6, r3, [r5]
 800048c:	e7e3      	b.n	8000456 <__udivmoddi4+0xa6>
 800048e:	2a00      	cmp	r2, #0
 8000490:	f040 8090 	bne.w	80005b4 <__udivmoddi4+0x204>
 8000494:	eba1 040c 	sub.w	r4, r1, ip
 8000498:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800049c:	fa1f f78c 	uxth.w	r7, ip
 80004a0:	2101      	movs	r1, #1
 80004a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004aa:	fb08 4416 	mls	r4, r8, r6, r4
 80004ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004b2:	fb07 f006 	mul.w	r0, r7, r6
 80004b6:	4298      	cmp	r0, r3
 80004b8:	d908      	bls.n	80004cc <__udivmoddi4+0x11c>
 80004ba:	eb1c 0303 	adds.w	r3, ip, r3
 80004be:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x11a>
 80004c4:	4298      	cmp	r0, r3
 80004c6:	f200 80cd 	bhi.w	8000664 <__udivmoddi4+0x2b4>
 80004ca:	4626      	mov	r6, r4
 80004cc:	1a1c      	subs	r4, r3, r0
 80004ce:	fa1f f38e 	uxth.w	r3, lr
 80004d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004d6:	fb08 4410 	mls	r4, r8, r0, r4
 80004da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004de:	fb00 f707 	mul.w	r7, r0, r7
 80004e2:	429f      	cmp	r7, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x148>
 80004e6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ea:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80004ee:	d202      	bcs.n	80004f6 <__udivmoddi4+0x146>
 80004f0:	429f      	cmp	r7, r3
 80004f2:	f200 80b0 	bhi.w	8000656 <__udivmoddi4+0x2a6>
 80004f6:	4620      	mov	r0, r4
 80004f8:	1bdb      	subs	r3, r3, r7
 80004fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004fe:	e7a5      	b.n	800044c <__udivmoddi4+0x9c>
 8000500:	f1c1 0620 	rsb	r6, r1, #32
 8000504:	408b      	lsls	r3, r1
 8000506:	fa22 f706 	lsr.w	r7, r2, r6
 800050a:	431f      	orrs	r7, r3
 800050c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000510:	fa04 f301 	lsl.w	r3, r4, r1
 8000514:	ea43 030c 	orr.w	r3, r3, ip
 8000518:	40f4      	lsrs	r4, r6
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	0c38      	lsrs	r0, r7, #16
 8000520:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000524:	fbb4 fef0 	udiv	lr, r4, r0
 8000528:	fa1f fc87 	uxth.w	ip, r7
 800052c:	fb00 441e 	mls	r4, r0, lr, r4
 8000530:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000534:	fb0e f90c 	mul.w	r9, lr, ip
 8000538:	45a1      	cmp	r9, r4
 800053a:	fa02 f201 	lsl.w	r2, r2, r1
 800053e:	d90a      	bls.n	8000556 <__udivmoddi4+0x1a6>
 8000540:	193c      	adds	r4, r7, r4
 8000542:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000546:	f080 8084 	bcs.w	8000652 <__udivmoddi4+0x2a2>
 800054a:	45a1      	cmp	r9, r4
 800054c:	f240 8081 	bls.w	8000652 <__udivmoddi4+0x2a2>
 8000550:	f1ae 0e02 	sub.w	lr, lr, #2
 8000554:	443c      	add	r4, r7
 8000556:	eba4 0409 	sub.w	r4, r4, r9
 800055a:	fa1f f983 	uxth.w	r9, r3
 800055e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000562:	fb00 4413 	mls	r4, r0, r3, r4
 8000566:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800056a:	fb03 fc0c 	mul.w	ip, r3, ip
 800056e:	45a4      	cmp	ip, r4
 8000570:	d907      	bls.n	8000582 <__udivmoddi4+0x1d2>
 8000572:	193c      	adds	r4, r7, r4
 8000574:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000578:	d267      	bcs.n	800064a <__udivmoddi4+0x29a>
 800057a:	45a4      	cmp	ip, r4
 800057c:	d965      	bls.n	800064a <__udivmoddi4+0x29a>
 800057e:	3b02      	subs	r3, #2
 8000580:	443c      	add	r4, r7
 8000582:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000586:	fba0 9302 	umull	r9, r3, r0, r2
 800058a:	eba4 040c 	sub.w	r4, r4, ip
 800058e:	429c      	cmp	r4, r3
 8000590:	46ce      	mov	lr, r9
 8000592:	469c      	mov	ip, r3
 8000594:	d351      	bcc.n	800063a <__udivmoddi4+0x28a>
 8000596:	d04e      	beq.n	8000636 <__udivmoddi4+0x286>
 8000598:	b155      	cbz	r5, 80005b0 <__udivmoddi4+0x200>
 800059a:	ebb8 030e 	subs.w	r3, r8, lr
 800059e:	eb64 040c 	sbc.w	r4, r4, ip
 80005a2:	fa04 f606 	lsl.w	r6, r4, r6
 80005a6:	40cb      	lsrs	r3, r1
 80005a8:	431e      	orrs	r6, r3
 80005aa:	40cc      	lsrs	r4, r1
 80005ac:	e9c5 6400 	strd	r6, r4, [r5]
 80005b0:	2100      	movs	r1, #0
 80005b2:	e750      	b.n	8000456 <__udivmoddi4+0xa6>
 80005b4:	f1c2 0320 	rsb	r3, r2, #32
 80005b8:	fa20 f103 	lsr.w	r1, r0, r3
 80005bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005c0:	fa24 f303 	lsr.w	r3, r4, r3
 80005c4:	4094      	lsls	r4, r2
 80005c6:	430c      	orrs	r4, r1
 80005c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005d0:	fa1f f78c 	uxth.w	r7, ip
 80005d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005d8:	fb08 3110 	mls	r1, r8, r0, r3
 80005dc:	0c23      	lsrs	r3, r4, #16
 80005de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005e2:	fb00 f107 	mul.w	r1, r0, r7
 80005e6:	4299      	cmp	r1, r3
 80005e8:	d908      	bls.n	80005fc <__udivmoddi4+0x24c>
 80005ea:	eb1c 0303 	adds.w	r3, ip, r3
 80005ee:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80005f2:	d22c      	bcs.n	800064e <__udivmoddi4+0x29e>
 80005f4:	4299      	cmp	r1, r3
 80005f6:	d92a      	bls.n	800064e <__udivmoddi4+0x29e>
 80005f8:	3802      	subs	r0, #2
 80005fa:	4463      	add	r3, ip
 80005fc:	1a5b      	subs	r3, r3, r1
 80005fe:	b2a4      	uxth	r4, r4
 8000600:	fbb3 f1f8 	udiv	r1, r3, r8
 8000604:	fb08 3311 	mls	r3, r8, r1, r3
 8000608:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800060c:	fb01 f307 	mul.w	r3, r1, r7
 8000610:	42a3      	cmp	r3, r4
 8000612:	d908      	bls.n	8000626 <__udivmoddi4+0x276>
 8000614:	eb1c 0404 	adds.w	r4, ip, r4
 8000618:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800061c:	d213      	bcs.n	8000646 <__udivmoddi4+0x296>
 800061e:	42a3      	cmp	r3, r4
 8000620:	d911      	bls.n	8000646 <__udivmoddi4+0x296>
 8000622:	3902      	subs	r1, #2
 8000624:	4464      	add	r4, ip
 8000626:	1ae4      	subs	r4, r4, r3
 8000628:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800062c:	e739      	b.n	80004a2 <__udivmoddi4+0xf2>
 800062e:	4604      	mov	r4, r0
 8000630:	e6f0      	b.n	8000414 <__udivmoddi4+0x64>
 8000632:	4608      	mov	r0, r1
 8000634:	e706      	b.n	8000444 <__udivmoddi4+0x94>
 8000636:	45c8      	cmp	r8, r9
 8000638:	d2ae      	bcs.n	8000598 <__udivmoddi4+0x1e8>
 800063a:	ebb9 0e02 	subs.w	lr, r9, r2
 800063e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000642:	3801      	subs	r0, #1
 8000644:	e7a8      	b.n	8000598 <__udivmoddi4+0x1e8>
 8000646:	4631      	mov	r1, r6
 8000648:	e7ed      	b.n	8000626 <__udivmoddi4+0x276>
 800064a:	4603      	mov	r3, r0
 800064c:	e799      	b.n	8000582 <__udivmoddi4+0x1d2>
 800064e:	4630      	mov	r0, r6
 8000650:	e7d4      	b.n	80005fc <__udivmoddi4+0x24c>
 8000652:	46d6      	mov	lr, sl
 8000654:	e77f      	b.n	8000556 <__udivmoddi4+0x1a6>
 8000656:	4463      	add	r3, ip
 8000658:	3802      	subs	r0, #2
 800065a:	e74d      	b.n	80004f8 <__udivmoddi4+0x148>
 800065c:	4606      	mov	r6, r0
 800065e:	4623      	mov	r3, r4
 8000660:	4608      	mov	r0, r1
 8000662:	e70f      	b.n	8000484 <__udivmoddi4+0xd4>
 8000664:	3e02      	subs	r6, #2
 8000666:	4463      	add	r3, ip
 8000668:	e730      	b.n	80004cc <__udivmoddi4+0x11c>
 800066a:	bf00      	nop

0800066c <__aeabi_idiv0>:
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop

08000670 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000674:	4b3d      	ldr	r3, [pc, #244]	@ (800076c <SystemInit+0xfc>)
 8000676:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800067a:	4a3c      	ldr	r2, [pc, #240]	@ (800076c <SystemInit+0xfc>)
 800067c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000680:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000684:	4b39      	ldr	r3, [pc, #228]	@ (800076c <SystemInit+0xfc>)
 8000686:	691b      	ldr	r3, [r3, #16]
 8000688:	4a38      	ldr	r2, [pc, #224]	@ (800076c <SystemInit+0xfc>)
 800068a:	f043 0310 	orr.w	r3, r3, #16
 800068e:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000690:	4b37      	ldr	r3, [pc, #220]	@ (8000770 <SystemInit+0x100>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	f003 030f 	and.w	r3, r3, #15
 8000698:	2b06      	cmp	r3, #6
 800069a:	d807      	bhi.n	80006ac <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800069c:	4b34      	ldr	r3, [pc, #208]	@ (8000770 <SystemInit+0x100>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	f023 030f 	bic.w	r3, r3, #15
 80006a4:	4a32      	ldr	r2, [pc, #200]	@ (8000770 <SystemInit+0x100>)
 80006a6:	f043 0307 	orr.w	r3, r3, #7
 80006aa:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006ac:	4b31      	ldr	r3, [pc, #196]	@ (8000774 <SystemInit+0x104>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4a30      	ldr	r2, [pc, #192]	@ (8000774 <SystemInit+0x104>)
 80006b2:	f043 0301 	orr.w	r3, r3, #1
 80006b6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006b8:	4b2e      	ldr	r3, [pc, #184]	@ (8000774 <SystemInit+0x104>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006be:	4b2d      	ldr	r3, [pc, #180]	@ (8000774 <SystemInit+0x104>)
 80006c0:	681a      	ldr	r2, [r3, #0]
 80006c2:	492c      	ldr	r1, [pc, #176]	@ (8000774 <SystemInit+0x104>)
 80006c4:	4b2c      	ldr	r3, [pc, #176]	@ (8000778 <SystemInit+0x108>)
 80006c6:	4013      	ands	r3, r2
 80006c8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006ca:	4b29      	ldr	r3, [pc, #164]	@ (8000770 <SystemInit+0x100>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	f003 0308 	and.w	r3, r3, #8
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d007      	beq.n	80006e6 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006d6:	4b26      	ldr	r3, [pc, #152]	@ (8000770 <SystemInit+0x100>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	f023 030f 	bic.w	r3, r3, #15
 80006de:	4a24      	ldr	r2, [pc, #144]	@ (8000770 <SystemInit+0x100>)
 80006e0:	f043 0307 	orr.w	r3, r3, #7
 80006e4:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006e6:	4b23      	ldr	r3, [pc, #140]	@ (8000774 <SystemInit+0x104>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80006ec:	4b21      	ldr	r3, [pc, #132]	@ (8000774 <SystemInit+0x104>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80006f2:	4b20      	ldr	r3, [pc, #128]	@ (8000774 <SystemInit+0x104>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80006f8:	4b1e      	ldr	r3, [pc, #120]	@ (8000774 <SystemInit+0x104>)
 80006fa:	4a20      	ldr	r2, [pc, #128]	@ (800077c <SystemInit+0x10c>)
 80006fc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80006fe:	4b1d      	ldr	r3, [pc, #116]	@ (8000774 <SystemInit+0x104>)
 8000700:	4a1f      	ldr	r2, [pc, #124]	@ (8000780 <SystemInit+0x110>)
 8000702:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000704:	4b1b      	ldr	r3, [pc, #108]	@ (8000774 <SystemInit+0x104>)
 8000706:	4a1f      	ldr	r2, [pc, #124]	@ (8000784 <SystemInit+0x114>)
 8000708:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800070a:	4b1a      	ldr	r3, [pc, #104]	@ (8000774 <SystemInit+0x104>)
 800070c:	2200      	movs	r2, #0
 800070e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000710:	4b18      	ldr	r3, [pc, #96]	@ (8000774 <SystemInit+0x104>)
 8000712:	4a1c      	ldr	r2, [pc, #112]	@ (8000784 <SystemInit+0x114>)
 8000714:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000716:	4b17      	ldr	r3, [pc, #92]	@ (8000774 <SystemInit+0x104>)
 8000718:	2200      	movs	r2, #0
 800071a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800071c:	4b15      	ldr	r3, [pc, #84]	@ (8000774 <SystemInit+0x104>)
 800071e:	4a19      	ldr	r2, [pc, #100]	@ (8000784 <SystemInit+0x114>)
 8000720:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000722:	4b14      	ldr	r3, [pc, #80]	@ (8000774 <SystemInit+0x104>)
 8000724:	2200      	movs	r2, #0
 8000726:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000728:	4b12      	ldr	r3, [pc, #72]	@ (8000774 <SystemInit+0x104>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4a11      	ldr	r2, [pc, #68]	@ (8000774 <SystemInit+0x104>)
 800072e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000732:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000734:	4b0f      	ldr	r3, [pc, #60]	@ (8000774 <SystemInit+0x104>)
 8000736:	2200      	movs	r2, #0
 8000738:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800073a:	4b13      	ldr	r3, [pc, #76]	@ (8000788 <SystemInit+0x118>)
 800073c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800073e:	4a12      	ldr	r2, [pc, #72]	@ (8000788 <SystemInit+0x118>)
 8000740:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000744:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000746:	4b11      	ldr	r3, [pc, #68]	@ (800078c <SystemInit+0x11c>)
 8000748:	681a      	ldr	r2, [r3, #0]
 800074a:	4b11      	ldr	r3, [pc, #68]	@ (8000790 <SystemInit+0x120>)
 800074c:	4013      	ands	r3, r2
 800074e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000752:	d202      	bcs.n	800075a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000754:	4b0f      	ldr	r3, [pc, #60]	@ (8000794 <SystemInit+0x124>)
 8000756:	2201      	movs	r2, #1
 8000758:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800075a:	4b0f      	ldr	r3, [pc, #60]	@ (8000798 <SystemInit+0x128>)
 800075c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000760:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000762:	bf00      	nop
 8000764:	46bd      	mov	sp, r7
 8000766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076a:	4770      	bx	lr
 800076c:	e000ed00 	.word	0xe000ed00
 8000770:	52002000 	.word	0x52002000
 8000774:	58024400 	.word	0x58024400
 8000778:	eaf6ed7f 	.word	0xeaf6ed7f
 800077c:	02020200 	.word	0x02020200
 8000780:	01ff0000 	.word	0x01ff0000
 8000784:	01010280 	.word	0x01010280
 8000788:	580000c0 	.word	0x580000c0
 800078c:	5c001000 	.word	0x5c001000
 8000790:	ffff0000 	.word	0xffff0000
 8000794:	51008108 	.word	0x51008108
 8000798:	52004000 	.word	0x52004000

0800079c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80007a2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80007a6:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80007a8:	bf00      	nop
 80007aa:	4b2f      	ldr	r3, [pc, #188]	@ (8000868 <main+0xcc>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d004      	beq.n	80007c0 <main+0x24>
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	1e5a      	subs	r2, r3, #1
 80007ba:	607a      	str	r2, [r7, #4]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	dcf4      	bgt.n	80007aa <main+0xe>
  if ( timeout < 0 )
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	da01      	bge.n	80007ca <main+0x2e>
  {
  Error_Handler();
 80007c6:	f000 fab3 	bl	8000d30 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ca:	f000 fcc7 	bl	800115c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007ce:	f000 f859 	bl	8000884 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80007d2:	4b25      	ldr	r3, [pc, #148]	@ (8000868 <main+0xcc>)
 80007d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007d8:	4a23      	ldr	r2, [pc, #140]	@ (8000868 <main+0xcc>)
 80007da:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80007de:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007e2:	4b21      	ldr	r3, [pc, #132]	@ (8000868 <main+0xcc>)
 80007e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80007ec:	603b      	str	r3, [r7, #0]
 80007ee:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80007f0:	2000      	movs	r0, #0
 80007f2:	f001 fe3b 	bl	800246c <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 80007f6:	2100      	movs	r1, #0
 80007f8:	2000      	movs	r0, #0
 80007fa:	f001 fe51 	bl	80024a0 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 80007fe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000802:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000804:	bf00      	nop
 8000806:	4b18      	ldr	r3, [pc, #96]	@ (8000868 <main+0xcc>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800080e:	2b00      	cmp	r3, #0
 8000810:	d104      	bne.n	800081c <main+0x80>
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	1e5a      	subs	r2, r3, #1
 8000816:	607a      	str	r2, [r7, #4]
 8000818:	2b00      	cmp	r3, #0
 800081a:	dcf4      	bgt.n	8000806 <main+0x6a>
if ( timeout < 0 )
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	2b00      	cmp	r3, #0
 8000820:	da01      	bge.n	8000826 <main+0x8a>
{
Error_Handler();
 8000822:	f000 fa85 	bl	8000d30 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000826:	f000 f9a9 	bl	8000b7c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800082a:	f000 f95b 	bl	8000ae4 <MX_USART3_UART_Init>
  MX_FDCAN1_Init();
 800082e:	f000 f8a3 	bl	8000978 <MX_FDCAN1_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  /* USER CODE BEGIN WHILE */ /*AAO+*/
  printf("Welcome to the CANbus!!!\n\r");
 8000832:	480e      	ldr	r0, [pc, #56]	@ (800086c <main+0xd0>)
 8000834:	f005 fee0 	bl	80065f8 <iprintf>
//	}
//	HAL_Delay(1000); // Wait 1 second before sending the next message


	// Esperar a que se reciba un mensaje CAN
	if (HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK) {
 8000838:	4b0d      	ldr	r3, [pc, #52]	@ (8000870 <main+0xd4>)
 800083a:	4a0e      	ldr	r2, [pc, #56]	@ (8000874 <main+0xd8>)
 800083c:	2140      	movs	r1, #64	@ 0x40
 800083e:	480e      	ldr	r0, [pc, #56]	@ (8000878 <main+0xdc>)
 8000840:	f001 f8de 	bl	8001a00 <HAL_FDCAN_GetRxMessage>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d106      	bne.n	8000858 <main+0xbc>
		// Imprimir el identificador del mensaje
		printf("\n\rMensaje recibido - ID: 0x%lx\n\r", RxHeader.Identifier);
 800084a:	4b0a      	ldr	r3, [pc, #40]	@ (8000874 <main+0xd8>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	4619      	mov	r1, r3
 8000850:	480a      	ldr	r0, [pc, #40]	@ (800087c <main+0xe0>)
 8000852:	f005 fed1 	bl	80065f8 <iprintf>
 8000856:	e002      	b.n	800085e <main+0xc2>
	} else {
		printf("Error al recibir el mensaje CAN.\n\r");
 8000858:	4809      	ldr	r0, [pc, #36]	@ (8000880 <main+0xe4>)
 800085a:	f005 fecd 	bl	80065f8 <iprintf>

//	printf("A\n\r");
//	HAL_FDCAN_RxFifo0Callback( &hfdcan1, FDCAN_RX_FIFO0);
//	printf("B\n\r");

	HAL_Delay(1000); // Esperar antes de procesar el siguiente mensaje
 800085e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000862:	f000 fd0d 	bl	8001280 <HAL_Delay>
	if (HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK) {
 8000866:	e7e7      	b.n	8000838 <main+0x9c>
 8000868:	58024400 	.word	0x58024400
 800086c:	08007308 	.word	0x08007308
 8000870:	24000228 	.word	0x24000228
 8000874:	24000200 	.word	0x24000200
 8000878:	24000088 	.word	0x24000088
 800087c:	08007324 	.word	0x08007324
 8000880:	08007348 	.word	0x08007348

08000884 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b09c      	sub	sp, #112	@ 0x70
 8000888:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800088a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800088e:	224c      	movs	r2, #76	@ 0x4c
 8000890:	2100      	movs	r1, #0
 8000892:	4618      	mov	r0, r3
 8000894:	f005 ff05 	bl	80066a2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000898:	1d3b      	adds	r3, r7, #4
 800089a:	2220      	movs	r2, #32
 800089c:	2100      	movs	r1, #0
 800089e:	4618      	mov	r0, r3
 80008a0:	f005 feff 	bl	80066a2 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80008a4:	2004      	movs	r0, #4
 80008a6:	f001 fe0f 	bl	80024c8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80008aa:	2300      	movs	r3, #0
 80008ac:	603b      	str	r3, [r7, #0]
 80008ae:	4b30      	ldr	r3, [pc, #192]	@ (8000970 <SystemClock_Config+0xec>)
 80008b0:	699b      	ldr	r3, [r3, #24]
 80008b2:	4a2f      	ldr	r2, [pc, #188]	@ (8000970 <SystemClock_Config+0xec>)
 80008b4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80008b8:	6193      	str	r3, [r2, #24]
 80008ba:	4b2d      	ldr	r3, [pc, #180]	@ (8000970 <SystemClock_Config+0xec>)
 80008bc:	699b      	ldr	r3, [r3, #24]
 80008be:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008c2:	603b      	str	r3, [r7, #0]
 80008c4:	4b2b      	ldr	r3, [pc, #172]	@ (8000974 <SystemClock_Config+0xf0>)
 80008c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008c8:	4a2a      	ldr	r2, [pc, #168]	@ (8000974 <SystemClock_Config+0xf0>)
 80008ca:	f043 0301 	orr.w	r3, r3, #1
 80008ce:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80008d0:	4b28      	ldr	r3, [pc, #160]	@ (8000974 <SystemClock_Config+0xf0>)
 80008d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008d4:	f003 0301 	and.w	r3, r3, #1
 80008d8:	603b      	str	r3, [r7, #0]
 80008da:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80008dc:	bf00      	nop
 80008de:	4b24      	ldr	r3, [pc, #144]	@ (8000970 <SystemClock_Config+0xec>)
 80008e0:	699b      	ldr	r3, [r3, #24]
 80008e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80008e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80008ea:	d1f8      	bne.n	80008de <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008ec:	2301      	movs	r3, #1
 80008ee:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80008f0:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80008f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008f6:	2302      	movs	r3, #2
 80008f8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008fa:	2302      	movs	r3, #2
 80008fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 80008fe:	2302      	movs	r3, #2
 8000900:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 240;
 8000902:	23f0      	movs	r3, #240	@ 0xf0
 8000904:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000906:	2302      	movs	r3, #2
 8000908:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 24;
 800090a:	2318      	movs	r3, #24
 800090c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800090e:	2302      	movs	r3, #2
 8000910:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000912:	2308      	movs	r3, #8
 8000914:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000916:	2300      	movs	r3, #0
 8000918:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800091a:	2300      	movs	r3, #0
 800091c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800091e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000922:	4618      	mov	r0, r3
 8000924:	f001 fe2a 	bl	800257c <HAL_RCC_OscConfig>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800092e:	f000 f9ff 	bl	8000d30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000932:	233f      	movs	r3, #63	@ 0x3f
 8000934:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000936:	2303      	movs	r3, #3
 8000938:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800093a:	2300      	movs	r3, #0
 800093c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800093e:	2308      	movs	r3, #8
 8000940:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000942:	2340      	movs	r3, #64	@ 0x40
 8000944:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000946:	2340      	movs	r3, #64	@ 0x40
 8000948:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800094a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800094e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000950:	2340      	movs	r3, #64	@ 0x40
 8000952:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000954:	1d3b      	adds	r3, r7, #4
 8000956:	2104      	movs	r1, #4
 8000958:	4618      	mov	r0, r3
 800095a:	f002 fa69 	bl	8002e30 <HAL_RCC_ClockConfig>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000964:	f000 f9e4 	bl	8000d30 <Error_Handler>
  }
}
 8000968:	bf00      	nop
 800096a:	3770      	adds	r7, #112	@ 0x70
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	58024800 	.word	0x58024800
 8000974:	58000400 	.word	0x58000400

08000978 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af02      	add	r7, sp, #8
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800097e:	4b54      	ldr	r3, [pc, #336]	@ (8000ad0 <MX_FDCAN1_Init+0x158>)
 8000980:	4a54      	ldr	r2, [pc, #336]	@ (8000ad4 <MX_FDCAN1_Init+0x15c>)
 8000982:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000984:	4b52      	ldr	r3, [pc, #328]	@ (8000ad0 <MX_FDCAN1_Init+0x158>)
 8000986:	2200      	movs	r2, #0
 8000988:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800098a:	4b51      	ldr	r3, [pc, #324]	@ (8000ad0 <MX_FDCAN1_Init+0x158>)
 800098c:	2200      	movs	r2, #0
 800098e:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000990:	4b4f      	ldr	r3, [pc, #316]	@ (8000ad0 <MX_FDCAN1_Init+0x158>)
 8000992:	2200      	movs	r2, #0
 8000994:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000996:	4b4e      	ldr	r3, [pc, #312]	@ (8000ad0 <MX_FDCAN1_Init+0x158>)
 8000998:	2200      	movs	r2, #0
 800099a:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = ENABLE;
 800099c:	4b4c      	ldr	r3, [pc, #304]	@ (8000ad0 <MX_FDCAN1_Init+0x158>)
 800099e:	2201      	movs	r2, #1
 80009a0:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 2;
 80009a2:	4b4b      	ldr	r3, [pc, #300]	@ (8000ad0 <MX_FDCAN1_Init+0x158>)
 80009a4:	2202      	movs	r2, #2
 80009a6:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 8;
 80009a8:	4b49      	ldr	r3, [pc, #292]	@ (8000ad0 <MX_FDCAN1_Init+0x158>)
 80009aa:	2208      	movs	r2, #8
 80009ac:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 31 ;
 80009ae:	4b48      	ldr	r3, [pc, #288]	@ (8000ad0 <MX_FDCAN1_Init+0x158>)
 80009b0:	221f      	movs	r2, #31
 80009b2:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 8;
 80009b4:	4b46      	ldr	r3, [pc, #280]	@ (8000ad0 <MX_FDCAN1_Init+0x158>)
 80009b6:	2208      	movs	r2, #8
 80009b8:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80009ba:	4b45      	ldr	r3, [pc, #276]	@ (8000ad0 <MX_FDCAN1_Init+0x158>)
 80009bc:	2201      	movs	r2, #1
 80009be:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80009c0:	4b43      	ldr	r3, [pc, #268]	@ (8000ad0 <MX_FDCAN1_Init+0x158>)
 80009c2:	2201      	movs	r2, #1
 80009c4:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 80009c6:	4b42      	ldr	r3, [pc, #264]	@ (8000ad0 <MX_FDCAN1_Init+0x158>)
 80009c8:	2201      	movs	r2, #1
 80009ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 80009cc:	4b40      	ldr	r3, [pc, #256]	@ (8000ad0 <MX_FDCAN1_Init+0x158>)
 80009ce:	2201      	movs	r2, #1
 80009d0:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 80009d2:	4b3f      	ldr	r3, [pc, #252]	@ (8000ad0 <MX_FDCAN1_Init+0x158>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 80009d8:	4b3d      	ldr	r3, [pc, #244]	@ (8000ad0 <MX_FDCAN1_Init+0x158>)
 80009da:	2201      	movs	r2, #1
 80009dc:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 80009de:	4b3c      	ldr	r3, [pc, #240]	@ (8000ad0 <MX_FDCAN1_Init+0x158>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 1;
 80009e4:	4b3a      	ldr	r3, [pc, #232]	@ (8000ad0 <MX_FDCAN1_Init+0x158>)
 80009e6:	2201      	movs	r2, #1
 80009e8:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 80009ea:	4b39      	ldr	r3, [pc, #228]	@ (8000ad0 <MX_FDCAN1_Init+0x158>)
 80009ec:	2204      	movs	r2, #4
 80009ee:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 80009f0:	4b37      	ldr	r3, [pc, #220]	@ (8000ad0 <MX_FDCAN1_Init+0x158>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80009f6:	4b36      	ldr	r3, [pc, #216]	@ (8000ad0 <MX_FDCAN1_Init+0x158>)
 80009f8:	2204      	movs	r2, #4
 80009fa:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 80009fc:	4b34      	ldr	r3, [pc, #208]	@ (8000ad0 <MX_FDCAN1_Init+0x158>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000a02:	4b33      	ldr	r3, [pc, #204]	@ (8000ad0 <MX_FDCAN1_Init+0x158>)
 8000a04:	2204      	movs	r2, #4
 8000a06:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000a08:	4b31      	ldr	r3, [pc, #196]	@ (8000ad0 <MX_FDCAN1_Init+0x158>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000a0e:	4b30      	ldr	r3, [pc, #192]	@ (8000ad0 <MX_FDCAN1_Init+0x158>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 1;
 8000a14:	4b2e      	ldr	r3, [pc, #184]	@ (8000ad0 <MX_FDCAN1_Init+0x158>)
 8000a16:	2201      	movs	r2, #1
 8000a18:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000a1a:	4b2d      	ldr	r3, [pc, #180]	@ (8000ad0 <MX_FDCAN1_Init+0x158>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000a20:	4b2b      	ldr	r3, [pc, #172]	@ (8000ad0 <MX_FDCAN1_Init+0x158>)
 8000a22:	2204      	movs	r2, #4
 8000a24:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000a26:	482a      	ldr	r0, [pc, #168]	@ (8000ad0 <MX_FDCAN1_Init+0x158>)
 8000a28:	f000 fd3e 	bl	80014a8 <HAL_FDCAN_Init>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_FDCAN1_Init+0xbe>
  {
    Error_Handler();
 8000a32:	f000 f97d 	bl	8000d30 <Error_Handler>
//    sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
//    sFilterConfig.FilterID1 = 0x123;           // El ID específico que deseas filtrar
//    sFilterConfig.FilterID2 = 0x7FF;           // Máscara para filtrar exactamente el ID 0x123

  	//	CAN J1939 Configuration
	sFilterConfig.IdType = FDCAN_EXTENDED_ID;  // ID extendido de 29 bits
 8000a36:	4b28      	ldr	r3, [pc, #160]	@ (8000ad8 <MX_FDCAN1_Init+0x160>)
 8000a38:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a3c:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIndex = 0;
 8000a3e:	4b26      	ldr	r3, [pc, #152]	@ (8000ad8 <MX_FDCAN1_Init+0x160>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8000a44:	4b24      	ldr	r3, [pc, #144]	@ (8000ad8 <MX_FDCAN1_Init+0x160>)
 8000a46:	2202      	movs	r2, #2
 8000a48:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000a4a:	4b23      	ldr	r3, [pc, #140]	@ (8000ad8 <MX_FDCAN1_Init+0x160>)
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	60da      	str	r2, [r3, #12]

	//	CAN J1939 Configuration
//    sFilterConfig.FilterID1 = 0x18FF1234;     // ID extendido específico
//    sFilterConfig.FilterID2 = 0x1FFFFFFF;     // Máscara para todos los bits

	sFilterConfig.FilterID1 = 0x00000000;
 8000a50:	4b21      	ldr	r3, [pc, #132]	@ (8000ad8 <MX_FDCAN1_Init+0x160>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterID2 = 0x00000000;
 8000a56:	4b20      	ldr	r3, [pc, #128]	@ (8000ad8 <MX_FDCAN1_Init+0x160>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	615a      	str	r2, [r3, #20]

//	sFilterConfig.FilterID1 = 0x18FF0000;  // PGN J1939 (0x18FF####)
//	sFilterConfig.FilterID2 = 0x18FFFF00;  // Máscara para ignorar la dirección fuente

    /* Configure global filter to reject all non-matching frames */
    HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, FDCAN_REJECT_REMOTE, FDCAN_REJECT_REMOTE);
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	9300      	str	r3, [sp, #0]
 8000a60:	2301      	movs	r3, #1
 8000a62:	2202      	movs	r2, #2
 8000a64:	2102      	movs	r1, #2
 8000a66:	481a      	ldr	r0, [pc, #104]	@ (8000ad0 <MX_FDCAN1_Init+0x158>)
 8000a68:	f000 ff72 	bl	8001950 <HAL_FDCAN_ConfigGlobalFilter>

    if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 8000a6c:	491a      	ldr	r1, [pc, #104]	@ (8000ad8 <MX_FDCAN1_Init+0x160>)
 8000a6e:	4818      	ldr	r0, [pc, #96]	@ (8000ad0 <MX_FDCAN1_Init+0x158>)
 8000a70:	f000 fef8 	bl	8001864 <HAL_FDCAN_ConfigFilter>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <MX_FDCAN1_Init+0x106>
      {
         /* Filter configuration Error */
         Error_Handler();
 8000a7a:	f000 f959 	bl	8000d30 <Error_Handler>
      }
     /* Start the FDCAN module */
    if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK) {
 8000a7e:	4814      	ldr	r0, [pc, #80]	@ (8000ad0 <MX_FDCAN1_Init+0x158>)
 8000a80:	f000 ff93 	bl	80019aa <HAL_FDCAN_Start>
      }
         /* Start Error */
    if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK) {
 8000a84:	2200      	movs	r2, #0
 8000a86:	2101      	movs	r1, #1
 8000a88:	4811      	ldr	r0, [pc, #68]	@ (8000ad0 <MX_FDCAN1_Init+0x158>)
 8000a8a:	f001 f925 	bl	8001cd8 <HAL_FDCAN_ActivateNotification>
//    TxHeader.IdType = FDCAN_STANDARD_ID;
//    TxHeader.TxFrameType = FDCAN_DATA_FRAME;
//    TxHeader.DataLength = FDCAN_DLC_BYTES_8;

//	CAN J1939 Configuration
    TxHeader.Identifier = 0x18FF1233;  // Ejemplo de ID extendido J1939
 8000a8e:	4b13      	ldr	r3, [pc, #76]	@ (8000adc <MX_FDCAN1_Init+0x164>)
 8000a90:	4a13      	ldr	r2, [pc, #76]	@ (8000ae0 <MX_FDCAN1_Init+0x168>)
 8000a92:	601a      	str	r2, [r3, #0]
    TxHeader.IdType = FDCAN_EXTENDED_ID;
 8000a94:	4b11      	ldr	r3, [pc, #68]	@ (8000adc <MX_FDCAN1_Init+0x164>)
 8000a96:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a9a:	605a      	str	r2, [r3, #4]
    TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000a9c:	4b0f      	ldr	r3, [pc, #60]	@ (8000adc <MX_FDCAN1_Init+0x164>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	609a      	str	r2, [r3, #8]
    TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8000aa2:	4b0e      	ldr	r3, [pc, #56]	@ (8000adc <MX_FDCAN1_Init+0x164>)
 8000aa4:	2208      	movs	r2, #8
 8000aa6:	60da      	str	r2, [r3, #12]


    TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000aa8:	4b0c      	ldr	r3, [pc, #48]	@ (8000adc <MX_FDCAN1_Init+0x164>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	611a      	str	r2, [r3, #16]
    TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8000aae:	4b0b      	ldr	r3, [pc, #44]	@ (8000adc <MX_FDCAN1_Init+0x164>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	615a      	str	r2, [r3, #20]
    TxHeader.FDFormat = FDCAN_FD_CAN;
 8000ab4:	4b09      	ldr	r3, [pc, #36]	@ (8000adc <MX_FDCAN1_Init+0x164>)
 8000ab6:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000aba:	619a      	str	r2, [r3, #24]
    TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000abc:	4b07      	ldr	r3, [pc, #28]	@ (8000adc <MX_FDCAN1_Init+0x164>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	61da      	str	r2, [r3, #28]
    TxHeader.MessageMarker = 0x00;
 8000ac2:	4b06      	ldr	r3, [pc, #24]	@ (8000adc <MX_FDCAN1_Init+0x164>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	621a      	str	r2, [r3, #32]

     /* USER CODE END WHILE */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000ac8:	bf00      	nop
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	24000088 	.word	0x24000088
 8000ad4:	4000a000 	.word	0x4000a000
 8000ad8:	240001bc 	.word	0x240001bc
 8000adc:	240001dc 	.word	0x240001dc
 8000ae0:	18ff1233 	.word	0x18ff1233

08000ae4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ae8:	4b22      	ldr	r3, [pc, #136]	@ (8000b74 <MX_USART3_UART_Init+0x90>)
 8000aea:	4a23      	ldr	r2, [pc, #140]	@ (8000b78 <MX_USART3_UART_Init+0x94>)
 8000aec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000aee:	4b21      	ldr	r3, [pc, #132]	@ (8000b74 <MX_USART3_UART_Init+0x90>)
 8000af0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000af4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000af6:	4b1f      	ldr	r3, [pc, #124]	@ (8000b74 <MX_USART3_UART_Init+0x90>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000afc:	4b1d      	ldr	r3, [pc, #116]	@ (8000b74 <MX_USART3_UART_Init+0x90>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b02:	4b1c      	ldr	r3, [pc, #112]	@ (8000b74 <MX_USART3_UART_Init+0x90>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b08:	4b1a      	ldr	r3, [pc, #104]	@ (8000b74 <MX_USART3_UART_Init+0x90>)
 8000b0a:	220c      	movs	r2, #12
 8000b0c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b0e:	4b19      	ldr	r3, [pc, #100]	@ (8000b74 <MX_USART3_UART_Init+0x90>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b14:	4b17      	ldr	r3, [pc, #92]	@ (8000b74 <MX_USART3_UART_Init+0x90>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b1a:	4b16      	ldr	r3, [pc, #88]	@ (8000b74 <MX_USART3_UART_Init+0x90>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b20:	4b14      	ldr	r3, [pc, #80]	@ (8000b74 <MX_USART3_UART_Init+0x90>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b26:	4b13      	ldr	r3, [pc, #76]	@ (8000b74 <MX_USART3_UART_Init+0x90>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b2c:	4811      	ldr	r0, [pc, #68]	@ (8000b74 <MX_USART3_UART_Init+0x90>)
 8000b2e:	f004 fb37 	bl	80051a0 <HAL_UART_Init>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000b38:	f000 f8fa 	bl	8000d30 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	480d      	ldr	r0, [pc, #52]	@ (8000b74 <MX_USART3_UART_Init+0x90>)
 8000b40:	f005 fbcd 	bl	80062de <HAL_UARTEx_SetTxFifoThreshold>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000b4a:	f000 f8f1 	bl	8000d30 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b4e:	2100      	movs	r1, #0
 8000b50:	4808      	ldr	r0, [pc, #32]	@ (8000b74 <MX_USART3_UART_Init+0x90>)
 8000b52:	f005 fc02 	bl	800635a <HAL_UARTEx_SetRxFifoThreshold>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000b5c:	f000 f8e8 	bl	8000d30 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000b60:	4804      	ldr	r0, [pc, #16]	@ (8000b74 <MX_USART3_UART_Init+0x90>)
 8000b62:	f005 fb83 	bl	800626c <HAL_UARTEx_DisableFifoMode>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000b6c:	f000 f8e0 	bl	8000d30 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b70:	bf00      	nop
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	24000128 	.word	0x24000128
 8000b78:	40004800 	.word	0x40004800

08000b7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b08a      	sub	sp, #40	@ 0x28
 8000b80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b82:	f107 0314 	add.w	r3, r7, #20
 8000b86:	2200      	movs	r2, #0
 8000b88:	601a      	str	r2, [r3, #0]
 8000b8a:	605a      	str	r2, [r3, #4]
 8000b8c:	609a      	str	r2, [r3, #8]
 8000b8e:	60da      	str	r2, [r3, #12]
 8000b90:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b92:	4b62      	ldr	r3, [pc, #392]	@ (8000d1c <MX_GPIO_Init+0x1a0>)
 8000b94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b98:	4a60      	ldr	r2, [pc, #384]	@ (8000d1c <MX_GPIO_Init+0x1a0>)
 8000b9a:	f043 0304 	orr.w	r3, r3, #4
 8000b9e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ba2:	4b5e      	ldr	r3, [pc, #376]	@ (8000d1c <MX_GPIO_Init+0x1a0>)
 8000ba4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ba8:	f003 0304 	and.w	r3, r3, #4
 8000bac:	613b      	str	r3, [r7, #16]
 8000bae:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb0:	4b5a      	ldr	r3, [pc, #360]	@ (8000d1c <MX_GPIO_Init+0x1a0>)
 8000bb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bb6:	4a59      	ldr	r2, [pc, #356]	@ (8000d1c <MX_GPIO_Init+0x1a0>)
 8000bb8:	f043 0301 	orr.w	r3, r3, #1
 8000bbc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bc0:	4b56      	ldr	r3, [pc, #344]	@ (8000d1c <MX_GPIO_Init+0x1a0>)
 8000bc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bc6:	f003 0301 	and.w	r3, r3, #1
 8000bca:	60fb      	str	r3, [r7, #12]
 8000bcc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bce:	4b53      	ldr	r3, [pc, #332]	@ (8000d1c <MX_GPIO_Init+0x1a0>)
 8000bd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bd4:	4a51      	ldr	r2, [pc, #324]	@ (8000d1c <MX_GPIO_Init+0x1a0>)
 8000bd6:	f043 0302 	orr.w	r3, r3, #2
 8000bda:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bde:	4b4f      	ldr	r3, [pc, #316]	@ (8000d1c <MX_GPIO_Init+0x1a0>)
 8000be0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000be4:	f003 0302 	and.w	r3, r3, #2
 8000be8:	60bb      	str	r3, [r7, #8]
 8000bea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bec:	4b4b      	ldr	r3, [pc, #300]	@ (8000d1c <MX_GPIO_Init+0x1a0>)
 8000bee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bf2:	4a4a      	ldr	r2, [pc, #296]	@ (8000d1c <MX_GPIO_Init+0x1a0>)
 8000bf4:	f043 0308 	orr.w	r3, r3, #8
 8000bf8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bfc:	4b47      	ldr	r3, [pc, #284]	@ (8000d1c <MX_GPIO_Init+0x1a0>)
 8000bfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c02:	f003 0308 	and.w	r3, r3, #8
 8000c06:	607b      	str	r3, [r7, #4]
 8000c08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c0a:	4b44      	ldr	r3, [pc, #272]	@ (8000d1c <MX_GPIO_Init+0x1a0>)
 8000c0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c10:	4a42      	ldr	r2, [pc, #264]	@ (8000d1c <MX_GPIO_Init+0x1a0>)
 8000c12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c16:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c1a:	4b40      	ldr	r3, [pc, #256]	@ (8000d1c <MX_GPIO_Init+0x1a0>)
 8000c1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c24:	603b      	str	r3, [r7, #0]
 8000c26:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000c28:	2200      	movs	r2, #0
 8000c2a:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000c2e:	483c      	ldr	r0, [pc, #240]	@ (8000d20 <MX_GPIO_Init+0x1a4>)
 8000c30:	f001 fc02 	bl	8002438 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c34:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c42:	f107 0314 	add.w	r3, r7, #20
 8000c46:	4619      	mov	r1, r3
 8000c48:	4836      	ldr	r0, [pc, #216]	@ (8000d24 <MX_GPIO_Init+0x1a8>)
 8000c4a:	f001 fa45 	bl	80020d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000c4e:	2332      	movs	r3, #50	@ 0x32
 8000c50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c52:	2302      	movs	r3, #2
 8000c54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c56:	2300      	movs	r3, #0
 8000c58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c5e:	230b      	movs	r3, #11
 8000c60:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c62:	f107 0314 	add.w	r3, r7, #20
 8000c66:	4619      	mov	r1, r3
 8000c68:	482e      	ldr	r0, [pc, #184]	@ (8000d24 <MX_GPIO_Init+0x1a8>)
 8000c6a:	f001 fa35 	bl	80020d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000c6e:	2386      	movs	r3, #134	@ 0x86
 8000c70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c72:	2302      	movs	r3, #2
 8000c74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c76:	2300      	movs	r3, #0
 8000c78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c7e:	230b      	movs	r3, #11
 8000c80:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c82:	f107 0314 	add.w	r3, r7, #20
 8000c86:	4619      	mov	r1, r3
 8000c88:	4827      	ldr	r0, [pc, #156]	@ (8000d28 <MX_GPIO_Init+0x1ac>)
 8000c8a:	f001 fa25 	bl	80020d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000c8e:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000c92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c94:	2301      	movs	r3, #1
 8000c96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ca0:	f107 0314 	add.w	r3, r7, #20
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	481e      	ldr	r0, [pc, #120]	@ (8000d20 <MX_GPIO_Init+0x1a4>)
 8000ca8:	f001 fa16 	bl	80020d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000cac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000cb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb2:	2302      	movs	r3, #2
 8000cb4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cbe:	230b      	movs	r3, #11
 8000cc0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cc2:	f107 0314 	add.w	r3, r7, #20
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4815      	ldr	r0, [pc, #84]	@ (8000d20 <MX_GPIO_Init+0x1a4>)
 8000cca:	f001 fa05 	bl	80020d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000cce:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000cd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd4:	2302      	movs	r3, #2
 8000cd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000ce0:	230a      	movs	r3, #10
 8000ce2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce4:	f107 0314 	add.w	r3, r7, #20
 8000ce8:	4619      	mov	r1, r3
 8000cea:	480f      	ldr	r0, [pc, #60]	@ (8000d28 <MX_GPIO_Init+0x1ac>)
 8000cec:	f001 f9f4 	bl	80020d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000cf0:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000cf4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf6:	2302      	movs	r3, #2
 8000cf8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d02:	230b      	movs	r3, #11
 8000d04:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d06:	f107 0314 	add.w	r3, r7, #20
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	4807      	ldr	r0, [pc, #28]	@ (8000d2c <MX_GPIO_Init+0x1b0>)
 8000d0e:	f001 f9e3 	bl	80020d8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d12:	bf00      	nop
 8000d14:	3728      	adds	r7, #40	@ 0x28
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	58024400 	.word	0x58024400
 8000d20:	58020400 	.word	0x58020400
 8000d24:	58020800 	.word	0x58020800
 8000d28:	58020000 	.word	0x58020000
 8000d2c:	58021800 	.word	0x58021800

08000d30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d34:	b672      	cpsid	i
}
 8000d36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d38:	bf00      	nop
 8000d3a:	e7fd      	b.n	8000d38 <Error_Handler+0x8>

08000d3c <__io_putchar>:
/**
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE {
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  /* write a character to the USART3 and Loop until the end of transmission*/
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000d44:	1d39      	adds	r1, r7, #4
 8000d46:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	4803      	ldr	r0, [pc, #12]	@ (8000d5c <__io_putchar+0x20>)
 8000d4e:	f004 fa77 	bl	8005240 <HAL_UART_Transmit>
  return ch;
 8000d52:	687b      	ldr	r3, [r7, #4]
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	3708      	adds	r7, #8
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	24000128 	.word	0x24000128

08000d60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d66:	4b0a      	ldr	r3, [pc, #40]	@ (8000d90 <HAL_MspInit+0x30>)
 8000d68:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d6c:	4a08      	ldr	r2, [pc, #32]	@ (8000d90 <HAL_MspInit+0x30>)
 8000d6e:	f043 0302 	orr.w	r3, r3, #2
 8000d72:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000d76:	4b06      	ldr	r3, [pc, #24]	@ (8000d90 <HAL_MspInit+0x30>)
 8000d78:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d7c:	f003 0302 	and.w	r3, r3, #2
 8000d80:	607b      	str	r3, [r7, #4]
 8000d82:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d84:	bf00      	nop
 8000d86:	370c      	adds	r7, #12
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr
 8000d90:	58024400 	.word	0x58024400

08000d94 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b0ba      	sub	sp, #232	@ 0xe8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d9c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000da0:	2200      	movs	r2, #0
 8000da2:	601a      	str	r2, [r3, #0]
 8000da4:	605a      	str	r2, [r3, #4]
 8000da6:	609a      	str	r2, [r3, #8]
 8000da8:	60da      	str	r2, [r3, #12]
 8000daa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dac:	f107 0310 	add.w	r3, r7, #16
 8000db0:	22c0      	movs	r2, #192	@ 0xc0
 8000db2:	2100      	movs	r1, #0
 8000db4:	4618      	mov	r0, r3
 8000db6:	f005 fc74 	bl	80066a2 <memset>
  if(hfdcan->Instance==FDCAN1)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4a31      	ldr	r2, [pc, #196]	@ (8000e84 <HAL_FDCAN_MspInit+0xf0>)
 8000dc0:	4293      	cmp	r3, r2
 8000dc2:	d15b      	bne.n	8000e7c <HAL_FDCAN_MspInit+0xe8>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000dc4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000dc8:	f04f 0300 	mov.w	r3, #0
 8000dcc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8000dd0:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000dd4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dd8:	f107 0310 	add.w	r3, r7, #16
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f002 fbb3 	bl	8003548 <HAL_RCCEx_PeriphCLKConfig>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 8000de8:	f7ff ffa2 	bl	8000d30 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000dec:	4b26      	ldr	r3, [pc, #152]	@ (8000e88 <HAL_FDCAN_MspInit+0xf4>)
 8000dee:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8000df2:	4a25      	ldr	r2, [pc, #148]	@ (8000e88 <HAL_FDCAN_MspInit+0xf4>)
 8000df4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000df8:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8000dfc:	4b22      	ldr	r3, [pc, #136]	@ (8000e88 <HAL_FDCAN_MspInit+0xf4>)
 8000dfe:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8000e02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e06:	60fb      	str	r3, [r7, #12]
 8000e08:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e0a:	4b1f      	ldr	r3, [pc, #124]	@ (8000e88 <HAL_FDCAN_MspInit+0xf4>)
 8000e0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e10:	4a1d      	ldr	r2, [pc, #116]	@ (8000e88 <HAL_FDCAN_MspInit+0xf4>)
 8000e12:	f043 0308 	orr.w	r3, r3, #8
 8000e16:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e1a:	4b1b      	ldr	r3, [pc, #108]	@ (8000e88 <HAL_FDCAN_MspInit+0xf4>)
 8000e1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e20:	f003 0308 	and.w	r3, r3, #8
 8000e24:	60bb      	str	r3, [r7, #8]
 8000e26:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = CAN_RX_Pin;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2e:	2302      	movs	r3, #2
 8000e30:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e34:	2300      	movs	r3, #0
 8000e36:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e3a:	2303      	movs	r3, #3
 8000e3c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000e40:	2309      	movs	r3, #9
 8000e42:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(CAN_RX_GPIO_Port, &GPIO_InitStruct);
 8000e46:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	480f      	ldr	r0, [pc, #60]	@ (8000e8c <HAL_FDCAN_MspInit+0xf8>)
 8000e4e:	f001 f943 	bl	80020d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CAN_TX_Pin;
 8000e52:	2302      	movs	r3, #2
 8000e54:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e58:	2302      	movs	r3, #2
 8000e5a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e64:	2303      	movs	r3, #3
 8000e66:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000e6a:	2309      	movs	r3, #9
 8000e6c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(CAN_TX_GPIO_Port, &GPIO_InitStruct);
 8000e70:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000e74:	4619      	mov	r1, r3
 8000e76:	4805      	ldr	r0, [pc, #20]	@ (8000e8c <HAL_FDCAN_MspInit+0xf8>)
 8000e78:	f001 f92e 	bl	80020d8 <HAL_GPIO_Init>

  /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 8000e7c:	bf00      	nop
 8000e7e:	37e8      	adds	r7, #232	@ 0xe8
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	4000a000 	.word	0x4000a000
 8000e88:	58024400 	.word	0x58024400
 8000e8c:	58020c00 	.word	0x58020c00

08000e90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b0ba      	sub	sp, #232	@ 0xe8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e98:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	601a      	str	r2, [r3, #0]
 8000ea0:	605a      	str	r2, [r3, #4]
 8000ea2:	609a      	str	r2, [r3, #8]
 8000ea4:	60da      	str	r2, [r3, #12]
 8000ea6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ea8:	f107 0310 	add.w	r3, r7, #16
 8000eac:	22c0      	movs	r2, #192	@ 0xc0
 8000eae:	2100      	movs	r1, #0
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f005 fbf6 	bl	80066a2 <memset>
  if(huart->Instance==USART3)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4a27      	ldr	r2, [pc, #156]	@ (8000f58 <HAL_UART_MspInit+0xc8>)
 8000ebc:	4293      	cmp	r3, r2
 8000ebe:	d146      	bne.n	8000f4e <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000ec0:	f04f 0202 	mov.w	r2, #2
 8000ec4:	f04f 0300 	mov.w	r3, #0
 8000ec8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ed2:	f107 0310 	add.w	r3, r7, #16
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f002 fb36 	bl	8003548 <HAL_RCCEx_PeriphCLKConfig>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000ee2:	f7ff ff25 	bl	8000d30 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ee6:	4b1d      	ldr	r3, [pc, #116]	@ (8000f5c <HAL_UART_MspInit+0xcc>)
 8000ee8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000eec:	4a1b      	ldr	r2, [pc, #108]	@ (8000f5c <HAL_UART_MspInit+0xcc>)
 8000eee:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ef2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000ef6:	4b19      	ldr	r3, [pc, #100]	@ (8000f5c <HAL_UART_MspInit+0xcc>)
 8000ef8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000efc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000f00:	60fb      	str	r3, [r7, #12]
 8000f02:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f04:	4b15      	ldr	r3, [pc, #84]	@ (8000f5c <HAL_UART_MspInit+0xcc>)
 8000f06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f0a:	4a14      	ldr	r2, [pc, #80]	@ (8000f5c <HAL_UART_MspInit+0xcc>)
 8000f0c:	f043 0308 	orr.w	r3, r3, #8
 8000f10:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f14:	4b11      	ldr	r3, [pc, #68]	@ (8000f5c <HAL_UART_MspInit+0xcc>)
 8000f16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f1a:	f003 0308 	and.w	r3, r3, #8
 8000f1e:	60bb      	str	r3, [r7, #8]
 8000f20:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f22:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000f26:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f30:	2300      	movs	r3, #0
 8000f32:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f36:	2300      	movs	r3, #0
 8000f38:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f3c:	2307      	movs	r3, #7
 8000f3e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f42:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000f46:	4619      	mov	r1, r3
 8000f48:	4805      	ldr	r0, [pc, #20]	@ (8000f60 <HAL_UART_MspInit+0xd0>)
 8000f4a:	f001 f8c5 	bl	80020d8 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8000f4e:	bf00      	nop
 8000f50:	37e8      	adds	r7, #232	@ 0xe8
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	40004800 	.word	0x40004800
 8000f5c:	58024400 	.word	0x58024400
 8000f60:	58020c00 	.word	0x58020c00

08000f64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f68:	bf00      	nop
 8000f6a:	e7fd      	b.n	8000f68 <NMI_Handler+0x4>

08000f6c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f70:	bf00      	nop
 8000f72:	e7fd      	b.n	8000f70 <HardFault_Handler+0x4>

08000f74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f78:	bf00      	nop
 8000f7a:	e7fd      	b.n	8000f78 <MemManage_Handler+0x4>

08000f7c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f80:	bf00      	nop
 8000f82:	e7fd      	b.n	8000f80 <BusFault_Handler+0x4>

08000f84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f88:	bf00      	nop
 8000f8a:	e7fd      	b.n	8000f88 <UsageFault_Handler+0x4>

08000f8c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f90:	bf00      	nop
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr

08000f9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr

08000fa8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fac:	bf00      	nop
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr

08000fb6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fb6:	b580      	push	{r7, lr}
 8000fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fba:	f000 f941 	bl	8001240 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fbe:	bf00      	nop
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	b086      	sub	sp, #24
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	60f8      	str	r0, [r7, #12]
 8000fca:	60b9      	str	r1, [r7, #8]
 8000fcc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fce:	2300      	movs	r3, #0
 8000fd0:	617b      	str	r3, [r7, #20]
 8000fd2:	e00a      	b.n	8000fea <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000fd4:	f3af 8000 	nop.w
 8000fd8:	4601      	mov	r1, r0
 8000fda:	68bb      	ldr	r3, [r7, #8]
 8000fdc:	1c5a      	adds	r2, r3, #1
 8000fde:	60ba      	str	r2, [r7, #8]
 8000fe0:	b2ca      	uxtb	r2, r1
 8000fe2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	617b      	str	r3, [r7, #20]
 8000fea:	697a      	ldr	r2, [r7, #20]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	429a      	cmp	r2, r3
 8000ff0:	dbf0      	blt.n	8000fd4 <_read+0x12>
  }

  return len;
 8000ff2:	687b      	ldr	r3, [r7, #4]
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	3718      	adds	r7, #24
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}

08000ffc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b086      	sub	sp, #24
 8001000:	af00      	add	r7, sp, #0
 8001002:	60f8      	str	r0, [r7, #12]
 8001004:	60b9      	str	r1, [r7, #8]
 8001006:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001008:	2300      	movs	r3, #0
 800100a:	617b      	str	r3, [r7, #20]
 800100c:	e009      	b.n	8001022 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800100e:	68bb      	ldr	r3, [r7, #8]
 8001010:	1c5a      	adds	r2, r3, #1
 8001012:	60ba      	str	r2, [r7, #8]
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	4618      	mov	r0, r3
 8001018:	f7ff fe90 	bl	8000d3c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	3301      	adds	r3, #1
 8001020:	617b      	str	r3, [r7, #20]
 8001022:	697a      	ldr	r2, [r7, #20]
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	429a      	cmp	r2, r3
 8001028:	dbf1      	blt.n	800100e <_write+0x12>
  }
  return len;
 800102a:	687b      	ldr	r3, [r7, #4]
}
 800102c:	4618      	mov	r0, r3
 800102e:	3718      	adds	r7, #24
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}

08001034 <_close>:

int _close(int file)
{
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800103c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001040:	4618      	mov	r0, r3
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr

0800104c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
 8001054:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800105c:	605a      	str	r2, [r3, #4]
  return 0;
 800105e:	2300      	movs	r3, #0
}
 8001060:	4618      	mov	r0, r3
 8001062:	370c      	adds	r7, #12
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr

0800106c <_isatty>:

int _isatty(int file)
{
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001074:	2301      	movs	r3, #1
}
 8001076:	4618      	mov	r0, r3
 8001078:	370c      	adds	r7, #12
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr

08001082 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001082:	b480      	push	{r7}
 8001084:	b085      	sub	sp, #20
 8001086:	af00      	add	r7, sp, #0
 8001088:	60f8      	str	r0, [r7, #12]
 800108a:	60b9      	str	r1, [r7, #8]
 800108c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800108e:	2300      	movs	r3, #0
}
 8001090:	4618      	mov	r0, r3
 8001092:	3714      	adds	r7, #20
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr

0800109c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b086      	sub	sp, #24
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010a4:	4a14      	ldr	r2, [pc, #80]	@ (80010f8 <_sbrk+0x5c>)
 80010a6:	4b15      	ldr	r3, [pc, #84]	@ (80010fc <_sbrk+0x60>)
 80010a8:	1ad3      	subs	r3, r2, r3
 80010aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010b0:	4b13      	ldr	r3, [pc, #76]	@ (8001100 <_sbrk+0x64>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d102      	bne.n	80010be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010b8:	4b11      	ldr	r3, [pc, #68]	@ (8001100 <_sbrk+0x64>)
 80010ba:	4a12      	ldr	r2, [pc, #72]	@ (8001104 <_sbrk+0x68>)
 80010bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010be:	4b10      	ldr	r3, [pc, #64]	@ (8001100 <_sbrk+0x64>)
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4413      	add	r3, r2
 80010c6:	693a      	ldr	r2, [r7, #16]
 80010c8:	429a      	cmp	r2, r3
 80010ca:	d207      	bcs.n	80010dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010cc:	f005 fb38 	bl	8006740 <__errno>
 80010d0:	4603      	mov	r3, r0
 80010d2:	220c      	movs	r2, #12
 80010d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010d6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80010da:	e009      	b.n	80010f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010dc:	4b08      	ldr	r3, [pc, #32]	@ (8001100 <_sbrk+0x64>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010e2:	4b07      	ldr	r3, [pc, #28]	@ (8001100 <_sbrk+0x64>)
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4413      	add	r3, r2
 80010ea:	4a05      	ldr	r2, [pc, #20]	@ (8001100 <_sbrk+0x64>)
 80010ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010ee:	68fb      	ldr	r3, [r7, #12]
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	3718      	adds	r7, #24
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	24080000 	.word	0x24080000
 80010fc:	00000400 	.word	0x00000400
 8001100:	24000230 	.word	0x24000230
 8001104:	24000388 	.word	0x24000388

08001108 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001108:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001140 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800110c:	f7ff fab0 	bl	8000670 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001110:	480c      	ldr	r0, [pc, #48]	@ (8001144 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001112:	490d      	ldr	r1, [pc, #52]	@ (8001148 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001114:	4a0d      	ldr	r2, [pc, #52]	@ (800114c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001116:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001118:	e002      	b.n	8001120 <LoopCopyDataInit>

0800111a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800111a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800111c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800111e:	3304      	adds	r3, #4

08001120 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001120:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001122:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001124:	d3f9      	bcc.n	800111a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001126:	4a0a      	ldr	r2, [pc, #40]	@ (8001150 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001128:	4c0a      	ldr	r4, [pc, #40]	@ (8001154 <LoopFillZerobss+0x22>)
  movs r3, #0
 800112a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800112c:	e001      	b.n	8001132 <LoopFillZerobss>

0800112e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800112e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001130:	3204      	adds	r2, #4

08001132 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001132:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001134:	d3fb      	bcc.n	800112e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001136:	f005 fb09 	bl	800674c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800113a:	f7ff fb2f 	bl	800079c <main>
  bx  lr
 800113e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001140:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001144:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001148:	2400006c 	.word	0x2400006c
  ldr r2, =_sidata
 800114c:	08007490 	.word	0x08007490
  ldr r2, =_sbss
 8001150:	2400006c 	.word	0x2400006c
  ldr r4, =_ebss
 8001154:	24000384 	.word	0x24000384

08001158 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001158:	e7fe      	b.n	8001158 <ADC3_IRQHandler>
	...

0800115c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001162:	2003      	movs	r0, #3
 8001164:	f000 f96e 	bl	8001444 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001168:	f002 f818 	bl	800319c <HAL_RCC_GetSysClockFreq>
 800116c:	4602      	mov	r2, r0
 800116e:	4b15      	ldr	r3, [pc, #84]	@ (80011c4 <HAL_Init+0x68>)
 8001170:	699b      	ldr	r3, [r3, #24]
 8001172:	0a1b      	lsrs	r3, r3, #8
 8001174:	f003 030f 	and.w	r3, r3, #15
 8001178:	4913      	ldr	r1, [pc, #76]	@ (80011c8 <HAL_Init+0x6c>)
 800117a:	5ccb      	ldrb	r3, [r1, r3]
 800117c:	f003 031f 	and.w	r3, r3, #31
 8001180:	fa22 f303 	lsr.w	r3, r2, r3
 8001184:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001186:	4b0f      	ldr	r3, [pc, #60]	@ (80011c4 <HAL_Init+0x68>)
 8001188:	699b      	ldr	r3, [r3, #24]
 800118a:	f003 030f 	and.w	r3, r3, #15
 800118e:	4a0e      	ldr	r2, [pc, #56]	@ (80011c8 <HAL_Init+0x6c>)
 8001190:	5cd3      	ldrb	r3, [r2, r3]
 8001192:	f003 031f 	and.w	r3, r3, #31
 8001196:	687a      	ldr	r2, [r7, #4]
 8001198:	fa22 f303 	lsr.w	r3, r2, r3
 800119c:	4a0b      	ldr	r2, [pc, #44]	@ (80011cc <HAL_Init+0x70>)
 800119e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80011a0:	4a0b      	ldr	r2, [pc, #44]	@ (80011d0 <HAL_Init+0x74>)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011a6:	2000      	movs	r0, #0
 80011a8:	f000 f814 	bl	80011d4 <HAL_InitTick>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
 80011b4:	e002      	b.n	80011bc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80011b6:	f7ff fdd3 	bl	8000d60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011ba:	2300      	movs	r3, #0
}
 80011bc:	4618      	mov	r0, r3
 80011be:	3708      	adds	r7, #8
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	58024400 	.word	0x58024400
 80011c8:	08007404 	.word	0x08007404
 80011cc:	24000004 	.word	0x24000004
 80011d0:	24000000 	.word	0x24000000

080011d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80011dc:	4b15      	ldr	r3, [pc, #84]	@ (8001234 <HAL_InitTick+0x60>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d101      	bne.n	80011e8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80011e4:	2301      	movs	r3, #1
 80011e6:	e021      	b.n	800122c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80011e8:	4b13      	ldr	r3, [pc, #76]	@ (8001238 <HAL_InitTick+0x64>)
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	4b11      	ldr	r3, [pc, #68]	@ (8001234 <HAL_InitTick+0x60>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	4619      	mov	r1, r3
 80011f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80011fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80011fe:	4618      	mov	r0, r3
 8001200:	f000 f945 	bl	800148e <HAL_SYSTICK_Config>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800120a:	2301      	movs	r3, #1
 800120c:	e00e      	b.n	800122c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2b0f      	cmp	r3, #15
 8001212:	d80a      	bhi.n	800122a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001214:	2200      	movs	r2, #0
 8001216:	6879      	ldr	r1, [r7, #4]
 8001218:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800121c:	f000 f91d 	bl	800145a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001220:	4a06      	ldr	r2, [pc, #24]	@ (800123c <HAL_InitTick+0x68>)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001226:	2300      	movs	r3, #0
 8001228:	e000      	b.n	800122c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800122a:	2301      	movs	r3, #1
}
 800122c:	4618      	mov	r0, r3
 800122e:	3708      	adds	r7, #8
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	2400000c 	.word	0x2400000c
 8001238:	24000000 	.word	0x24000000
 800123c:	24000008 	.word	0x24000008

08001240 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001244:	4b06      	ldr	r3, [pc, #24]	@ (8001260 <HAL_IncTick+0x20>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	461a      	mov	r2, r3
 800124a:	4b06      	ldr	r3, [pc, #24]	@ (8001264 <HAL_IncTick+0x24>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4413      	add	r3, r2
 8001250:	4a04      	ldr	r2, [pc, #16]	@ (8001264 <HAL_IncTick+0x24>)
 8001252:	6013      	str	r3, [r2, #0]
}
 8001254:	bf00      	nop
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	2400000c 	.word	0x2400000c
 8001264:	24000234 	.word	0x24000234

08001268 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  return uwTick;
 800126c:	4b03      	ldr	r3, [pc, #12]	@ (800127c <HAL_GetTick+0x14>)
 800126e:	681b      	ldr	r3, [r3, #0]
}
 8001270:	4618      	mov	r0, r3
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	24000234 	.word	0x24000234

08001280 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b084      	sub	sp, #16
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001288:	f7ff ffee 	bl	8001268 <HAL_GetTick>
 800128c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001298:	d005      	beq.n	80012a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800129a:	4b0a      	ldr	r3, [pc, #40]	@ (80012c4 <HAL_Delay+0x44>)
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	461a      	mov	r2, r3
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	4413      	add	r3, r2
 80012a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012a6:	bf00      	nop
 80012a8:	f7ff ffde 	bl	8001268 <HAL_GetTick>
 80012ac:	4602      	mov	r2, r0
 80012ae:	68bb      	ldr	r3, [r7, #8]
 80012b0:	1ad3      	subs	r3, r2, r3
 80012b2:	68fa      	ldr	r2, [r7, #12]
 80012b4:	429a      	cmp	r2, r3
 80012b6:	d8f7      	bhi.n	80012a8 <HAL_Delay+0x28>
  {
  }
}
 80012b8:	bf00      	nop
 80012ba:	bf00      	nop
 80012bc:	3710      	adds	r7, #16
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	2400000c 	.word	0x2400000c

080012c8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80012cc:	4b03      	ldr	r3, [pc, #12]	@ (80012dc <HAL_GetREVID+0x14>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	0c1b      	lsrs	r3, r3, #16
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr
 80012dc:	5c001000 	.word	0x5c001000

080012e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b085      	sub	sp, #20
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	f003 0307 	and.w	r3, r3, #7
 80012ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012f0:	4b0b      	ldr	r3, [pc, #44]	@ (8001320 <__NVIC_SetPriorityGrouping+0x40>)
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012f6:	68ba      	ldr	r2, [r7, #8]
 80012f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012fc:	4013      	ands	r3, r2
 80012fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001308:	4b06      	ldr	r3, [pc, #24]	@ (8001324 <__NVIC_SetPriorityGrouping+0x44>)
 800130a:	4313      	orrs	r3, r2
 800130c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800130e:	4a04      	ldr	r2, [pc, #16]	@ (8001320 <__NVIC_SetPriorityGrouping+0x40>)
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	60d3      	str	r3, [r2, #12]
}
 8001314:	bf00      	nop
 8001316:	3714      	adds	r7, #20
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr
 8001320:	e000ed00 	.word	0xe000ed00
 8001324:	05fa0000 	.word	0x05fa0000

08001328 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800132c:	4b04      	ldr	r3, [pc, #16]	@ (8001340 <__NVIC_GetPriorityGrouping+0x18>)
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	0a1b      	lsrs	r3, r3, #8
 8001332:	f003 0307 	and.w	r3, r3, #7
}
 8001336:	4618      	mov	r0, r3
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr
 8001340:	e000ed00 	.word	0xe000ed00

08001344 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	4603      	mov	r3, r0
 800134c:	6039      	str	r1, [r7, #0]
 800134e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001350:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001354:	2b00      	cmp	r3, #0
 8001356:	db0a      	blt.n	800136e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	b2da      	uxtb	r2, r3
 800135c:	490c      	ldr	r1, [pc, #48]	@ (8001390 <__NVIC_SetPriority+0x4c>)
 800135e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001362:	0112      	lsls	r2, r2, #4
 8001364:	b2d2      	uxtb	r2, r2
 8001366:	440b      	add	r3, r1
 8001368:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800136c:	e00a      	b.n	8001384 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	b2da      	uxtb	r2, r3
 8001372:	4908      	ldr	r1, [pc, #32]	@ (8001394 <__NVIC_SetPriority+0x50>)
 8001374:	88fb      	ldrh	r3, [r7, #6]
 8001376:	f003 030f 	and.w	r3, r3, #15
 800137a:	3b04      	subs	r3, #4
 800137c:	0112      	lsls	r2, r2, #4
 800137e:	b2d2      	uxtb	r2, r2
 8001380:	440b      	add	r3, r1
 8001382:	761a      	strb	r2, [r3, #24]
}
 8001384:	bf00      	nop
 8001386:	370c      	adds	r7, #12
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr
 8001390:	e000e100 	.word	0xe000e100
 8001394:	e000ed00 	.word	0xe000ed00

08001398 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001398:	b480      	push	{r7}
 800139a:	b089      	sub	sp, #36	@ 0x24
 800139c:	af00      	add	r7, sp, #0
 800139e:	60f8      	str	r0, [r7, #12]
 80013a0:	60b9      	str	r1, [r7, #8]
 80013a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	f003 0307 	and.w	r3, r3, #7
 80013aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013ac:	69fb      	ldr	r3, [r7, #28]
 80013ae:	f1c3 0307 	rsb	r3, r3, #7
 80013b2:	2b04      	cmp	r3, #4
 80013b4:	bf28      	it	cs
 80013b6:	2304      	movcs	r3, #4
 80013b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	3304      	adds	r3, #4
 80013be:	2b06      	cmp	r3, #6
 80013c0:	d902      	bls.n	80013c8 <NVIC_EncodePriority+0x30>
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	3b03      	subs	r3, #3
 80013c6:	e000      	b.n	80013ca <NVIC_EncodePriority+0x32>
 80013c8:	2300      	movs	r3, #0
 80013ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013cc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80013d0:	69bb      	ldr	r3, [r7, #24]
 80013d2:	fa02 f303 	lsl.w	r3, r2, r3
 80013d6:	43da      	mvns	r2, r3
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	401a      	ands	r2, r3
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013e0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	fa01 f303 	lsl.w	r3, r1, r3
 80013ea:	43d9      	mvns	r1, r3
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013f0:	4313      	orrs	r3, r2
         );
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3724      	adds	r7, #36	@ 0x24
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
	...

08001400 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	3b01      	subs	r3, #1
 800140c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001410:	d301      	bcc.n	8001416 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001412:	2301      	movs	r3, #1
 8001414:	e00f      	b.n	8001436 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001416:	4a0a      	ldr	r2, [pc, #40]	@ (8001440 <SysTick_Config+0x40>)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	3b01      	subs	r3, #1
 800141c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800141e:	210f      	movs	r1, #15
 8001420:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001424:	f7ff ff8e 	bl	8001344 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001428:	4b05      	ldr	r3, [pc, #20]	@ (8001440 <SysTick_Config+0x40>)
 800142a:	2200      	movs	r2, #0
 800142c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800142e:	4b04      	ldr	r3, [pc, #16]	@ (8001440 <SysTick_Config+0x40>)
 8001430:	2207      	movs	r2, #7
 8001432:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001434:	2300      	movs	r3, #0
}
 8001436:	4618      	mov	r0, r3
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	e000e010 	.word	0xe000e010

08001444 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800144c:	6878      	ldr	r0, [r7, #4]
 800144e:	f7ff ff47 	bl	80012e0 <__NVIC_SetPriorityGrouping>
}
 8001452:	bf00      	nop
 8001454:	3708      	adds	r7, #8
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}

0800145a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800145a:	b580      	push	{r7, lr}
 800145c:	b086      	sub	sp, #24
 800145e:	af00      	add	r7, sp, #0
 8001460:	4603      	mov	r3, r0
 8001462:	60b9      	str	r1, [r7, #8]
 8001464:	607a      	str	r2, [r7, #4]
 8001466:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001468:	f7ff ff5e 	bl	8001328 <__NVIC_GetPriorityGrouping>
 800146c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800146e:	687a      	ldr	r2, [r7, #4]
 8001470:	68b9      	ldr	r1, [r7, #8]
 8001472:	6978      	ldr	r0, [r7, #20]
 8001474:	f7ff ff90 	bl	8001398 <NVIC_EncodePriority>
 8001478:	4602      	mov	r2, r0
 800147a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800147e:	4611      	mov	r1, r2
 8001480:	4618      	mov	r0, r3
 8001482:	f7ff ff5f 	bl	8001344 <__NVIC_SetPriority>
}
 8001486:	bf00      	nop
 8001488:	3718      	adds	r7, #24
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}

0800148e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800148e:	b580      	push	{r7, lr}
 8001490:	b082      	sub	sp, #8
 8001492:	af00      	add	r7, sp, #0
 8001494:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001496:	6878      	ldr	r0, [r7, #4]
 8001498:	f7ff ffb2 	bl	8001400 <SysTick_Config>
 800149c:	4603      	mov	r3, r0
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
	...

080014a8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b098      	sub	sp, #96	@ 0x60
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80014b0:	4a84      	ldr	r2, [pc, #528]	@ (80016c4 <HAL_FDCAN_Init+0x21c>)
 80014b2:	f107 030c 	add.w	r3, r7, #12
 80014b6:	4611      	mov	r1, r2
 80014b8:	224c      	movs	r2, #76	@ 0x4c
 80014ba:	4618      	mov	r0, r3
 80014bc:	f005 f96d 	bl	800679a <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d101      	bne.n	80014ca <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e1c6      	b.n	8001858 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a7e      	ldr	r2, [pc, #504]	@ (80016c8 <HAL_FDCAN_Init+0x220>)
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d106      	bne.n	80014e2 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80014dc:	461a      	mov	r2, r3
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d106      	bne.n	80014fc <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2200      	movs	r2, #0
 80014f2:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	f7ff fc4c 	bl	8000d94 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	699a      	ldr	r2, [r3, #24]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f022 0210 	bic.w	r2, r2, #16
 800150a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800150c:	f7ff feac 	bl	8001268 <HAL_GetTick>
 8001510:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001512:	e014      	b.n	800153e <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001514:	f7ff fea8 	bl	8001268 <HAL_GetTick>
 8001518:	4602      	mov	r2, r0
 800151a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	2b0a      	cmp	r3, #10
 8001520:	d90d      	bls.n	800153e <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001528:	f043 0201 	orr.w	r2, r3, #1
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2203      	movs	r2, #3
 8001536:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 800153a:	2301      	movs	r3, #1
 800153c:	e18c      	b.n	8001858 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	699b      	ldr	r3, [r3, #24]
 8001544:	f003 0308 	and.w	r3, r3, #8
 8001548:	2b08      	cmp	r3, #8
 800154a:	d0e3      	beq.n	8001514 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	699a      	ldr	r2, [r3, #24]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f042 0201 	orr.w	r2, r2, #1
 800155a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800155c:	f7ff fe84 	bl	8001268 <HAL_GetTick>
 8001560:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001562:	e014      	b.n	800158e <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001564:	f7ff fe80 	bl	8001268 <HAL_GetTick>
 8001568:	4602      	mov	r2, r0
 800156a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	2b0a      	cmp	r3, #10
 8001570:	d90d      	bls.n	800158e <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001578:	f043 0201 	orr.w	r2, r3, #1
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2203      	movs	r2, #3
 8001586:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	e164      	b.n	8001858 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	699b      	ldr	r3, [r3, #24]
 8001594:	f003 0301 	and.w	r3, r3, #1
 8001598:	2b00      	cmp	r3, #0
 800159a:	d0e3      	beq.n	8001564 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	699a      	ldr	r2, [r3, #24]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f042 0202 	orr.w	r2, r2, #2
 80015aa:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	7c1b      	ldrb	r3, [r3, #16]
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d108      	bne.n	80015c6 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	699a      	ldr	r2, [r3, #24]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80015c2:	619a      	str	r2, [r3, #24]
 80015c4:	e007      	b.n	80015d6 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	699a      	ldr	r2, [r3, #24]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80015d4:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	7c5b      	ldrb	r3, [r3, #17]
 80015da:	2b01      	cmp	r3, #1
 80015dc:	d108      	bne.n	80015f0 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	699a      	ldr	r2, [r3, #24]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80015ec:	619a      	str	r2, [r3, #24]
 80015ee:	e007      	b.n	8001600 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	699a      	ldr	r2, [r3, #24]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80015fe:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	7c9b      	ldrb	r3, [r3, #18]
 8001604:	2b01      	cmp	r3, #1
 8001606:	d108      	bne.n	800161a <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	699a      	ldr	r2, [r3, #24]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001616:	619a      	str	r2, [r3, #24]
 8001618:	e007      	b.n	800162a <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	699a      	ldr	r2, [r3, #24]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001628:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	699b      	ldr	r3, [r3, #24]
 8001630:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	689a      	ldr	r2, [r3, #8]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	430a      	orrs	r2, r1
 800163e:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	699a      	ldr	r2, [r3, #24]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 800164e:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	691a      	ldr	r2, [r3, #16]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f022 0210 	bic.w	r2, r2, #16
 800165e:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	2b01      	cmp	r3, #1
 8001666:	d108      	bne.n	800167a <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	699a      	ldr	r2, [r3, #24]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f042 0204 	orr.w	r2, r2, #4
 8001676:	619a      	str	r2, [r3, #24]
 8001678:	e030      	b.n	80016dc <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	68db      	ldr	r3, [r3, #12]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d02c      	beq.n	80016dc <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	68db      	ldr	r3, [r3, #12]
 8001686:	2b02      	cmp	r3, #2
 8001688:	d020      	beq.n	80016cc <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	699a      	ldr	r2, [r3, #24]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001698:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	691a      	ldr	r2, [r3, #16]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f042 0210 	orr.w	r2, r2, #16
 80016a8:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	68db      	ldr	r3, [r3, #12]
 80016ae:	2b03      	cmp	r3, #3
 80016b0:	d114      	bne.n	80016dc <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	699a      	ldr	r2, [r3, #24]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f042 0220 	orr.w	r2, r2, #32
 80016c0:	619a      	str	r2, [r3, #24]
 80016c2:	e00b      	b.n	80016dc <HAL_FDCAN_Init+0x234>
 80016c4:	080073b8 	.word	0x080073b8
 80016c8:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	699a      	ldr	r2, [r3, #24]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f042 0220 	orr.w	r2, r2, #32
 80016da:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	699b      	ldr	r3, [r3, #24]
 80016e0:	3b01      	subs	r3, #1
 80016e2:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	69db      	ldr	r3, [r3, #28]
 80016e8:	3b01      	subs	r3, #1
 80016ea:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80016ec:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6a1b      	ldr	r3, [r3, #32]
 80016f2:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80016f4:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	695b      	ldr	r3, [r3, #20]
 80016fc:	3b01      	subs	r3, #1
 80016fe:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001704:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001706:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001710:	d115      	bne.n	800173e <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001716:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800171c:	3b01      	subs	r3, #1
 800171e:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001720:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001726:	3b01      	subs	r3, #1
 8001728:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800172a:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001732:	3b01      	subs	r3, #1
 8001734:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800173a:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800173c:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001742:	2b00      	cmp	r3, #0
 8001744:	d00a      	beq.n	800175c <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	430a      	orrs	r2, r1
 8001758:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001764:	4413      	add	r3, r2
 8001766:	2b00      	cmp	r3, #0
 8001768:	d011      	beq.n	800178e <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8001772:	f023 0107 	bic.w	r1, r3, #7
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	3360      	adds	r3, #96	@ 0x60
 800177e:	443b      	add	r3, r7
 8001780:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	430a      	orrs	r2, r1
 800178a:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001792:	2b00      	cmp	r3, #0
 8001794:	d011      	beq.n	80017ba <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800179e:	f023 0107 	bic.w	r1, r3, #7
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	3360      	adds	r3, #96	@ 0x60
 80017aa:	443b      	add	r3, r7
 80017ac:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	430a      	orrs	r2, r1
 80017b6:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d012      	beq.n	80017e8 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80017ca:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	3360      	adds	r3, #96	@ 0x60
 80017d6:	443b      	add	r3, r7
 80017d8:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80017dc:	011a      	lsls	r2, r3, #4
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	430a      	orrs	r2, r1
 80017e4:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d012      	beq.n	8001816 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80017f8:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	3360      	adds	r3, #96	@ 0x60
 8001804:	443b      	add	r3, r7
 8001806:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800180a:	021a      	lsls	r2, r3, #8
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	430a      	orrs	r2, r1
 8001812:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a11      	ldr	r2, [pc, #68]	@ (8001860 <HAL_FDCAN_Init+0x3b8>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d107      	bne.n	8001830 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	689a      	ldr	r2, [r3, #8]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	f022 0203 	bic.w	r2, r2, #3
 800182e:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2200      	movs	r2, #0
 8001834:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2200      	movs	r2, #0
 800183c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2201      	movs	r2, #1
 8001844:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	f000 fabf 	bl	8001dcc <FDCAN_CalcultateRamBlockAddresses>
 800184e:	4603      	mov	r3, r0
 8001850:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8001854:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8001858:	4618      	mov	r0, r3
 800185a:	3760      	adds	r7, #96	@ 0x60
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	4000a000 	.word	0x4000a000

08001864 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8001864:	b480      	push	{r7}
 8001866:	b087      	sub	sp, #28
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8001874:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001876:	7bfb      	ldrb	r3, [r7, #15]
 8001878:	2b01      	cmp	r3, #1
 800187a:	d002      	beq.n	8001882 <HAL_FDCAN_ConfigFilter+0x1e>
 800187c:	7bfb      	ldrb	r3, [r7, #15]
 800187e:	2b02      	cmp	r3, #2
 8001880:	d157      	bne.n	8001932 <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d12b      	bne.n	80018e2 <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	68db      	ldr	r3, [r3, #12]
 800188e:	2b07      	cmp	r3, #7
 8001890:	d10d      	bne.n	80018ae <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	691b      	ldr	r3, [r3, #16]
 8001896:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	69db      	ldr	r3, [r3, #28]
 800189c:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 800189e:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 80018a4:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 80018a6:	f043 5360 	orr.w	r3, r3, #939524096	@ 0x38000000
 80018aa:	617b      	str	r3, [r7, #20]
 80018ac:	e00e      	b.n	80018cc <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80018ba:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	691b      	ldr	r3, [r3, #16]
 80018c0:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 80018c2:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80018c8:	4313      	orrs	r3, r2
 80018ca:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	4413      	add	r3, r2
 80018d8:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80018da:	68bb      	ldr	r3, [r7, #8]
 80018dc:	697a      	ldr	r2, [r7, #20]
 80018de:	601a      	str	r2, [r3, #0]
 80018e0:	e025      	b.n	800192e <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	68db      	ldr	r3, [r3, #12]
 80018e6:	075a      	lsls	r2, r3, #29
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	691b      	ldr	r3, [r3, #16]
 80018ec:	4313      	orrs	r3, r2
 80018ee:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	2b07      	cmp	r3, #7
 80018f6:	d103      	bne.n	8001900 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	699b      	ldr	r3, [r3, #24]
 80018fc:	613b      	str	r3, [r7, #16]
 80018fe:	e006      	b.n	800190e <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	079a      	lsls	r2, r3, #30
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	695b      	ldr	r3, [r3, #20]
 800190a:	4313      	orrs	r3, r2
 800190c:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	00db      	lsls	r3, r3, #3
 8001918:	4413      	add	r3, r2
 800191a:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	697a      	ldr	r2, [r7, #20]
 8001920:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	3304      	adds	r3, #4
 8001926:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	693a      	ldr	r2, [r7, #16]
 800192c:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 800192e:	2300      	movs	r3, #0
 8001930:	e008      	b.n	8001944 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001938:	f043 0202 	orr.w	r2, r3, #2
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8001942:	2301      	movs	r3, #1
  }
}
 8001944:	4618      	mov	r0, r3
 8001946:	371c      	adds	r7, #28
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr

08001950 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8001950:	b480      	push	{r7}
 8001952:	b085      	sub	sp, #20
 8001954:	af00      	add	r7, sp, #0
 8001956:	60f8      	str	r0, [r7, #12]
 8001958:	60b9      	str	r1, [r7, #8]
 800195a:	607a      	str	r2, [r7, #4]
 800195c:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8001964:	b2db      	uxtb	r3, r3
 8001966:	2b01      	cmp	r3, #1
 8001968:	d110      	bne.n	800198c <HAL_FDCAN_ConfigGlobalFilter+0x3c>
  {
    /* Configure global filter */
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	011a      	lsls	r2, r3, #4
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	009b      	lsls	r3, r3, #2
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8001972:	431a      	orrs	r2, r3
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	005b      	lsls	r3, r3, #1
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 8001978:	ea42 0103 	orr.w	r1, r2, r3
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8001980:	69ba      	ldr	r2, [r7, #24]
 8001982:	430a      	orrs	r2, r1
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8001984:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
                             (RejectRemoteExt << FDCAN_GFC_RRFE_Pos));

    /* Return function status */
    return HAL_OK;
 8001988:	2300      	movs	r3, #0
 800198a:	e008      	b.n	800199e <HAL_FDCAN_ConfigGlobalFilter+0x4e>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001992:	f043 0204 	orr.w	r2, r3, #4
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 800199c:	2301      	movs	r3, #1
  }
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3714      	adds	r7, #20
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr

080019aa <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80019aa:	b480      	push	{r7}
 80019ac:	b083      	sub	sp, #12
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d111      	bne.n	80019e2 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2202      	movs	r2, #2
 80019c2:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	699a      	ldr	r2, [r3, #24]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f022 0201 	bic.w	r2, r2, #1
 80019d4:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2200      	movs	r2, #0
 80019da:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Return function status */
    return HAL_OK;
 80019de:	2300      	movs	r3, #0
 80019e0:	e008      	b.n	80019f4 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80019e8:	f043 0204 	orr.w	r2, r3, #4
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
  }
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	370c      	adds	r7, #12
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr

08001a00 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b08b      	sub	sp, #44	@ 0x2c
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	60f8      	str	r0, [r7, #12]
 8001a08:	60b9      	str	r1, [r7, #8]
 8001a0a:	607a      	str	r2, [r7, #4]
 8001a0c:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8001a18:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8001a1a:	7efb      	ldrb	r3, [r7, #27]
 8001a1c:	2b02      	cmp	r3, #2
 8001a1e:	f040 8149 	bne.w	8001cb4 <HAL_FDCAN_GetRxMessage+0x2b4>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	2b40      	cmp	r3, #64	@ 0x40
 8001a26:	d14c      	bne.n	8001ac2 <HAL_FDCAN_GetRxMessage+0xc2>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8001a30:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d109      	bne.n	8001a4c <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001a3e:	f043 0220 	orr.w	r2, r3, #32
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e13c      	b.n	8001cc6 <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001a54:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d109      	bne.n	8001a70 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001a62:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e12a      	b.n	8001cc6 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001a78:	0e1b      	lsrs	r3, r3, #24
 8001a7a:	f003 0301 	and.w	r3, r3, #1
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d10a      	bne.n	8001a98 <HAL_FDCAN_GetRxMessage+0x98>
        {
          if (((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8001a8a:	0fdb      	lsrs	r3, r3, #31
 8001a8c:	f003 0301 	and.w	r3, r3, #1
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d101      	bne.n	8001a98 <HAL_FDCAN_GetRxMessage+0x98>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001a94:	2301      	movs	r3, #1
 8001a96:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001aa0:	0a1b      	lsrs	r3, r3, #8
 8001aa2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001aa6:	69fa      	ldr	r2, [r7, #28]
 8001aa8:	4413      	add	r3, r2
 8001aaa:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ab4:	69f9      	ldr	r1, [r7, #28]
 8001ab6:	fb01 f303 	mul.w	r3, r1, r3
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	4413      	add	r3, r2
 8001abe:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ac0:	e068      	b.n	8001b94 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8001ac2:	68bb      	ldr	r3, [r7, #8]
 8001ac4:	2b41      	cmp	r3, #65	@ 0x41
 8001ac6:	d14c      	bne.n	8001b62 <HAL_FDCAN_GetRxMessage+0x162>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8001ad0:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d109      	bne.n	8001aec <HAL_FDCAN_GetRxMessage+0xec>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001ade:	f043 0220 	orr.w	r2, r3, #32
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e0ec      	b.n	8001cc6 <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8001af4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d109      	bne.n	8001b10 <HAL_FDCAN_GetRxMessage+0x110>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001b02:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e0da      	b.n	8001cc6 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8001b18:	0e1b      	lsrs	r3, r3, #24
 8001b1a:	f003 0301 	and.w	r3, r3, #1
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d10a      	bne.n	8001b38 <HAL_FDCAN_GetRxMessage+0x138>
        {
          if (((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8001b2a:	0fdb      	lsrs	r3, r3, #31
 8001b2c:	f003 0301 	and.w	r3, r3, #1
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d101      	bne.n	8001b38 <HAL_FDCAN_GetRxMessage+0x138>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001b34:	2301      	movs	r3, #1
 8001b36:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8001b40:	0a1b      	lsrs	r3, r3, #8
 8001b42:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001b46:	69fa      	ldr	r2, [r7, #28]
 8001b48:	4413      	add	r3, r2
 8001b4a:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b54:	69f9      	ldr	r1, [r7, #28]
 8001b56:	fb01 f303 	mul.w	r3, r1, r3
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	4413      	add	r3, r2
 8001b5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b60:	e018      	b.n	8001b94 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b66:	68ba      	ldr	r2, [r7, #8]
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d309      	bcc.n	8001b80 <HAL_FDCAN_GetRxMessage+0x180>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001b72:	f043 0220 	orr.w	r2, r3, #32
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e0a2      	b.n	8001cc6 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b88:	68b9      	ldr	r1, [r7, #8]
 8001b8a:	fb01 f303 	mul.w	r3, r1, r3
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	4413      	add	r3, r2
 8001b92:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8001b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d107      	bne.n	8001bb8 <HAL_FDCAN_GetRxMessage+0x1b8>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8001ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	0c9b      	lsrs	r3, r3, #18
 8001bae:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	601a      	str	r2, [r3, #0]
 8001bb6:	e005      	b.n	8001bc4 <HAL_FDCAN_GetRxMessage+0x1c4>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8001bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8001bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8001bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8001bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bde:	3304      	adds	r3, #4
 8001be0:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8001be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	b29a      	uxth	r2, r3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8001bec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	0c1b      	lsrs	r3, r3, #16
 8001bf2:	f003 020f 	and.w	r2, r3, #15
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8001bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8001c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8001c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	0e1b      	lsrs	r3, r3, #24
 8001c18:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8001c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	0fda      	lsrs	r2, r3, #31
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8001c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c2c:	3304      	adds	r3, #4
 8001c2e:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8001c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c32:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8001c34:	2300      	movs	r3, #0
 8001c36:	623b      	str	r3, [r7, #32]
 8001c38:	e00a      	b.n	8001c50 <HAL_FDCAN_GetRxMessage+0x250>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8001c3a:	697a      	ldr	r2, [r7, #20]
 8001c3c:	6a3b      	ldr	r3, [r7, #32]
 8001c3e:	441a      	add	r2, r3
 8001c40:	6839      	ldr	r1, [r7, #0]
 8001c42:	6a3b      	ldr	r3, [r7, #32]
 8001c44:	440b      	add	r3, r1
 8001c46:	7812      	ldrb	r2, [r2, #0]
 8001c48:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8001c4a:	6a3b      	ldr	r3, [r7, #32]
 8001c4c:	3301      	adds	r3, #1
 8001c4e:	623b      	str	r3, [r7, #32]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	4a1f      	ldr	r2, [pc, #124]	@ (8001cd4 <HAL_FDCAN_GetRxMessage+0x2d4>)
 8001c56:	5cd3      	ldrb	r3, [r2, r3]
 8001c58:	461a      	mov	r2, r3
 8001c5a:	6a3b      	ldr	r3, [r7, #32]
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d3ec      	bcc.n	8001c3a <HAL_FDCAN_GetRxMessage+0x23a>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	2b40      	cmp	r3, #64	@ 0x40
 8001c64:	d105      	bne.n	8001c72 <HAL_FDCAN_GetRxMessage+0x272>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	69fa      	ldr	r2, [r7, #28]
 8001c6c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 8001c70:	e01e      	b.n	8001cb0 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	2b41      	cmp	r3, #65	@ 0x41
 8001c76:	d105      	bne.n	8001c84 <HAL_FDCAN_GetRxMessage+0x284>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	69fa      	ldr	r2, [r7, #28]
 8001c7e:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 8001c82:	e015      	b.n	8001cb0 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	2b1f      	cmp	r3, #31
 8001c88:	d808      	bhi.n	8001c9c <HAL_FDCAN_GetRxMessage+0x29c>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1U << RxLocation);
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	2101      	movs	r1, #1
 8001c90:	68ba      	ldr	r2, [r7, #8]
 8001c92:	fa01 f202 	lsl.w	r2, r1, r2
 8001c96:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 8001c9a:	e009      	b.n	8001cb0 <HAL_FDCAN_GetRxMessage+0x2b0>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1U << (RxLocation & 0x1FU));
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	f003 021f 	and.w	r2, r3, #31
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	2101      	movs	r1, #1
 8001ca8:	fa01 f202 	lsl.w	r2, r1, r2
 8001cac:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	e008      	b.n	8001cc6 <HAL_FDCAN_GetRxMessage+0x2c6>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001cba:	f043 0208 	orr.w	r2, r3, #8
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
  }
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	372c      	adds	r7, #44	@ 0x2c
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	08007414 	.word	0x08007414

08001cd8 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b087      	sub	sp, #28
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	60f8      	str	r0, [r7, #12]
 8001ce0:	60b9      	str	r1, [r7, #8]
 8001ce2:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8001cea:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001cec:	7dfb      	ldrb	r3, [r7, #23]
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d002      	beq.n	8001cf8 <HAL_FDCAN_ActivateNotification+0x20>
 8001cf2:	7dfb      	ldrb	r3, [r7, #23]
 8001cf4:	2b02      	cmp	r3, #2
 8001cf6:	d155      	bne.n	8001da4 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	4013      	ands	r3, r2
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d108      	bne.n	8001d18 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f042 0201 	orr.w	r2, r2, #1
 8001d14:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001d16:	e014      	b.n	8001d42 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	4013      	ands	r3, r2
 8001d22:	68ba      	ldr	r2, [r7, #8]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d108      	bne.n	8001d3a <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f042 0202 	orr.w	r2, r2, #2
 8001d36:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001d38:	e003      	b.n	8001d42 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	2203      	movs	r2, #3
 8001d40:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d009      	beq.n	8001d60 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	687a      	ldr	r2, [r7, #4]
 8001d5a:	430a      	orrs	r2, r1
 8001d5c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d009      	beq.n	8001d7e <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	430a      	orrs	r2, r1
 8001d7a:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8001d84:	68ba      	ldr	r2, [r7, #8]
 8001d86:	4b0f      	ldr	r3, [pc, #60]	@ (8001dc4 <HAL_FDCAN_ActivateNotification+0xec>)
 8001d88:	4013      	ands	r3, r2
 8001d8a:	68fa      	ldr	r2, [r7, #12]
 8001d8c:	6812      	ldr	r2, [r2, #0]
 8001d8e:	430b      	orrs	r3, r1
 8001d90:	6553      	str	r3, [r2, #84]	@ 0x54
 8001d92:	4b0d      	ldr	r3, [pc, #52]	@ (8001dc8 <HAL_FDCAN_ActivateNotification+0xf0>)
 8001d94:	695a      	ldr	r2, [r3, #20]
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	0f9b      	lsrs	r3, r3, #30
 8001d9a:	490b      	ldr	r1, [pc, #44]	@ (8001dc8 <HAL_FDCAN_ActivateNotification+0xf0>)
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8001da0:	2300      	movs	r3, #0
 8001da2:	e008      	b.n	8001db6 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001daa:	f043 0202 	orr.w	r2, r3, #2
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
  }
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	371c      	adds	r7, #28
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	3fcfffff 	.word	0x3fcfffff
 8001dc8:	4000a800 	.word	0x4000a800

08001dcc <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b085      	sub	sp, #20
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001dd8:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8001de2:	4ba7      	ldr	r3, [pc, #668]	@ (8002080 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001de4:	4013      	ands	r3, r2
 8001de6:	68ba      	ldr	r2, [r7, #8]
 8001de8:	0091      	lsls	r1, r2, #2
 8001dea:	687a      	ldr	r2, [r7, #4]
 8001dec:	6812      	ldr	r2, [r2, #0]
 8001dee:	430b      	orrs	r3, r1
 8001df0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001dfc:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e04:	041a      	lsls	r2, r3, #16
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	430a      	orrs	r2, r1
 8001e0c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e14:	68ba      	ldr	r2, [r7, #8]
 8001e16:	4413      	add	r3, r2
 8001e18:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8001e22:	4b97      	ldr	r3, [pc, #604]	@ (8002080 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001e24:	4013      	ands	r3, r2
 8001e26:	68ba      	ldr	r2, [r7, #8]
 8001e28:	0091      	lsls	r1, r2, #2
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	6812      	ldr	r2, [r2, #0]
 8001e2e:	430b      	orrs	r3, r1
 8001e30:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e3c:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e44:	041a      	lsls	r2, r3, #16
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	430a      	orrs	r2, r1
 8001e4c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e54:	005b      	lsls	r3, r3, #1
 8001e56:	68ba      	ldr	r2, [r7, #8]
 8001e58:	4413      	add	r3, r2
 8001e5a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8001e64:	4b86      	ldr	r3, [pc, #536]	@ (8002080 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001e66:	4013      	ands	r3, r2
 8001e68:	68ba      	ldr	r2, [r7, #8]
 8001e6a:	0091      	lsls	r1, r2, #2
 8001e6c:	687a      	ldr	r2, [r7, #4]
 8001e6e:	6812      	ldr	r2, [r2, #0]
 8001e70:	430b      	orrs	r3, r1
 8001e72:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8001e7e:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e86:	041a      	lsls	r2, r3, #16
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	430a      	orrs	r2, r1
 8001e8e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001e9a:	fb02 f303 	mul.w	r3, r2, r3
 8001e9e:	68ba      	ldr	r2, [r7, #8]
 8001ea0:	4413      	add	r3, r2
 8001ea2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001eac:	4b74      	ldr	r3, [pc, #464]	@ (8002080 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001eae:	4013      	ands	r3, r2
 8001eb0:	68ba      	ldr	r2, [r7, #8]
 8001eb2:	0091      	lsls	r1, r2, #2
 8001eb4:	687a      	ldr	r2, [r7, #4]
 8001eb6:	6812      	ldr	r2, [r2, #0]
 8001eb8:	430b      	orrs	r3, r1
 8001eba:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8001ec6:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ece:	041a      	lsls	r2, r3, #16
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	430a      	orrs	r2, r1
 8001ed6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001ee2:	fb02 f303 	mul.w	r3, r2, r3
 8001ee6:	68ba      	ldr	r2, [r7, #8]
 8001ee8:	4413      	add	r3, r2
 8001eea:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8001ef4:	4b62      	ldr	r3, [pc, #392]	@ (8002080 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	68ba      	ldr	r2, [r7, #8]
 8001efa:	0091      	lsls	r1, r2, #2
 8001efc:	687a      	ldr	r2, [r7, #4]
 8001efe:	6812      	ldr	r2, [r2, #0]
 8001f00:	430b      	orrs	r3, r1
 8001f02:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8001f0e:	fb02 f303 	mul.w	r3, r2, r3
 8001f12:	68ba      	ldr	r2, [r7, #8]
 8001f14:	4413      	add	r3, r2
 8001f16:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8001f20:	4b57      	ldr	r3, [pc, #348]	@ (8002080 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001f22:	4013      	ands	r3, r2
 8001f24:	68ba      	ldr	r2, [r7, #8]
 8001f26:	0091      	lsls	r1, r2, #2
 8001f28:	687a      	ldr	r2, [r7, #4]
 8001f2a:	6812      	ldr	r2, [r2, #0]
 8001f2c:	430b      	orrs	r3, r1
 8001f2e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001f3a:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f42:	041a      	lsls	r2, r3, #16
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	430a      	orrs	r2, r1
 8001f4a:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f52:	005b      	lsls	r3, r3, #1
 8001f54:	68ba      	ldr	r2, [r7, #8]
 8001f56:	4413      	add	r3, r2
 8001f58:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8001f62:	4b47      	ldr	r3, [pc, #284]	@ (8002080 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001f64:	4013      	ands	r3, r2
 8001f66:	68ba      	ldr	r2, [r7, #8]
 8001f68:	0091      	lsls	r1, r2, #2
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	6812      	ldr	r2, [r2, #0]
 8001f6e:	430b      	orrs	r3, r1
 8001f70:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001f7c:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f84:	041a      	lsls	r2, r3, #16
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	430a      	orrs	r2, r1
 8001f8c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001f98:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fa0:	061a      	lsls	r2, r3, #24
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	430a      	orrs	r2, r1
 8001fa8:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001fb0:	4b34      	ldr	r3, [pc, #208]	@ (8002084 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8001fb2:	4413      	add	r3, r2
 8001fb4:	009a      	lsls	r2, r3, #2
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	441a      	add	r2, r3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fd2:	00db      	lsls	r3, r3, #3
 8001fd4:	441a      	add	r2, r3
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fe2:	6879      	ldr	r1, [r7, #4]
 8001fe4:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 8001fe6:	fb01 f303 	mul.w	r3, r1, r3
 8001fea:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8001fec:	441a      	add	r2, r3
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ffa:	6879      	ldr	r1, [r7, #4]
 8001ffc:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 8001ffe:	fb01 f303 	mul.w	r3, r1, r3
 8002002:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8002004:	441a      	add	r2, r3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002012:	6879      	ldr	r1, [r7, #4]
 8002014:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 8002016:	fb01 f303 	mul.w	r3, r1, r3
 800201a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 800201c:	441a      	add	r2, r3
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800202e:	00db      	lsls	r3, r3, #3
 8002030:	441a      	add	r2, r3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002042:	6879      	ldr	r1, [r7, #4]
 8002044:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8002046:	fb01 f303 	mul.w	r3, r1, r3
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	441a      	add	r2, r3
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800205e:	6879      	ldr	r1, [r7, #4]
 8002060:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8002062:	fb01 f303 	mul.w	r3, r1, r3
 8002066:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8002068:	441a      	add	r2, r3
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002076:	4a04      	ldr	r2, [pc, #16]	@ (8002088 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d915      	bls.n	80020a8 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 800207c:	e006      	b.n	800208c <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 800207e:	bf00      	nop
 8002080:	ffff0003 	.word	0xffff0003
 8002084:	10002b00 	.word	0x10002b00
 8002088:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002092:	f043 0220 	orr.w	r2, r3, #32
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2203      	movs	r2, #3
 80020a0:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	e010      	b.n	80020ca <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80020ac:	60fb      	str	r3, [r7, #12]
 80020ae:	e005      	b.n	80020bc <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	2200      	movs	r2, #0
 80020b4:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	3304      	adds	r3, #4
 80020ba:	60fb      	str	r3, [r7, #12]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020c2:	68fa      	ldr	r2, [r7, #12]
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d3f3      	bcc.n	80020b0 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 80020c8:	2300      	movs	r3, #0
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3714      	adds	r7, #20
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop

080020d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020d8:	b480      	push	{r7}
 80020da:	b089      	sub	sp, #36	@ 0x24
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80020e2:	2300      	movs	r3, #0
 80020e4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80020e6:	4b89      	ldr	r3, [pc, #548]	@ (800230c <HAL_GPIO_Init+0x234>)
 80020e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80020ea:	e194      	b.n	8002416 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	2101      	movs	r1, #1
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	fa01 f303 	lsl.w	r3, r1, r3
 80020f8:	4013      	ands	r3, r2
 80020fa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	f000 8186 	beq.w	8002410 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f003 0303 	and.w	r3, r3, #3
 800210c:	2b01      	cmp	r3, #1
 800210e:	d005      	beq.n	800211c <HAL_GPIO_Init+0x44>
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f003 0303 	and.w	r3, r3, #3
 8002118:	2b02      	cmp	r3, #2
 800211a:	d130      	bne.n	800217e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	005b      	lsls	r3, r3, #1
 8002126:	2203      	movs	r2, #3
 8002128:	fa02 f303 	lsl.w	r3, r2, r3
 800212c:	43db      	mvns	r3, r3
 800212e:	69ba      	ldr	r2, [r7, #24]
 8002130:	4013      	ands	r3, r2
 8002132:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	68da      	ldr	r2, [r3, #12]
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	005b      	lsls	r3, r3, #1
 800213c:	fa02 f303 	lsl.w	r3, r2, r3
 8002140:	69ba      	ldr	r2, [r7, #24]
 8002142:	4313      	orrs	r3, r2
 8002144:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	69ba      	ldr	r2, [r7, #24]
 800214a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002152:	2201      	movs	r2, #1
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	fa02 f303 	lsl.w	r3, r2, r3
 800215a:	43db      	mvns	r3, r3
 800215c:	69ba      	ldr	r2, [r7, #24]
 800215e:	4013      	ands	r3, r2
 8002160:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	091b      	lsrs	r3, r3, #4
 8002168:	f003 0201 	and.w	r2, r3, #1
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	fa02 f303 	lsl.w	r3, r2, r3
 8002172:	69ba      	ldr	r2, [r7, #24]
 8002174:	4313      	orrs	r3, r2
 8002176:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	69ba      	ldr	r2, [r7, #24]
 800217c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	f003 0303 	and.w	r3, r3, #3
 8002186:	2b03      	cmp	r3, #3
 8002188:	d017      	beq.n	80021ba <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	68db      	ldr	r3, [r3, #12]
 800218e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	005b      	lsls	r3, r3, #1
 8002194:	2203      	movs	r2, #3
 8002196:	fa02 f303 	lsl.w	r3, r2, r3
 800219a:	43db      	mvns	r3, r3
 800219c:	69ba      	ldr	r2, [r7, #24]
 800219e:	4013      	ands	r3, r2
 80021a0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	689a      	ldr	r2, [r3, #8]
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	005b      	lsls	r3, r3, #1
 80021aa:	fa02 f303 	lsl.w	r3, r2, r3
 80021ae:	69ba      	ldr	r2, [r7, #24]
 80021b0:	4313      	orrs	r3, r2
 80021b2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	69ba      	ldr	r2, [r7, #24]
 80021b8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	f003 0303 	and.w	r3, r3, #3
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d123      	bne.n	800220e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	08da      	lsrs	r2, r3, #3
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	3208      	adds	r2, #8
 80021ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	f003 0307 	and.w	r3, r3, #7
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	220f      	movs	r2, #15
 80021de:	fa02 f303 	lsl.w	r3, r2, r3
 80021e2:	43db      	mvns	r3, r3
 80021e4:	69ba      	ldr	r2, [r7, #24]
 80021e6:	4013      	ands	r3, r2
 80021e8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	691a      	ldr	r2, [r3, #16]
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	f003 0307 	and.w	r3, r3, #7
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	fa02 f303 	lsl.w	r3, r2, r3
 80021fa:	69ba      	ldr	r2, [r7, #24]
 80021fc:	4313      	orrs	r3, r2
 80021fe:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002200:	69fb      	ldr	r3, [r7, #28]
 8002202:	08da      	lsrs	r2, r3, #3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	3208      	adds	r2, #8
 8002208:	69b9      	ldr	r1, [r7, #24]
 800220a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	005b      	lsls	r3, r3, #1
 8002218:	2203      	movs	r2, #3
 800221a:	fa02 f303 	lsl.w	r3, r2, r3
 800221e:	43db      	mvns	r3, r3
 8002220:	69ba      	ldr	r2, [r7, #24]
 8002222:	4013      	ands	r3, r2
 8002224:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	f003 0203 	and.w	r2, r3, #3
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	005b      	lsls	r3, r3, #1
 8002232:	fa02 f303 	lsl.w	r3, r2, r3
 8002236:	69ba      	ldr	r2, [r7, #24]
 8002238:	4313      	orrs	r3, r2
 800223a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	69ba      	ldr	r2, [r7, #24]
 8002240:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800224a:	2b00      	cmp	r3, #0
 800224c:	f000 80e0 	beq.w	8002410 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002250:	4b2f      	ldr	r3, [pc, #188]	@ (8002310 <HAL_GPIO_Init+0x238>)
 8002252:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002256:	4a2e      	ldr	r2, [pc, #184]	@ (8002310 <HAL_GPIO_Init+0x238>)
 8002258:	f043 0302 	orr.w	r3, r3, #2
 800225c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002260:	4b2b      	ldr	r3, [pc, #172]	@ (8002310 <HAL_GPIO_Init+0x238>)
 8002262:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002266:	f003 0302 	and.w	r3, r3, #2
 800226a:	60fb      	str	r3, [r7, #12]
 800226c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800226e:	4a29      	ldr	r2, [pc, #164]	@ (8002314 <HAL_GPIO_Init+0x23c>)
 8002270:	69fb      	ldr	r3, [r7, #28]
 8002272:	089b      	lsrs	r3, r3, #2
 8002274:	3302      	adds	r3, #2
 8002276:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800227a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	f003 0303 	and.w	r3, r3, #3
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	220f      	movs	r2, #15
 8002286:	fa02 f303 	lsl.w	r3, r2, r3
 800228a:	43db      	mvns	r3, r3
 800228c:	69ba      	ldr	r2, [r7, #24]
 800228e:	4013      	ands	r3, r2
 8002290:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4a20      	ldr	r2, [pc, #128]	@ (8002318 <HAL_GPIO_Init+0x240>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d052      	beq.n	8002340 <HAL_GPIO_Init+0x268>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4a1f      	ldr	r2, [pc, #124]	@ (800231c <HAL_GPIO_Init+0x244>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d031      	beq.n	8002306 <HAL_GPIO_Init+0x22e>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4a1e      	ldr	r2, [pc, #120]	@ (8002320 <HAL_GPIO_Init+0x248>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d02b      	beq.n	8002302 <HAL_GPIO_Init+0x22a>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4a1d      	ldr	r2, [pc, #116]	@ (8002324 <HAL_GPIO_Init+0x24c>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d025      	beq.n	80022fe <HAL_GPIO_Init+0x226>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4a1c      	ldr	r2, [pc, #112]	@ (8002328 <HAL_GPIO_Init+0x250>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d01f      	beq.n	80022fa <HAL_GPIO_Init+0x222>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4a1b      	ldr	r2, [pc, #108]	@ (800232c <HAL_GPIO_Init+0x254>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d019      	beq.n	80022f6 <HAL_GPIO_Init+0x21e>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4a1a      	ldr	r2, [pc, #104]	@ (8002330 <HAL_GPIO_Init+0x258>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d013      	beq.n	80022f2 <HAL_GPIO_Init+0x21a>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a19      	ldr	r2, [pc, #100]	@ (8002334 <HAL_GPIO_Init+0x25c>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d00d      	beq.n	80022ee <HAL_GPIO_Init+0x216>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a18      	ldr	r2, [pc, #96]	@ (8002338 <HAL_GPIO_Init+0x260>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d007      	beq.n	80022ea <HAL_GPIO_Init+0x212>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a17      	ldr	r2, [pc, #92]	@ (800233c <HAL_GPIO_Init+0x264>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d101      	bne.n	80022e6 <HAL_GPIO_Init+0x20e>
 80022e2:	2309      	movs	r3, #9
 80022e4:	e02d      	b.n	8002342 <HAL_GPIO_Init+0x26a>
 80022e6:	230a      	movs	r3, #10
 80022e8:	e02b      	b.n	8002342 <HAL_GPIO_Init+0x26a>
 80022ea:	2308      	movs	r3, #8
 80022ec:	e029      	b.n	8002342 <HAL_GPIO_Init+0x26a>
 80022ee:	2307      	movs	r3, #7
 80022f0:	e027      	b.n	8002342 <HAL_GPIO_Init+0x26a>
 80022f2:	2306      	movs	r3, #6
 80022f4:	e025      	b.n	8002342 <HAL_GPIO_Init+0x26a>
 80022f6:	2305      	movs	r3, #5
 80022f8:	e023      	b.n	8002342 <HAL_GPIO_Init+0x26a>
 80022fa:	2304      	movs	r3, #4
 80022fc:	e021      	b.n	8002342 <HAL_GPIO_Init+0x26a>
 80022fe:	2303      	movs	r3, #3
 8002300:	e01f      	b.n	8002342 <HAL_GPIO_Init+0x26a>
 8002302:	2302      	movs	r3, #2
 8002304:	e01d      	b.n	8002342 <HAL_GPIO_Init+0x26a>
 8002306:	2301      	movs	r3, #1
 8002308:	e01b      	b.n	8002342 <HAL_GPIO_Init+0x26a>
 800230a:	bf00      	nop
 800230c:	58000080 	.word	0x58000080
 8002310:	58024400 	.word	0x58024400
 8002314:	58000400 	.word	0x58000400
 8002318:	58020000 	.word	0x58020000
 800231c:	58020400 	.word	0x58020400
 8002320:	58020800 	.word	0x58020800
 8002324:	58020c00 	.word	0x58020c00
 8002328:	58021000 	.word	0x58021000
 800232c:	58021400 	.word	0x58021400
 8002330:	58021800 	.word	0x58021800
 8002334:	58021c00 	.word	0x58021c00
 8002338:	58022000 	.word	0x58022000
 800233c:	58022400 	.word	0x58022400
 8002340:	2300      	movs	r3, #0
 8002342:	69fa      	ldr	r2, [r7, #28]
 8002344:	f002 0203 	and.w	r2, r2, #3
 8002348:	0092      	lsls	r2, r2, #2
 800234a:	4093      	lsls	r3, r2
 800234c:	69ba      	ldr	r2, [r7, #24]
 800234e:	4313      	orrs	r3, r2
 8002350:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002352:	4938      	ldr	r1, [pc, #224]	@ (8002434 <HAL_GPIO_Init+0x35c>)
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	089b      	lsrs	r3, r3, #2
 8002358:	3302      	adds	r3, #2
 800235a:	69ba      	ldr	r2, [r7, #24]
 800235c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002360:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	43db      	mvns	r3, r3
 800236c:	69ba      	ldr	r2, [r7, #24]
 800236e:	4013      	ands	r3, r2
 8002370:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d003      	beq.n	8002386 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800237e:	69ba      	ldr	r2, [r7, #24]
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	4313      	orrs	r3, r2
 8002384:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002386:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800238a:	69bb      	ldr	r3, [r7, #24]
 800238c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800238e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	43db      	mvns	r3, r3
 800239a:	69ba      	ldr	r2, [r7, #24]
 800239c:	4013      	ands	r3, r2
 800239e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d003      	beq.n	80023b4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80023ac:	69ba      	ldr	r2, [r7, #24]
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	4313      	orrs	r3, r2
 80023b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80023b4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80023b8:	69bb      	ldr	r3, [r7, #24]
 80023ba:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	43db      	mvns	r3, r3
 80023c6:	69ba      	ldr	r2, [r7, #24]
 80023c8:	4013      	ands	r3, r2
 80023ca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d003      	beq.n	80023e0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80023d8:	69ba      	ldr	r2, [r7, #24]
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	4313      	orrs	r3, r2
 80023de:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	69ba      	ldr	r2, [r7, #24]
 80023e4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	43db      	mvns	r3, r3
 80023f0:	69ba      	ldr	r2, [r7, #24]
 80023f2:	4013      	ands	r3, r2
 80023f4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d003      	beq.n	800240a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002402:	69ba      	ldr	r2, [r7, #24]
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	4313      	orrs	r3, r2
 8002408:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	69ba      	ldr	r2, [r7, #24]
 800240e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	3301      	adds	r3, #1
 8002414:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	fa22 f303 	lsr.w	r3, r2, r3
 8002420:	2b00      	cmp	r3, #0
 8002422:	f47f ae63 	bne.w	80020ec <HAL_GPIO_Init+0x14>
  }
}
 8002426:	bf00      	nop
 8002428:	bf00      	nop
 800242a:	3724      	adds	r7, #36	@ 0x24
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr
 8002434:	58000400 	.word	0x58000400

08002438 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	460b      	mov	r3, r1
 8002442:	807b      	strh	r3, [r7, #2]
 8002444:	4613      	mov	r3, r2
 8002446:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002448:	787b      	ldrb	r3, [r7, #1]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d003      	beq.n	8002456 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800244e:	887a      	ldrh	r2, [r7, #2]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002454:	e003      	b.n	800245e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002456:	887b      	ldrh	r3, [r7, #2]
 8002458:	041a      	lsls	r2, r3, #16
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	619a      	str	r2, [r3, #24]
}
 800245e:	bf00      	nop
 8002460:	370c      	adds	r7, #12
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr
	...

0800246c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8002474:	4a08      	ldr	r2, [pc, #32]	@ (8002498 <HAL_HSEM_FastTake+0x2c>)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	3320      	adds	r3, #32
 800247a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800247e:	4a07      	ldr	r2, [pc, #28]	@ (800249c <HAL_HSEM_FastTake+0x30>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d101      	bne.n	8002488 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8002484:	2300      	movs	r3, #0
 8002486:	e000      	b.n	800248a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
}
 800248a:	4618      	mov	r0, r3
 800248c:	370c      	adds	r7, #12
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop
 8002498:	58026400 	.word	0x58026400
 800249c:	80000300 	.word	0x80000300

080024a0 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80024aa:	4906      	ldr	r1, [pc, #24]	@ (80024c4 <HAL_HSEM_Release+0x24>)
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80024b8:	bf00      	nop
 80024ba:	370c      	adds	r7, #12
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr
 80024c4:	58026400 	.word	0x58026400

080024c8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b084      	sub	sp, #16
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80024d0:	4b29      	ldr	r3, [pc, #164]	@ (8002578 <HAL_PWREx_ConfigSupply+0xb0>)
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	f003 0307 	and.w	r3, r3, #7
 80024d8:	2b06      	cmp	r3, #6
 80024da:	d00a      	beq.n	80024f2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80024dc:	4b26      	ldr	r3, [pc, #152]	@ (8002578 <HAL_PWREx_ConfigSupply+0xb0>)
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80024e4:	687a      	ldr	r2, [r7, #4]
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d001      	beq.n	80024ee <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e040      	b.n	8002570 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80024ee:	2300      	movs	r3, #0
 80024f0:	e03e      	b.n	8002570 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80024f2:	4b21      	ldr	r3, [pc, #132]	@ (8002578 <HAL_PWREx_ConfigSupply+0xb0>)
 80024f4:	68db      	ldr	r3, [r3, #12]
 80024f6:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80024fa:	491f      	ldr	r1, [pc, #124]	@ (8002578 <HAL_PWREx_ConfigSupply+0xb0>)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	4313      	orrs	r3, r2
 8002500:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002502:	f7fe feb1 	bl	8001268 <HAL_GetTick>
 8002506:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002508:	e009      	b.n	800251e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800250a:	f7fe fead 	bl	8001268 <HAL_GetTick>
 800250e:	4602      	mov	r2, r0
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	1ad3      	subs	r3, r2, r3
 8002514:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002518:	d901      	bls.n	800251e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e028      	b.n	8002570 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800251e:	4b16      	ldr	r3, [pc, #88]	@ (8002578 <HAL_PWREx_ConfigSupply+0xb0>)
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002526:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800252a:	d1ee      	bne.n	800250a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2b1e      	cmp	r3, #30
 8002530:	d008      	beq.n	8002544 <HAL_PWREx_ConfigSupply+0x7c>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2b2e      	cmp	r3, #46	@ 0x2e
 8002536:	d005      	beq.n	8002544 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2b1d      	cmp	r3, #29
 800253c:	d002      	beq.n	8002544 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2b2d      	cmp	r3, #45	@ 0x2d
 8002542:	d114      	bne.n	800256e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002544:	f7fe fe90 	bl	8001268 <HAL_GetTick>
 8002548:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800254a:	e009      	b.n	8002560 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800254c:	f7fe fe8c 	bl	8001268 <HAL_GetTick>
 8002550:	4602      	mov	r2, r0
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800255a:	d901      	bls.n	8002560 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	e007      	b.n	8002570 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002560:	4b05      	ldr	r3, [pc, #20]	@ (8002578 <HAL_PWREx_ConfigSupply+0xb0>)
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002568:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800256c:	d1ee      	bne.n	800254c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800256e:	2300      	movs	r3, #0
}
 8002570:	4618      	mov	r0, r3
 8002572:	3710      	adds	r7, #16
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}
 8002578:	58024800 	.word	0x58024800

0800257c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b08c      	sub	sp, #48	@ 0x30
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d102      	bne.n	8002590 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	f000 bc48 	b.w	8002e20 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0301 	and.w	r3, r3, #1
 8002598:	2b00      	cmp	r3, #0
 800259a:	f000 8088 	beq.w	80026ae <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800259e:	4b99      	ldr	r3, [pc, #612]	@ (8002804 <HAL_RCC_OscConfig+0x288>)
 80025a0:	691b      	ldr	r3, [r3, #16]
 80025a2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80025a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80025a8:	4b96      	ldr	r3, [pc, #600]	@ (8002804 <HAL_RCC_OscConfig+0x288>)
 80025aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025ac:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80025ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025b0:	2b10      	cmp	r3, #16
 80025b2:	d007      	beq.n	80025c4 <HAL_RCC_OscConfig+0x48>
 80025b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025b6:	2b18      	cmp	r3, #24
 80025b8:	d111      	bne.n	80025de <HAL_RCC_OscConfig+0x62>
 80025ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025bc:	f003 0303 	and.w	r3, r3, #3
 80025c0:	2b02      	cmp	r3, #2
 80025c2:	d10c      	bne.n	80025de <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025c4:	4b8f      	ldr	r3, [pc, #572]	@ (8002804 <HAL_RCC_OscConfig+0x288>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d06d      	beq.n	80026ac <HAL_RCC_OscConfig+0x130>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d169      	bne.n	80026ac <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	f000 bc21 	b.w	8002e20 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025e6:	d106      	bne.n	80025f6 <HAL_RCC_OscConfig+0x7a>
 80025e8:	4b86      	ldr	r3, [pc, #536]	@ (8002804 <HAL_RCC_OscConfig+0x288>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a85      	ldr	r2, [pc, #532]	@ (8002804 <HAL_RCC_OscConfig+0x288>)
 80025ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025f2:	6013      	str	r3, [r2, #0]
 80025f4:	e02e      	b.n	8002654 <HAL_RCC_OscConfig+0xd8>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d10c      	bne.n	8002618 <HAL_RCC_OscConfig+0x9c>
 80025fe:	4b81      	ldr	r3, [pc, #516]	@ (8002804 <HAL_RCC_OscConfig+0x288>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a80      	ldr	r2, [pc, #512]	@ (8002804 <HAL_RCC_OscConfig+0x288>)
 8002604:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002608:	6013      	str	r3, [r2, #0]
 800260a:	4b7e      	ldr	r3, [pc, #504]	@ (8002804 <HAL_RCC_OscConfig+0x288>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a7d      	ldr	r2, [pc, #500]	@ (8002804 <HAL_RCC_OscConfig+0x288>)
 8002610:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002614:	6013      	str	r3, [r2, #0]
 8002616:	e01d      	b.n	8002654 <HAL_RCC_OscConfig+0xd8>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002620:	d10c      	bne.n	800263c <HAL_RCC_OscConfig+0xc0>
 8002622:	4b78      	ldr	r3, [pc, #480]	@ (8002804 <HAL_RCC_OscConfig+0x288>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a77      	ldr	r2, [pc, #476]	@ (8002804 <HAL_RCC_OscConfig+0x288>)
 8002628:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800262c:	6013      	str	r3, [r2, #0]
 800262e:	4b75      	ldr	r3, [pc, #468]	@ (8002804 <HAL_RCC_OscConfig+0x288>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a74      	ldr	r2, [pc, #464]	@ (8002804 <HAL_RCC_OscConfig+0x288>)
 8002634:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002638:	6013      	str	r3, [r2, #0]
 800263a:	e00b      	b.n	8002654 <HAL_RCC_OscConfig+0xd8>
 800263c:	4b71      	ldr	r3, [pc, #452]	@ (8002804 <HAL_RCC_OscConfig+0x288>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a70      	ldr	r2, [pc, #448]	@ (8002804 <HAL_RCC_OscConfig+0x288>)
 8002642:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002646:	6013      	str	r3, [r2, #0]
 8002648:	4b6e      	ldr	r3, [pc, #440]	@ (8002804 <HAL_RCC_OscConfig+0x288>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a6d      	ldr	r2, [pc, #436]	@ (8002804 <HAL_RCC_OscConfig+0x288>)
 800264e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002652:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d013      	beq.n	8002684 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800265c:	f7fe fe04 	bl	8001268 <HAL_GetTick>
 8002660:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002662:	e008      	b.n	8002676 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002664:	f7fe fe00 	bl	8001268 <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	2b64      	cmp	r3, #100	@ 0x64
 8002670:	d901      	bls.n	8002676 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e3d4      	b.n	8002e20 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002676:	4b63      	ldr	r3, [pc, #396]	@ (8002804 <HAL_RCC_OscConfig+0x288>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d0f0      	beq.n	8002664 <HAL_RCC_OscConfig+0xe8>
 8002682:	e014      	b.n	80026ae <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002684:	f7fe fdf0 	bl	8001268 <HAL_GetTick>
 8002688:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800268a:	e008      	b.n	800269e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800268c:	f7fe fdec 	bl	8001268 <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	2b64      	cmp	r3, #100	@ 0x64
 8002698:	d901      	bls.n	800269e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e3c0      	b.n	8002e20 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800269e:	4b59      	ldr	r3, [pc, #356]	@ (8002804 <HAL_RCC_OscConfig+0x288>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d1f0      	bne.n	800268c <HAL_RCC_OscConfig+0x110>
 80026aa:	e000      	b.n	80026ae <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0302 	and.w	r3, r3, #2
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	f000 80ca 	beq.w	8002850 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026bc:	4b51      	ldr	r3, [pc, #324]	@ (8002804 <HAL_RCC_OscConfig+0x288>)
 80026be:	691b      	ldr	r3, [r3, #16]
 80026c0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80026c4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80026c6:	4b4f      	ldr	r3, [pc, #316]	@ (8002804 <HAL_RCC_OscConfig+0x288>)
 80026c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026ca:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80026cc:	6a3b      	ldr	r3, [r7, #32]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d007      	beq.n	80026e2 <HAL_RCC_OscConfig+0x166>
 80026d2:	6a3b      	ldr	r3, [r7, #32]
 80026d4:	2b18      	cmp	r3, #24
 80026d6:	d156      	bne.n	8002786 <HAL_RCC_OscConfig+0x20a>
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	f003 0303 	and.w	r3, r3, #3
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d151      	bne.n	8002786 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026e2:	4b48      	ldr	r3, [pc, #288]	@ (8002804 <HAL_RCC_OscConfig+0x288>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0304 	and.w	r3, r3, #4
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d005      	beq.n	80026fa <HAL_RCC_OscConfig+0x17e>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	68db      	ldr	r3, [r3, #12]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d101      	bne.n	80026fa <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e392      	b.n	8002e20 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80026fa:	4b42      	ldr	r3, [pc, #264]	@ (8002804 <HAL_RCC_OscConfig+0x288>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f023 0219 	bic.w	r2, r3, #25
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	68db      	ldr	r3, [r3, #12]
 8002706:	493f      	ldr	r1, [pc, #252]	@ (8002804 <HAL_RCC_OscConfig+0x288>)
 8002708:	4313      	orrs	r3, r2
 800270a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800270c:	f7fe fdac 	bl	8001268 <HAL_GetTick>
 8002710:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002712:	e008      	b.n	8002726 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002714:	f7fe fda8 	bl	8001268 <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	2b02      	cmp	r3, #2
 8002720:	d901      	bls.n	8002726 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e37c      	b.n	8002e20 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002726:	4b37      	ldr	r3, [pc, #220]	@ (8002804 <HAL_RCC_OscConfig+0x288>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 0304 	and.w	r3, r3, #4
 800272e:	2b00      	cmp	r3, #0
 8002730:	d0f0      	beq.n	8002714 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002732:	f7fe fdc9 	bl	80012c8 <HAL_GetREVID>
 8002736:	4603      	mov	r3, r0
 8002738:	f241 0203 	movw	r2, #4099	@ 0x1003
 800273c:	4293      	cmp	r3, r2
 800273e:	d817      	bhi.n	8002770 <HAL_RCC_OscConfig+0x1f4>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	691b      	ldr	r3, [r3, #16]
 8002744:	2b40      	cmp	r3, #64	@ 0x40
 8002746:	d108      	bne.n	800275a <HAL_RCC_OscConfig+0x1de>
 8002748:	4b2e      	ldr	r3, [pc, #184]	@ (8002804 <HAL_RCC_OscConfig+0x288>)
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002750:	4a2c      	ldr	r2, [pc, #176]	@ (8002804 <HAL_RCC_OscConfig+0x288>)
 8002752:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002756:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002758:	e07a      	b.n	8002850 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800275a:	4b2a      	ldr	r3, [pc, #168]	@ (8002804 <HAL_RCC_OscConfig+0x288>)
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	691b      	ldr	r3, [r3, #16]
 8002766:	031b      	lsls	r3, r3, #12
 8002768:	4926      	ldr	r1, [pc, #152]	@ (8002804 <HAL_RCC_OscConfig+0x288>)
 800276a:	4313      	orrs	r3, r2
 800276c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800276e:	e06f      	b.n	8002850 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002770:	4b24      	ldr	r3, [pc, #144]	@ (8002804 <HAL_RCC_OscConfig+0x288>)
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	691b      	ldr	r3, [r3, #16]
 800277c:	061b      	lsls	r3, r3, #24
 800277e:	4921      	ldr	r1, [pc, #132]	@ (8002804 <HAL_RCC_OscConfig+0x288>)
 8002780:	4313      	orrs	r3, r2
 8002782:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002784:	e064      	b.n	8002850 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	68db      	ldr	r3, [r3, #12]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d047      	beq.n	800281e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800278e:	4b1d      	ldr	r3, [pc, #116]	@ (8002804 <HAL_RCC_OscConfig+0x288>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f023 0219 	bic.w	r2, r3, #25
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	491a      	ldr	r1, [pc, #104]	@ (8002804 <HAL_RCC_OscConfig+0x288>)
 800279c:	4313      	orrs	r3, r2
 800279e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027a0:	f7fe fd62 	bl	8001268 <HAL_GetTick>
 80027a4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80027a6:	e008      	b.n	80027ba <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027a8:	f7fe fd5e 	bl	8001268 <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	2b02      	cmp	r3, #2
 80027b4:	d901      	bls.n	80027ba <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	e332      	b.n	8002e20 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80027ba:	4b12      	ldr	r3, [pc, #72]	@ (8002804 <HAL_RCC_OscConfig+0x288>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 0304 	and.w	r3, r3, #4
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d0f0      	beq.n	80027a8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027c6:	f7fe fd7f 	bl	80012c8 <HAL_GetREVID>
 80027ca:	4603      	mov	r3, r0
 80027cc:	f241 0203 	movw	r2, #4099	@ 0x1003
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d819      	bhi.n	8002808 <HAL_RCC_OscConfig+0x28c>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	691b      	ldr	r3, [r3, #16]
 80027d8:	2b40      	cmp	r3, #64	@ 0x40
 80027da:	d108      	bne.n	80027ee <HAL_RCC_OscConfig+0x272>
 80027dc:	4b09      	ldr	r3, [pc, #36]	@ (8002804 <HAL_RCC_OscConfig+0x288>)
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80027e4:	4a07      	ldr	r2, [pc, #28]	@ (8002804 <HAL_RCC_OscConfig+0x288>)
 80027e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027ea:	6053      	str	r3, [r2, #4]
 80027ec:	e030      	b.n	8002850 <HAL_RCC_OscConfig+0x2d4>
 80027ee:	4b05      	ldr	r3, [pc, #20]	@ (8002804 <HAL_RCC_OscConfig+0x288>)
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	691b      	ldr	r3, [r3, #16]
 80027fa:	031b      	lsls	r3, r3, #12
 80027fc:	4901      	ldr	r1, [pc, #4]	@ (8002804 <HAL_RCC_OscConfig+0x288>)
 80027fe:	4313      	orrs	r3, r2
 8002800:	604b      	str	r3, [r1, #4]
 8002802:	e025      	b.n	8002850 <HAL_RCC_OscConfig+0x2d4>
 8002804:	58024400 	.word	0x58024400
 8002808:	4b9a      	ldr	r3, [pc, #616]	@ (8002a74 <HAL_RCC_OscConfig+0x4f8>)
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	691b      	ldr	r3, [r3, #16]
 8002814:	061b      	lsls	r3, r3, #24
 8002816:	4997      	ldr	r1, [pc, #604]	@ (8002a74 <HAL_RCC_OscConfig+0x4f8>)
 8002818:	4313      	orrs	r3, r2
 800281a:	604b      	str	r3, [r1, #4]
 800281c:	e018      	b.n	8002850 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800281e:	4b95      	ldr	r3, [pc, #596]	@ (8002a74 <HAL_RCC_OscConfig+0x4f8>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a94      	ldr	r2, [pc, #592]	@ (8002a74 <HAL_RCC_OscConfig+0x4f8>)
 8002824:	f023 0301 	bic.w	r3, r3, #1
 8002828:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800282a:	f7fe fd1d 	bl	8001268 <HAL_GetTick>
 800282e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002830:	e008      	b.n	8002844 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002832:	f7fe fd19 	bl	8001268 <HAL_GetTick>
 8002836:	4602      	mov	r2, r0
 8002838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800283a:	1ad3      	subs	r3, r2, r3
 800283c:	2b02      	cmp	r3, #2
 800283e:	d901      	bls.n	8002844 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002840:	2303      	movs	r3, #3
 8002842:	e2ed      	b.n	8002e20 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002844:	4b8b      	ldr	r3, [pc, #556]	@ (8002a74 <HAL_RCC_OscConfig+0x4f8>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 0304 	and.w	r3, r3, #4
 800284c:	2b00      	cmp	r3, #0
 800284e:	d1f0      	bne.n	8002832 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 0310 	and.w	r3, r3, #16
 8002858:	2b00      	cmp	r3, #0
 800285a:	f000 80a9 	beq.w	80029b0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800285e:	4b85      	ldr	r3, [pc, #532]	@ (8002a74 <HAL_RCC_OscConfig+0x4f8>)
 8002860:	691b      	ldr	r3, [r3, #16]
 8002862:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002866:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002868:	4b82      	ldr	r3, [pc, #520]	@ (8002a74 <HAL_RCC_OscConfig+0x4f8>)
 800286a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800286c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800286e:	69bb      	ldr	r3, [r7, #24]
 8002870:	2b08      	cmp	r3, #8
 8002872:	d007      	beq.n	8002884 <HAL_RCC_OscConfig+0x308>
 8002874:	69bb      	ldr	r3, [r7, #24]
 8002876:	2b18      	cmp	r3, #24
 8002878:	d13a      	bne.n	80028f0 <HAL_RCC_OscConfig+0x374>
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	f003 0303 	and.w	r3, r3, #3
 8002880:	2b01      	cmp	r3, #1
 8002882:	d135      	bne.n	80028f0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002884:	4b7b      	ldr	r3, [pc, #492]	@ (8002a74 <HAL_RCC_OscConfig+0x4f8>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800288c:	2b00      	cmp	r3, #0
 800288e:	d005      	beq.n	800289c <HAL_RCC_OscConfig+0x320>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	69db      	ldr	r3, [r3, #28]
 8002894:	2b80      	cmp	r3, #128	@ 0x80
 8002896:	d001      	beq.n	800289c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e2c1      	b.n	8002e20 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800289c:	f7fe fd14 	bl	80012c8 <HAL_GetREVID>
 80028a0:	4603      	mov	r3, r0
 80028a2:	f241 0203 	movw	r2, #4099	@ 0x1003
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d817      	bhi.n	80028da <HAL_RCC_OscConfig+0x35e>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6a1b      	ldr	r3, [r3, #32]
 80028ae:	2b20      	cmp	r3, #32
 80028b0:	d108      	bne.n	80028c4 <HAL_RCC_OscConfig+0x348>
 80028b2:	4b70      	ldr	r3, [pc, #448]	@ (8002a74 <HAL_RCC_OscConfig+0x4f8>)
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80028ba:	4a6e      	ldr	r2, [pc, #440]	@ (8002a74 <HAL_RCC_OscConfig+0x4f8>)
 80028bc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80028c0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80028c2:	e075      	b.n	80029b0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80028c4:	4b6b      	ldr	r3, [pc, #428]	@ (8002a74 <HAL_RCC_OscConfig+0x4f8>)
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6a1b      	ldr	r3, [r3, #32]
 80028d0:	069b      	lsls	r3, r3, #26
 80028d2:	4968      	ldr	r1, [pc, #416]	@ (8002a74 <HAL_RCC_OscConfig+0x4f8>)
 80028d4:	4313      	orrs	r3, r2
 80028d6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80028d8:	e06a      	b.n	80029b0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80028da:	4b66      	ldr	r3, [pc, #408]	@ (8002a74 <HAL_RCC_OscConfig+0x4f8>)
 80028dc:	68db      	ldr	r3, [r3, #12]
 80028de:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6a1b      	ldr	r3, [r3, #32]
 80028e6:	061b      	lsls	r3, r3, #24
 80028e8:	4962      	ldr	r1, [pc, #392]	@ (8002a74 <HAL_RCC_OscConfig+0x4f8>)
 80028ea:	4313      	orrs	r3, r2
 80028ec:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80028ee:	e05f      	b.n	80029b0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	69db      	ldr	r3, [r3, #28]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d042      	beq.n	800297e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80028f8:	4b5e      	ldr	r3, [pc, #376]	@ (8002a74 <HAL_RCC_OscConfig+0x4f8>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a5d      	ldr	r2, [pc, #372]	@ (8002a74 <HAL_RCC_OscConfig+0x4f8>)
 80028fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002902:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002904:	f7fe fcb0 	bl	8001268 <HAL_GetTick>
 8002908:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800290a:	e008      	b.n	800291e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800290c:	f7fe fcac 	bl	8001268 <HAL_GetTick>
 8002910:	4602      	mov	r2, r0
 8002912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	2b02      	cmp	r3, #2
 8002918:	d901      	bls.n	800291e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	e280      	b.n	8002e20 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800291e:	4b55      	ldr	r3, [pc, #340]	@ (8002a74 <HAL_RCC_OscConfig+0x4f8>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002926:	2b00      	cmp	r3, #0
 8002928:	d0f0      	beq.n	800290c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800292a:	f7fe fccd 	bl	80012c8 <HAL_GetREVID>
 800292e:	4603      	mov	r3, r0
 8002930:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002934:	4293      	cmp	r3, r2
 8002936:	d817      	bhi.n	8002968 <HAL_RCC_OscConfig+0x3ec>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6a1b      	ldr	r3, [r3, #32]
 800293c:	2b20      	cmp	r3, #32
 800293e:	d108      	bne.n	8002952 <HAL_RCC_OscConfig+0x3d6>
 8002940:	4b4c      	ldr	r3, [pc, #304]	@ (8002a74 <HAL_RCC_OscConfig+0x4f8>)
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002948:	4a4a      	ldr	r2, [pc, #296]	@ (8002a74 <HAL_RCC_OscConfig+0x4f8>)
 800294a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800294e:	6053      	str	r3, [r2, #4]
 8002950:	e02e      	b.n	80029b0 <HAL_RCC_OscConfig+0x434>
 8002952:	4b48      	ldr	r3, [pc, #288]	@ (8002a74 <HAL_RCC_OscConfig+0x4f8>)
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6a1b      	ldr	r3, [r3, #32]
 800295e:	069b      	lsls	r3, r3, #26
 8002960:	4944      	ldr	r1, [pc, #272]	@ (8002a74 <HAL_RCC_OscConfig+0x4f8>)
 8002962:	4313      	orrs	r3, r2
 8002964:	604b      	str	r3, [r1, #4]
 8002966:	e023      	b.n	80029b0 <HAL_RCC_OscConfig+0x434>
 8002968:	4b42      	ldr	r3, [pc, #264]	@ (8002a74 <HAL_RCC_OscConfig+0x4f8>)
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6a1b      	ldr	r3, [r3, #32]
 8002974:	061b      	lsls	r3, r3, #24
 8002976:	493f      	ldr	r1, [pc, #252]	@ (8002a74 <HAL_RCC_OscConfig+0x4f8>)
 8002978:	4313      	orrs	r3, r2
 800297a:	60cb      	str	r3, [r1, #12]
 800297c:	e018      	b.n	80029b0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800297e:	4b3d      	ldr	r3, [pc, #244]	@ (8002a74 <HAL_RCC_OscConfig+0x4f8>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a3c      	ldr	r2, [pc, #240]	@ (8002a74 <HAL_RCC_OscConfig+0x4f8>)
 8002984:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002988:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800298a:	f7fe fc6d 	bl	8001268 <HAL_GetTick>
 800298e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002990:	e008      	b.n	80029a4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002992:	f7fe fc69 	bl	8001268 <HAL_GetTick>
 8002996:	4602      	mov	r2, r0
 8002998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800299a:	1ad3      	subs	r3, r2, r3
 800299c:	2b02      	cmp	r3, #2
 800299e:	d901      	bls.n	80029a4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80029a0:	2303      	movs	r3, #3
 80029a2:	e23d      	b.n	8002e20 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80029a4:	4b33      	ldr	r3, [pc, #204]	@ (8002a74 <HAL_RCC_OscConfig+0x4f8>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d1f0      	bne.n	8002992 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 0308 	and.w	r3, r3, #8
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d036      	beq.n	8002a2a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	695b      	ldr	r3, [r3, #20]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d019      	beq.n	80029f8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029c4:	4b2b      	ldr	r3, [pc, #172]	@ (8002a74 <HAL_RCC_OscConfig+0x4f8>)
 80029c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029c8:	4a2a      	ldr	r2, [pc, #168]	@ (8002a74 <HAL_RCC_OscConfig+0x4f8>)
 80029ca:	f043 0301 	orr.w	r3, r3, #1
 80029ce:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029d0:	f7fe fc4a 	bl	8001268 <HAL_GetTick>
 80029d4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80029d6:	e008      	b.n	80029ea <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029d8:	f7fe fc46 	bl	8001268 <HAL_GetTick>
 80029dc:	4602      	mov	r2, r0
 80029de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d901      	bls.n	80029ea <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80029e6:	2303      	movs	r3, #3
 80029e8:	e21a      	b.n	8002e20 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80029ea:	4b22      	ldr	r3, [pc, #136]	@ (8002a74 <HAL_RCC_OscConfig+0x4f8>)
 80029ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029ee:	f003 0302 	and.w	r3, r3, #2
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d0f0      	beq.n	80029d8 <HAL_RCC_OscConfig+0x45c>
 80029f6:	e018      	b.n	8002a2a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029f8:	4b1e      	ldr	r3, [pc, #120]	@ (8002a74 <HAL_RCC_OscConfig+0x4f8>)
 80029fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029fc:	4a1d      	ldr	r2, [pc, #116]	@ (8002a74 <HAL_RCC_OscConfig+0x4f8>)
 80029fe:	f023 0301 	bic.w	r3, r3, #1
 8002a02:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a04:	f7fe fc30 	bl	8001268 <HAL_GetTick>
 8002a08:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002a0a:	e008      	b.n	8002a1e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a0c:	f7fe fc2c 	bl	8001268 <HAL_GetTick>
 8002a10:	4602      	mov	r2, r0
 8002a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	2b02      	cmp	r3, #2
 8002a18:	d901      	bls.n	8002a1e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e200      	b.n	8002e20 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002a1e:	4b15      	ldr	r3, [pc, #84]	@ (8002a74 <HAL_RCC_OscConfig+0x4f8>)
 8002a20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a22:	f003 0302 	and.w	r3, r3, #2
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d1f0      	bne.n	8002a0c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 0320 	and.w	r3, r3, #32
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d039      	beq.n	8002aaa <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	699b      	ldr	r3, [r3, #24]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d01c      	beq.n	8002a78 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002a3e:	4b0d      	ldr	r3, [pc, #52]	@ (8002a74 <HAL_RCC_OscConfig+0x4f8>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a0c      	ldr	r2, [pc, #48]	@ (8002a74 <HAL_RCC_OscConfig+0x4f8>)
 8002a44:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002a48:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002a4a:	f7fe fc0d 	bl	8001268 <HAL_GetTick>
 8002a4e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002a50:	e008      	b.n	8002a64 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a52:	f7fe fc09 	bl	8001268 <HAL_GetTick>
 8002a56:	4602      	mov	r2, r0
 8002a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a5a:	1ad3      	subs	r3, r2, r3
 8002a5c:	2b02      	cmp	r3, #2
 8002a5e:	d901      	bls.n	8002a64 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002a60:	2303      	movs	r3, #3
 8002a62:	e1dd      	b.n	8002e20 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002a64:	4b03      	ldr	r3, [pc, #12]	@ (8002a74 <HAL_RCC_OscConfig+0x4f8>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d0f0      	beq.n	8002a52 <HAL_RCC_OscConfig+0x4d6>
 8002a70:	e01b      	b.n	8002aaa <HAL_RCC_OscConfig+0x52e>
 8002a72:	bf00      	nop
 8002a74:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002a78:	4b9b      	ldr	r3, [pc, #620]	@ (8002ce8 <HAL_RCC_OscConfig+0x76c>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a9a      	ldr	r2, [pc, #616]	@ (8002ce8 <HAL_RCC_OscConfig+0x76c>)
 8002a7e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002a82:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002a84:	f7fe fbf0 	bl	8001268 <HAL_GetTick>
 8002a88:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002a8a:	e008      	b.n	8002a9e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a8c:	f7fe fbec 	bl	8001268 <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d901      	bls.n	8002a9e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e1c0      	b.n	8002e20 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002a9e:	4b92      	ldr	r3, [pc, #584]	@ (8002ce8 <HAL_RCC_OscConfig+0x76c>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d1f0      	bne.n	8002a8c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 0304 	and.w	r3, r3, #4
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	f000 8081 	beq.w	8002bba <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002ab8:	4b8c      	ldr	r3, [pc, #560]	@ (8002cec <HAL_RCC_OscConfig+0x770>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a8b      	ldr	r2, [pc, #556]	@ (8002cec <HAL_RCC_OscConfig+0x770>)
 8002abe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ac2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002ac4:	f7fe fbd0 	bl	8001268 <HAL_GetTick>
 8002ac8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002aca:	e008      	b.n	8002ade <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002acc:	f7fe fbcc 	bl	8001268 <HAL_GetTick>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	2b64      	cmp	r3, #100	@ 0x64
 8002ad8:	d901      	bls.n	8002ade <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002ada:	2303      	movs	r3, #3
 8002adc:	e1a0      	b.n	8002e20 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ade:	4b83      	ldr	r3, [pc, #524]	@ (8002cec <HAL_RCC_OscConfig+0x770>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d0f0      	beq.n	8002acc <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d106      	bne.n	8002b00 <HAL_RCC_OscConfig+0x584>
 8002af2:	4b7d      	ldr	r3, [pc, #500]	@ (8002ce8 <HAL_RCC_OscConfig+0x76c>)
 8002af4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002af6:	4a7c      	ldr	r2, [pc, #496]	@ (8002ce8 <HAL_RCC_OscConfig+0x76c>)
 8002af8:	f043 0301 	orr.w	r3, r3, #1
 8002afc:	6713      	str	r3, [r2, #112]	@ 0x70
 8002afe:	e02d      	b.n	8002b5c <HAL_RCC_OscConfig+0x5e0>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d10c      	bne.n	8002b22 <HAL_RCC_OscConfig+0x5a6>
 8002b08:	4b77      	ldr	r3, [pc, #476]	@ (8002ce8 <HAL_RCC_OscConfig+0x76c>)
 8002b0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b0c:	4a76      	ldr	r2, [pc, #472]	@ (8002ce8 <HAL_RCC_OscConfig+0x76c>)
 8002b0e:	f023 0301 	bic.w	r3, r3, #1
 8002b12:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b14:	4b74      	ldr	r3, [pc, #464]	@ (8002ce8 <HAL_RCC_OscConfig+0x76c>)
 8002b16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b18:	4a73      	ldr	r2, [pc, #460]	@ (8002ce8 <HAL_RCC_OscConfig+0x76c>)
 8002b1a:	f023 0304 	bic.w	r3, r3, #4
 8002b1e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b20:	e01c      	b.n	8002b5c <HAL_RCC_OscConfig+0x5e0>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	2b05      	cmp	r3, #5
 8002b28:	d10c      	bne.n	8002b44 <HAL_RCC_OscConfig+0x5c8>
 8002b2a:	4b6f      	ldr	r3, [pc, #444]	@ (8002ce8 <HAL_RCC_OscConfig+0x76c>)
 8002b2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b2e:	4a6e      	ldr	r2, [pc, #440]	@ (8002ce8 <HAL_RCC_OscConfig+0x76c>)
 8002b30:	f043 0304 	orr.w	r3, r3, #4
 8002b34:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b36:	4b6c      	ldr	r3, [pc, #432]	@ (8002ce8 <HAL_RCC_OscConfig+0x76c>)
 8002b38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b3a:	4a6b      	ldr	r2, [pc, #428]	@ (8002ce8 <HAL_RCC_OscConfig+0x76c>)
 8002b3c:	f043 0301 	orr.w	r3, r3, #1
 8002b40:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b42:	e00b      	b.n	8002b5c <HAL_RCC_OscConfig+0x5e0>
 8002b44:	4b68      	ldr	r3, [pc, #416]	@ (8002ce8 <HAL_RCC_OscConfig+0x76c>)
 8002b46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b48:	4a67      	ldr	r2, [pc, #412]	@ (8002ce8 <HAL_RCC_OscConfig+0x76c>)
 8002b4a:	f023 0301 	bic.w	r3, r3, #1
 8002b4e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b50:	4b65      	ldr	r3, [pc, #404]	@ (8002ce8 <HAL_RCC_OscConfig+0x76c>)
 8002b52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b54:	4a64      	ldr	r2, [pc, #400]	@ (8002ce8 <HAL_RCC_OscConfig+0x76c>)
 8002b56:	f023 0304 	bic.w	r3, r3, #4
 8002b5a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d015      	beq.n	8002b90 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b64:	f7fe fb80 	bl	8001268 <HAL_GetTick>
 8002b68:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b6a:	e00a      	b.n	8002b82 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b6c:	f7fe fb7c 	bl	8001268 <HAL_GetTick>
 8002b70:	4602      	mov	r2, r0
 8002b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d901      	bls.n	8002b82 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	e14e      	b.n	8002e20 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b82:	4b59      	ldr	r3, [pc, #356]	@ (8002ce8 <HAL_RCC_OscConfig+0x76c>)
 8002b84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b86:	f003 0302 	and.w	r3, r3, #2
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d0ee      	beq.n	8002b6c <HAL_RCC_OscConfig+0x5f0>
 8002b8e:	e014      	b.n	8002bba <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b90:	f7fe fb6a 	bl	8001268 <HAL_GetTick>
 8002b94:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002b96:	e00a      	b.n	8002bae <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b98:	f7fe fb66 	bl	8001268 <HAL_GetTick>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d901      	bls.n	8002bae <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002baa:	2303      	movs	r3, #3
 8002bac:	e138      	b.n	8002e20 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002bae:	4b4e      	ldr	r3, [pc, #312]	@ (8002ce8 <HAL_RCC_OscConfig+0x76c>)
 8002bb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bb2:	f003 0302 	and.w	r3, r3, #2
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d1ee      	bne.n	8002b98 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	f000 812d 	beq.w	8002e1e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002bc4:	4b48      	ldr	r3, [pc, #288]	@ (8002ce8 <HAL_RCC_OscConfig+0x76c>)
 8002bc6:	691b      	ldr	r3, [r3, #16]
 8002bc8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002bcc:	2b18      	cmp	r3, #24
 8002bce:	f000 80bd 	beq.w	8002d4c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	f040 809e 	bne.w	8002d18 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bdc:	4b42      	ldr	r3, [pc, #264]	@ (8002ce8 <HAL_RCC_OscConfig+0x76c>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a41      	ldr	r2, [pc, #260]	@ (8002ce8 <HAL_RCC_OscConfig+0x76c>)
 8002be2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002be6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002be8:	f7fe fb3e 	bl	8001268 <HAL_GetTick>
 8002bec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002bee:	e008      	b.n	8002c02 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bf0:	f7fe fb3a 	bl	8001268 <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d901      	bls.n	8002c02 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	e10e      	b.n	8002e20 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c02:	4b39      	ldr	r3, [pc, #228]	@ (8002ce8 <HAL_RCC_OscConfig+0x76c>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d1f0      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c0e:	4b36      	ldr	r3, [pc, #216]	@ (8002ce8 <HAL_RCC_OscConfig+0x76c>)
 8002c10:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002c12:	4b37      	ldr	r3, [pc, #220]	@ (8002cf0 <HAL_RCC_OscConfig+0x774>)
 8002c14:	4013      	ands	r3, r2
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002c1e:	0112      	lsls	r2, r2, #4
 8002c20:	430a      	orrs	r2, r1
 8002c22:	4931      	ldr	r1, [pc, #196]	@ (8002ce8 <HAL_RCC_OscConfig+0x76c>)
 8002c24:	4313      	orrs	r3, r2
 8002c26:	628b      	str	r3, [r1, #40]	@ 0x28
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c2c:	3b01      	subs	r3, #1
 8002c2e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c36:	3b01      	subs	r3, #1
 8002c38:	025b      	lsls	r3, r3, #9
 8002c3a:	b29b      	uxth	r3, r3
 8002c3c:	431a      	orrs	r2, r3
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c42:	3b01      	subs	r3, #1
 8002c44:	041b      	lsls	r3, r3, #16
 8002c46:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002c4a:	431a      	orrs	r2, r3
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c50:	3b01      	subs	r3, #1
 8002c52:	061b      	lsls	r3, r3, #24
 8002c54:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002c58:	4923      	ldr	r1, [pc, #140]	@ (8002ce8 <HAL_RCC_OscConfig+0x76c>)
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002c5e:	4b22      	ldr	r3, [pc, #136]	@ (8002ce8 <HAL_RCC_OscConfig+0x76c>)
 8002c60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c62:	4a21      	ldr	r2, [pc, #132]	@ (8002ce8 <HAL_RCC_OscConfig+0x76c>)
 8002c64:	f023 0301 	bic.w	r3, r3, #1
 8002c68:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002c6a:	4b1f      	ldr	r3, [pc, #124]	@ (8002ce8 <HAL_RCC_OscConfig+0x76c>)
 8002c6c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002c6e:	4b21      	ldr	r3, [pc, #132]	@ (8002cf4 <HAL_RCC_OscConfig+0x778>)
 8002c70:	4013      	ands	r3, r2
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002c76:	00d2      	lsls	r2, r2, #3
 8002c78:	491b      	ldr	r1, [pc, #108]	@ (8002ce8 <HAL_RCC_OscConfig+0x76c>)
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002c7e:	4b1a      	ldr	r3, [pc, #104]	@ (8002ce8 <HAL_RCC_OscConfig+0x76c>)
 8002c80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c82:	f023 020c 	bic.w	r2, r3, #12
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c8a:	4917      	ldr	r1, [pc, #92]	@ (8002ce8 <HAL_RCC_OscConfig+0x76c>)
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002c90:	4b15      	ldr	r3, [pc, #84]	@ (8002ce8 <HAL_RCC_OscConfig+0x76c>)
 8002c92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c94:	f023 0202 	bic.w	r2, r3, #2
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c9c:	4912      	ldr	r1, [pc, #72]	@ (8002ce8 <HAL_RCC_OscConfig+0x76c>)
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002ca2:	4b11      	ldr	r3, [pc, #68]	@ (8002ce8 <HAL_RCC_OscConfig+0x76c>)
 8002ca4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ca6:	4a10      	ldr	r2, [pc, #64]	@ (8002ce8 <HAL_RCC_OscConfig+0x76c>)
 8002ca8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002cae:	4b0e      	ldr	r3, [pc, #56]	@ (8002ce8 <HAL_RCC_OscConfig+0x76c>)
 8002cb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cb2:	4a0d      	ldr	r2, [pc, #52]	@ (8002ce8 <HAL_RCC_OscConfig+0x76c>)
 8002cb4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002cb8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002cba:	4b0b      	ldr	r3, [pc, #44]	@ (8002ce8 <HAL_RCC_OscConfig+0x76c>)
 8002cbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cbe:	4a0a      	ldr	r2, [pc, #40]	@ (8002ce8 <HAL_RCC_OscConfig+0x76c>)
 8002cc0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002cc4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002cc6:	4b08      	ldr	r3, [pc, #32]	@ (8002ce8 <HAL_RCC_OscConfig+0x76c>)
 8002cc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cca:	4a07      	ldr	r2, [pc, #28]	@ (8002ce8 <HAL_RCC_OscConfig+0x76c>)
 8002ccc:	f043 0301 	orr.w	r3, r3, #1
 8002cd0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cd2:	4b05      	ldr	r3, [pc, #20]	@ (8002ce8 <HAL_RCC_OscConfig+0x76c>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a04      	ldr	r2, [pc, #16]	@ (8002ce8 <HAL_RCC_OscConfig+0x76c>)
 8002cd8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002cdc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cde:	f7fe fac3 	bl	8001268 <HAL_GetTick>
 8002ce2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002ce4:	e011      	b.n	8002d0a <HAL_RCC_OscConfig+0x78e>
 8002ce6:	bf00      	nop
 8002ce8:	58024400 	.word	0x58024400
 8002cec:	58024800 	.word	0x58024800
 8002cf0:	fffffc0c 	.word	0xfffffc0c
 8002cf4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cf8:	f7fe fab6 	bl	8001268 <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	2b02      	cmp	r3, #2
 8002d04:	d901      	bls.n	8002d0a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002d06:	2303      	movs	r3, #3
 8002d08:	e08a      	b.n	8002e20 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d0a:	4b47      	ldr	r3, [pc, #284]	@ (8002e28 <HAL_RCC_OscConfig+0x8ac>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d0f0      	beq.n	8002cf8 <HAL_RCC_OscConfig+0x77c>
 8002d16:	e082      	b.n	8002e1e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d18:	4b43      	ldr	r3, [pc, #268]	@ (8002e28 <HAL_RCC_OscConfig+0x8ac>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a42      	ldr	r2, [pc, #264]	@ (8002e28 <HAL_RCC_OscConfig+0x8ac>)
 8002d1e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002d22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d24:	f7fe faa0 	bl	8001268 <HAL_GetTick>
 8002d28:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d2a:	e008      	b.n	8002d3e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d2c:	f7fe fa9c 	bl	8001268 <HAL_GetTick>
 8002d30:	4602      	mov	r2, r0
 8002d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	2b02      	cmp	r3, #2
 8002d38:	d901      	bls.n	8002d3e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e070      	b.n	8002e20 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d3e:	4b3a      	ldr	r3, [pc, #232]	@ (8002e28 <HAL_RCC_OscConfig+0x8ac>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d1f0      	bne.n	8002d2c <HAL_RCC_OscConfig+0x7b0>
 8002d4a:	e068      	b.n	8002e1e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002d4c:	4b36      	ldr	r3, [pc, #216]	@ (8002e28 <HAL_RCC_OscConfig+0x8ac>)
 8002d4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d50:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002d52:	4b35      	ldr	r3, [pc, #212]	@ (8002e28 <HAL_RCC_OscConfig+0x8ac>)
 8002d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d56:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d031      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	f003 0203 	and.w	r2, r3, #3
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d12a      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	091b      	lsrs	r3, r3, #4
 8002d72:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d122      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d88:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d11a      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	0a5b      	lsrs	r3, r3, #9
 8002d92:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d9a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d111      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	0c1b      	lsrs	r3, r3, #16
 8002da4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dac:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002dae:	429a      	cmp	r2, r3
 8002db0:	d108      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	0e1b      	lsrs	r3, r3, #24
 8002db6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dbe:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d001      	beq.n	8002dc8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e02b      	b.n	8002e20 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002dc8:	4b17      	ldr	r3, [pc, #92]	@ (8002e28 <HAL_RCC_OscConfig+0x8ac>)
 8002dca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002dcc:	08db      	lsrs	r3, r3, #3
 8002dce:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002dd2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002dd8:	693a      	ldr	r2, [r7, #16]
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d01f      	beq.n	8002e1e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002dde:	4b12      	ldr	r3, [pc, #72]	@ (8002e28 <HAL_RCC_OscConfig+0x8ac>)
 8002de0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002de2:	4a11      	ldr	r2, [pc, #68]	@ (8002e28 <HAL_RCC_OscConfig+0x8ac>)
 8002de4:	f023 0301 	bic.w	r3, r3, #1
 8002de8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002dea:	f7fe fa3d 	bl	8001268 <HAL_GetTick>
 8002dee:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002df0:	bf00      	nop
 8002df2:	f7fe fa39 	bl	8001268 <HAL_GetTick>
 8002df6:	4602      	mov	r2, r0
 8002df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d0f9      	beq.n	8002df2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002dfe:	4b0a      	ldr	r3, [pc, #40]	@ (8002e28 <HAL_RCC_OscConfig+0x8ac>)
 8002e00:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002e02:	4b0a      	ldr	r3, [pc, #40]	@ (8002e2c <HAL_RCC_OscConfig+0x8b0>)
 8002e04:	4013      	ands	r3, r2
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002e0a:	00d2      	lsls	r2, r2, #3
 8002e0c:	4906      	ldr	r1, [pc, #24]	@ (8002e28 <HAL_RCC_OscConfig+0x8ac>)
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002e12:	4b05      	ldr	r3, [pc, #20]	@ (8002e28 <HAL_RCC_OscConfig+0x8ac>)
 8002e14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e16:	4a04      	ldr	r2, [pc, #16]	@ (8002e28 <HAL_RCC_OscConfig+0x8ac>)
 8002e18:	f043 0301 	orr.w	r3, r3, #1
 8002e1c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002e1e:	2300      	movs	r3, #0
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	3730      	adds	r7, #48	@ 0x30
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	58024400 	.word	0x58024400
 8002e2c:	ffff0007 	.word	0xffff0007

08002e30 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b086      	sub	sp, #24
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d101      	bne.n	8002e44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e19c      	b.n	800317e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e44:	4b8a      	ldr	r3, [pc, #552]	@ (8003070 <HAL_RCC_ClockConfig+0x240>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 030f 	and.w	r3, r3, #15
 8002e4c:	683a      	ldr	r2, [r7, #0]
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d910      	bls.n	8002e74 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e52:	4b87      	ldr	r3, [pc, #540]	@ (8003070 <HAL_RCC_ClockConfig+0x240>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f023 020f 	bic.w	r2, r3, #15
 8002e5a:	4985      	ldr	r1, [pc, #532]	@ (8003070 <HAL_RCC_ClockConfig+0x240>)
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e62:	4b83      	ldr	r3, [pc, #524]	@ (8003070 <HAL_RCC_ClockConfig+0x240>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 030f 	and.w	r3, r3, #15
 8002e6a:	683a      	ldr	r2, [r7, #0]
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d001      	beq.n	8002e74 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e184      	b.n	800317e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0304 	and.w	r3, r3, #4
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d010      	beq.n	8002ea2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	691a      	ldr	r2, [r3, #16]
 8002e84:	4b7b      	ldr	r3, [pc, #492]	@ (8003074 <HAL_RCC_ClockConfig+0x244>)
 8002e86:	699b      	ldr	r3, [r3, #24]
 8002e88:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d908      	bls.n	8002ea2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002e90:	4b78      	ldr	r3, [pc, #480]	@ (8003074 <HAL_RCC_ClockConfig+0x244>)
 8002e92:	699b      	ldr	r3, [r3, #24]
 8002e94:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	691b      	ldr	r3, [r3, #16]
 8002e9c:	4975      	ldr	r1, [pc, #468]	@ (8003074 <HAL_RCC_ClockConfig+0x244>)
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0308 	and.w	r3, r3, #8
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d010      	beq.n	8002ed0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	695a      	ldr	r2, [r3, #20]
 8002eb2:	4b70      	ldr	r3, [pc, #448]	@ (8003074 <HAL_RCC_ClockConfig+0x244>)
 8002eb4:	69db      	ldr	r3, [r3, #28]
 8002eb6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d908      	bls.n	8002ed0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002ebe:	4b6d      	ldr	r3, [pc, #436]	@ (8003074 <HAL_RCC_ClockConfig+0x244>)
 8002ec0:	69db      	ldr	r3, [r3, #28]
 8002ec2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	695b      	ldr	r3, [r3, #20]
 8002eca:	496a      	ldr	r1, [pc, #424]	@ (8003074 <HAL_RCC_ClockConfig+0x244>)
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 0310 	and.w	r3, r3, #16
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d010      	beq.n	8002efe <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	699a      	ldr	r2, [r3, #24]
 8002ee0:	4b64      	ldr	r3, [pc, #400]	@ (8003074 <HAL_RCC_ClockConfig+0x244>)
 8002ee2:	69db      	ldr	r3, [r3, #28]
 8002ee4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d908      	bls.n	8002efe <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002eec:	4b61      	ldr	r3, [pc, #388]	@ (8003074 <HAL_RCC_ClockConfig+0x244>)
 8002eee:	69db      	ldr	r3, [r3, #28]
 8002ef0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	699b      	ldr	r3, [r3, #24]
 8002ef8:	495e      	ldr	r1, [pc, #376]	@ (8003074 <HAL_RCC_ClockConfig+0x244>)
 8002efa:	4313      	orrs	r3, r2
 8002efc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0320 	and.w	r3, r3, #32
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d010      	beq.n	8002f2c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	69da      	ldr	r2, [r3, #28]
 8002f0e:	4b59      	ldr	r3, [pc, #356]	@ (8003074 <HAL_RCC_ClockConfig+0x244>)
 8002f10:	6a1b      	ldr	r3, [r3, #32]
 8002f12:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d908      	bls.n	8002f2c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002f1a:	4b56      	ldr	r3, [pc, #344]	@ (8003074 <HAL_RCC_ClockConfig+0x244>)
 8002f1c:	6a1b      	ldr	r3, [r3, #32]
 8002f1e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	69db      	ldr	r3, [r3, #28]
 8002f26:	4953      	ldr	r1, [pc, #332]	@ (8003074 <HAL_RCC_ClockConfig+0x244>)
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 0302 	and.w	r3, r3, #2
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d010      	beq.n	8002f5a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	68da      	ldr	r2, [r3, #12]
 8002f3c:	4b4d      	ldr	r3, [pc, #308]	@ (8003074 <HAL_RCC_ClockConfig+0x244>)
 8002f3e:	699b      	ldr	r3, [r3, #24]
 8002f40:	f003 030f 	and.w	r3, r3, #15
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d908      	bls.n	8002f5a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f48:	4b4a      	ldr	r3, [pc, #296]	@ (8003074 <HAL_RCC_ClockConfig+0x244>)
 8002f4a:	699b      	ldr	r3, [r3, #24]
 8002f4c:	f023 020f 	bic.w	r2, r3, #15
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	4947      	ldr	r1, [pc, #284]	@ (8003074 <HAL_RCC_ClockConfig+0x244>)
 8002f56:	4313      	orrs	r3, r2
 8002f58:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0301 	and.w	r3, r3, #1
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d055      	beq.n	8003012 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002f66:	4b43      	ldr	r3, [pc, #268]	@ (8003074 <HAL_RCC_ClockConfig+0x244>)
 8002f68:	699b      	ldr	r3, [r3, #24]
 8002f6a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	4940      	ldr	r1, [pc, #256]	@ (8003074 <HAL_RCC_ClockConfig+0x244>)
 8002f74:	4313      	orrs	r3, r2
 8002f76:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	2b02      	cmp	r3, #2
 8002f7e:	d107      	bne.n	8002f90 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002f80:	4b3c      	ldr	r3, [pc, #240]	@ (8003074 <HAL_RCC_ClockConfig+0x244>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d121      	bne.n	8002fd0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e0f6      	b.n	800317e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	2b03      	cmp	r3, #3
 8002f96:	d107      	bne.n	8002fa8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002f98:	4b36      	ldr	r3, [pc, #216]	@ (8003074 <HAL_RCC_ClockConfig+0x244>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d115      	bne.n	8002fd0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e0ea      	b.n	800317e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d107      	bne.n	8002fc0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002fb0:	4b30      	ldr	r3, [pc, #192]	@ (8003074 <HAL_RCC_ClockConfig+0x244>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d109      	bne.n	8002fd0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e0de      	b.n	800317e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002fc0:	4b2c      	ldr	r3, [pc, #176]	@ (8003074 <HAL_RCC_ClockConfig+0x244>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 0304 	and.w	r3, r3, #4
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d101      	bne.n	8002fd0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e0d6      	b.n	800317e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002fd0:	4b28      	ldr	r3, [pc, #160]	@ (8003074 <HAL_RCC_ClockConfig+0x244>)
 8002fd2:	691b      	ldr	r3, [r3, #16]
 8002fd4:	f023 0207 	bic.w	r2, r3, #7
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	4925      	ldr	r1, [pc, #148]	@ (8003074 <HAL_RCC_ClockConfig+0x244>)
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fe2:	f7fe f941 	bl	8001268 <HAL_GetTick>
 8002fe6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fe8:	e00a      	b.n	8003000 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fea:	f7fe f93d 	bl	8001268 <HAL_GetTick>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	1ad3      	subs	r3, r2, r3
 8002ff4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d901      	bls.n	8003000 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002ffc:	2303      	movs	r3, #3
 8002ffe:	e0be      	b.n	800317e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003000:	4b1c      	ldr	r3, [pc, #112]	@ (8003074 <HAL_RCC_ClockConfig+0x244>)
 8003002:	691b      	ldr	r3, [r3, #16]
 8003004:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	00db      	lsls	r3, r3, #3
 800300e:	429a      	cmp	r2, r3
 8003010:	d1eb      	bne.n	8002fea <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 0302 	and.w	r3, r3, #2
 800301a:	2b00      	cmp	r3, #0
 800301c:	d010      	beq.n	8003040 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	68da      	ldr	r2, [r3, #12]
 8003022:	4b14      	ldr	r3, [pc, #80]	@ (8003074 <HAL_RCC_ClockConfig+0x244>)
 8003024:	699b      	ldr	r3, [r3, #24]
 8003026:	f003 030f 	and.w	r3, r3, #15
 800302a:	429a      	cmp	r2, r3
 800302c:	d208      	bcs.n	8003040 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800302e:	4b11      	ldr	r3, [pc, #68]	@ (8003074 <HAL_RCC_ClockConfig+0x244>)
 8003030:	699b      	ldr	r3, [r3, #24]
 8003032:	f023 020f 	bic.w	r2, r3, #15
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	490e      	ldr	r1, [pc, #56]	@ (8003074 <HAL_RCC_ClockConfig+0x244>)
 800303c:	4313      	orrs	r3, r2
 800303e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003040:	4b0b      	ldr	r3, [pc, #44]	@ (8003070 <HAL_RCC_ClockConfig+0x240>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 030f 	and.w	r3, r3, #15
 8003048:	683a      	ldr	r2, [r7, #0]
 800304a:	429a      	cmp	r2, r3
 800304c:	d214      	bcs.n	8003078 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800304e:	4b08      	ldr	r3, [pc, #32]	@ (8003070 <HAL_RCC_ClockConfig+0x240>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f023 020f 	bic.w	r2, r3, #15
 8003056:	4906      	ldr	r1, [pc, #24]	@ (8003070 <HAL_RCC_ClockConfig+0x240>)
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	4313      	orrs	r3, r2
 800305c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800305e:	4b04      	ldr	r3, [pc, #16]	@ (8003070 <HAL_RCC_ClockConfig+0x240>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 030f 	and.w	r3, r3, #15
 8003066:	683a      	ldr	r2, [r7, #0]
 8003068:	429a      	cmp	r2, r3
 800306a:	d005      	beq.n	8003078 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	e086      	b.n	800317e <HAL_RCC_ClockConfig+0x34e>
 8003070:	52002000 	.word	0x52002000
 8003074:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0304 	and.w	r3, r3, #4
 8003080:	2b00      	cmp	r3, #0
 8003082:	d010      	beq.n	80030a6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	691a      	ldr	r2, [r3, #16]
 8003088:	4b3f      	ldr	r3, [pc, #252]	@ (8003188 <HAL_RCC_ClockConfig+0x358>)
 800308a:	699b      	ldr	r3, [r3, #24]
 800308c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003090:	429a      	cmp	r2, r3
 8003092:	d208      	bcs.n	80030a6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003094:	4b3c      	ldr	r3, [pc, #240]	@ (8003188 <HAL_RCC_ClockConfig+0x358>)
 8003096:	699b      	ldr	r3, [r3, #24]
 8003098:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	691b      	ldr	r3, [r3, #16]
 80030a0:	4939      	ldr	r1, [pc, #228]	@ (8003188 <HAL_RCC_ClockConfig+0x358>)
 80030a2:	4313      	orrs	r3, r2
 80030a4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 0308 	and.w	r3, r3, #8
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d010      	beq.n	80030d4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	695a      	ldr	r2, [r3, #20]
 80030b6:	4b34      	ldr	r3, [pc, #208]	@ (8003188 <HAL_RCC_ClockConfig+0x358>)
 80030b8:	69db      	ldr	r3, [r3, #28]
 80030ba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80030be:	429a      	cmp	r2, r3
 80030c0:	d208      	bcs.n	80030d4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80030c2:	4b31      	ldr	r3, [pc, #196]	@ (8003188 <HAL_RCC_ClockConfig+0x358>)
 80030c4:	69db      	ldr	r3, [r3, #28]
 80030c6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	695b      	ldr	r3, [r3, #20]
 80030ce:	492e      	ldr	r1, [pc, #184]	@ (8003188 <HAL_RCC_ClockConfig+0x358>)
 80030d0:	4313      	orrs	r3, r2
 80030d2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0310 	and.w	r3, r3, #16
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d010      	beq.n	8003102 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	699a      	ldr	r2, [r3, #24]
 80030e4:	4b28      	ldr	r3, [pc, #160]	@ (8003188 <HAL_RCC_ClockConfig+0x358>)
 80030e6:	69db      	ldr	r3, [r3, #28]
 80030e8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d208      	bcs.n	8003102 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80030f0:	4b25      	ldr	r3, [pc, #148]	@ (8003188 <HAL_RCC_ClockConfig+0x358>)
 80030f2:	69db      	ldr	r3, [r3, #28]
 80030f4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	699b      	ldr	r3, [r3, #24]
 80030fc:	4922      	ldr	r1, [pc, #136]	@ (8003188 <HAL_RCC_ClockConfig+0x358>)
 80030fe:	4313      	orrs	r3, r2
 8003100:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 0320 	and.w	r3, r3, #32
 800310a:	2b00      	cmp	r3, #0
 800310c:	d010      	beq.n	8003130 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	69da      	ldr	r2, [r3, #28]
 8003112:	4b1d      	ldr	r3, [pc, #116]	@ (8003188 <HAL_RCC_ClockConfig+0x358>)
 8003114:	6a1b      	ldr	r3, [r3, #32]
 8003116:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800311a:	429a      	cmp	r2, r3
 800311c:	d208      	bcs.n	8003130 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800311e:	4b1a      	ldr	r3, [pc, #104]	@ (8003188 <HAL_RCC_ClockConfig+0x358>)
 8003120:	6a1b      	ldr	r3, [r3, #32]
 8003122:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	69db      	ldr	r3, [r3, #28]
 800312a:	4917      	ldr	r1, [pc, #92]	@ (8003188 <HAL_RCC_ClockConfig+0x358>)
 800312c:	4313      	orrs	r3, r2
 800312e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003130:	f000 f834 	bl	800319c <HAL_RCC_GetSysClockFreq>
 8003134:	4602      	mov	r2, r0
 8003136:	4b14      	ldr	r3, [pc, #80]	@ (8003188 <HAL_RCC_ClockConfig+0x358>)
 8003138:	699b      	ldr	r3, [r3, #24]
 800313a:	0a1b      	lsrs	r3, r3, #8
 800313c:	f003 030f 	and.w	r3, r3, #15
 8003140:	4912      	ldr	r1, [pc, #72]	@ (800318c <HAL_RCC_ClockConfig+0x35c>)
 8003142:	5ccb      	ldrb	r3, [r1, r3]
 8003144:	f003 031f 	and.w	r3, r3, #31
 8003148:	fa22 f303 	lsr.w	r3, r2, r3
 800314c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800314e:	4b0e      	ldr	r3, [pc, #56]	@ (8003188 <HAL_RCC_ClockConfig+0x358>)
 8003150:	699b      	ldr	r3, [r3, #24]
 8003152:	f003 030f 	and.w	r3, r3, #15
 8003156:	4a0d      	ldr	r2, [pc, #52]	@ (800318c <HAL_RCC_ClockConfig+0x35c>)
 8003158:	5cd3      	ldrb	r3, [r2, r3]
 800315a:	f003 031f 	and.w	r3, r3, #31
 800315e:	693a      	ldr	r2, [r7, #16]
 8003160:	fa22 f303 	lsr.w	r3, r2, r3
 8003164:	4a0a      	ldr	r2, [pc, #40]	@ (8003190 <HAL_RCC_ClockConfig+0x360>)
 8003166:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003168:	4a0a      	ldr	r2, [pc, #40]	@ (8003194 <HAL_RCC_ClockConfig+0x364>)
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800316e:	4b0a      	ldr	r3, [pc, #40]	@ (8003198 <HAL_RCC_ClockConfig+0x368>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4618      	mov	r0, r3
 8003174:	f7fe f82e 	bl	80011d4 <HAL_InitTick>
 8003178:	4603      	mov	r3, r0
 800317a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800317c:	7bfb      	ldrb	r3, [r7, #15]
}
 800317e:	4618      	mov	r0, r3
 8003180:	3718      	adds	r7, #24
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}
 8003186:	bf00      	nop
 8003188:	58024400 	.word	0x58024400
 800318c:	08007404 	.word	0x08007404
 8003190:	24000004 	.word	0x24000004
 8003194:	24000000 	.word	0x24000000
 8003198:	24000008 	.word	0x24000008

0800319c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800319c:	b480      	push	{r7}
 800319e:	b089      	sub	sp, #36	@ 0x24
 80031a0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031a2:	4bb3      	ldr	r3, [pc, #716]	@ (8003470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031a4:	691b      	ldr	r3, [r3, #16]
 80031a6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80031aa:	2b18      	cmp	r3, #24
 80031ac:	f200 8155 	bhi.w	800345a <HAL_RCC_GetSysClockFreq+0x2be>
 80031b0:	a201      	add	r2, pc, #4	@ (adr r2, 80031b8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80031b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031b6:	bf00      	nop
 80031b8:	0800321d 	.word	0x0800321d
 80031bc:	0800345b 	.word	0x0800345b
 80031c0:	0800345b 	.word	0x0800345b
 80031c4:	0800345b 	.word	0x0800345b
 80031c8:	0800345b 	.word	0x0800345b
 80031cc:	0800345b 	.word	0x0800345b
 80031d0:	0800345b 	.word	0x0800345b
 80031d4:	0800345b 	.word	0x0800345b
 80031d8:	08003243 	.word	0x08003243
 80031dc:	0800345b 	.word	0x0800345b
 80031e0:	0800345b 	.word	0x0800345b
 80031e4:	0800345b 	.word	0x0800345b
 80031e8:	0800345b 	.word	0x0800345b
 80031ec:	0800345b 	.word	0x0800345b
 80031f0:	0800345b 	.word	0x0800345b
 80031f4:	0800345b 	.word	0x0800345b
 80031f8:	08003249 	.word	0x08003249
 80031fc:	0800345b 	.word	0x0800345b
 8003200:	0800345b 	.word	0x0800345b
 8003204:	0800345b 	.word	0x0800345b
 8003208:	0800345b 	.word	0x0800345b
 800320c:	0800345b 	.word	0x0800345b
 8003210:	0800345b 	.word	0x0800345b
 8003214:	0800345b 	.word	0x0800345b
 8003218:	0800324f 	.word	0x0800324f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800321c:	4b94      	ldr	r3, [pc, #592]	@ (8003470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 0320 	and.w	r3, r3, #32
 8003224:	2b00      	cmp	r3, #0
 8003226:	d009      	beq.n	800323c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003228:	4b91      	ldr	r3, [pc, #580]	@ (8003470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	08db      	lsrs	r3, r3, #3
 800322e:	f003 0303 	and.w	r3, r3, #3
 8003232:	4a90      	ldr	r2, [pc, #576]	@ (8003474 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003234:	fa22 f303 	lsr.w	r3, r2, r3
 8003238:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800323a:	e111      	b.n	8003460 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800323c:	4b8d      	ldr	r3, [pc, #564]	@ (8003474 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800323e:	61bb      	str	r3, [r7, #24]
      break;
 8003240:	e10e      	b.n	8003460 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003242:	4b8d      	ldr	r3, [pc, #564]	@ (8003478 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003244:	61bb      	str	r3, [r7, #24]
      break;
 8003246:	e10b      	b.n	8003460 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003248:	4b8c      	ldr	r3, [pc, #560]	@ (800347c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800324a:	61bb      	str	r3, [r7, #24]
      break;
 800324c:	e108      	b.n	8003460 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800324e:	4b88      	ldr	r3, [pc, #544]	@ (8003470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003250:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003252:	f003 0303 	and.w	r3, r3, #3
 8003256:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003258:	4b85      	ldr	r3, [pc, #532]	@ (8003470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800325a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800325c:	091b      	lsrs	r3, r3, #4
 800325e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003262:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003264:	4b82      	ldr	r3, [pc, #520]	@ (8003470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003266:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003268:	f003 0301 	and.w	r3, r3, #1
 800326c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800326e:	4b80      	ldr	r3, [pc, #512]	@ (8003470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003270:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003272:	08db      	lsrs	r3, r3, #3
 8003274:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003278:	68fa      	ldr	r2, [r7, #12]
 800327a:	fb02 f303 	mul.w	r3, r2, r3
 800327e:	ee07 3a90 	vmov	s15, r3
 8003282:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003286:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	2b00      	cmp	r3, #0
 800328e:	f000 80e1 	beq.w	8003454 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	2b02      	cmp	r3, #2
 8003296:	f000 8083 	beq.w	80033a0 <HAL_RCC_GetSysClockFreq+0x204>
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	2b02      	cmp	r3, #2
 800329e:	f200 80a1 	bhi.w	80033e4 <HAL_RCC_GetSysClockFreq+0x248>
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d003      	beq.n	80032b0 <HAL_RCC_GetSysClockFreq+0x114>
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d056      	beq.n	800335c <HAL_RCC_GetSysClockFreq+0x1c0>
 80032ae:	e099      	b.n	80033e4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80032b0:	4b6f      	ldr	r3, [pc, #444]	@ (8003470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 0320 	and.w	r3, r3, #32
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d02d      	beq.n	8003318 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80032bc:	4b6c      	ldr	r3, [pc, #432]	@ (8003470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	08db      	lsrs	r3, r3, #3
 80032c2:	f003 0303 	and.w	r3, r3, #3
 80032c6:	4a6b      	ldr	r2, [pc, #428]	@ (8003474 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80032c8:	fa22 f303 	lsr.w	r3, r2, r3
 80032cc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	ee07 3a90 	vmov	s15, r3
 80032d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	ee07 3a90 	vmov	s15, r3
 80032de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032e6:	4b62      	ldr	r3, [pc, #392]	@ (8003470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032ee:	ee07 3a90 	vmov	s15, r3
 80032f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80032fa:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003480 <HAL_RCC_GetSysClockFreq+0x2e4>
 80032fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003302:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003306:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800330a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800330e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003312:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003316:	e087      	b.n	8003428 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	ee07 3a90 	vmov	s15, r3
 800331e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003322:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003484 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003326:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800332a:	4b51      	ldr	r3, [pc, #324]	@ (8003470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800332c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800332e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003332:	ee07 3a90 	vmov	s15, r3
 8003336:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800333a:	ed97 6a02 	vldr	s12, [r7, #8]
 800333e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003480 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003342:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003346:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800334a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800334e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003352:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003356:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800335a:	e065      	b.n	8003428 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	ee07 3a90 	vmov	s15, r3
 8003362:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003366:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003488 <HAL_RCC_GetSysClockFreq+0x2ec>
 800336a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800336e:	4b40      	ldr	r3, [pc, #256]	@ (8003470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003372:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003376:	ee07 3a90 	vmov	s15, r3
 800337a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800337e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003382:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003480 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003386:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800338a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800338e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003392:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003396:	ee67 7a27 	vmul.f32	s15, s14, s15
 800339a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800339e:	e043      	b.n	8003428 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	ee07 3a90 	vmov	s15, r3
 80033a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033aa:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800348c <HAL_RCC_GetSysClockFreq+0x2f0>
 80033ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033b2:	4b2f      	ldr	r3, [pc, #188]	@ (8003470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033ba:	ee07 3a90 	vmov	s15, r3
 80033be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80033c6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003480 <HAL_RCC_GetSysClockFreq+0x2e4>
 80033ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80033d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033de:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80033e2:	e021      	b.n	8003428 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	ee07 3a90 	vmov	s15, r3
 80033ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033ee:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003488 <HAL_RCC_GetSysClockFreq+0x2ec>
 80033f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033f6:	4b1e      	ldr	r3, [pc, #120]	@ (8003470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033fe:	ee07 3a90 	vmov	s15, r3
 8003402:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003406:	ed97 6a02 	vldr	s12, [r7, #8]
 800340a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003480 <HAL_RCC_GetSysClockFreq+0x2e4>
 800340e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003412:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003416:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800341a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800341e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003422:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003426:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003428:	4b11      	ldr	r3, [pc, #68]	@ (8003470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800342a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800342c:	0a5b      	lsrs	r3, r3, #9
 800342e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003432:	3301      	adds	r3, #1
 8003434:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	ee07 3a90 	vmov	s15, r3
 800343c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003440:	edd7 6a07 	vldr	s13, [r7, #28]
 8003444:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003448:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800344c:	ee17 3a90 	vmov	r3, s15
 8003450:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003452:	e005      	b.n	8003460 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003454:	2300      	movs	r3, #0
 8003456:	61bb      	str	r3, [r7, #24]
      break;
 8003458:	e002      	b.n	8003460 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800345a:	4b07      	ldr	r3, [pc, #28]	@ (8003478 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800345c:	61bb      	str	r3, [r7, #24]
      break;
 800345e:	bf00      	nop
  }

  return sysclockfreq;
 8003460:	69bb      	ldr	r3, [r7, #24]
}
 8003462:	4618      	mov	r0, r3
 8003464:	3724      	adds	r7, #36	@ 0x24
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr
 800346e:	bf00      	nop
 8003470:	58024400 	.word	0x58024400
 8003474:	03d09000 	.word	0x03d09000
 8003478:	003d0900 	.word	0x003d0900
 800347c:	007a1200 	.word	0x007a1200
 8003480:	46000000 	.word	0x46000000
 8003484:	4c742400 	.word	0x4c742400
 8003488:	4a742400 	.word	0x4a742400
 800348c:	4af42400 	.word	0x4af42400

08003490 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b082      	sub	sp, #8
 8003494:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003496:	f7ff fe81 	bl	800319c <HAL_RCC_GetSysClockFreq>
 800349a:	4602      	mov	r2, r0
 800349c:	4b10      	ldr	r3, [pc, #64]	@ (80034e0 <HAL_RCC_GetHCLKFreq+0x50>)
 800349e:	699b      	ldr	r3, [r3, #24]
 80034a0:	0a1b      	lsrs	r3, r3, #8
 80034a2:	f003 030f 	and.w	r3, r3, #15
 80034a6:	490f      	ldr	r1, [pc, #60]	@ (80034e4 <HAL_RCC_GetHCLKFreq+0x54>)
 80034a8:	5ccb      	ldrb	r3, [r1, r3]
 80034aa:	f003 031f 	and.w	r3, r3, #31
 80034ae:	fa22 f303 	lsr.w	r3, r2, r3
 80034b2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80034b4:	4b0a      	ldr	r3, [pc, #40]	@ (80034e0 <HAL_RCC_GetHCLKFreq+0x50>)
 80034b6:	699b      	ldr	r3, [r3, #24]
 80034b8:	f003 030f 	and.w	r3, r3, #15
 80034bc:	4a09      	ldr	r2, [pc, #36]	@ (80034e4 <HAL_RCC_GetHCLKFreq+0x54>)
 80034be:	5cd3      	ldrb	r3, [r2, r3]
 80034c0:	f003 031f 	and.w	r3, r3, #31
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	fa22 f303 	lsr.w	r3, r2, r3
 80034ca:	4a07      	ldr	r2, [pc, #28]	@ (80034e8 <HAL_RCC_GetHCLKFreq+0x58>)
 80034cc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80034ce:	4a07      	ldr	r2, [pc, #28]	@ (80034ec <HAL_RCC_GetHCLKFreq+0x5c>)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80034d4:	4b04      	ldr	r3, [pc, #16]	@ (80034e8 <HAL_RCC_GetHCLKFreq+0x58>)
 80034d6:	681b      	ldr	r3, [r3, #0]
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3708      	adds	r7, #8
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	58024400 	.word	0x58024400
 80034e4:	08007404 	.word	0x08007404
 80034e8:	24000004 	.word	0x24000004
 80034ec:	24000000 	.word	0x24000000

080034f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80034f4:	f7ff ffcc 	bl	8003490 <HAL_RCC_GetHCLKFreq>
 80034f8:	4602      	mov	r2, r0
 80034fa:	4b06      	ldr	r3, [pc, #24]	@ (8003514 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034fc:	69db      	ldr	r3, [r3, #28]
 80034fe:	091b      	lsrs	r3, r3, #4
 8003500:	f003 0307 	and.w	r3, r3, #7
 8003504:	4904      	ldr	r1, [pc, #16]	@ (8003518 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003506:	5ccb      	ldrb	r3, [r1, r3]
 8003508:	f003 031f 	and.w	r3, r3, #31
 800350c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003510:	4618      	mov	r0, r3
 8003512:	bd80      	pop	{r7, pc}
 8003514:	58024400 	.word	0x58024400
 8003518:	08007404 	.word	0x08007404

0800351c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003520:	f7ff ffb6 	bl	8003490 <HAL_RCC_GetHCLKFreq>
 8003524:	4602      	mov	r2, r0
 8003526:	4b06      	ldr	r3, [pc, #24]	@ (8003540 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003528:	69db      	ldr	r3, [r3, #28]
 800352a:	0a1b      	lsrs	r3, r3, #8
 800352c:	f003 0307 	and.w	r3, r3, #7
 8003530:	4904      	ldr	r1, [pc, #16]	@ (8003544 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003532:	5ccb      	ldrb	r3, [r1, r3]
 8003534:	f003 031f 	and.w	r3, r3, #31
 8003538:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800353c:	4618      	mov	r0, r3
 800353e:	bd80      	pop	{r7, pc}
 8003540:	58024400 	.word	0x58024400
 8003544:	08007404 	.word	0x08007404

08003548 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003548:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800354c:	b0ca      	sub	sp, #296	@ 0x128
 800354e:	af00      	add	r7, sp, #0
 8003550:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003554:	2300      	movs	r3, #0
 8003556:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800355a:	2300      	movs	r3, #0
 800355c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003560:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003568:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800356c:	2500      	movs	r5, #0
 800356e:	ea54 0305 	orrs.w	r3, r4, r5
 8003572:	d049      	beq.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003574:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003578:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800357a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800357e:	d02f      	beq.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003580:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003584:	d828      	bhi.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003586:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800358a:	d01a      	beq.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800358c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003590:	d822      	bhi.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003592:	2b00      	cmp	r3, #0
 8003594:	d003      	beq.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003596:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800359a:	d007      	beq.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x64>
 800359c:	e01c      	b.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800359e:	4bb8      	ldr	r3, [pc, #736]	@ (8003880 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035a2:	4ab7      	ldr	r2, [pc, #732]	@ (8003880 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80035aa:	e01a      	b.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80035ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035b0:	3308      	adds	r3, #8
 80035b2:	2102      	movs	r1, #2
 80035b4:	4618      	mov	r0, r3
 80035b6:	f001 fc8f 	bl	8004ed8 <RCCEx_PLL2_Config>
 80035ba:	4603      	mov	r3, r0
 80035bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80035c0:	e00f      	b.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80035c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035c6:	3328      	adds	r3, #40	@ 0x28
 80035c8:	2102      	movs	r1, #2
 80035ca:	4618      	mov	r0, r3
 80035cc:	f001 fd36 	bl	800503c <RCCEx_PLL3_Config>
 80035d0:	4603      	mov	r3, r0
 80035d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80035d6:	e004      	b.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80035de:	e000      	b.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80035e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d10a      	bne.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80035ea:	4ba5      	ldr	r3, [pc, #660]	@ (8003880 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035ee:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80035f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035f6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80035f8:	4aa1      	ldr	r2, [pc, #644]	@ (8003880 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035fa:	430b      	orrs	r3, r1
 80035fc:	6513      	str	r3, [r2, #80]	@ 0x50
 80035fe:	e003      	b.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003600:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003604:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003608:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800360c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003610:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003614:	f04f 0900 	mov.w	r9, #0
 8003618:	ea58 0309 	orrs.w	r3, r8, r9
 800361c:	d047      	beq.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800361e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003622:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003624:	2b04      	cmp	r3, #4
 8003626:	d82a      	bhi.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003628:	a201      	add	r2, pc, #4	@ (adr r2, 8003630 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800362a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800362e:	bf00      	nop
 8003630:	08003645 	.word	0x08003645
 8003634:	08003653 	.word	0x08003653
 8003638:	08003669 	.word	0x08003669
 800363c:	08003687 	.word	0x08003687
 8003640:	08003687 	.word	0x08003687
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003644:	4b8e      	ldr	r3, [pc, #568]	@ (8003880 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003646:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003648:	4a8d      	ldr	r2, [pc, #564]	@ (8003880 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800364a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800364e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003650:	e01a      	b.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003652:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003656:	3308      	adds	r3, #8
 8003658:	2100      	movs	r1, #0
 800365a:	4618      	mov	r0, r3
 800365c:	f001 fc3c 	bl	8004ed8 <RCCEx_PLL2_Config>
 8003660:	4603      	mov	r3, r0
 8003662:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003666:	e00f      	b.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003668:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800366c:	3328      	adds	r3, #40	@ 0x28
 800366e:	2100      	movs	r1, #0
 8003670:	4618      	mov	r0, r3
 8003672:	f001 fce3 	bl	800503c <RCCEx_PLL3_Config>
 8003676:	4603      	mov	r3, r0
 8003678:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800367c:	e004      	b.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003684:	e000      	b.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003686:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003688:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800368c:	2b00      	cmp	r3, #0
 800368e:	d10a      	bne.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003690:	4b7b      	ldr	r3, [pc, #492]	@ (8003880 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003692:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003694:	f023 0107 	bic.w	r1, r3, #7
 8003698:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800369c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800369e:	4a78      	ldr	r2, [pc, #480]	@ (8003880 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036a0:	430b      	orrs	r3, r1
 80036a2:	6513      	str	r3, [r2, #80]	@ 0x50
 80036a4:	e003      	b.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80036ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036b6:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80036ba:	f04f 0b00 	mov.w	fp, #0
 80036be:	ea5a 030b 	orrs.w	r3, sl, fp
 80036c2:	d04c      	beq.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80036c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80036ce:	d030      	beq.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80036d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80036d4:	d829      	bhi.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80036d6:	2bc0      	cmp	r3, #192	@ 0xc0
 80036d8:	d02d      	beq.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80036da:	2bc0      	cmp	r3, #192	@ 0xc0
 80036dc:	d825      	bhi.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80036de:	2b80      	cmp	r3, #128	@ 0x80
 80036e0:	d018      	beq.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80036e2:	2b80      	cmp	r3, #128	@ 0x80
 80036e4:	d821      	bhi.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d002      	beq.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80036ea:	2b40      	cmp	r3, #64	@ 0x40
 80036ec:	d007      	beq.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80036ee:	e01c      	b.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036f0:	4b63      	ldr	r3, [pc, #396]	@ (8003880 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036f4:	4a62      	ldr	r2, [pc, #392]	@ (8003880 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80036fc:	e01c      	b.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80036fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003702:	3308      	adds	r3, #8
 8003704:	2100      	movs	r1, #0
 8003706:	4618      	mov	r0, r3
 8003708:	f001 fbe6 	bl	8004ed8 <RCCEx_PLL2_Config>
 800370c:	4603      	mov	r3, r0
 800370e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003712:	e011      	b.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003714:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003718:	3328      	adds	r3, #40	@ 0x28
 800371a:	2100      	movs	r1, #0
 800371c:	4618      	mov	r0, r3
 800371e:	f001 fc8d 	bl	800503c <RCCEx_PLL3_Config>
 8003722:	4603      	mov	r3, r0
 8003724:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003728:	e006      	b.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003730:	e002      	b.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003732:	bf00      	nop
 8003734:	e000      	b.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003736:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003738:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800373c:	2b00      	cmp	r3, #0
 800373e:	d10a      	bne.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003740:	4b4f      	ldr	r3, [pc, #316]	@ (8003880 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003742:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003744:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003748:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800374c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800374e:	4a4c      	ldr	r2, [pc, #304]	@ (8003880 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003750:	430b      	orrs	r3, r1
 8003752:	6513      	str	r3, [r2, #80]	@ 0x50
 8003754:	e003      	b.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003756:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800375a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800375e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003766:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800376a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800376e:	2300      	movs	r3, #0
 8003770:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8003774:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8003778:	460b      	mov	r3, r1
 800377a:	4313      	orrs	r3, r2
 800377c:	d053      	beq.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800377e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003782:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003786:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800378a:	d035      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800378c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003790:	d82e      	bhi.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003792:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003796:	d031      	beq.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003798:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800379c:	d828      	bhi.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800379e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80037a2:	d01a      	beq.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x292>
 80037a4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80037a8:	d822      	bhi.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d003      	beq.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80037ae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80037b2:	d007      	beq.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80037b4:	e01c      	b.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037b6:	4b32      	ldr	r3, [pc, #200]	@ (8003880 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037ba:	4a31      	ldr	r2, [pc, #196]	@ (8003880 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80037c2:	e01c      	b.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80037c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037c8:	3308      	adds	r3, #8
 80037ca:	2100      	movs	r1, #0
 80037cc:	4618      	mov	r0, r3
 80037ce:	f001 fb83 	bl	8004ed8 <RCCEx_PLL2_Config>
 80037d2:	4603      	mov	r3, r0
 80037d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80037d8:	e011      	b.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80037da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037de:	3328      	adds	r3, #40	@ 0x28
 80037e0:	2100      	movs	r1, #0
 80037e2:	4618      	mov	r0, r3
 80037e4:	f001 fc2a 	bl	800503c <RCCEx_PLL3_Config>
 80037e8:	4603      	mov	r3, r0
 80037ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80037ee:	e006      	b.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80037f6:	e002      	b.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80037f8:	bf00      	nop
 80037fa:	e000      	b.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80037fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003802:	2b00      	cmp	r3, #0
 8003804:	d10b      	bne.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003806:	4b1e      	ldr	r3, [pc, #120]	@ (8003880 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003808:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800380a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800380e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003812:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003816:	4a1a      	ldr	r2, [pc, #104]	@ (8003880 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003818:	430b      	orrs	r3, r1
 800381a:	6593      	str	r3, [r2, #88]	@ 0x58
 800381c:	e003      	b.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800381e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003822:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003826:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800382a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800382e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003832:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003836:	2300      	movs	r3, #0
 8003838:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800383c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003840:	460b      	mov	r3, r1
 8003842:	4313      	orrs	r3, r2
 8003844:	d056      	beq.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003846:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800384a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800384e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003852:	d038      	beq.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003854:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003858:	d831      	bhi.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x376>
 800385a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800385e:	d034      	beq.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003860:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003864:	d82b      	bhi.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003866:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800386a:	d01d      	beq.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800386c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003870:	d825      	bhi.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003872:	2b00      	cmp	r3, #0
 8003874:	d006      	beq.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003876:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800387a:	d00a      	beq.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800387c:	e01f      	b.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x376>
 800387e:	bf00      	nop
 8003880:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003884:	4ba2      	ldr	r3, [pc, #648]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003886:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003888:	4aa1      	ldr	r2, [pc, #644]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800388a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800388e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003890:	e01c      	b.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003892:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003896:	3308      	adds	r3, #8
 8003898:	2100      	movs	r1, #0
 800389a:	4618      	mov	r0, r3
 800389c:	f001 fb1c 	bl	8004ed8 <RCCEx_PLL2_Config>
 80038a0:	4603      	mov	r3, r0
 80038a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80038a6:	e011      	b.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80038a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038ac:	3328      	adds	r3, #40	@ 0x28
 80038ae:	2100      	movs	r1, #0
 80038b0:	4618      	mov	r0, r3
 80038b2:	f001 fbc3 	bl	800503c <RCCEx_PLL3_Config>
 80038b6:	4603      	mov	r3, r0
 80038b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80038bc:	e006      	b.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80038c4:	e002      	b.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80038c6:	bf00      	nop
 80038c8:	e000      	b.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80038ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d10b      	bne.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80038d4:	4b8e      	ldr	r3, [pc, #568]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80038d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038d8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80038dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038e0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80038e4:	4a8a      	ldr	r2, [pc, #552]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80038e6:	430b      	orrs	r3, r1
 80038e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80038ea:	e003      	b.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038f0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80038f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038fc:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003900:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003904:	2300      	movs	r3, #0
 8003906:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800390a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800390e:	460b      	mov	r3, r1
 8003910:	4313      	orrs	r3, r2
 8003912:	d03a      	beq.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003914:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003918:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800391a:	2b30      	cmp	r3, #48	@ 0x30
 800391c:	d01f      	beq.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x416>
 800391e:	2b30      	cmp	r3, #48	@ 0x30
 8003920:	d819      	bhi.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003922:	2b20      	cmp	r3, #32
 8003924:	d00c      	beq.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003926:	2b20      	cmp	r3, #32
 8003928:	d815      	bhi.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800392a:	2b00      	cmp	r3, #0
 800392c:	d019      	beq.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800392e:	2b10      	cmp	r3, #16
 8003930:	d111      	bne.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003932:	4b77      	ldr	r3, [pc, #476]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003934:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003936:	4a76      	ldr	r2, [pc, #472]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003938:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800393c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800393e:	e011      	b.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003940:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003944:	3308      	adds	r3, #8
 8003946:	2102      	movs	r1, #2
 8003948:	4618      	mov	r0, r3
 800394a:	f001 fac5 	bl	8004ed8 <RCCEx_PLL2_Config>
 800394e:	4603      	mov	r3, r0
 8003950:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003954:	e006      	b.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800395c:	e002      	b.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800395e:	bf00      	nop
 8003960:	e000      	b.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003962:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003964:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003968:	2b00      	cmp	r3, #0
 800396a:	d10a      	bne.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800396c:	4b68      	ldr	r3, [pc, #416]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800396e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003970:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003974:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003978:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800397a:	4a65      	ldr	r2, [pc, #404]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800397c:	430b      	orrs	r3, r1
 800397e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003980:	e003      	b.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003982:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003986:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800398a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800398e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003992:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003996:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800399a:	2300      	movs	r3, #0
 800399c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80039a0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80039a4:	460b      	mov	r3, r1
 80039a6:	4313      	orrs	r3, r2
 80039a8:	d051      	beq.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80039aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039b0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80039b4:	d035      	beq.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80039b6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80039ba:	d82e      	bhi.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80039bc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80039c0:	d031      	beq.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80039c2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80039c6:	d828      	bhi.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80039c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80039cc:	d01a      	beq.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80039ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80039d2:	d822      	bhi.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d003      	beq.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80039d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039dc:	d007      	beq.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80039de:	e01c      	b.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039e0:	4b4b      	ldr	r3, [pc, #300]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039e4:	4a4a      	ldr	r2, [pc, #296]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80039ec:	e01c      	b.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80039ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039f2:	3308      	adds	r3, #8
 80039f4:	2100      	movs	r1, #0
 80039f6:	4618      	mov	r0, r3
 80039f8:	f001 fa6e 	bl	8004ed8 <RCCEx_PLL2_Config>
 80039fc:	4603      	mov	r3, r0
 80039fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003a02:	e011      	b.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003a04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a08:	3328      	adds	r3, #40	@ 0x28
 8003a0a:	2100      	movs	r1, #0
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f001 fb15 	bl	800503c <RCCEx_PLL3_Config>
 8003a12:	4603      	mov	r3, r0
 8003a14:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003a18:	e006      	b.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a20:	e002      	b.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003a22:	bf00      	nop
 8003a24:	e000      	b.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003a26:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a28:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d10a      	bne.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003a30:	4b37      	ldr	r3, [pc, #220]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a34:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003a38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a3e:	4a34      	ldr	r2, [pc, #208]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a40:	430b      	orrs	r3, r1
 8003a42:	6513      	str	r3, [r2, #80]	@ 0x50
 8003a44:	e003      	b.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a4a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003a4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a56:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003a5a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003a5e:	2300      	movs	r3, #0
 8003a60:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003a64:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003a68:	460b      	mov	r3, r1
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	d056      	beq.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003a6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a72:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003a74:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a78:	d033      	beq.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003a7a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a7e:	d82c      	bhi.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003a80:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003a84:	d02f      	beq.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003a86:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003a8a:	d826      	bhi.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003a8c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003a90:	d02b      	beq.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003a92:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003a96:	d820      	bhi.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003a98:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003a9c:	d012      	beq.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003a9e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003aa2:	d81a      	bhi.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d022      	beq.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003aa8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003aac:	d115      	bne.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003aae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ab2:	3308      	adds	r3, #8
 8003ab4:	2101      	movs	r1, #1
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f001 fa0e 	bl	8004ed8 <RCCEx_PLL2_Config>
 8003abc:	4603      	mov	r3, r0
 8003abe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003ac2:	e015      	b.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003ac4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ac8:	3328      	adds	r3, #40	@ 0x28
 8003aca:	2101      	movs	r1, #1
 8003acc:	4618      	mov	r0, r3
 8003ace:	f001 fab5 	bl	800503c <RCCEx_PLL3_Config>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003ad8:	e00a      	b.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003ae0:	e006      	b.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003ae2:	bf00      	nop
 8003ae4:	e004      	b.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003ae6:	bf00      	nop
 8003ae8:	e002      	b.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003aea:	bf00      	nop
 8003aec:	e000      	b.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003aee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003af0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d10d      	bne.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003af8:	4b05      	ldr	r3, [pc, #20]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003afa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003afc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003b00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b04:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003b06:	4a02      	ldr	r2, [pc, #8]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b08:	430b      	orrs	r3, r1
 8003b0a:	6513      	str	r3, [r2, #80]	@ 0x50
 8003b0c:	e006      	b.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003b0e:	bf00      	nop
 8003b10:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b14:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b18:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003b1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b24:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003b28:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003b32:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003b36:	460b      	mov	r3, r1
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	d055      	beq.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003b3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b40:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003b44:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003b48:	d033      	beq.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003b4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003b4e:	d82c      	bhi.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003b50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b54:	d02f      	beq.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003b56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b5a:	d826      	bhi.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003b5c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003b60:	d02b      	beq.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003b62:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003b66:	d820      	bhi.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003b68:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b6c:	d012      	beq.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003b6e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b72:	d81a      	bhi.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d022      	beq.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003b78:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003b7c:	d115      	bne.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003b7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b82:	3308      	adds	r3, #8
 8003b84:	2101      	movs	r1, #1
 8003b86:	4618      	mov	r0, r3
 8003b88:	f001 f9a6 	bl	8004ed8 <RCCEx_PLL2_Config>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003b92:	e015      	b.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003b94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b98:	3328      	adds	r3, #40	@ 0x28
 8003b9a:	2101      	movs	r1, #1
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f001 fa4d 	bl	800503c <RCCEx_PLL3_Config>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003ba8:	e00a      	b.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003bb0:	e006      	b.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003bb2:	bf00      	nop
 8003bb4:	e004      	b.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003bb6:	bf00      	nop
 8003bb8:	e002      	b.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003bba:	bf00      	nop
 8003bbc:	e000      	b.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003bbe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bc0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d10b      	bne.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003bc8:	4ba3      	ldr	r3, [pc, #652]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bcc:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003bd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bd4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003bd8:	4a9f      	ldr	r2, [pc, #636]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bda:	430b      	orrs	r3, r1
 8003bdc:	6593      	str	r3, [r2, #88]	@ 0x58
 8003bde:	e003      	b.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003be0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003be4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003be8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bf0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003bf4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003bfe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003c02:	460b      	mov	r3, r1
 8003c04:	4313      	orrs	r3, r2
 8003c06:	d037      	beq.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003c08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c0e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c12:	d00e      	beq.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003c14:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c18:	d816      	bhi.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d018      	beq.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003c1e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003c22:	d111      	bne.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c24:	4b8c      	ldr	r3, [pc, #560]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c28:	4a8b      	ldr	r2, [pc, #556]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c2e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003c30:	e00f      	b.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003c32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c36:	3308      	adds	r3, #8
 8003c38:	2101      	movs	r1, #1
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f001 f94c 	bl	8004ed8 <RCCEx_PLL2_Config>
 8003c40:	4603      	mov	r3, r0
 8003c42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003c46:	e004      	b.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003c4e:	e000      	b.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003c50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d10a      	bne.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003c5a:	4b7f      	ldr	r3, [pc, #508]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c5e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003c62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c68:	4a7b      	ldr	r2, [pc, #492]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c6a:	430b      	orrs	r3, r1
 8003c6c:	6513      	str	r3, [r2, #80]	@ 0x50
 8003c6e:	e003      	b.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c70:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c74:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003c78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c80:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003c84:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003c88:	2300      	movs	r3, #0
 8003c8a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003c8e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003c92:	460b      	mov	r3, r1
 8003c94:	4313      	orrs	r3, r2
 8003c96:	d039      	beq.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003c98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c9e:	2b03      	cmp	r3, #3
 8003ca0:	d81c      	bhi.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003ca2:	a201      	add	r2, pc, #4	@ (adr r2, 8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ca8:	08003ce5 	.word	0x08003ce5
 8003cac:	08003cb9 	.word	0x08003cb9
 8003cb0:	08003cc7 	.word	0x08003cc7
 8003cb4:	08003ce5 	.word	0x08003ce5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cb8:	4b67      	ldr	r3, [pc, #412]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003cba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cbc:	4a66      	ldr	r2, [pc, #408]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003cbe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003cc2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003cc4:	e00f      	b.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003cc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cca:	3308      	adds	r3, #8
 8003ccc:	2102      	movs	r1, #2
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f001 f902 	bl	8004ed8 <RCCEx_PLL2_Config>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003cda:	e004      	b.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003ce2:	e000      	b.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003ce4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ce6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d10a      	bne.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003cee:	4b5a      	ldr	r3, [pc, #360]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003cf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cf2:	f023 0103 	bic.w	r1, r3, #3
 8003cf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cfa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003cfc:	4a56      	ldr	r2, [pc, #344]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003cfe:	430b      	orrs	r3, r1
 8003d00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003d02:	e003      	b.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d04:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d08:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d14:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003d18:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003d22:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003d26:	460b      	mov	r3, r1
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	f000 809f 	beq.w	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d2e:	4b4b      	ldr	r3, [pc, #300]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a4a      	ldr	r2, [pc, #296]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003d34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d38:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d3a:	f7fd fa95 	bl	8001268 <HAL_GetTick>
 8003d3e:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d42:	e00b      	b.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d44:	f7fd fa90 	bl	8001268 <HAL_GetTick>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003d4e:	1ad3      	subs	r3, r2, r3
 8003d50:	2b64      	cmp	r3, #100	@ 0x64
 8003d52:	d903      	bls.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003d54:	2303      	movs	r3, #3
 8003d56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003d5a:	e005      	b.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d5c:	4b3f      	ldr	r3, [pc, #252]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d0ed      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003d68:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d179      	bne.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003d70:	4b39      	ldr	r3, [pc, #228]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d72:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003d74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d78:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003d7c:	4053      	eors	r3, r2
 8003d7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d015      	beq.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d86:	4b34      	ldr	r3, [pc, #208]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d8a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d8e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d92:	4b31      	ldr	r3, [pc, #196]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d96:	4a30      	ldr	r2, [pc, #192]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d9c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d9e:	4b2e      	ldr	r3, [pc, #184]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003da0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003da2:	4a2d      	ldr	r2, [pc, #180]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003da4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003da8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003daa:	4a2b      	ldr	r2, [pc, #172]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003dac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003db0:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003db2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003db6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003dba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003dbe:	d118      	bne.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dc0:	f7fd fa52 	bl	8001268 <HAL_GetTick>
 8003dc4:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003dc8:	e00d      	b.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dca:	f7fd fa4d 	bl	8001268 <HAL_GetTick>
 8003dce:	4602      	mov	r2, r0
 8003dd0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003dd4:	1ad2      	subs	r2, r2, r3
 8003dd6:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d903      	bls.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003dde:	2303      	movs	r3, #3
 8003de0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8003de4:	e005      	b.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003de6:	4b1c      	ldr	r3, [pc, #112]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003de8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dea:	f003 0302 	and.w	r3, r3, #2
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d0eb      	beq.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003df2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d129      	bne.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003dfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dfe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003e02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e06:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003e0a:	d10e      	bne.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003e0c:	4b12      	ldr	r3, [pc, #72]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e0e:	691b      	ldr	r3, [r3, #16]
 8003e10:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003e14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e18:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003e1c:	091a      	lsrs	r2, r3, #4
 8003e1e:	4b10      	ldr	r3, [pc, #64]	@ (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003e20:	4013      	ands	r3, r2
 8003e22:	4a0d      	ldr	r2, [pc, #52]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e24:	430b      	orrs	r3, r1
 8003e26:	6113      	str	r3, [r2, #16]
 8003e28:	e005      	b.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003e2a:	4b0b      	ldr	r3, [pc, #44]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e2c:	691b      	ldr	r3, [r3, #16]
 8003e2e:	4a0a      	ldr	r2, [pc, #40]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e30:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003e34:	6113      	str	r3, [r2, #16]
 8003e36:	4b08      	ldr	r3, [pc, #32]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e38:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003e3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e3e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003e42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e46:	4a04      	ldr	r2, [pc, #16]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e48:	430b      	orrs	r3, r1
 8003e4a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e4c:	e00e      	b.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003e4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e52:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8003e56:	e009      	b.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003e58:	58024400 	.word	0x58024400
 8003e5c:	58024800 	.word	0x58024800
 8003e60:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e68:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003e6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e74:	f002 0301 	and.w	r3, r2, #1
 8003e78:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003e82:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003e86:	460b      	mov	r3, r1
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	f000 8089 	beq.w	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003e8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e92:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003e94:	2b28      	cmp	r3, #40	@ 0x28
 8003e96:	d86b      	bhi.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003e98:	a201      	add	r2, pc, #4	@ (adr r2, 8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003e9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e9e:	bf00      	nop
 8003ea0:	08003f79 	.word	0x08003f79
 8003ea4:	08003f71 	.word	0x08003f71
 8003ea8:	08003f71 	.word	0x08003f71
 8003eac:	08003f71 	.word	0x08003f71
 8003eb0:	08003f71 	.word	0x08003f71
 8003eb4:	08003f71 	.word	0x08003f71
 8003eb8:	08003f71 	.word	0x08003f71
 8003ebc:	08003f71 	.word	0x08003f71
 8003ec0:	08003f45 	.word	0x08003f45
 8003ec4:	08003f71 	.word	0x08003f71
 8003ec8:	08003f71 	.word	0x08003f71
 8003ecc:	08003f71 	.word	0x08003f71
 8003ed0:	08003f71 	.word	0x08003f71
 8003ed4:	08003f71 	.word	0x08003f71
 8003ed8:	08003f71 	.word	0x08003f71
 8003edc:	08003f71 	.word	0x08003f71
 8003ee0:	08003f5b 	.word	0x08003f5b
 8003ee4:	08003f71 	.word	0x08003f71
 8003ee8:	08003f71 	.word	0x08003f71
 8003eec:	08003f71 	.word	0x08003f71
 8003ef0:	08003f71 	.word	0x08003f71
 8003ef4:	08003f71 	.word	0x08003f71
 8003ef8:	08003f71 	.word	0x08003f71
 8003efc:	08003f71 	.word	0x08003f71
 8003f00:	08003f79 	.word	0x08003f79
 8003f04:	08003f71 	.word	0x08003f71
 8003f08:	08003f71 	.word	0x08003f71
 8003f0c:	08003f71 	.word	0x08003f71
 8003f10:	08003f71 	.word	0x08003f71
 8003f14:	08003f71 	.word	0x08003f71
 8003f18:	08003f71 	.word	0x08003f71
 8003f1c:	08003f71 	.word	0x08003f71
 8003f20:	08003f79 	.word	0x08003f79
 8003f24:	08003f71 	.word	0x08003f71
 8003f28:	08003f71 	.word	0x08003f71
 8003f2c:	08003f71 	.word	0x08003f71
 8003f30:	08003f71 	.word	0x08003f71
 8003f34:	08003f71 	.word	0x08003f71
 8003f38:	08003f71 	.word	0x08003f71
 8003f3c:	08003f71 	.word	0x08003f71
 8003f40:	08003f79 	.word	0x08003f79
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003f44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f48:	3308      	adds	r3, #8
 8003f4a:	2101      	movs	r1, #1
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f000 ffc3 	bl	8004ed8 <RCCEx_PLL2_Config>
 8003f52:	4603      	mov	r3, r0
 8003f54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003f58:	e00f      	b.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003f5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f5e:	3328      	adds	r3, #40	@ 0x28
 8003f60:	2101      	movs	r1, #1
 8003f62:	4618      	mov	r0, r3
 8003f64:	f001 f86a 	bl	800503c <RCCEx_PLL3_Config>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003f6e:	e004      	b.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003f76:	e000      	b.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003f78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d10a      	bne.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003f82:	4bbf      	ldr	r3, [pc, #764]	@ (8004280 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f86:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003f8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f8e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f90:	4abb      	ldr	r2, [pc, #748]	@ (8004280 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f92:	430b      	orrs	r3, r1
 8003f94:	6553      	str	r3, [r2, #84]	@ 0x54
 8003f96:	e003      	b.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f98:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f9c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003fa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fa8:	f002 0302 	and.w	r3, r2, #2
 8003fac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003fb6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003fba:	460b      	mov	r3, r1
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	d041      	beq.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003fc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fc4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003fc6:	2b05      	cmp	r3, #5
 8003fc8:	d824      	bhi.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003fca:	a201      	add	r2, pc, #4	@ (adr r2, 8003fd0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fd0:	0800401d 	.word	0x0800401d
 8003fd4:	08003fe9 	.word	0x08003fe9
 8003fd8:	08003fff 	.word	0x08003fff
 8003fdc:	0800401d 	.word	0x0800401d
 8003fe0:	0800401d 	.word	0x0800401d
 8003fe4:	0800401d 	.word	0x0800401d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003fe8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fec:	3308      	adds	r3, #8
 8003fee:	2101      	movs	r1, #1
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f000 ff71 	bl	8004ed8 <RCCEx_PLL2_Config>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003ffc:	e00f      	b.n	800401e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003ffe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004002:	3328      	adds	r3, #40	@ 0x28
 8004004:	2101      	movs	r1, #1
 8004006:	4618      	mov	r0, r3
 8004008:	f001 f818 	bl	800503c <RCCEx_PLL3_Config>
 800400c:	4603      	mov	r3, r0
 800400e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004012:	e004      	b.n	800401e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800401a:	e000      	b.n	800401e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800401c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800401e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004022:	2b00      	cmp	r3, #0
 8004024:	d10a      	bne.n	800403c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004026:	4b96      	ldr	r3, [pc, #600]	@ (8004280 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004028:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800402a:	f023 0107 	bic.w	r1, r3, #7
 800402e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004032:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004034:	4a92      	ldr	r2, [pc, #584]	@ (8004280 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004036:	430b      	orrs	r3, r1
 8004038:	6553      	str	r3, [r2, #84]	@ 0x54
 800403a:	e003      	b.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800403c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004040:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004044:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800404c:	f002 0304 	and.w	r3, r2, #4
 8004050:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004054:	2300      	movs	r3, #0
 8004056:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800405a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800405e:	460b      	mov	r3, r1
 8004060:	4313      	orrs	r3, r2
 8004062:	d044      	beq.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004064:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004068:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800406c:	2b05      	cmp	r3, #5
 800406e:	d825      	bhi.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8004070:	a201      	add	r2, pc, #4	@ (adr r2, 8004078 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8004072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004076:	bf00      	nop
 8004078:	080040c5 	.word	0x080040c5
 800407c:	08004091 	.word	0x08004091
 8004080:	080040a7 	.word	0x080040a7
 8004084:	080040c5 	.word	0x080040c5
 8004088:	080040c5 	.word	0x080040c5
 800408c:	080040c5 	.word	0x080040c5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004090:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004094:	3308      	adds	r3, #8
 8004096:	2101      	movs	r1, #1
 8004098:	4618      	mov	r0, r3
 800409a:	f000 ff1d 	bl	8004ed8 <RCCEx_PLL2_Config>
 800409e:	4603      	mov	r3, r0
 80040a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80040a4:	e00f      	b.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80040a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040aa:	3328      	adds	r3, #40	@ 0x28
 80040ac:	2101      	movs	r1, #1
 80040ae:	4618      	mov	r0, r3
 80040b0:	f000 ffc4 	bl	800503c <RCCEx_PLL3_Config>
 80040b4:	4603      	mov	r3, r0
 80040b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80040ba:	e004      	b.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80040c2:	e000      	b.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80040c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d10b      	bne.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80040ce:	4b6c      	ldr	r3, [pc, #432]	@ (8004280 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80040d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040d2:	f023 0107 	bic.w	r1, r3, #7
 80040d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80040de:	4a68      	ldr	r2, [pc, #416]	@ (8004280 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80040e0:	430b      	orrs	r3, r1
 80040e2:	6593      	str	r3, [r2, #88]	@ 0x58
 80040e4:	e003      	b.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040ea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80040ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040f6:	f002 0320 	and.w	r3, r2, #32
 80040fa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80040fe:	2300      	movs	r3, #0
 8004100:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004104:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004108:	460b      	mov	r3, r1
 800410a:	4313      	orrs	r3, r2
 800410c:	d055      	beq.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800410e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004112:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004116:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800411a:	d033      	beq.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800411c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004120:	d82c      	bhi.n	800417c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004122:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004126:	d02f      	beq.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8004128:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800412c:	d826      	bhi.n	800417c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800412e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004132:	d02b      	beq.n	800418c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8004134:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004138:	d820      	bhi.n	800417c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800413a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800413e:	d012      	beq.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004140:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004144:	d81a      	bhi.n	800417c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004146:	2b00      	cmp	r3, #0
 8004148:	d022      	beq.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800414a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800414e:	d115      	bne.n	800417c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004150:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004154:	3308      	adds	r3, #8
 8004156:	2100      	movs	r1, #0
 8004158:	4618      	mov	r0, r3
 800415a:	f000 febd 	bl	8004ed8 <RCCEx_PLL2_Config>
 800415e:	4603      	mov	r3, r0
 8004160:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004164:	e015      	b.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004166:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800416a:	3328      	adds	r3, #40	@ 0x28
 800416c:	2102      	movs	r1, #2
 800416e:	4618      	mov	r0, r3
 8004170:	f000 ff64 	bl	800503c <RCCEx_PLL3_Config>
 8004174:	4603      	mov	r3, r0
 8004176:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800417a:	e00a      	b.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004182:	e006      	b.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004184:	bf00      	nop
 8004186:	e004      	b.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004188:	bf00      	nop
 800418a:	e002      	b.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800418c:	bf00      	nop
 800418e:	e000      	b.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004190:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004192:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004196:	2b00      	cmp	r3, #0
 8004198:	d10b      	bne.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800419a:	4b39      	ldr	r3, [pc, #228]	@ (8004280 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800419c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800419e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80041a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041aa:	4a35      	ldr	r2, [pc, #212]	@ (8004280 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80041ac:	430b      	orrs	r3, r1
 80041ae:	6553      	str	r3, [r2, #84]	@ 0x54
 80041b0:	e003      	b.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80041ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041c2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80041c6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80041ca:	2300      	movs	r3, #0
 80041cc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80041d0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80041d4:	460b      	mov	r3, r1
 80041d6:	4313      	orrs	r3, r2
 80041d8:	d058      	beq.n	800428c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80041da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041de:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80041e2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80041e6:	d033      	beq.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80041e8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80041ec:	d82c      	bhi.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80041ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041f2:	d02f      	beq.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80041f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041f8:	d826      	bhi.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80041fa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80041fe:	d02b      	beq.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8004200:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004204:	d820      	bhi.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004206:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800420a:	d012      	beq.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800420c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004210:	d81a      	bhi.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004212:	2b00      	cmp	r3, #0
 8004214:	d022      	beq.n	800425c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004216:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800421a:	d115      	bne.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800421c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004220:	3308      	adds	r3, #8
 8004222:	2100      	movs	r1, #0
 8004224:	4618      	mov	r0, r3
 8004226:	f000 fe57 	bl	8004ed8 <RCCEx_PLL2_Config>
 800422a:	4603      	mov	r3, r0
 800422c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004230:	e015      	b.n	800425e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004232:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004236:	3328      	adds	r3, #40	@ 0x28
 8004238:	2102      	movs	r1, #2
 800423a:	4618      	mov	r0, r3
 800423c:	f000 fefe 	bl	800503c <RCCEx_PLL3_Config>
 8004240:	4603      	mov	r3, r0
 8004242:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004246:	e00a      	b.n	800425e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800424e:	e006      	b.n	800425e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004250:	bf00      	nop
 8004252:	e004      	b.n	800425e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004254:	bf00      	nop
 8004256:	e002      	b.n	800425e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004258:	bf00      	nop
 800425a:	e000      	b.n	800425e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800425c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800425e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004262:	2b00      	cmp	r3, #0
 8004264:	d10e      	bne.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004266:	4b06      	ldr	r3, [pc, #24]	@ (8004280 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004268:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800426a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800426e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004272:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004276:	4a02      	ldr	r2, [pc, #8]	@ (8004280 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004278:	430b      	orrs	r3, r1
 800427a:	6593      	str	r3, [r2, #88]	@ 0x58
 800427c:	e006      	b.n	800428c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800427e:	bf00      	nop
 8004280:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004284:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004288:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800428c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004294:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004298:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800429c:	2300      	movs	r3, #0
 800429e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80042a2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80042a6:	460b      	mov	r3, r1
 80042a8:	4313      	orrs	r3, r2
 80042aa:	d055      	beq.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80042ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042b0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80042b4:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80042b8:	d033      	beq.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80042ba:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80042be:	d82c      	bhi.n	800431a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80042c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80042c4:	d02f      	beq.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80042c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80042ca:	d826      	bhi.n	800431a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80042cc:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80042d0:	d02b      	beq.n	800432a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80042d2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80042d6:	d820      	bhi.n	800431a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80042d8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80042dc:	d012      	beq.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80042de:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80042e2:	d81a      	bhi.n	800431a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d022      	beq.n	800432e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80042e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80042ec:	d115      	bne.n	800431a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80042ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042f2:	3308      	adds	r3, #8
 80042f4:	2100      	movs	r1, #0
 80042f6:	4618      	mov	r0, r3
 80042f8:	f000 fdee 	bl	8004ed8 <RCCEx_PLL2_Config>
 80042fc:	4603      	mov	r3, r0
 80042fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004302:	e015      	b.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004304:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004308:	3328      	adds	r3, #40	@ 0x28
 800430a:	2102      	movs	r1, #2
 800430c:	4618      	mov	r0, r3
 800430e:	f000 fe95 	bl	800503c <RCCEx_PLL3_Config>
 8004312:	4603      	mov	r3, r0
 8004314:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004318:	e00a      	b.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004320:	e006      	b.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004322:	bf00      	nop
 8004324:	e004      	b.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004326:	bf00      	nop
 8004328:	e002      	b.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800432a:	bf00      	nop
 800432c:	e000      	b.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800432e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004330:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004334:	2b00      	cmp	r3, #0
 8004336:	d10b      	bne.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004338:	4ba1      	ldr	r3, [pc, #644]	@ (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800433a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800433c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004340:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004344:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004348:	4a9d      	ldr	r2, [pc, #628]	@ (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800434a:	430b      	orrs	r3, r1
 800434c:	6593      	str	r3, [r2, #88]	@ 0x58
 800434e:	e003      	b.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004350:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004354:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004358:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800435c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004360:	f002 0308 	and.w	r3, r2, #8
 8004364:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004368:	2300      	movs	r3, #0
 800436a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800436e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004372:	460b      	mov	r3, r1
 8004374:	4313      	orrs	r3, r2
 8004376:	d01e      	beq.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004378:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800437c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004380:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004384:	d10c      	bne.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004386:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800438a:	3328      	adds	r3, #40	@ 0x28
 800438c:	2102      	movs	r1, #2
 800438e:	4618      	mov	r0, r3
 8004390:	f000 fe54 	bl	800503c <RCCEx_PLL3_Config>
 8004394:	4603      	mov	r3, r0
 8004396:	2b00      	cmp	r3, #0
 8004398:	d002      	beq.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80043a0:	4b87      	ldr	r3, [pc, #540]	@ (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80043a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043a4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80043a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80043b0:	4a83      	ldr	r2, [pc, #524]	@ (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80043b2:	430b      	orrs	r3, r1
 80043b4:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80043b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043be:	f002 0310 	and.w	r3, r2, #16
 80043c2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80043c6:	2300      	movs	r3, #0
 80043c8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80043cc:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80043d0:	460b      	mov	r3, r1
 80043d2:	4313      	orrs	r3, r2
 80043d4:	d01e      	beq.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80043d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043da:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80043de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80043e2:	d10c      	bne.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80043e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043e8:	3328      	adds	r3, #40	@ 0x28
 80043ea:	2102      	movs	r1, #2
 80043ec:	4618      	mov	r0, r3
 80043ee:	f000 fe25 	bl	800503c <RCCEx_PLL3_Config>
 80043f2:	4603      	mov	r3, r0
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d002      	beq.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80043f8:	2301      	movs	r3, #1
 80043fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80043fe:	4b70      	ldr	r3, [pc, #448]	@ (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004400:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004402:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004406:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800440a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800440e:	4a6c      	ldr	r2, [pc, #432]	@ (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004410:	430b      	orrs	r3, r1
 8004412:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004414:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800441c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004420:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004424:	2300      	movs	r3, #0
 8004426:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800442a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800442e:	460b      	mov	r3, r1
 8004430:	4313      	orrs	r3, r2
 8004432:	d03e      	beq.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004434:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004438:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800443c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004440:	d022      	beq.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8004442:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004446:	d81b      	bhi.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004448:	2b00      	cmp	r3, #0
 800444a:	d003      	beq.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800444c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004450:	d00b      	beq.n	800446a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8004452:	e015      	b.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004454:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004458:	3308      	adds	r3, #8
 800445a:	2100      	movs	r1, #0
 800445c:	4618      	mov	r0, r3
 800445e:	f000 fd3b 	bl	8004ed8 <RCCEx_PLL2_Config>
 8004462:	4603      	mov	r3, r0
 8004464:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004468:	e00f      	b.n	800448a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800446a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800446e:	3328      	adds	r3, #40	@ 0x28
 8004470:	2102      	movs	r1, #2
 8004472:	4618      	mov	r0, r3
 8004474:	f000 fde2 	bl	800503c <RCCEx_PLL3_Config>
 8004478:	4603      	mov	r3, r0
 800447a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800447e:	e004      	b.n	800448a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004486:	e000      	b.n	800448a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004488:	bf00      	nop
    }

    if (ret == HAL_OK)
 800448a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800448e:	2b00      	cmp	r3, #0
 8004490:	d10b      	bne.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004492:	4b4b      	ldr	r3, [pc, #300]	@ (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004494:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004496:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800449a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800449e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80044a2:	4a47      	ldr	r2, [pc, #284]	@ (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044a4:	430b      	orrs	r3, r1
 80044a6:	6593      	str	r3, [r2, #88]	@ 0x58
 80044a8:	e003      	b.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80044b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ba:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80044be:	67bb      	str	r3, [r7, #120]	@ 0x78
 80044c0:	2300      	movs	r3, #0
 80044c2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80044c4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80044c8:	460b      	mov	r3, r1
 80044ca:	4313      	orrs	r3, r2
 80044cc:	d03b      	beq.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80044ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044d6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80044da:	d01f      	beq.n	800451c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80044dc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80044e0:	d818      	bhi.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80044e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80044e6:	d003      	beq.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80044e8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80044ec:	d007      	beq.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80044ee:	e011      	b.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044f0:	4b33      	ldr	r3, [pc, #204]	@ (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044f4:	4a32      	ldr	r2, [pc, #200]	@ (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80044fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80044fc:	e00f      	b.n	800451e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80044fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004502:	3328      	adds	r3, #40	@ 0x28
 8004504:	2101      	movs	r1, #1
 8004506:	4618      	mov	r0, r3
 8004508:	f000 fd98 	bl	800503c <RCCEx_PLL3_Config>
 800450c:	4603      	mov	r3, r0
 800450e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8004512:	e004      	b.n	800451e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800451a:	e000      	b.n	800451e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800451c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800451e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004522:	2b00      	cmp	r3, #0
 8004524:	d10b      	bne.n	800453e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004526:	4b26      	ldr	r3, [pc, #152]	@ (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004528:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800452a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800452e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004532:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004536:	4a22      	ldr	r2, [pc, #136]	@ (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004538:	430b      	orrs	r3, r1
 800453a:	6553      	str	r3, [r2, #84]	@ 0x54
 800453c:	e003      	b.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800453e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004542:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004546:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800454a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800454e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004552:	673b      	str	r3, [r7, #112]	@ 0x70
 8004554:	2300      	movs	r3, #0
 8004556:	677b      	str	r3, [r7, #116]	@ 0x74
 8004558:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800455c:	460b      	mov	r3, r1
 800455e:	4313      	orrs	r3, r2
 8004560:	d034      	beq.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004562:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004566:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004568:	2b00      	cmp	r3, #0
 800456a:	d003      	beq.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800456c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004570:	d007      	beq.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8004572:	e011      	b.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004574:	4b12      	ldr	r3, [pc, #72]	@ (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004578:	4a11      	ldr	r2, [pc, #68]	@ (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800457a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800457e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004580:	e00e      	b.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004582:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004586:	3308      	adds	r3, #8
 8004588:	2102      	movs	r1, #2
 800458a:	4618      	mov	r0, r3
 800458c:	f000 fca4 	bl	8004ed8 <RCCEx_PLL2_Config>
 8004590:	4603      	mov	r3, r0
 8004592:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004596:	e003      	b.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800459e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d10d      	bne.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80045a8:	4b05      	ldr	r3, [pc, #20]	@ (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80045aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045ac:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80045b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045b6:	4a02      	ldr	r2, [pc, #8]	@ (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80045b8:	430b      	orrs	r3, r1
 80045ba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80045bc:	e006      	b.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80045be:	bf00      	nop
 80045c0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80045cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045d4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80045d8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80045da:	2300      	movs	r3, #0
 80045dc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80045de:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80045e2:	460b      	mov	r3, r1
 80045e4:	4313      	orrs	r3, r2
 80045e6:	d00c      	beq.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80045e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045ec:	3328      	adds	r3, #40	@ 0x28
 80045ee:	2102      	movs	r1, #2
 80045f0:	4618      	mov	r0, r3
 80045f2:	f000 fd23 	bl	800503c <RCCEx_PLL3_Config>
 80045f6:	4603      	mov	r3, r0
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d002      	beq.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004602:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800460a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800460e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004610:	2300      	movs	r3, #0
 8004612:	667b      	str	r3, [r7, #100]	@ 0x64
 8004614:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004618:	460b      	mov	r3, r1
 800461a:	4313      	orrs	r3, r2
 800461c:	d038      	beq.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800461e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004622:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004626:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800462a:	d018      	beq.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800462c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004630:	d811      	bhi.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004632:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004636:	d014      	beq.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004638:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800463c:	d80b      	bhi.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800463e:	2b00      	cmp	r3, #0
 8004640:	d011      	beq.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8004642:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004646:	d106      	bne.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004648:	4bc3      	ldr	r3, [pc, #780]	@ (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800464a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800464c:	4ac2      	ldr	r2, [pc, #776]	@ (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800464e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004652:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004654:	e008      	b.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800465c:	e004      	b.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800465e:	bf00      	nop
 8004660:	e002      	b.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004662:	bf00      	nop
 8004664:	e000      	b.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004666:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004668:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800466c:	2b00      	cmp	r3, #0
 800466e:	d10b      	bne.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004670:	4bb9      	ldr	r3, [pc, #740]	@ (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004672:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004674:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004678:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800467c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004680:	4ab5      	ldr	r2, [pc, #724]	@ (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004682:	430b      	orrs	r3, r1
 8004684:	6553      	str	r3, [r2, #84]	@ 0x54
 8004686:	e003      	b.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004688:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800468c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004690:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004698:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800469c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800469e:	2300      	movs	r3, #0
 80046a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80046a2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80046a6:	460b      	mov	r3, r1
 80046a8:	4313      	orrs	r3, r2
 80046aa:	d009      	beq.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80046ac:	4baa      	ldr	r3, [pc, #680]	@ (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046b0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80046b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046ba:	4aa7      	ldr	r2, [pc, #668]	@ (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046bc:	430b      	orrs	r3, r1
 80046be:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80046c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046c8:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80046cc:	653b      	str	r3, [r7, #80]	@ 0x50
 80046ce:	2300      	movs	r3, #0
 80046d0:	657b      	str	r3, [r7, #84]	@ 0x54
 80046d2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80046d6:	460b      	mov	r3, r1
 80046d8:	4313      	orrs	r3, r2
 80046da:	d00a      	beq.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80046dc:	4b9e      	ldr	r3, [pc, #632]	@ (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046de:	691b      	ldr	r3, [r3, #16]
 80046e0:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80046e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046e8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80046ec:	4a9a      	ldr	r2, [pc, #616]	@ (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046ee:	430b      	orrs	r3, r1
 80046f0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80046f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046fa:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80046fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004700:	2300      	movs	r3, #0
 8004702:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004704:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004708:	460b      	mov	r3, r1
 800470a:	4313      	orrs	r3, r2
 800470c:	d009      	beq.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800470e:	4b92      	ldr	r3, [pc, #584]	@ (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004710:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004712:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004716:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800471a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800471c:	4a8e      	ldr	r2, [pc, #568]	@ (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800471e:	430b      	orrs	r3, r1
 8004720:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004722:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800472a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800472e:	643b      	str	r3, [r7, #64]	@ 0x40
 8004730:	2300      	movs	r3, #0
 8004732:	647b      	str	r3, [r7, #68]	@ 0x44
 8004734:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004738:	460b      	mov	r3, r1
 800473a:	4313      	orrs	r3, r2
 800473c:	d00e      	beq.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800473e:	4b86      	ldr	r3, [pc, #536]	@ (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004740:	691b      	ldr	r3, [r3, #16]
 8004742:	4a85      	ldr	r2, [pc, #532]	@ (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004744:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004748:	6113      	str	r3, [r2, #16]
 800474a:	4b83      	ldr	r3, [pc, #524]	@ (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800474c:	6919      	ldr	r1, [r3, #16]
 800474e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004752:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004756:	4a80      	ldr	r2, [pc, #512]	@ (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004758:	430b      	orrs	r3, r1
 800475a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800475c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004764:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004768:	63bb      	str	r3, [r7, #56]	@ 0x38
 800476a:	2300      	movs	r3, #0
 800476c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800476e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004772:	460b      	mov	r3, r1
 8004774:	4313      	orrs	r3, r2
 8004776:	d009      	beq.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004778:	4b77      	ldr	r3, [pc, #476]	@ (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800477a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800477c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004780:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004784:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004786:	4a74      	ldr	r2, [pc, #464]	@ (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004788:	430b      	orrs	r3, r1
 800478a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800478c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004794:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004798:	633b      	str	r3, [r7, #48]	@ 0x30
 800479a:	2300      	movs	r3, #0
 800479c:	637b      	str	r3, [r7, #52]	@ 0x34
 800479e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80047a2:	460b      	mov	r3, r1
 80047a4:	4313      	orrs	r3, r2
 80047a6:	d00a      	beq.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80047a8:	4b6b      	ldr	r3, [pc, #428]	@ (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047ac:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80047b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80047b8:	4a67      	ldr	r2, [pc, #412]	@ (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047ba:	430b      	orrs	r3, r1
 80047bc:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80047be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047c6:	2100      	movs	r1, #0
 80047c8:	62b9      	str	r1, [r7, #40]	@ 0x28
 80047ca:	f003 0301 	and.w	r3, r3, #1
 80047ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80047d0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80047d4:	460b      	mov	r3, r1
 80047d6:	4313      	orrs	r3, r2
 80047d8:	d011      	beq.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80047da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047de:	3308      	adds	r3, #8
 80047e0:	2100      	movs	r1, #0
 80047e2:	4618      	mov	r0, r3
 80047e4:	f000 fb78 	bl	8004ed8 <RCCEx_PLL2_Config>
 80047e8:	4603      	mov	r3, r0
 80047ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80047ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d003      	beq.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80047fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004806:	2100      	movs	r1, #0
 8004808:	6239      	str	r1, [r7, #32]
 800480a:	f003 0302 	and.w	r3, r3, #2
 800480e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004810:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004814:	460b      	mov	r3, r1
 8004816:	4313      	orrs	r3, r2
 8004818:	d011      	beq.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800481a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800481e:	3308      	adds	r3, #8
 8004820:	2101      	movs	r1, #1
 8004822:	4618      	mov	r0, r3
 8004824:	f000 fb58 	bl	8004ed8 <RCCEx_PLL2_Config>
 8004828:	4603      	mov	r3, r0
 800482a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800482e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004832:	2b00      	cmp	r3, #0
 8004834:	d003      	beq.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004836:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800483a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800483e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004846:	2100      	movs	r1, #0
 8004848:	61b9      	str	r1, [r7, #24]
 800484a:	f003 0304 	and.w	r3, r3, #4
 800484e:	61fb      	str	r3, [r7, #28]
 8004850:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004854:	460b      	mov	r3, r1
 8004856:	4313      	orrs	r3, r2
 8004858:	d011      	beq.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800485a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800485e:	3308      	adds	r3, #8
 8004860:	2102      	movs	r1, #2
 8004862:	4618      	mov	r0, r3
 8004864:	f000 fb38 	bl	8004ed8 <RCCEx_PLL2_Config>
 8004868:	4603      	mov	r3, r0
 800486a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800486e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004872:	2b00      	cmp	r3, #0
 8004874:	d003      	beq.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004876:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800487a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800487e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004886:	2100      	movs	r1, #0
 8004888:	6139      	str	r1, [r7, #16]
 800488a:	f003 0308 	and.w	r3, r3, #8
 800488e:	617b      	str	r3, [r7, #20]
 8004890:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004894:	460b      	mov	r3, r1
 8004896:	4313      	orrs	r3, r2
 8004898:	d011      	beq.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800489a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800489e:	3328      	adds	r3, #40	@ 0x28
 80048a0:	2100      	movs	r1, #0
 80048a2:	4618      	mov	r0, r3
 80048a4:	f000 fbca 	bl	800503c <RCCEx_PLL3_Config>
 80048a8:	4603      	mov	r3, r0
 80048aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80048ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d003      	beq.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80048be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048c6:	2100      	movs	r1, #0
 80048c8:	60b9      	str	r1, [r7, #8]
 80048ca:	f003 0310 	and.w	r3, r3, #16
 80048ce:	60fb      	str	r3, [r7, #12]
 80048d0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80048d4:	460b      	mov	r3, r1
 80048d6:	4313      	orrs	r3, r2
 80048d8:	d011      	beq.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80048da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048de:	3328      	adds	r3, #40	@ 0x28
 80048e0:	2101      	movs	r1, #1
 80048e2:	4618      	mov	r0, r3
 80048e4:	f000 fbaa 	bl	800503c <RCCEx_PLL3_Config>
 80048e8:	4603      	mov	r3, r0
 80048ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80048ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d003      	beq.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80048fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004906:	2100      	movs	r1, #0
 8004908:	6039      	str	r1, [r7, #0]
 800490a:	f003 0320 	and.w	r3, r3, #32
 800490e:	607b      	str	r3, [r7, #4]
 8004910:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004914:	460b      	mov	r3, r1
 8004916:	4313      	orrs	r3, r2
 8004918:	d011      	beq.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800491a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800491e:	3328      	adds	r3, #40	@ 0x28
 8004920:	2102      	movs	r1, #2
 8004922:	4618      	mov	r0, r3
 8004924:	f000 fb8a 	bl	800503c <RCCEx_PLL3_Config>
 8004928:	4603      	mov	r3, r0
 800492a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800492e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004932:	2b00      	cmp	r3, #0
 8004934:	d003      	beq.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004936:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800493a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800493e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8004942:	2b00      	cmp	r3, #0
 8004944:	d101      	bne.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004946:	2300      	movs	r3, #0
 8004948:	e000      	b.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800494a:	2301      	movs	r3, #1
}
 800494c:	4618      	mov	r0, r3
 800494e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8004952:	46bd      	mov	sp, r7
 8004954:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004958:	58024400 	.word	0x58024400

0800495c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004960:	f7fe fd96 	bl	8003490 <HAL_RCC_GetHCLKFreq>
 8004964:	4602      	mov	r2, r0
 8004966:	4b06      	ldr	r3, [pc, #24]	@ (8004980 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004968:	6a1b      	ldr	r3, [r3, #32]
 800496a:	091b      	lsrs	r3, r3, #4
 800496c:	f003 0307 	and.w	r3, r3, #7
 8004970:	4904      	ldr	r1, [pc, #16]	@ (8004984 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004972:	5ccb      	ldrb	r3, [r1, r3]
 8004974:	f003 031f 	and.w	r3, r3, #31
 8004978:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800497c:	4618      	mov	r0, r3
 800497e:	bd80      	pop	{r7, pc}
 8004980:	58024400 	.word	0x58024400
 8004984:	08007404 	.word	0x08007404

08004988 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004988:	b480      	push	{r7}
 800498a:	b089      	sub	sp, #36	@ 0x24
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004990:	4ba1      	ldr	r3, [pc, #644]	@ (8004c18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004992:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004994:	f003 0303 	and.w	r3, r3, #3
 8004998:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800499a:	4b9f      	ldr	r3, [pc, #636]	@ (8004c18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800499c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800499e:	0b1b      	lsrs	r3, r3, #12
 80049a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80049a4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80049a6:	4b9c      	ldr	r3, [pc, #624]	@ (8004c18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049aa:	091b      	lsrs	r3, r3, #4
 80049ac:	f003 0301 	and.w	r3, r3, #1
 80049b0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80049b2:	4b99      	ldr	r3, [pc, #612]	@ (8004c18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049b6:	08db      	lsrs	r3, r3, #3
 80049b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80049bc:	693a      	ldr	r2, [r7, #16]
 80049be:	fb02 f303 	mul.w	r3, r2, r3
 80049c2:	ee07 3a90 	vmov	s15, r3
 80049c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049ca:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	f000 8111 	beq.w	8004bf8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80049d6:	69bb      	ldr	r3, [r7, #24]
 80049d8:	2b02      	cmp	r3, #2
 80049da:	f000 8083 	beq.w	8004ae4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80049de:	69bb      	ldr	r3, [r7, #24]
 80049e0:	2b02      	cmp	r3, #2
 80049e2:	f200 80a1 	bhi.w	8004b28 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80049e6:	69bb      	ldr	r3, [r7, #24]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d003      	beq.n	80049f4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80049ec:	69bb      	ldr	r3, [r7, #24]
 80049ee:	2b01      	cmp	r3, #1
 80049f0:	d056      	beq.n	8004aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80049f2:	e099      	b.n	8004b28 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80049f4:	4b88      	ldr	r3, [pc, #544]	@ (8004c18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f003 0320 	and.w	r3, r3, #32
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d02d      	beq.n	8004a5c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004a00:	4b85      	ldr	r3, [pc, #532]	@ (8004c18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	08db      	lsrs	r3, r3, #3
 8004a06:	f003 0303 	and.w	r3, r3, #3
 8004a0a:	4a84      	ldr	r2, [pc, #528]	@ (8004c1c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004a0c:	fa22 f303 	lsr.w	r3, r2, r3
 8004a10:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	ee07 3a90 	vmov	s15, r3
 8004a18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	ee07 3a90 	vmov	s15, r3
 8004a22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a2a:	4b7b      	ldr	r3, [pc, #492]	@ (8004c18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a32:	ee07 3a90 	vmov	s15, r3
 8004a36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a3e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004c20 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004a42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a56:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004a5a:	e087      	b.n	8004b6c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	ee07 3a90 	vmov	s15, r3
 8004a62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a66:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004c24 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004a6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a6e:	4b6a      	ldr	r3, [pc, #424]	@ (8004c18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a76:	ee07 3a90 	vmov	s15, r3
 8004a7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a82:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004c20 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004a86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a9e:	e065      	b.n	8004b6c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	ee07 3a90 	vmov	s15, r3
 8004aa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004aaa:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004c28 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004aae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ab2:	4b59      	ldr	r3, [pc, #356]	@ (8004c18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ab4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ab6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004aba:	ee07 3a90 	vmov	s15, r3
 8004abe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ac2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ac6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004c20 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004aca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ace:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ad2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ad6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ada:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ade:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ae2:	e043      	b.n	8004b6c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	ee07 3a90 	vmov	s15, r3
 8004aea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004aee:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004c2c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004af2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004af6:	4b48      	ldr	r3, [pc, #288]	@ (8004c18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004af8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004afa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004afe:	ee07 3a90 	vmov	s15, r3
 8004b02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b06:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b0a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004c20 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004b0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b26:	e021      	b.n	8004b6c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	ee07 3a90 	vmov	s15, r3
 8004b2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b32:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004c28 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004b36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b3a:	4b37      	ldr	r3, [pc, #220]	@ (8004c18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b42:	ee07 3a90 	vmov	s15, r3
 8004b46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b4e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004c20 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004b52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b6a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004b6c:	4b2a      	ldr	r3, [pc, #168]	@ (8004c18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b70:	0a5b      	lsrs	r3, r3, #9
 8004b72:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b76:	ee07 3a90 	vmov	s15, r3
 8004b7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b7e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004b82:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b86:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b92:	ee17 2a90 	vmov	r2, s15
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004b9a:	4b1f      	ldr	r3, [pc, #124]	@ (8004c18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b9e:	0c1b      	lsrs	r3, r3, #16
 8004ba0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004ba4:	ee07 3a90 	vmov	s15, r3
 8004ba8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004bb0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004bb4:	edd7 6a07 	vldr	s13, [r7, #28]
 8004bb8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004bbc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bc0:	ee17 2a90 	vmov	r2, s15
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004bc8:	4b13      	ldr	r3, [pc, #76]	@ (8004c18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004bca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bcc:	0e1b      	lsrs	r3, r3, #24
 8004bce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004bd2:	ee07 3a90 	vmov	s15, r3
 8004bd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bda:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004bde:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004be2:	edd7 6a07 	vldr	s13, [r7, #28]
 8004be6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004bea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bee:	ee17 2a90 	vmov	r2, s15
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004bf6:	e008      	b.n	8004c0a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2200      	movs	r2, #0
 8004c02:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2200      	movs	r2, #0
 8004c08:	609a      	str	r2, [r3, #8]
}
 8004c0a:	bf00      	nop
 8004c0c:	3724      	adds	r7, #36	@ 0x24
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr
 8004c16:	bf00      	nop
 8004c18:	58024400 	.word	0x58024400
 8004c1c:	03d09000 	.word	0x03d09000
 8004c20:	46000000 	.word	0x46000000
 8004c24:	4c742400 	.word	0x4c742400
 8004c28:	4a742400 	.word	0x4a742400
 8004c2c:	4af42400 	.word	0x4af42400

08004c30 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b089      	sub	sp, #36	@ 0x24
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004c38:	4ba1      	ldr	r3, [pc, #644]	@ (8004ec0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c3c:	f003 0303 	and.w	r3, r3, #3
 8004c40:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004c42:	4b9f      	ldr	r3, [pc, #636]	@ (8004ec0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c46:	0d1b      	lsrs	r3, r3, #20
 8004c48:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004c4c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004c4e:	4b9c      	ldr	r3, [pc, #624]	@ (8004ec0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c52:	0a1b      	lsrs	r3, r3, #8
 8004c54:	f003 0301 	and.w	r3, r3, #1
 8004c58:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004c5a:	4b99      	ldr	r3, [pc, #612]	@ (8004ec0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c5e:	08db      	lsrs	r3, r3, #3
 8004c60:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004c64:	693a      	ldr	r2, [r7, #16]
 8004c66:	fb02 f303 	mul.w	r3, r2, r3
 8004c6a:	ee07 3a90 	vmov	s15, r3
 8004c6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c72:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	f000 8111 	beq.w	8004ea0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004c7e:	69bb      	ldr	r3, [r7, #24]
 8004c80:	2b02      	cmp	r3, #2
 8004c82:	f000 8083 	beq.w	8004d8c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004c86:	69bb      	ldr	r3, [r7, #24]
 8004c88:	2b02      	cmp	r3, #2
 8004c8a:	f200 80a1 	bhi.w	8004dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004c8e:	69bb      	ldr	r3, [r7, #24]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d003      	beq.n	8004c9c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004c94:	69bb      	ldr	r3, [r7, #24]
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	d056      	beq.n	8004d48 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004c9a:	e099      	b.n	8004dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c9c:	4b88      	ldr	r3, [pc, #544]	@ (8004ec0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f003 0320 	and.w	r3, r3, #32
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d02d      	beq.n	8004d04 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004ca8:	4b85      	ldr	r3, [pc, #532]	@ (8004ec0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	08db      	lsrs	r3, r3, #3
 8004cae:	f003 0303 	and.w	r3, r3, #3
 8004cb2:	4a84      	ldr	r2, [pc, #528]	@ (8004ec4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004cb4:	fa22 f303 	lsr.w	r3, r2, r3
 8004cb8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	ee07 3a90 	vmov	s15, r3
 8004cc0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	ee07 3a90 	vmov	s15, r3
 8004cca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cd2:	4b7b      	ldr	r3, [pc, #492]	@ (8004ec0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cda:	ee07 3a90 	vmov	s15, r3
 8004cde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ce2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ce6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004ec8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004cea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cf2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004cf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cfe:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004d02:	e087      	b.n	8004e14 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	ee07 3a90 	vmov	s15, r3
 8004d0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d0e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004ecc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004d12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d16:	4b6a      	ldr	r3, [pc, #424]	@ (8004ec0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d1e:	ee07 3a90 	vmov	s15, r3
 8004d22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d26:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d2a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004ec8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004d2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d46:	e065      	b.n	8004e14 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	ee07 3a90 	vmov	s15, r3
 8004d4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d52:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004ed0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004d56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d5a:	4b59      	ldr	r3, [pc, #356]	@ (8004ec0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d62:	ee07 3a90 	vmov	s15, r3
 8004d66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d6e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004ec8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004d72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d8a:	e043      	b.n	8004e14 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	ee07 3a90 	vmov	s15, r3
 8004d92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d96:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004ed4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004d9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d9e:	4b48      	ldr	r3, [pc, #288]	@ (8004ec0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004da2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004da6:	ee07 3a90 	vmov	s15, r3
 8004daa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dae:	ed97 6a03 	vldr	s12, [r7, #12]
 8004db2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004ec8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004db6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004dba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004dbe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004dc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004dc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004dce:	e021      	b.n	8004e14 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	ee07 3a90 	vmov	s15, r3
 8004dd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dda:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004ed0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004dde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004de2:	4b37      	ldr	r3, [pc, #220]	@ (8004ec0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004de6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dea:	ee07 3a90 	vmov	s15, r3
 8004dee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004df2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004df6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004ec8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004dfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004dfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004e06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e12:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004e14:	4b2a      	ldr	r3, [pc, #168]	@ (8004ec0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e18:	0a5b      	lsrs	r3, r3, #9
 8004e1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e1e:	ee07 3a90 	vmov	s15, r3
 8004e22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e26:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004e2a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e2e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e3a:	ee17 2a90 	vmov	r2, s15
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004e42:	4b1f      	ldr	r3, [pc, #124]	@ (8004ec0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e46:	0c1b      	lsrs	r3, r3, #16
 8004e48:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e4c:	ee07 3a90 	vmov	s15, r3
 8004e50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e54:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004e58:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e5c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e68:	ee17 2a90 	vmov	r2, s15
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004e70:	4b13      	ldr	r3, [pc, #76]	@ (8004ec0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e74:	0e1b      	lsrs	r3, r3, #24
 8004e76:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e7a:	ee07 3a90 	vmov	s15, r3
 8004e7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e82:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004e86:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e8a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e96:	ee17 2a90 	vmov	r2, s15
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004e9e:	e008      	b.n	8004eb2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	609a      	str	r2, [r3, #8]
}
 8004eb2:	bf00      	nop
 8004eb4:	3724      	adds	r7, #36	@ 0x24
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebc:	4770      	bx	lr
 8004ebe:	bf00      	nop
 8004ec0:	58024400 	.word	0x58024400
 8004ec4:	03d09000 	.word	0x03d09000
 8004ec8:	46000000 	.word	0x46000000
 8004ecc:	4c742400 	.word	0x4c742400
 8004ed0:	4a742400 	.word	0x4a742400
 8004ed4:	4af42400 	.word	0x4af42400

08004ed8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b084      	sub	sp, #16
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
 8004ee0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004ee6:	4b53      	ldr	r3, [pc, #332]	@ (8005034 <RCCEx_PLL2_Config+0x15c>)
 8004ee8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eea:	f003 0303 	and.w	r3, r3, #3
 8004eee:	2b03      	cmp	r3, #3
 8004ef0:	d101      	bne.n	8004ef6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	e099      	b.n	800502a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004ef6:	4b4f      	ldr	r3, [pc, #316]	@ (8005034 <RCCEx_PLL2_Config+0x15c>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a4e      	ldr	r2, [pc, #312]	@ (8005034 <RCCEx_PLL2_Config+0x15c>)
 8004efc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004f00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f02:	f7fc f9b1 	bl	8001268 <HAL_GetTick>
 8004f06:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004f08:	e008      	b.n	8004f1c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004f0a:	f7fc f9ad 	bl	8001268 <HAL_GetTick>
 8004f0e:	4602      	mov	r2, r0
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	1ad3      	subs	r3, r2, r3
 8004f14:	2b02      	cmp	r3, #2
 8004f16:	d901      	bls.n	8004f1c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004f18:	2303      	movs	r3, #3
 8004f1a:	e086      	b.n	800502a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004f1c:	4b45      	ldr	r3, [pc, #276]	@ (8005034 <RCCEx_PLL2_Config+0x15c>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d1f0      	bne.n	8004f0a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004f28:	4b42      	ldr	r3, [pc, #264]	@ (8005034 <RCCEx_PLL2_Config+0x15c>)
 8004f2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f2c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	031b      	lsls	r3, r3, #12
 8004f36:	493f      	ldr	r1, [pc, #252]	@ (8005034 <RCCEx_PLL2_Config+0x15c>)
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	628b      	str	r3, [r1, #40]	@ 0x28
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	3b01      	subs	r3, #1
 8004f42:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	3b01      	subs	r3, #1
 8004f4c:	025b      	lsls	r3, r3, #9
 8004f4e:	b29b      	uxth	r3, r3
 8004f50:	431a      	orrs	r2, r3
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	68db      	ldr	r3, [r3, #12]
 8004f56:	3b01      	subs	r3, #1
 8004f58:	041b      	lsls	r3, r3, #16
 8004f5a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004f5e:	431a      	orrs	r2, r3
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	691b      	ldr	r3, [r3, #16]
 8004f64:	3b01      	subs	r3, #1
 8004f66:	061b      	lsls	r3, r3, #24
 8004f68:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004f6c:	4931      	ldr	r1, [pc, #196]	@ (8005034 <RCCEx_PLL2_Config+0x15c>)
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004f72:	4b30      	ldr	r3, [pc, #192]	@ (8005034 <RCCEx_PLL2_Config+0x15c>)
 8004f74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f76:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	695b      	ldr	r3, [r3, #20]
 8004f7e:	492d      	ldr	r1, [pc, #180]	@ (8005034 <RCCEx_PLL2_Config+0x15c>)
 8004f80:	4313      	orrs	r3, r2
 8004f82:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004f84:	4b2b      	ldr	r3, [pc, #172]	@ (8005034 <RCCEx_PLL2_Config+0x15c>)
 8004f86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f88:	f023 0220 	bic.w	r2, r3, #32
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	699b      	ldr	r3, [r3, #24]
 8004f90:	4928      	ldr	r1, [pc, #160]	@ (8005034 <RCCEx_PLL2_Config+0x15c>)
 8004f92:	4313      	orrs	r3, r2
 8004f94:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004f96:	4b27      	ldr	r3, [pc, #156]	@ (8005034 <RCCEx_PLL2_Config+0x15c>)
 8004f98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f9a:	4a26      	ldr	r2, [pc, #152]	@ (8005034 <RCCEx_PLL2_Config+0x15c>)
 8004f9c:	f023 0310 	bic.w	r3, r3, #16
 8004fa0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004fa2:	4b24      	ldr	r3, [pc, #144]	@ (8005034 <RCCEx_PLL2_Config+0x15c>)
 8004fa4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004fa6:	4b24      	ldr	r3, [pc, #144]	@ (8005038 <RCCEx_PLL2_Config+0x160>)
 8004fa8:	4013      	ands	r3, r2
 8004faa:	687a      	ldr	r2, [r7, #4]
 8004fac:	69d2      	ldr	r2, [r2, #28]
 8004fae:	00d2      	lsls	r2, r2, #3
 8004fb0:	4920      	ldr	r1, [pc, #128]	@ (8005034 <RCCEx_PLL2_Config+0x15c>)
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004fb6:	4b1f      	ldr	r3, [pc, #124]	@ (8005034 <RCCEx_PLL2_Config+0x15c>)
 8004fb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fba:	4a1e      	ldr	r2, [pc, #120]	@ (8005034 <RCCEx_PLL2_Config+0x15c>)
 8004fbc:	f043 0310 	orr.w	r3, r3, #16
 8004fc0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d106      	bne.n	8004fd6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004fc8:	4b1a      	ldr	r3, [pc, #104]	@ (8005034 <RCCEx_PLL2_Config+0x15c>)
 8004fca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fcc:	4a19      	ldr	r2, [pc, #100]	@ (8005034 <RCCEx_PLL2_Config+0x15c>)
 8004fce:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004fd2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004fd4:	e00f      	b.n	8004ff6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d106      	bne.n	8004fea <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004fdc:	4b15      	ldr	r3, [pc, #84]	@ (8005034 <RCCEx_PLL2_Config+0x15c>)
 8004fde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fe0:	4a14      	ldr	r2, [pc, #80]	@ (8005034 <RCCEx_PLL2_Config+0x15c>)
 8004fe2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004fe6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004fe8:	e005      	b.n	8004ff6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004fea:	4b12      	ldr	r3, [pc, #72]	@ (8005034 <RCCEx_PLL2_Config+0x15c>)
 8004fec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fee:	4a11      	ldr	r2, [pc, #68]	@ (8005034 <RCCEx_PLL2_Config+0x15c>)
 8004ff0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004ff4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004ff6:	4b0f      	ldr	r3, [pc, #60]	@ (8005034 <RCCEx_PLL2_Config+0x15c>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a0e      	ldr	r2, [pc, #56]	@ (8005034 <RCCEx_PLL2_Config+0x15c>)
 8004ffc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005000:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005002:	f7fc f931 	bl	8001268 <HAL_GetTick>
 8005006:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005008:	e008      	b.n	800501c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800500a:	f7fc f92d 	bl	8001268 <HAL_GetTick>
 800500e:	4602      	mov	r2, r0
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	1ad3      	subs	r3, r2, r3
 8005014:	2b02      	cmp	r3, #2
 8005016:	d901      	bls.n	800501c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005018:	2303      	movs	r3, #3
 800501a:	e006      	b.n	800502a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800501c:	4b05      	ldr	r3, [pc, #20]	@ (8005034 <RCCEx_PLL2_Config+0x15c>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005024:	2b00      	cmp	r3, #0
 8005026:	d0f0      	beq.n	800500a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005028:	7bfb      	ldrb	r3, [r7, #15]
}
 800502a:	4618      	mov	r0, r3
 800502c:	3710      	adds	r7, #16
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}
 8005032:	bf00      	nop
 8005034:	58024400 	.word	0x58024400
 8005038:	ffff0007 	.word	0xffff0007

0800503c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b084      	sub	sp, #16
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
 8005044:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005046:	2300      	movs	r3, #0
 8005048:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800504a:	4b53      	ldr	r3, [pc, #332]	@ (8005198 <RCCEx_PLL3_Config+0x15c>)
 800504c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800504e:	f003 0303 	and.w	r3, r3, #3
 8005052:	2b03      	cmp	r3, #3
 8005054:	d101      	bne.n	800505a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	e099      	b.n	800518e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800505a:	4b4f      	ldr	r3, [pc, #316]	@ (8005198 <RCCEx_PLL3_Config+0x15c>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a4e      	ldr	r2, [pc, #312]	@ (8005198 <RCCEx_PLL3_Config+0x15c>)
 8005060:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005064:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005066:	f7fc f8ff 	bl	8001268 <HAL_GetTick>
 800506a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800506c:	e008      	b.n	8005080 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800506e:	f7fc f8fb 	bl	8001268 <HAL_GetTick>
 8005072:	4602      	mov	r2, r0
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	1ad3      	subs	r3, r2, r3
 8005078:	2b02      	cmp	r3, #2
 800507a:	d901      	bls.n	8005080 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800507c:	2303      	movs	r3, #3
 800507e:	e086      	b.n	800518e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005080:	4b45      	ldr	r3, [pc, #276]	@ (8005198 <RCCEx_PLL3_Config+0x15c>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005088:	2b00      	cmp	r3, #0
 800508a:	d1f0      	bne.n	800506e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800508c:	4b42      	ldr	r3, [pc, #264]	@ (8005198 <RCCEx_PLL3_Config+0x15c>)
 800508e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005090:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	051b      	lsls	r3, r3, #20
 800509a:	493f      	ldr	r1, [pc, #252]	@ (8005198 <RCCEx_PLL3_Config+0x15c>)
 800509c:	4313      	orrs	r3, r2
 800509e:	628b      	str	r3, [r1, #40]	@ 0x28
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	3b01      	subs	r3, #1
 80050a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	3b01      	subs	r3, #1
 80050b0:	025b      	lsls	r3, r3, #9
 80050b2:	b29b      	uxth	r3, r3
 80050b4:	431a      	orrs	r2, r3
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	68db      	ldr	r3, [r3, #12]
 80050ba:	3b01      	subs	r3, #1
 80050bc:	041b      	lsls	r3, r3, #16
 80050be:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80050c2:	431a      	orrs	r2, r3
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	691b      	ldr	r3, [r3, #16]
 80050c8:	3b01      	subs	r3, #1
 80050ca:	061b      	lsls	r3, r3, #24
 80050cc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80050d0:	4931      	ldr	r1, [pc, #196]	@ (8005198 <RCCEx_PLL3_Config+0x15c>)
 80050d2:	4313      	orrs	r3, r2
 80050d4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80050d6:	4b30      	ldr	r3, [pc, #192]	@ (8005198 <RCCEx_PLL3_Config+0x15c>)
 80050d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050da:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	695b      	ldr	r3, [r3, #20]
 80050e2:	492d      	ldr	r1, [pc, #180]	@ (8005198 <RCCEx_PLL3_Config+0x15c>)
 80050e4:	4313      	orrs	r3, r2
 80050e6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80050e8:	4b2b      	ldr	r3, [pc, #172]	@ (8005198 <RCCEx_PLL3_Config+0x15c>)
 80050ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050ec:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	699b      	ldr	r3, [r3, #24]
 80050f4:	4928      	ldr	r1, [pc, #160]	@ (8005198 <RCCEx_PLL3_Config+0x15c>)
 80050f6:	4313      	orrs	r3, r2
 80050f8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80050fa:	4b27      	ldr	r3, [pc, #156]	@ (8005198 <RCCEx_PLL3_Config+0x15c>)
 80050fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050fe:	4a26      	ldr	r2, [pc, #152]	@ (8005198 <RCCEx_PLL3_Config+0x15c>)
 8005100:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005104:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005106:	4b24      	ldr	r3, [pc, #144]	@ (8005198 <RCCEx_PLL3_Config+0x15c>)
 8005108:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800510a:	4b24      	ldr	r3, [pc, #144]	@ (800519c <RCCEx_PLL3_Config+0x160>)
 800510c:	4013      	ands	r3, r2
 800510e:	687a      	ldr	r2, [r7, #4]
 8005110:	69d2      	ldr	r2, [r2, #28]
 8005112:	00d2      	lsls	r2, r2, #3
 8005114:	4920      	ldr	r1, [pc, #128]	@ (8005198 <RCCEx_PLL3_Config+0x15c>)
 8005116:	4313      	orrs	r3, r2
 8005118:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800511a:	4b1f      	ldr	r3, [pc, #124]	@ (8005198 <RCCEx_PLL3_Config+0x15c>)
 800511c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800511e:	4a1e      	ldr	r2, [pc, #120]	@ (8005198 <RCCEx_PLL3_Config+0x15c>)
 8005120:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005124:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d106      	bne.n	800513a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800512c:	4b1a      	ldr	r3, [pc, #104]	@ (8005198 <RCCEx_PLL3_Config+0x15c>)
 800512e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005130:	4a19      	ldr	r2, [pc, #100]	@ (8005198 <RCCEx_PLL3_Config+0x15c>)
 8005132:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005136:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005138:	e00f      	b.n	800515a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	2b01      	cmp	r3, #1
 800513e:	d106      	bne.n	800514e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005140:	4b15      	ldr	r3, [pc, #84]	@ (8005198 <RCCEx_PLL3_Config+0x15c>)
 8005142:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005144:	4a14      	ldr	r2, [pc, #80]	@ (8005198 <RCCEx_PLL3_Config+0x15c>)
 8005146:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800514a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800514c:	e005      	b.n	800515a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800514e:	4b12      	ldr	r3, [pc, #72]	@ (8005198 <RCCEx_PLL3_Config+0x15c>)
 8005150:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005152:	4a11      	ldr	r2, [pc, #68]	@ (8005198 <RCCEx_PLL3_Config+0x15c>)
 8005154:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005158:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800515a:	4b0f      	ldr	r3, [pc, #60]	@ (8005198 <RCCEx_PLL3_Config+0x15c>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a0e      	ldr	r2, [pc, #56]	@ (8005198 <RCCEx_PLL3_Config+0x15c>)
 8005160:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005164:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005166:	f7fc f87f 	bl	8001268 <HAL_GetTick>
 800516a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800516c:	e008      	b.n	8005180 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800516e:	f7fc f87b 	bl	8001268 <HAL_GetTick>
 8005172:	4602      	mov	r2, r0
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	1ad3      	subs	r3, r2, r3
 8005178:	2b02      	cmp	r3, #2
 800517a:	d901      	bls.n	8005180 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800517c:	2303      	movs	r3, #3
 800517e:	e006      	b.n	800518e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005180:	4b05      	ldr	r3, [pc, #20]	@ (8005198 <RCCEx_PLL3_Config+0x15c>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005188:	2b00      	cmp	r3, #0
 800518a:	d0f0      	beq.n	800516e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800518c:	7bfb      	ldrb	r3, [r7, #15]
}
 800518e:	4618      	mov	r0, r3
 8005190:	3710      	adds	r7, #16
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}
 8005196:	bf00      	nop
 8005198:	58024400 	.word	0x58024400
 800519c:	ffff0007 	.word	0xffff0007

080051a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b082      	sub	sp, #8
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d101      	bne.n	80051b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80051ae:	2301      	movs	r3, #1
 80051b0:	e042      	b.n	8005238 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d106      	bne.n	80051ca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2200      	movs	r2, #0
 80051c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80051c4:	6878      	ldr	r0, [r7, #4]
 80051c6:	f7fb fe63 	bl	8000e90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2224      	movs	r2, #36	@ 0x24
 80051ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f022 0201 	bic.w	r2, r2, #1
 80051e0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d002      	beq.n	80051f0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	f000 fe1e 	bl	8005e2c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80051f0:	6878      	ldr	r0, [r7, #4]
 80051f2:	f000 f8b3 	bl	800535c <UART_SetConfig>
 80051f6:	4603      	mov	r3, r0
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	d101      	bne.n	8005200 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80051fc:	2301      	movs	r3, #1
 80051fe:	e01b      	b.n	8005238 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	685a      	ldr	r2, [r3, #4]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800520e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	689a      	ldr	r2, [r3, #8]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800521e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	681a      	ldr	r2, [r3, #0]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f042 0201 	orr.w	r2, r2, #1
 800522e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005230:	6878      	ldr	r0, [r7, #4]
 8005232:	f000 fe9d 	bl	8005f70 <UART_CheckIdleState>
 8005236:	4603      	mov	r3, r0
}
 8005238:	4618      	mov	r0, r3
 800523a:	3708      	adds	r7, #8
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}

08005240 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b08a      	sub	sp, #40	@ 0x28
 8005244:	af02      	add	r7, sp, #8
 8005246:	60f8      	str	r0, [r7, #12]
 8005248:	60b9      	str	r1, [r7, #8]
 800524a:	603b      	str	r3, [r7, #0]
 800524c:	4613      	mov	r3, r2
 800524e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005256:	2b20      	cmp	r3, #32
 8005258:	d17b      	bne.n	8005352 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d002      	beq.n	8005266 <HAL_UART_Transmit+0x26>
 8005260:	88fb      	ldrh	r3, [r7, #6]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d101      	bne.n	800526a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	e074      	b.n	8005354 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2200      	movs	r2, #0
 800526e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2221      	movs	r2, #33	@ 0x21
 8005276:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800527a:	f7fb fff5 	bl	8001268 <HAL_GetTick>
 800527e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	88fa      	ldrh	r2, [r7, #6]
 8005284:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	88fa      	ldrh	r2, [r7, #6]
 800528c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	689b      	ldr	r3, [r3, #8]
 8005294:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005298:	d108      	bne.n	80052ac <HAL_UART_Transmit+0x6c>
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	691b      	ldr	r3, [r3, #16]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d104      	bne.n	80052ac <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80052a2:	2300      	movs	r3, #0
 80052a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	61bb      	str	r3, [r7, #24]
 80052aa:	e003      	b.n	80052b4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80052b0:	2300      	movs	r3, #0
 80052b2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80052b4:	e030      	b.n	8005318 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	9300      	str	r3, [sp, #0]
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	2200      	movs	r2, #0
 80052be:	2180      	movs	r1, #128	@ 0x80
 80052c0:	68f8      	ldr	r0, [r7, #12]
 80052c2:	f000 feff 	bl	80060c4 <UART_WaitOnFlagUntilTimeout>
 80052c6:	4603      	mov	r3, r0
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d005      	beq.n	80052d8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	2220      	movs	r2, #32
 80052d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80052d4:	2303      	movs	r3, #3
 80052d6:	e03d      	b.n	8005354 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80052d8:	69fb      	ldr	r3, [r7, #28]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d10b      	bne.n	80052f6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80052de:	69bb      	ldr	r3, [r7, #24]
 80052e0:	881b      	ldrh	r3, [r3, #0]
 80052e2:	461a      	mov	r2, r3
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80052ec:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80052ee:	69bb      	ldr	r3, [r7, #24]
 80052f0:	3302      	adds	r3, #2
 80052f2:	61bb      	str	r3, [r7, #24]
 80052f4:	e007      	b.n	8005306 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80052f6:	69fb      	ldr	r3, [r7, #28]
 80052f8:	781a      	ldrb	r2, [r3, #0]
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005300:	69fb      	ldr	r3, [r7, #28]
 8005302:	3301      	adds	r3, #1
 8005304:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800530c:	b29b      	uxth	r3, r3
 800530e:	3b01      	subs	r3, #1
 8005310:	b29a      	uxth	r2, r3
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800531e:	b29b      	uxth	r3, r3
 8005320:	2b00      	cmp	r3, #0
 8005322:	d1c8      	bne.n	80052b6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	9300      	str	r3, [sp, #0]
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	2200      	movs	r2, #0
 800532c:	2140      	movs	r1, #64	@ 0x40
 800532e:	68f8      	ldr	r0, [r7, #12]
 8005330:	f000 fec8 	bl	80060c4 <UART_WaitOnFlagUntilTimeout>
 8005334:	4603      	mov	r3, r0
 8005336:	2b00      	cmp	r3, #0
 8005338:	d005      	beq.n	8005346 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2220      	movs	r2, #32
 800533e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8005342:	2303      	movs	r3, #3
 8005344:	e006      	b.n	8005354 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2220      	movs	r2, #32
 800534a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800534e:	2300      	movs	r3, #0
 8005350:	e000      	b.n	8005354 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005352:	2302      	movs	r3, #2
  }
}
 8005354:	4618      	mov	r0, r3
 8005356:	3720      	adds	r7, #32
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}

0800535c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800535c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005360:	b092      	sub	sp, #72	@ 0x48
 8005362:	af00      	add	r7, sp, #0
 8005364:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005366:	2300      	movs	r3, #0
 8005368:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	689a      	ldr	r2, [r3, #8]
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	691b      	ldr	r3, [r3, #16]
 8005374:	431a      	orrs	r2, r3
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	695b      	ldr	r3, [r3, #20]
 800537a:	431a      	orrs	r2, r3
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	69db      	ldr	r3, [r3, #28]
 8005380:	4313      	orrs	r3, r2
 8005382:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	681a      	ldr	r2, [r3, #0]
 800538a:	4bbe      	ldr	r3, [pc, #760]	@ (8005684 <UART_SetConfig+0x328>)
 800538c:	4013      	ands	r3, r2
 800538e:	697a      	ldr	r2, [r7, #20]
 8005390:	6812      	ldr	r2, [r2, #0]
 8005392:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005394:	430b      	orrs	r3, r1
 8005396:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	68da      	ldr	r2, [r3, #12]
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	430a      	orrs	r2, r1
 80053ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	699b      	ldr	r3, [r3, #24]
 80053b2:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4ab3      	ldr	r2, [pc, #716]	@ (8005688 <UART_SetConfig+0x32c>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d004      	beq.n	80053c8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	6a1b      	ldr	r3, [r3, #32]
 80053c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80053c4:	4313      	orrs	r3, r2
 80053c6:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	689a      	ldr	r2, [r3, #8]
 80053ce:	4baf      	ldr	r3, [pc, #700]	@ (800568c <UART_SetConfig+0x330>)
 80053d0:	4013      	ands	r3, r2
 80053d2:	697a      	ldr	r2, [r7, #20]
 80053d4:	6812      	ldr	r2, [r2, #0]
 80053d6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80053d8:	430b      	orrs	r3, r1
 80053da:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053e2:	f023 010f 	bic.w	r1, r3, #15
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	430a      	orrs	r2, r1
 80053f0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4aa6      	ldr	r2, [pc, #664]	@ (8005690 <UART_SetConfig+0x334>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d177      	bne.n	80054ec <UART_SetConfig+0x190>
 80053fc:	4ba5      	ldr	r3, [pc, #660]	@ (8005694 <UART_SetConfig+0x338>)
 80053fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005400:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005404:	2b28      	cmp	r3, #40	@ 0x28
 8005406:	d86d      	bhi.n	80054e4 <UART_SetConfig+0x188>
 8005408:	a201      	add	r2, pc, #4	@ (adr r2, 8005410 <UART_SetConfig+0xb4>)
 800540a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800540e:	bf00      	nop
 8005410:	080054b5 	.word	0x080054b5
 8005414:	080054e5 	.word	0x080054e5
 8005418:	080054e5 	.word	0x080054e5
 800541c:	080054e5 	.word	0x080054e5
 8005420:	080054e5 	.word	0x080054e5
 8005424:	080054e5 	.word	0x080054e5
 8005428:	080054e5 	.word	0x080054e5
 800542c:	080054e5 	.word	0x080054e5
 8005430:	080054bd 	.word	0x080054bd
 8005434:	080054e5 	.word	0x080054e5
 8005438:	080054e5 	.word	0x080054e5
 800543c:	080054e5 	.word	0x080054e5
 8005440:	080054e5 	.word	0x080054e5
 8005444:	080054e5 	.word	0x080054e5
 8005448:	080054e5 	.word	0x080054e5
 800544c:	080054e5 	.word	0x080054e5
 8005450:	080054c5 	.word	0x080054c5
 8005454:	080054e5 	.word	0x080054e5
 8005458:	080054e5 	.word	0x080054e5
 800545c:	080054e5 	.word	0x080054e5
 8005460:	080054e5 	.word	0x080054e5
 8005464:	080054e5 	.word	0x080054e5
 8005468:	080054e5 	.word	0x080054e5
 800546c:	080054e5 	.word	0x080054e5
 8005470:	080054cd 	.word	0x080054cd
 8005474:	080054e5 	.word	0x080054e5
 8005478:	080054e5 	.word	0x080054e5
 800547c:	080054e5 	.word	0x080054e5
 8005480:	080054e5 	.word	0x080054e5
 8005484:	080054e5 	.word	0x080054e5
 8005488:	080054e5 	.word	0x080054e5
 800548c:	080054e5 	.word	0x080054e5
 8005490:	080054d5 	.word	0x080054d5
 8005494:	080054e5 	.word	0x080054e5
 8005498:	080054e5 	.word	0x080054e5
 800549c:	080054e5 	.word	0x080054e5
 80054a0:	080054e5 	.word	0x080054e5
 80054a4:	080054e5 	.word	0x080054e5
 80054a8:	080054e5 	.word	0x080054e5
 80054ac:	080054e5 	.word	0x080054e5
 80054b0:	080054dd 	.word	0x080054dd
 80054b4:	2301      	movs	r3, #1
 80054b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054ba:	e222      	b.n	8005902 <UART_SetConfig+0x5a6>
 80054bc:	2304      	movs	r3, #4
 80054be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054c2:	e21e      	b.n	8005902 <UART_SetConfig+0x5a6>
 80054c4:	2308      	movs	r3, #8
 80054c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054ca:	e21a      	b.n	8005902 <UART_SetConfig+0x5a6>
 80054cc:	2310      	movs	r3, #16
 80054ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054d2:	e216      	b.n	8005902 <UART_SetConfig+0x5a6>
 80054d4:	2320      	movs	r3, #32
 80054d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054da:	e212      	b.n	8005902 <UART_SetConfig+0x5a6>
 80054dc:	2340      	movs	r3, #64	@ 0x40
 80054de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054e2:	e20e      	b.n	8005902 <UART_SetConfig+0x5a6>
 80054e4:	2380      	movs	r3, #128	@ 0x80
 80054e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054ea:	e20a      	b.n	8005902 <UART_SetConfig+0x5a6>
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a69      	ldr	r2, [pc, #420]	@ (8005698 <UART_SetConfig+0x33c>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d130      	bne.n	8005558 <UART_SetConfig+0x1fc>
 80054f6:	4b67      	ldr	r3, [pc, #412]	@ (8005694 <UART_SetConfig+0x338>)
 80054f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054fa:	f003 0307 	and.w	r3, r3, #7
 80054fe:	2b05      	cmp	r3, #5
 8005500:	d826      	bhi.n	8005550 <UART_SetConfig+0x1f4>
 8005502:	a201      	add	r2, pc, #4	@ (adr r2, 8005508 <UART_SetConfig+0x1ac>)
 8005504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005508:	08005521 	.word	0x08005521
 800550c:	08005529 	.word	0x08005529
 8005510:	08005531 	.word	0x08005531
 8005514:	08005539 	.word	0x08005539
 8005518:	08005541 	.word	0x08005541
 800551c:	08005549 	.word	0x08005549
 8005520:	2300      	movs	r3, #0
 8005522:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005526:	e1ec      	b.n	8005902 <UART_SetConfig+0x5a6>
 8005528:	2304      	movs	r3, #4
 800552a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800552e:	e1e8      	b.n	8005902 <UART_SetConfig+0x5a6>
 8005530:	2308      	movs	r3, #8
 8005532:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005536:	e1e4      	b.n	8005902 <UART_SetConfig+0x5a6>
 8005538:	2310      	movs	r3, #16
 800553a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800553e:	e1e0      	b.n	8005902 <UART_SetConfig+0x5a6>
 8005540:	2320      	movs	r3, #32
 8005542:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005546:	e1dc      	b.n	8005902 <UART_SetConfig+0x5a6>
 8005548:	2340      	movs	r3, #64	@ 0x40
 800554a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800554e:	e1d8      	b.n	8005902 <UART_SetConfig+0x5a6>
 8005550:	2380      	movs	r3, #128	@ 0x80
 8005552:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005556:	e1d4      	b.n	8005902 <UART_SetConfig+0x5a6>
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a4f      	ldr	r2, [pc, #316]	@ (800569c <UART_SetConfig+0x340>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d130      	bne.n	80055c4 <UART_SetConfig+0x268>
 8005562:	4b4c      	ldr	r3, [pc, #304]	@ (8005694 <UART_SetConfig+0x338>)
 8005564:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005566:	f003 0307 	and.w	r3, r3, #7
 800556a:	2b05      	cmp	r3, #5
 800556c:	d826      	bhi.n	80055bc <UART_SetConfig+0x260>
 800556e:	a201      	add	r2, pc, #4	@ (adr r2, 8005574 <UART_SetConfig+0x218>)
 8005570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005574:	0800558d 	.word	0x0800558d
 8005578:	08005595 	.word	0x08005595
 800557c:	0800559d 	.word	0x0800559d
 8005580:	080055a5 	.word	0x080055a5
 8005584:	080055ad 	.word	0x080055ad
 8005588:	080055b5 	.word	0x080055b5
 800558c:	2300      	movs	r3, #0
 800558e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005592:	e1b6      	b.n	8005902 <UART_SetConfig+0x5a6>
 8005594:	2304      	movs	r3, #4
 8005596:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800559a:	e1b2      	b.n	8005902 <UART_SetConfig+0x5a6>
 800559c:	2308      	movs	r3, #8
 800559e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055a2:	e1ae      	b.n	8005902 <UART_SetConfig+0x5a6>
 80055a4:	2310      	movs	r3, #16
 80055a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055aa:	e1aa      	b.n	8005902 <UART_SetConfig+0x5a6>
 80055ac:	2320      	movs	r3, #32
 80055ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055b2:	e1a6      	b.n	8005902 <UART_SetConfig+0x5a6>
 80055b4:	2340      	movs	r3, #64	@ 0x40
 80055b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055ba:	e1a2      	b.n	8005902 <UART_SetConfig+0x5a6>
 80055bc:	2380      	movs	r3, #128	@ 0x80
 80055be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055c2:	e19e      	b.n	8005902 <UART_SetConfig+0x5a6>
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a35      	ldr	r2, [pc, #212]	@ (80056a0 <UART_SetConfig+0x344>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d130      	bne.n	8005630 <UART_SetConfig+0x2d4>
 80055ce:	4b31      	ldr	r3, [pc, #196]	@ (8005694 <UART_SetConfig+0x338>)
 80055d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055d2:	f003 0307 	and.w	r3, r3, #7
 80055d6:	2b05      	cmp	r3, #5
 80055d8:	d826      	bhi.n	8005628 <UART_SetConfig+0x2cc>
 80055da:	a201      	add	r2, pc, #4	@ (adr r2, 80055e0 <UART_SetConfig+0x284>)
 80055dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055e0:	080055f9 	.word	0x080055f9
 80055e4:	08005601 	.word	0x08005601
 80055e8:	08005609 	.word	0x08005609
 80055ec:	08005611 	.word	0x08005611
 80055f0:	08005619 	.word	0x08005619
 80055f4:	08005621 	.word	0x08005621
 80055f8:	2300      	movs	r3, #0
 80055fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055fe:	e180      	b.n	8005902 <UART_SetConfig+0x5a6>
 8005600:	2304      	movs	r3, #4
 8005602:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005606:	e17c      	b.n	8005902 <UART_SetConfig+0x5a6>
 8005608:	2308      	movs	r3, #8
 800560a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800560e:	e178      	b.n	8005902 <UART_SetConfig+0x5a6>
 8005610:	2310      	movs	r3, #16
 8005612:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005616:	e174      	b.n	8005902 <UART_SetConfig+0x5a6>
 8005618:	2320      	movs	r3, #32
 800561a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800561e:	e170      	b.n	8005902 <UART_SetConfig+0x5a6>
 8005620:	2340      	movs	r3, #64	@ 0x40
 8005622:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005626:	e16c      	b.n	8005902 <UART_SetConfig+0x5a6>
 8005628:	2380      	movs	r3, #128	@ 0x80
 800562a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800562e:	e168      	b.n	8005902 <UART_SetConfig+0x5a6>
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a1b      	ldr	r2, [pc, #108]	@ (80056a4 <UART_SetConfig+0x348>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d142      	bne.n	80056c0 <UART_SetConfig+0x364>
 800563a:	4b16      	ldr	r3, [pc, #88]	@ (8005694 <UART_SetConfig+0x338>)
 800563c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800563e:	f003 0307 	and.w	r3, r3, #7
 8005642:	2b05      	cmp	r3, #5
 8005644:	d838      	bhi.n	80056b8 <UART_SetConfig+0x35c>
 8005646:	a201      	add	r2, pc, #4	@ (adr r2, 800564c <UART_SetConfig+0x2f0>)
 8005648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800564c:	08005665 	.word	0x08005665
 8005650:	0800566d 	.word	0x0800566d
 8005654:	08005675 	.word	0x08005675
 8005658:	0800567d 	.word	0x0800567d
 800565c:	080056a9 	.word	0x080056a9
 8005660:	080056b1 	.word	0x080056b1
 8005664:	2300      	movs	r3, #0
 8005666:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800566a:	e14a      	b.n	8005902 <UART_SetConfig+0x5a6>
 800566c:	2304      	movs	r3, #4
 800566e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005672:	e146      	b.n	8005902 <UART_SetConfig+0x5a6>
 8005674:	2308      	movs	r3, #8
 8005676:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800567a:	e142      	b.n	8005902 <UART_SetConfig+0x5a6>
 800567c:	2310      	movs	r3, #16
 800567e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005682:	e13e      	b.n	8005902 <UART_SetConfig+0x5a6>
 8005684:	cfff69f3 	.word	0xcfff69f3
 8005688:	58000c00 	.word	0x58000c00
 800568c:	11fff4ff 	.word	0x11fff4ff
 8005690:	40011000 	.word	0x40011000
 8005694:	58024400 	.word	0x58024400
 8005698:	40004400 	.word	0x40004400
 800569c:	40004800 	.word	0x40004800
 80056a0:	40004c00 	.word	0x40004c00
 80056a4:	40005000 	.word	0x40005000
 80056a8:	2320      	movs	r3, #32
 80056aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056ae:	e128      	b.n	8005902 <UART_SetConfig+0x5a6>
 80056b0:	2340      	movs	r3, #64	@ 0x40
 80056b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056b6:	e124      	b.n	8005902 <UART_SetConfig+0x5a6>
 80056b8:	2380      	movs	r3, #128	@ 0x80
 80056ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056be:	e120      	b.n	8005902 <UART_SetConfig+0x5a6>
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4acb      	ldr	r2, [pc, #812]	@ (80059f4 <UART_SetConfig+0x698>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d176      	bne.n	80057b8 <UART_SetConfig+0x45c>
 80056ca:	4bcb      	ldr	r3, [pc, #812]	@ (80059f8 <UART_SetConfig+0x69c>)
 80056cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056ce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80056d2:	2b28      	cmp	r3, #40	@ 0x28
 80056d4:	d86c      	bhi.n	80057b0 <UART_SetConfig+0x454>
 80056d6:	a201      	add	r2, pc, #4	@ (adr r2, 80056dc <UART_SetConfig+0x380>)
 80056d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056dc:	08005781 	.word	0x08005781
 80056e0:	080057b1 	.word	0x080057b1
 80056e4:	080057b1 	.word	0x080057b1
 80056e8:	080057b1 	.word	0x080057b1
 80056ec:	080057b1 	.word	0x080057b1
 80056f0:	080057b1 	.word	0x080057b1
 80056f4:	080057b1 	.word	0x080057b1
 80056f8:	080057b1 	.word	0x080057b1
 80056fc:	08005789 	.word	0x08005789
 8005700:	080057b1 	.word	0x080057b1
 8005704:	080057b1 	.word	0x080057b1
 8005708:	080057b1 	.word	0x080057b1
 800570c:	080057b1 	.word	0x080057b1
 8005710:	080057b1 	.word	0x080057b1
 8005714:	080057b1 	.word	0x080057b1
 8005718:	080057b1 	.word	0x080057b1
 800571c:	08005791 	.word	0x08005791
 8005720:	080057b1 	.word	0x080057b1
 8005724:	080057b1 	.word	0x080057b1
 8005728:	080057b1 	.word	0x080057b1
 800572c:	080057b1 	.word	0x080057b1
 8005730:	080057b1 	.word	0x080057b1
 8005734:	080057b1 	.word	0x080057b1
 8005738:	080057b1 	.word	0x080057b1
 800573c:	08005799 	.word	0x08005799
 8005740:	080057b1 	.word	0x080057b1
 8005744:	080057b1 	.word	0x080057b1
 8005748:	080057b1 	.word	0x080057b1
 800574c:	080057b1 	.word	0x080057b1
 8005750:	080057b1 	.word	0x080057b1
 8005754:	080057b1 	.word	0x080057b1
 8005758:	080057b1 	.word	0x080057b1
 800575c:	080057a1 	.word	0x080057a1
 8005760:	080057b1 	.word	0x080057b1
 8005764:	080057b1 	.word	0x080057b1
 8005768:	080057b1 	.word	0x080057b1
 800576c:	080057b1 	.word	0x080057b1
 8005770:	080057b1 	.word	0x080057b1
 8005774:	080057b1 	.word	0x080057b1
 8005778:	080057b1 	.word	0x080057b1
 800577c:	080057a9 	.word	0x080057a9
 8005780:	2301      	movs	r3, #1
 8005782:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005786:	e0bc      	b.n	8005902 <UART_SetConfig+0x5a6>
 8005788:	2304      	movs	r3, #4
 800578a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800578e:	e0b8      	b.n	8005902 <UART_SetConfig+0x5a6>
 8005790:	2308      	movs	r3, #8
 8005792:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005796:	e0b4      	b.n	8005902 <UART_SetConfig+0x5a6>
 8005798:	2310      	movs	r3, #16
 800579a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800579e:	e0b0      	b.n	8005902 <UART_SetConfig+0x5a6>
 80057a0:	2320      	movs	r3, #32
 80057a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057a6:	e0ac      	b.n	8005902 <UART_SetConfig+0x5a6>
 80057a8:	2340      	movs	r3, #64	@ 0x40
 80057aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057ae:	e0a8      	b.n	8005902 <UART_SetConfig+0x5a6>
 80057b0:	2380      	movs	r3, #128	@ 0x80
 80057b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057b6:	e0a4      	b.n	8005902 <UART_SetConfig+0x5a6>
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a8f      	ldr	r2, [pc, #572]	@ (80059fc <UART_SetConfig+0x6a0>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d130      	bne.n	8005824 <UART_SetConfig+0x4c8>
 80057c2:	4b8d      	ldr	r3, [pc, #564]	@ (80059f8 <UART_SetConfig+0x69c>)
 80057c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057c6:	f003 0307 	and.w	r3, r3, #7
 80057ca:	2b05      	cmp	r3, #5
 80057cc:	d826      	bhi.n	800581c <UART_SetConfig+0x4c0>
 80057ce:	a201      	add	r2, pc, #4	@ (adr r2, 80057d4 <UART_SetConfig+0x478>)
 80057d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057d4:	080057ed 	.word	0x080057ed
 80057d8:	080057f5 	.word	0x080057f5
 80057dc:	080057fd 	.word	0x080057fd
 80057e0:	08005805 	.word	0x08005805
 80057e4:	0800580d 	.word	0x0800580d
 80057e8:	08005815 	.word	0x08005815
 80057ec:	2300      	movs	r3, #0
 80057ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057f2:	e086      	b.n	8005902 <UART_SetConfig+0x5a6>
 80057f4:	2304      	movs	r3, #4
 80057f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057fa:	e082      	b.n	8005902 <UART_SetConfig+0x5a6>
 80057fc:	2308      	movs	r3, #8
 80057fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005802:	e07e      	b.n	8005902 <UART_SetConfig+0x5a6>
 8005804:	2310      	movs	r3, #16
 8005806:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800580a:	e07a      	b.n	8005902 <UART_SetConfig+0x5a6>
 800580c:	2320      	movs	r3, #32
 800580e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005812:	e076      	b.n	8005902 <UART_SetConfig+0x5a6>
 8005814:	2340      	movs	r3, #64	@ 0x40
 8005816:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800581a:	e072      	b.n	8005902 <UART_SetConfig+0x5a6>
 800581c:	2380      	movs	r3, #128	@ 0x80
 800581e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005822:	e06e      	b.n	8005902 <UART_SetConfig+0x5a6>
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a75      	ldr	r2, [pc, #468]	@ (8005a00 <UART_SetConfig+0x6a4>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d130      	bne.n	8005890 <UART_SetConfig+0x534>
 800582e:	4b72      	ldr	r3, [pc, #456]	@ (80059f8 <UART_SetConfig+0x69c>)
 8005830:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005832:	f003 0307 	and.w	r3, r3, #7
 8005836:	2b05      	cmp	r3, #5
 8005838:	d826      	bhi.n	8005888 <UART_SetConfig+0x52c>
 800583a:	a201      	add	r2, pc, #4	@ (adr r2, 8005840 <UART_SetConfig+0x4e4>)
 800583c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005840:	08005859 	.word	0x08005859
 8005844:	08005861 	.word	0x08005861
 8005848:	08005869 	.word	0x08005869
 800584c:	08005871 	.word	0x08005871
 8005850:	08005879 	.word	0x08005879
 8005854:	08005881 	.word	0x08005881
 8005858:	2300      	movs	r3, #0
 800585a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800585e:	e050      	b.n	8005902 <UART_SetConfig+0x5a6>
 8005860:	2304      	movs	r3, #4
 8005862:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005866:	e04c      	b.n	8005902 <UART_SetConfig+0x5a6>
 8005868:	2308      	movs	r3, #8
 800586a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800586e:	e048      	b.n	8005902 <UART_SetConfig+0x5a6>
 8005870:	2310      	movs	r3, #16
 8005872:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005876:	e044      	b.n	8005902 <UART_SetConfig+0x5a6>
 8005878:	2320      	movs	r3, #32
 800587a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800587e:	e040      	b.n	8005902 <UART_SetConfig+0x5a6>
 8005880:	2340      	movs	r3, #64	@ 0x40
 8005882:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005886:	e03c      	b.n	8005902 <UART_SetConfig+0x5a6>
 8005888:	2380      	movs	r3, #128	@ 0x80
 800588a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800588e:	e038      	b.n	8005902 <UART_SetConfig+0x5a6>
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a5b      	ldr	r2, [pc, #364]	@ (8005a04 <UART_SetConfig+0x6a8>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d130      	bne.n	80058fc <UART_SetConfig+0x5a0>
 800589a:	4b57      	ldr	r3, [pc, #348]	@ (80059f8 <UART_SetConfig+0x69c>)
 800589c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800589e:	f003 0307 	and.w	r3, r3, #7
 80058a2:	2b05      	cmp	r3, #5
 80058a4:	d826      	bhi.n	80058f4 <UART_SetConfig+0x598>
 80058a6:	a201      	add	r2, pc, #4	@ (adr r2, 80058ac <UART_SetConfig+0x550>)
 80058a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ac:	080058c5 	.word	0x080058c5
 80058b0:	080058cd 	.word	0x080058cd
 80058b4:	080058d5 	.word	0x080058d5
 80058b8:	080058dd 	.word	0x080058dd
 80058bc:	080058e5 	.word	0x080058e5
 80058c0:	080058ed 	.word	0x080058ed
 80058c4:	2302      	movs	r3, #2
 80058c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058ca:	e01a      	b.n	8005902 <UART_SetConfig+0x5a6>
 80058cc:	2304      	movs	r3, #4
 80058ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058d2:	e016      	b.n	8005902 <UART_SetConfig+0x5a6>
 80058d4:	2308      	movs	r3, #8
 80058d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058da:	e012      	b.n	8005902 <UART_SetConfig+0x5a6>
 80058dc:	2310      	movs	r3, #16
 80058de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058e2:	e00e      	b.n	8005902 <UART_SetConfig+0x5a6>
 80058e4:	2320      	movs	r3, #32
 80058e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058ea:	e00a      	b.n	8005902 <UART_SetConfig+0x5a6>
 80058ec:	2340      	movs	r3, #64	@ 0x40
 80058ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058f2:	e006      	b.n	8005902 <UART_SetConfig+0x5a6>
 80058f4:	2380      	movs	r3, #128	@ 0x80
 80058f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058fa:	e002      	b.n	8005902 <UART_SetConfig+0x5a6>
 80058fc:	2380      	movs	r3, #128	@ 0x80
 80058fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a3f      	ldr	r2, [pc, #252]	@ (8005a04 <UART_SetConfig+0x6a8>)
 8005908:	4293      	cmp	r3, r2
 800590a:	f040 80f8 	bne.w	8005afe <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800590e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005912:	2b20      	cmp	r3, #32
 8005914:	dc46      	bgt.n	80059a4 <UART_SetConfig+0x648>
 8005916:	2b02      	cmp	r3, #2
 8005918:	f2c0 8082 	blt.w	8005a20 <UART_SetConfig+0x6c4>
 800591c:	3b02      	subs	r3, #2
 800591e:	2b1e      	cmp	r3, #30
 8005920:	d87e      	bhi.n	8005a20 <UART_SetConfig+0x6c4>
 8005922:	a201      	add	r2, pc, #4	@ (adr r2, 8005928 <UART_SetConfig+0x5cc>)
 8005924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005928:	080059ab 	.word	0x080059ab
 800592c:	08005a21 	.word	0x08005a21
 8005930:	080059b3 	.word	0x080059b3
 8005934:	08005a21 	.word	0x08005a21
 8005938:	08005a21 	.word	0x08005a21
 800593c:	08005a21 	.word	0x08005a21
 8005940:	080059c3 	.word	0x080059c3
 8005944:	08005a21 	.word	0x08005a21
 8005948:	08005a21 	.word	0x08005a21
 800594c:	08005a21 	.word	0x08005a21
 8005950:	08005a21 	.word	0x08005a21
 8005954:	08005a21 	.word	0x08005a21
 8005958:	08005a21 	.word	0x08005a21
 800595c:	08005a21 	.word	0x08005a21
 8005960:	080059d3 	.word	0x080059d3
 8005964:	08005a21 	.word	0x08005a21
 8005968:	08005a21 	.word	0x08005a21
 800596c:	08005a21 	.word	0x08005a21
 8005970:	08005a21 	.word	0x08005a21
 8005974:	08005a21 	.word	0x08005a21
 8005978:	08005a21 	.word	0x08005a21
 800597c:	08005a21 	.word	0x08005a21
 8005980:	08005a21 	.word	0x08005a21
 8005984:	08005a21 	.word	0x08005a21
 8005988:	08005a21 	.word	0x08005a21
 800598c:	08005a21 	.word	0x08005a21
 8005990:	08005a21 	.word	0x08005a21
 8005994:	08005a21 	.word	0x08005a21
 8005998:	08005a21 	.word	0x08005a21
 800599c:	08005a21 	.word	0x08005a21
 80059a0:	08005a13 	.word	0x08005a13
 80059a4:	2b40      	cmp	r3, #64	@ 0x40
 80059a6:	d037      	beq.n	8005a18 <UART_SetConfig+0x6bc>
 80059a8:	e03a      	b.n	8005a20 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80059aa:	f7fe ffd7 	bl	800495c <HAL_RCCEx_GetD3PCLK1Freq>
 80059ae:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80059b0:	e03c      	b.n	8005a2c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80059b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80059b6:	4618      	mov	r0, r3
 80059b8:	f7fe ffe6 	bl	8004988 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80059bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80059c0:	e034      	b.n	8005a2c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80059c2:	f107 0318 	add.w	r3, r7, #24
 80059c6:	4618      	mov	r0, r3
 80059c8:	f7ff f932 	bl	8004c30 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80059cc:	69fb      	ldr	r3, [r7, #28]
 80059ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80059d0:	e02c      	b.n	8005a2c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80059d2:	4b09      	ldr	r3, [pc, #36]	@ (80059f8 <UART_SetConfig+0x69c>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f003 0320 	and.w	r3, r3, #32
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d016      	beq.n	8005a0c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80059de:	4b06      	ldr	r3, [pc, #24]	@ (80059f8 <UART_SetConfig+0x69c>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	08db      	lsrs	r3, r3, #3
 80059e4:	f003 0303 	and.w	r3, r3, #3
 80059e8:	4a07      	ldr	r2, [pc, #28]	@ (8005a08 <UART_SetConfig+0x6ac>)
 80059ea:	fa22 f303 	lsr.w	r3, r2, r3
 80059ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80059f0:	e01c      	b.n	8005a2c <UART_SetConfig+0x6d0>
 80059f2:	bf00      	nop
 80059f4:	40011400 	.word	0x40011400
 80059f8:	58024400 	.word	0x58024400
 80059fc:	40007800 	.word	0x40007800
 8005a00:	40007c00 	.word	0x40007c00
 8005a04:	58000c00 	.word	0x58000c00
 8005a08:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8005a0c:	4b9d      	ldr	r3, [pc, #628]	@ (8005c84 <UART_SetConfig+0x928>)
 8005a0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a10:	e00c      	b.n	8005a2c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005a12:	4b9d      	ldr	r3, [pc, #628]	@ (8005c88 <UART_SetConfig+0x92c>)
 8005a14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a16:	e009      	b.n	8005a2c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a18:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005a1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a1e:	e005      	b.n	8005a2c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8005a20:	2300      	movs	r3, #0
 8005a22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005a24:	2301      	movs	r3, #1
 8005a26:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005a2a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005a2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	f000 81de 	beq.w	8005df0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a38:	4a94      	ldr	r2, [pc, #592]	@ (8005c8c <UART_SetConfig+0x930>)
 8005a3a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a3e:	461a      	mov	r2, r3
 8005a40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a42:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a46:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	685a      	ldr	r2, [r3, #4]
 8005a4c:	4613      	mov	r3, r2
 8005a4e:	005b      	lsls	r3, r3, #1
 8005a50:	4413      	add	r3, r2
 8005a52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a54:	429a      	cmp	r2, r3
 8005a56:	d305      	bcc.n	8005a64 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005a5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a60:	429a      	cmp	r2, r3
 8005a62:	d903      	bls.n	8005a6c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8005a64:	2301      	movs	r3, #1
 8005a66:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005a6a:	e1c1      	b.n	8005df0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a6e:	2200      	movs	r2, #0
 8005a70:	60bb      	str	r3, [r7, #8]
 8005a72:	60fa      	str	r2, [r7, #12]
 8005a74:	697b      	ldr	r3, [r7, #20]
 8005a76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a78:	4a84      	ldr	r2, [pc, #528]	@ (8005c8c <UART_SetConfig+0x930>)
 8005a7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a7e:	b29b      	uxth	r3, r3
 8005a80:	2200      	movs	r2, #0
 8005a82:	603b      	str	r3, [r7, #0]
 8005a84:	607a      	str	r2, [r7, #4]
 8005a86:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a8a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005a8e:	f7fa fc77 	bl	8000380 <__aeabi_uldivmod>
 8005a92:	4602      	mov	r2, r0
 8005a94:	460b      	mov	r3, r1
 8005a96:	4610      	mov	r0, r2
 8005a98:	4619      	mov	r1, r3
 8005a9a:	f04f 0200 	mov.w	r2, #0
 8005a9e:	f04f 0300 	mov.w	r3, #0
 8005aa2:	020b      	lsls	r3, r1, #8
 8005aa4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005aa8:	0202      	lsls	r2, r0, #8
 8005aaa:	6979      	ldr	r1, [r7, #20]
 8005aac:	6849      	ldr	r1, [r1, #4]
 8005aae:	0849      	lsrs	r1, r1, #1
 8005ab0:	2000      	movs	r0, #0
 8005ab2:	460c      	mov	r4, r1
 8005ab4:	4605      	mov	r5, r0
 8005ab6:	eb12 0804 	adds.w	r8, r2, r4
 8005aba:	eb43 0905 	adc.w	r9, r3, r5
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	469a      	mov	sl, r3
 8005ac6:	4693      	mov	fp, r2
 8005ac8:	4652      	mov	r2, sl
 8005aca:	465b      	mov	r3, fp
 8005acc:	4640      	mov	r0, r8
 8005ace:	4649      	mov	r1, r9
 8005ad0:	f7fa fc56 	bl	8000380 <__aeabi_uldivmod>
 8005ad4:	4602      	mov	r2, r0
 8005ad6:	460b      	mov	r3, r1
 8005ad8:	4613      	mov	r3, r2
 8005ada:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005adc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ade:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005ae2:	d308      	bcc.n	8005af6 <UART_SetConfig+0x79a>
 8005ae4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ae6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005aea:	d204      	bcs.n	8005af6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005af2:	60da      	str	r2, [r3, #12]
 8005af4:	e17c      	b.n	8005df0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8005af6:	2301      	movs	r3, #1
 8005af8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005afc:	e178      	b.n	8005df0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	69db      	ldr	r3, [r3, #28]
 8005b02:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b06:	f040 80c5 	bne.w	8005c94 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8005b0a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005b0e:	2b20      	cmp	r3, #32
 8005b10:	dc48      	bgt.n	8005ba4 <UART_SetConfig+0x848>
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	db7b      	blt.n	8005c0e <UART_SetConfig+0x8b2>
 8005b16:	2b20      	cmp	r3, #32
 8005b18:	d879      	bhi.n	8005c0e <UART_SetConfig+0x8b2>
 8005b1a:	a201      	add	r2, pc, #4	@ (adr r2, 8005b20 <UART_SetConfig+0x7c4>)
 8005b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b20:	08005bab 	.word	0x08005bab
 8005b24:	08005bb3 	.word	0x08005bb3
 8005b28:	08005c0f 	.word	0x08005c0f
 8005b2c:	08005c0f 	.word	0x08005c0f
 8005b30:	08005bbb 	.word	0x08005bbb
 8005b34:	08005c0f 	.word	0x08005c0f
 8005b38:	08005c0f 	.word	0x08005c0f
 8005b3c:	08005c0f 	.word	0x08005c0f
 8005b40:	08005bcb 	.word	0x08005bcb
 8005b44:	08005c0f 	.word	0x08005c0f
 8005b48:	08005c0f 	.word	0x08005c0f
 8005b4c:	08005c0f 	.word	0x08005c0f
 8005b50:	08005c0f 	.word	0x08005c0f
 8005b54:	08005c0f 	.word	0x08005c0f
 8005b58:	08005c0f 	.word	0x08005c0f
 8005b5c:	08005c0f 	.word	0x08005c0f
 8005b60:	08005bdb 	.word	0x08005bdb
 8005b64:	08005c0f 	.word	0x08005c0f
 8005b68:	08005c0f 	.word	0x08005c0f
 8005b6c:	08005c0f 	.word	0x08005c0f
 8005b70:	08005c0f 	.word	0x08005c0f
 8005b74:	08005c0f 	.word	0x08005c0f
 8005b78:	08005c0f 	.word	0x08005c0f
 8005b7c:	08005c0f 	.word	0x08005c0f
 8005b80:	08005c0f 	.word	0x08005c0f
 8005b84:	08005c0f 	.word	0x08005c0f
 8005b88:	08005c0f 	.word	0x08005c0f
 8005b8c:	08005c0f 	.word	0x08005c0f
 8005b90:	08005c0f 	.word	0x08005c0f
 8005b94:	08005c0f 	.word	0x08005c0f
 8005b98:	08005c0f 	.word	0x08005c0f
 8005b9c:	08005c0f 	.word	0x08005c0f
 8005ba0:	08005c01 	.word	0x08005c01
 8005ba4:	2b40      	cmp	r3, #64	@ 0x40
 8005ba6:	d02e      	beq.n	8005c06 <UART_SetConfig+0x8aa>
 8005ba8:	e031      	b.n	8005c0e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005baa:	f7fd fca1 	bl	80034f0 <HAL_RCC_GetPCLK1Freq>
 8005bae:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005bb0:	e033      	b.n	8005c1a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005bb2:	f7fd fcb3 	bl	800351c <HAL_RCC_GetPCLK2Freq>
 8005bb6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005bb8:	e02f      	b.n	8005c1a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005bba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	f7fe fee2 	bl	8004988 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005bc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005bc8:	e027      	b.n	8005c1a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005bca:	f107 0318 	add.w	r3, r7, #24
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f7ff f82e 	bl	8004c30 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005bd4:	69fb      	ldr	r3, [r7, #28]
 8005bd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005bd8:	e01f      	b.n	8005c1a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005bda:	4b2d      	ldr	r3, [pc, #180]	@ (8005c90 <UART_SetConfig+0x934>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f003 0320 	and.w	r3, r3, #32
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d009      	beq.n	8005bfa <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005be6:	4b2a      	ldr	r3, [pc, #168]	@ (8005c90 <UART_SetConfig+0x934>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	08db      	lsrs	r3, r3, #3
 8005bec:	f003 0303 	and.w	r3, r3, #3
 8005bf0:	4a24      	ldr	r2, [pc, #144]	@ (8005c84 <UART_SetConfig+0x928>)
 8005bf2:	fa22 f303 	lsr.w	r3, r2, r3
 8005bf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005bf8:	e00f      	b.n	8005c1a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005bfa:	4b22      	ldr	r3, [pc, #136]	@ (8005c84 <UART_SetConfig+0x928>)
 8005bfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005bfe:	e00c      	b.n	8005c1a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005c00:	4b21      	ldr	r3, [pc, #132]	@ (8005c88 <UART_SetConfig+0x92c>)
 8005c02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c04:	e009      	b.n	8005c1a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c06:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005c0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c0c:	e005      	b.n	8005c1a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005c12:	2301      	movs	r3, #1
 8005c14:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005c18:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005c1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	f000 80e7 	beq.w	8005df0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c26:	4a19      	ldr	r2, [pc, #100]	@ (8005c8c <UART_SetConfig+0x930>)
 8005c28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c2c:	461a      	mov	r2, r3
 8005c2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c30:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c34:	005a      	lsls	r2, r3, #1
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	085b      	lsrs	r3, r3, #1
 8005c3c:	441a      	add	r2, r3
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c46:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c4a:	2b0f      	cmp	r3, #15
 8005c4c:	d916      	bls.n	8005c7c <UART_SetConfig+0x920>
 8005c4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c54:	d212      	bcs.n	8005c7c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005c56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c58:	b29b      	uxth	r3, r3
 8005c5a:	f023 030f 	bic.w	r3, r3, #15
 8005c5e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005c60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c62:	085b      	lsrs	r3, r3, #1
 8005c64:	b29b      	uxth	r3, r3
 8005c66:	f003 0307 	and.w	r3, r3, #7
 8005c6a:	b29a      	uxth	r2, r3
 8005c6c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8005c78:	60da      	str	r2, [r3, #12]
 8005c7a:	e0b9      	b.n	8005df0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005c82:	e0b5      	b.n	8005df0 <UART_SetConfig+0xa94>
 8005c84:	03d09000 	.word	0x03d09000
 8005c88:	003d0900 	.word	0x003d0900
 8005c8c:	08007424 	.word	0x08007424
 8005c90:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8005c94:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005c98:	2b20      	cmp	r3, #32
 8005c9a:	dc49      	bgt.n	8005d30 <UART_SetConfig+0x9d4>
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	db7c      	blt.n	8005d9a <UART_SetConfig+0xa3e>
 8005ca0:	2b20      	cmp	r3, #32
 8005ca2:	d87a      	bhi.n	8005d9a <UART_SetConfig+0xa3e>
 8005ca4:	a201      	add	r2, pc, #4	@ (adr r2, 8005cac <UART_SetConfig+0x950>)
 8005ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005caa:	bf00      	nop
 8005cac:	08005d37 	.word	0x08005d37
 8005cb0:	08005d3f 	.word	0x08005d3f
 8005cb4:	08005d9b 	.word	0x08005d9b
 8005cb8:	08005d9b 	.word	0x08005d9b
 8005cbc:	08005d47 	.word	0x08005d47
 8005cc0:	08005d9b 	.word	0x08005d9b
 8005cc4:	08005d9b 	.word	0x08005d9b
 8005cc8:	08005d9b 	.word	0x08005d9b
 8005ccc:	08005d57 	.word	0x08005d57
 8005cd0:	08005d9b 	.word	0x08005d9b
 8005cd4:	08005d9b 	.word	0x08005d9b
 8005cd8:	08005d9b 	.word	0x08005d9b
 8005cdc:	08005d9b 	.word	0x08005d9b
 8005ce0:	08005d9b 	.word	0x08005d9b
 8005ce4:	08005d9b 	.word	0x08005d9b
 8005ce8:	08005d9b 	.word	0x08005d9b
 8005cec:	08005d67 	.word	0x08005d67
 8005cf0:	08005d9b 	.word	0x08005d9b
 8005cf4:	08005d9b 	.word	0x08005d9b
 8005cf8:	08005d9b 	.word	0x08005d9b
 8005cfc:	08005d9b 	.word	0x08005d9b
 8005d00:	08005d9b 	.word	0x08005d9b
 8005d04:	08005d9b 	.word	0x08005d9b
 8005d08:	08005d9b 	.word	0x08005d9b
 8005d0c:	08005d9b 	.word	0x08005d9b
 8005d10:	08005d9b 	.word	0x08005d9b
 8005d14:	08005d9b 	.word	0x08005d9b
 8005d18:	08005d9b 	.word	0x08005d9b
 8005d1c:	08005d9b 	.word	0x08005d9b
 8005d20:	08005d9b 	.word	0x08005d9b
 8005d24:	08005d9b 	.word	0x08005d9b
 8005d28:	08005d9b 	.word	0x08005d9b
 8005d2c:	08005d8d 	.word	0x08005d8d
 8005d30:	2b40      	cmp	r3, #64	@ 0x40
 8005d32:	d02e      	beq.n	8005d92 <UART_SetConfig+0xa36>
 8005d34:	e031      	b.n	8005d9a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d36:	f7fd fbdb 	bl	80034f0 <HAL_RCC_GetPCLK1Freq>
 8005d3a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005d3c:	e033      	b.n	8005da6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d3e:	f7fd fbed 	bl	800351c <HAL_RCC_GetPCLK2Freq>
 8005d42:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005d44:	e02f      	b.n	8005da6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005d46:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f7fe fe1c 	bl	8004988 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005d50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d54:	e027      	b.n	8005da6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005d56:	f107 0318 	add.w	r3, r7, #24
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	f7fe ff68 	bl	8004c30 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005d60:	69fb      	ldr	r3, [r7, #28]
 8005d62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d64:	e01f      	b.n	8005da6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005d66:	4b2d      	ldr	r3, [pc, #180]	@ (8005e1c <UART_SetConfig+0xac0>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f003 0320 	and.w	r3, r3, #32
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d009      	beq.n	8005d86 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005d72:	4b2a      	ldr	r3, [pc, #168]	@ (8005e1c <UART_SetConfig+0xac0>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	08db      	lsrs	r3, r3, #3
 8005d78:	f003 0303 	and.w	r3, r3, #3
 8005d7c:	4a28      	ldr	r2, [pc, #160]	@ (8005e20 <UART_SetConfig+0xac4>)
 8005d7e:	fa22 f303 	lsr.w	r3, r2, r3
 8005d82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005d84:	e00f      	b.n	8005da6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8005d86:	4b26      	ldr	r3, [pc, #152]	@ (8005e20 <UART_SetConfig+0xac4>)
 8005d88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d8a:	e00c      	b.n	8005da6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005d8c:	4b25      	ldr	r3, [pc, #148]	@ (8005e24 <UART_SetConfig+0xac8>)
 8005d8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d90:	e009      	b.n	8005da6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d92:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005d96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d98:	e005      	b.n	8005da6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005d9e:	2301      	movs	r3, #1
 8005da0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005da4:	bf00      	nop
    }

    if (pclk != 0U)
 8005da6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d021      	beq.n	8005df0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005db0:	4a1d      	ldr	r2, [pc, #116]	@ (8005e28 <UART_SetConfig+0xacc>)
 8005db2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005db6:	461a      	mov	r2, r3
 8005db8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005dba:	fbb3 f2f2 	udiv	r2, r3, r2
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	685b      	ldr	r3, [r3, #4]
 8005dc2:	085b      	lsrs	r3, r3, #1
 8005dc4:	441a      	add	r2, r3
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dce:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005dd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dd2:	2b0f      	cmp	r3, #15
 8005dd4:	d909      	bls.n	8005dea <UART_SetConfig+0xa8e>
 8005dd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dd8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ddc:	d205      	bcs.n	8005dea <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005dde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005de0:	b29a      	uxth	r2, r3
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	60da      	str	r2, [r3, #12]
 8005de8:	e002      	b.n	8005df0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005dea:	2301      	movs	r3, #1
 8005dec:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005df0:	697b      	ldr	r3, [r7, #20]
 8005df2:	2201      	movs	r2, #1
 8005df4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	2200      	movs	r2, #0
 8005e04:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005e0c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	3748      	adds	r7, #72	@ 0x48
 8005e14:	46bd      	mov	sp, r7
 8005e16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e1a:	bf00      	nop
 8005e1c:	58024400 	.word	0x58024400
 8005e20:	03d09000 	.word	0x03d09000
 8005e24:	003d0900 	.word	0x003d0900
 8005e28:	08007424 	.word	0x08007424

08005e2c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b083      	sub	sp, #12
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e38:	f003 0308 	and.w	r3, r3, #8
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d00a      	beq.n	8005e56 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	430a      	orrs	r2, r1
 8005e54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e5a:	f003 0301 	and.w	r3, r3, #1
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d00a      	beq.n	8005e78 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	685b      	ldr	r3, [r3, #4]
 8005e68:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	430a      	orrs	r2, r1
 8005e76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e7c:	f003 0302 	and.w	r3, r3, #2
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d00a      	beq.n	8005e9a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	430a      	orrs	r2, r1
 8005e98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e9e:	f003 0304 	and.w	r3, r3, #4
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d00a      	beq.n	8005ebc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	430a      	orrs	r2, r1
 8005eba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ec0:	f003 0310 	and.w	r3, r3, #16
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d00a      	beq.n	8005ede <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	689b      	ldr	r3, [r3, #8]
 8005ece:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	430a      	orrs	r2, r1
 8005edc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ee2:	f003 0320 	and.w	r3, r3, #32
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d00a      	beq.n	8005f00 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	689b      	ldr	r3, [r3, #8]
 8005ef0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	430a      	orrs	r2, r1
 8005efe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d01a      	beq.n	8005f42 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	430a      	orrs	r2, r1
 8005f20:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f26:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f2a:	d10a      	bne.n	8005f42 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	685b      	ldr	r3, [r3, #4]
 8005f32:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	430a      	orrs	r2, r1
 8005f40:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d00a      	beq.n	8005f64 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	430a      	orrs	r2, r1
 8005f62:	605a      	str	r2, [r3, #4]
  }
}
 8005f64:	bf00      	nop
 8005f66:	370c      	adds	r7, #12
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6e:	4770      	bx	lr

08005f70 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b098      	sub	sp, #96	@ 0x60
 8005f74:	af02      	add	r7, sp, #8
 8005f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005f80:	f7fb f972 	bl	8001268 <HAL_GetTick>
 8005f84:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f003 0308 	and.w	r3, r3, #8
 8005f90:	2b08      	cmp	r3, #8
 8005f92:	d12f      	bne.n	8005ff4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f94:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005f98:	9300      	str	r3, [sp, #0]
 8005f9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f000 f88e 	bl	80060c4 <UART_WaitOnFlagUntilTimeout>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d022      	beq.n	8005ff4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fb6:	e853 3f00 	ldrex	r3, [r3]
 8005fba:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005fbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fbe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005fc2:	653b      	str	r3, [r7, #80]	@ 0x50
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	461a      	mov	r2, r3
 8005fca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005fcc:	647b      	str	r3, [r7, #68]	@ 0x44
 8005fce:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fd0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005fd2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005fd4:	e841 2300 	strex	r3, r2, [r1]
 8005fd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005fda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d1e6      	bne.n	8005fae <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2220      	movs	r2, #32
 8005fe4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2200      	movs	r2, #0
 8005fec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ff0:	2303      	movs	r3, #3
 8005ff2:	e063      	b.n	80060bc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f003 0304 	and.w	r3, r3, #4
 8005ffe:	2b04      	cmp	r3, #4
 8006000:	d149      	bne.n	8006096 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006002:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006006:	9300      	str	r3, [sp, #0]
 8006008:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800600a:	2200      	movs	r2, #0
 800600c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006010:	6878      	ldr	r0, [r7, #4]
 8006012:	f000 f857 	bl	80060c4 <UART_WaitOnFlagUntilTimeout>
 8006016:	4603      	mov	r3, r0
 8006018:	2b00      	cmp	r3, #0
 800601a:	d03c      	beq.n	8006096 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006024:	e853 3f00 	ldrex	r3, [r3]
 8006028:	623b      	str	r3, [r7, #32]
   return(result);
 800602a:	6a3b      	ldr	r3, [r7, #32]
 800602c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006030:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	461a      	mov	r2, r3
 8006038:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800603a:	633b      	str	r3, [r7, #48]	@ 0x30
 800603c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800603e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006040:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006042:	e841 2300 	strex	r3, r2, [r1]
 8006046:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006048:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800604a:	2b00      	cmp	r3, #0
 800604c:	d1e6      	bne.n	800601c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	3308      	adds	r3, #8
 8006054:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	e853 3f00 	ldrex	r3, [r3]
 800605c:	60fb      	str	r3, [r7, #12]
   return(result);
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	f023 0301 	bic.w	r3, r3, #1
 8006064:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	3308      	adds	r3, #8
 800606c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800606e:	61fa      	str	r2, [r7, #28]
 8006070:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006072:	69b9      	ldr	r1, [r7, #24]
 8006074:	69fa      	ldr	r2, [r7, #28]
 8006076:	e841 2300 	strex	r3, r2, [r1]
 800607a:	617b      	str	r3, [r7, #20]
   return(result);
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d1e5      	bne.n	800604e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2220      	movs	r2, #32
 8006086:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2200      	movs	r2, #0
 800608e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006092:	2303      	movs	r3, #3
 8006094:	e012      	b.n	80060bc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2220      	movs	r2, #32
 800609a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2220      	movs	r2, #32
 80060a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2200      	movs	r2, #0
 80060aa:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2200      	movs	r2, #0
 80060b0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2200      	movs	r2, #0
 80060b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80060ba:	2300      	movs	r3, #0
}
 80060bc:	4618      	mov	r0, r3
 80060be:	3758      	adds	r7, #88	@ 0x58
 80060c0:	46bd      	mov	sp, r7
 80060c2:	bd80      	pop	{r7, pc}

080060c4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b084      	sub	sp, #16
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	60f8      	str	r0, [r7, #12]
 80060cc:	60b9      	str	r1, [r7, #8]
 80060ce:	603b      	str	r3, [r7, #0]
 80060d0:	4613      	mov	r3, r2
 80060d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060d4:	e04f      	b.n	8006176 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060d6:	69bb      	ldr	r3, [r7, #24]
 80060d8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80060dc:	d04b      	beq.n	8006176 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060de:	f7fb f8c3 	bl	8001268 <HAL_GetTick>
 80060e2:	4602      	mov	r2, r0
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	1ad3      	subs	r3, r2, r3
 80060e8:	69ba      	ldr	r2, [r7, #24]
 80060ea:	429a      	cmp	r2, r3
 80060ec:	d302      	bcc.n	80060f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80060ee:	69bb      	ldr	r3, [r7, #24]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d101      	bne.n	80060f8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80060f4:	2303      	movs	r3, #3
 80060f6:	e04e      	b.n	8006196 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f003 0304 	and.w	r3, r3, #4
 8006102:	2b00      	cmp	r3, #0
 8006104:	d037      	beq.n	8006176 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	2b80      	cmp	r3, #128	@ 0x80
 800610a:	d034      	beq.n	8006176 <UART_WaitOnFlagUntilTimeout+0xb2>
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	2b40      	cmp	r3, #64	@ 0x40
 8006110:	d031      	beq.n	8006176 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	69db      	ldr	r3, [r3, #28]
 8006118:	f003 0308 	and.w	r3, r3, #8
 800611c:	2b08      	cmp	r3, #8
 800611e:	d110      	bne.n	8006142 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	2208      	movs	r2, #8
 8006126:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006128:	68f8      	ldr	r0, [r7, #12]
 800612a:	f000 f839 	bl	80061a0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	2208      	movs	r2, #8
 8006132:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	2200      	movs	r2, #0
 800613a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800613e:	2301      	movs	r3, #1
 8006140:	e029      	b.n	8006196 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	69db      	ldr	r3, [r3, #28]
 8006148:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800614c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006150:	d111      	bne.n	8006176 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800615a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800615c:	68f8      	ldr	r0, [r7, #12]
 800615e:	f000 f81f 	bl	80061a0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2220      	movs	r2, #32
 8006166:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	2200      	movs	r2, #0
 800616e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006172:	2303      	movs	r3, #3
 8006174:	e00f      	b.n	8006196 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	69da      	ldr	r2, [r3, #28]
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	4013      	ands	r3, r2
 8006180:	68ba      	ldr	r2, [r7, #8]
 8006182:	429a      	cmp	r2, r3
 8006184:	bf0c      	ite	eq
 8006186:	2301      	moveq	r3, #1
 8006188:	2300      	movne	r3, #0
 800618a:	b2db      	uxtb	r3, r3
 800618c:	461a      	mov	r2, r3
 800618e:	79fb      	ldrb	r3, [r7, #7]
 8006190:	429a      	cmp	r2, r3
 8006192:	d0a0      	beq.n	80060d6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006194:	2300      	movs	r3, #0
}
 8006196:	4618      	mov	r0, r3
 8006198:	3710      	adds	r7, #16
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}
	...

080061a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b095      	sub	sp, #84	@ 0x54
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061b0:	e853 3f00 	ldrex	r3, [r3]
 80061b4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80061b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80061bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	461a      	mov	r2, r3
 80061c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80061c6:	643b      	str	r3, [r7, #64]	@ 0x40
 80061c8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ca:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80061cc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80061ce:	e841 2300 	strex	r3, r2, [r1]
 80061d2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80061d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d1e6      	bne.n	80061a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	3308      	adds	r3, #8
 80061e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061e2:	6a3b      	ldr	r3, [r7, #32]
 80061e4:	e853 3f00 	ldrex	r3, [r3]
 80061e8:	61fb      	str	r3, [r7, #28]
   return(result);
 80061ea:	69fa      	ldr	r2, [r7, #28]
 80061ec:	4b1e      	ldr	r3, [pc, #120]	@ (8006268 <UART_EndRxTransfer+0xc8>)
 80061ee:	4013      	ands	r3, r2
 80061f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	3308      	adds	r3, #8
 80061f8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80061fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80061fc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061fe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006200:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006202:	e841 2300 	strex	r3, r2, [r1]
 8006206:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800620a:	2b00      	cmp	r3, #0
 800620c:	d1e5      	bne.n	80061da <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006212:	2b01      	cmp	r3, #1
 8006214:	d118      	bne.n	8006248 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	e853 3f00 	ldrex	r3, [r3]
 8006222:	60bb      	str	r3, [r7, #8]
   return(result);
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	f023 0310 	bic.w	r3, r3, #16
 800622a:	647b      	str	r3, [r7, #68]	@ 0x44
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	461a      	mov	r2, r3
 8006232:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006234:	61bb      	str	r3, [r7, #24]
 8006236:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006238:	6979      	ldr	r1, [r7, #20]
 800623a:	69ba      	ldr	r2, [r7, #24]
 800623c:	e841 2300 	strex	r3, r2, [r1]
 8006240:	613b      	str	r3, [r7, #16]
   return(result);
 8006242:	693b      	ldr	r3, [r7, #16]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d1e6      	bne.n	8006216 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2220      	movs	r2, #32
 800624c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2200      	movs	r2, #0
 8006254:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2200      	movs	r2, #0
 800625a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800625c:	bf00      	nop
 800625e:	3754      	adds	r7, #84	@ 0x54
 8006260:	46bd      	mov	sp, r7
 8006262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006266:	4770      	bx	lr
 8006268:	effffffe 	.word	0xeffffffe

0800626c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800626c:	b480      	push	{r7}
 800626e:	b085      	sub	sp, #20
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800627a:	2b01      	cmp	r3, #1
 800627c:	d101      	bne.n	8006282 <HAL_UARTEx_DisableFifoMode+0x16>
 800627e:	2302      	movs	r3, #2
 8006280:	e027      	b.n	80062d2 <HAL_UARTEx_DisableFifoMode+0x66>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2201      	movs	r2, #1
 8006286:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2224      	movs	r2, #36	@ 0x24
 800628e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	681a      	ldr	r2, [r3, #0]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f022 0201 	bic.w	r2, r2, #1
 80062a8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80062b0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2200      	movs	r2, #0
 80062b6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	68fa      	ldr	r2, [r7, #12]
 80062be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2220      	movs	r2, #32
 80062c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2200      	movs	r2, #0
 80062cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80062d0:	2300      	movs	r3, #0
}
 80062d2:	4618      	mov	r0, r3
 80062d4:	3714      	adds	r7, #20
 80062d6:	46bd      	mov	sp, r7
 80062d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062dc:	4770      	bx	lr

080062de <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80062de:	b580      	push	{r7, lr}
 80062e0:	b084      	sub	sp, #16
 80062e2:	af00      	add	r7, sp, #0
 80062e4:	6078      	str	r0, [r7, #4]
 80062e6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80062ee:	2b01      	cmp	r3, #1
 80062f0:	d101      	bne.n	80062f6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80062f2:	2302      	movs	r3, #2
 80062f4:	e02d      	b.n	8006352 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2201      	movs	r2, #1
 80062fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2224      	movs	r2, #36	@ 0x24
 8006302:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	681a      	ldr	r2, [r3, #0]
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f022 0201 	bic.w	r2, r2, #1
 800631c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	689b      	ldr	r3, [r3, #8]
 8006324:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	683a      	ldr	r2, [r7, #0]
 800632e:	430a      	orrs	r2, r1
 8006330:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f000 f850 	bl	80063d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	68fa      	ldr	r2, [r7, #12]
 800633e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2220      	movs	r2, #32
 8006344:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2200      	movs	r2, #0
 800634c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006350:	2300      	movs	r3, #0
}
 8006352:	4618      	mov	r0, r3
 8006354:	3710      	adds	r7, #16
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}

0800635a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800635a:	b580      	push	{r7, lr}
 800635c:	b084      	sub	sp, #16
 800635e:	af00      	add	r7, sp, #0
 8006360:	6078      	str	r0, [r7, #4]
 8006362:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800636a:	2b01      	cmp	r3, #1
 800636c:	d101      	bne.n	8006372 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800636e:	2302      	movs	r3, #2
 8006370:	e02d      	b.n	80063ce <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2201      	movs	r2, #1
 8006376:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2224      	movs	r2, #36	@ 0x24
 800637e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	681a      	ldr	r2, [r3, #0]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f022 0201 	bic.w	r2, r2, #1
 8006398:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	689b      	ldr	r3, [r3, #8]
 80063a0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	683a      	ldr	r2, [r7, #0]
 80063aa:	430a      	orrs	r2, r1
 80063ac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f000 f812 	bl	80063d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	68fa      	ldr	r2, [r7, #12]
 80063ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2220      	movs	r2, #32
 80063c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2200      	movs	r2, #0
 80063c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80063cc:	2300      	movs	r3, #0
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	3710      	adds	r7, #16
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}
	...

080063d8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80063d8:	b480      	push	{r7}
 80063da:	b085      	sub	sp, #20
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d108      	bne.n	80063fa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2201      	movs	r2, #1
 80063ec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2201      	movs	r2, #1
 80063f4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80063f8:	e031      	b.n	800645e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80063fa:	2310      	movs	r3, #16
 80063fc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80063fe:	2310      	movs	r3, #16
 8006400:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	689b      	ldr	r3, [r3, #8]
 8006408:	0e5b      	lsrs	r3, r3, #25
 800640a:	b2db      	uxtb	r3, r3
 800640c:	f003 0307 	and.w	r3, r3, #7
 8006410:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	689b      	ldr	r3, [r3, #8]
 8006418:	0f5b      	lsrs	r3, r3, #29
 800641a:	b2db      	uxtb	r3, r3
 800641c:	f003 0307 	and.w	r3, r3, #7
 8006420:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006422:	7bbb      	ldrb	r3, [r7, #14]
 8006424:	7b3a      	ldrb	r2, [r7, #12]
 8006426:	4911      	ldr	r1, [pc, #68]	@ (800646c <UARTEx_SetNbDataToProcess+0x94>)
 8006428:	5c8a      	ldrb	r2, [r1, r2]
 800642a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800642e:	7b3a      	ldrb	r2, [r7, #12]
 8006430:	490f      	ldr	r1, [pc, #60]	@ (8006470 <UARTEx_SetNbDataToProcess+0x98>)
 8006432:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006434:	fb93 f3f2 	sdiv	r3, r3, r2
 8006438:	b29a      	uxth	r2, r3
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006440:	7bfb      	ldrb	r3, [r7, #15]
 8006442:	7b7a      	ldrb	r2, [r7, #13]
 8006444:	4909      	ldr	r1, [pc, #36]	@ (800646c <UARTEx_SetNbDataToProcess+0x94>)
 8006446:	5c8a      	ldrb	r2, [r1, r2]
 8006448:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800644c:	7b7a      	ldrb	r2, [r7, #13]
 800644e:	4908      	ldr	r1, [pc, #32]	@ (8006470 <UARTEx_SetNbDataToProcess+0x98>)
 8006450:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006452:	fb93 f3f2 	sdiv	r3, r3, r2
 8006456:	b29a      	uxth	r2, r3
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800645e:	bf00      	nop
 8006460:	3714      	adds	r7, #20
 8006462:	46bd      	mov	sp, r7
 8006464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006468:	4770      	bx	lr
 800646a:	bf00      	nop
 800646c:	0800743c 	.word	0x0800743c
 8006470:	08007444 	.word	0x08007444

08006474 <std>:
 8006474:	2300      	movs	r3, #0
 8006476:	b510      	push	{r4, lr}
 8006478:	4604      	mov	r4, r0
 800647a:	e9c0 3300 	strd	r3, r3, [r0]
 800647e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006482:	6083      	str	r3, [r0, #8]
 8006484:	8181      	strh	r1, [r0, #12]
 8006486:	6643      	str	r3, [r0, #100]	@ 0x64
 8006488:	81c2      	strh	r2, [r0, #14]
 800648a:	6183      	str	r3, [r0, #24]
 800648c:	4619      	mov	r1, r3
 800648e:	2208      	movs	r2, #8
 8006490:	305c      	adds	r0, #92	@ 0x5c
 8006492:	f000 f906 	bl	80066a2 <memset>
 8006496:	4b0d      	ldr	r3, [pc, #52]	@ (80064cc <std+0x58>)
 8006498:	6263      	str	r3, [r4, #36]	@ 0x24
 800649a:	4b0d      	ldr	r3, [pc, #52]	@ (80064d0 <std+0x5c>)
 800649c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800649e:	4b0d      	ldr	r3, [pc, #52]	@ (80064d4 <std+0x60>)
 80064a0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80064a2:	4b0d      	ldr	r3, [pc, #52]	@ (80064d8 <std+0x64>)
 80064a4:	6323      	str	r3, [r4, #48]	@ 0x30
 80064a6:	4b0d      	ldr	r3, [pc, #52]	@ (80064dc <std+0x68>)
 80064a8:	6224      	str	r4, [r4, #32]
 80064aa:	429c      	cmp	r4, r3
 80064ac:	d006      	beq.n	80064bc <std+0x48>
 80064ae:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80064b2:	4294      	cmp	r4, r2
 80064b4:	d002      	beq.n	80064bc <std+0x48>
 80064b6:	33d0      	adds	r3, #208	@ 0xd0
 80064b8:	429c      	cmp	r4, r3
 80064ba:	d105      	bne.n	80064c8 <std+0x54>
 80064bc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80064c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80064c4:	f000 b966 	b.w	8006794 <__retarget_lock_init_recursive>
 80064c8:	bd10      	pop	{r4, pc}
 80064ca:	bf00      	nop
 80064cc:	0800661d 	.word	0x0800661d
 80064d0:	0800663f 	.word	0x0800663f
 80064d4:	08006677 	.word	0x08006677
 80064d8:	0800669b 	.word	0x0800669b
 80064dc:	24000238 	.word	0x24000238

080064e0 <stdio_exit_handler>:
 80064e0:	4a02      	ldr	r2, [pc, #8]	@ (80064ec <stdio_exit_handler+0xc>)
 80064e2:	4903      	ldr	r1, [pc, #12]	@ (80064f0 <stdio_exit_handler+0x10>)
 80064e4:	4803      	ldr	r0, [pc, #12]	@ (80064f4 <stdio_exit_handler+0x14>)
 80064e6:	f000 b869 	b.w	80065bc <_fwalk_sglue>
 80064ea:	bf00      	nop
 80064ec:	24000010 	.word	0x24000010
 80064f0:	08007051 	.word	0x08007051
 80064f4:	24000020 	.word	0x24000020

080064f8 <cleanup_stdio>:
 80064f8:	6841      	ldr	r1, [r0, #4]
 80064fa:	4b0c      	ldr	r3, [pc, #48]	@ (800652c <cleanup_stdio+0x34>)
 80064fc:	4299      	cmp	r1, r3
 80064fe:	b510      	push	{r4, lr}
 8006500:	4604      	mov	r4, r0
 8006502:	d001      	beq.n	8006508 <cleanup_stdio+0x10>
 8006504:	f000 fda4 	bl	8007050 <_fflush_r>
 8006508:	68a1      	ldr	r1, [r4, #8]
 800650a:	4b09      	ldr	r3, [pc, #36]	@ (8006530 <cleanup_stdio+0x38>)
 800650c:	4299      	cmp	r1, r3
 800650e:	d002      	beq.n	8006516 <cleanup_stdio+0x1e>
 8006510:	4620      	mov	r0, r4
 8006512:	f000 fd9d 	bl	8007050 <_fflush_r>
 8006516:	68e1      	ldr	r1, [r4, #12]
 8006518:	4b06      	ldr	r3, [pc, #24]	@ (8006534 <cleanup_stdio+0x3c>)
 800651a:	4299      	cmp	r1, r3
 800651c:	d004      	beq.n	8006528 <cleanup_stdio+0x30>
 800651e:	4620      	mov	r0, r4
 8006520:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006524:	f000 bd94 	b.w	8007050 <_fflush_r>
 8006528:	bd10      	pop	{r4, pc}
 800652a:	bf00      	nop
 800652c:	24000238 	.word	0x24000238
 8006530:	240002a0 	.word	0x240002a0
 8006534:	24000308 	.word	0x24000308

08006538 <global_stdio_init.part.0>:
 8006538:	b510      	push	{r4, lr}
 800653a:	4b0b      	ldr	r3, [pc, #44]	@ (8006568 <global_stdio_init.part.0+0x30>)
 800653c:	4c0b      	ldr	r4, [pc, #44]	@ (800656c <global_stdio_init.part.0+0x34>)
 800653e:	4a0c      	ldr	r2, [pc, #48]	@ (8006570 <global_stdio_init.part.0+0x38>)
 8006540:	601a      	str	r2, [r3, #0]
 8006542:	4620      	mov	r0, r4
 8006544:	2200      	movs	r2, #0
 8006546:	2104      	movs	r1, #4
 8006548:	f7ff ff94 	bl	8006474 <std>
 800654c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006550:	2201      	movs	r2, #1
 8006552:	2109      	movs	r1, #9
 8006554:	f7ff ff8e 	bl	8006474 <std>
 8006558:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800655c:	2202      	movs	r2, #2
 800655e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006562:	2112      	movs	r1, #18
 8006564:	f7ff bf86 	b.w	8006474 <std>
 8006568:	24000370 	.word	0x24000370
 800656c:	24000238 	.word	0x24000238
 8006570:	080064e1 	.word	0x080064e1

08006574 <__sfp_lock_acquire>:
 8006574:	4801      	ldr	r0, [pc, #4]	@ (800657c <__sfp_lock_acquire+0x8>)
 8006576:	f000 b90e 	b.w	8006796 <__retarget_lock_acquire_recursive>
 800657a:	bf00      	nop
 800657c:	24000379 	.word	0x24000379

08006580 <__sfp_lock_release>:
 8006580:	4801      	ldr	r0, [pc, #4]	@ (8006588 <__sfp_lock_release+0x8>)
 8006582:	f000 b909 	b.w	8006798 <__retarget_lock_release_recursive>
 8006586:	bf00      	nop
 8006588:	24000379 	.word	0x24000379

0800658c <__sinit>:
 800658c:	b510      	push	{r4, lr}
 800658e:	4604      	mov	r4, r0
 8006590:	f7ff fff0 	bl	8006574 <__sfp_lock_acquire>
 8006594:	6a23      	ldr	r3, [r4, #32]
 8006596:	b11b      	cbz	r3, 80065a0 <__sinit+0x14>
 8006598:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800659c:	f7ff bff0 	b.w	8006580 <__sfp_lock_release>
 80065a0:	4b04      	ldr	r3, [pc, #16]	@ (80065b4 <__sinit+0x28>)
 80065a2:	6223      	str	r3, [r4, #32]
 80065a4:	4b04      	ldr	r3, [pc, #16]	@ (80065b8 <__sinit+0x2c>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d1f5      	bne.n	8006598 <__sinit+0xc>
 80065ac:	f7ff ffc4 	bl	8006538 <global_stdio_init.part.0>
 80065b0:	e7f2      	b.n	8006598 <__sinit+0xc>
 80065b2:	bf00      	nop
 80065b4:	080064f9 	.word	0x080064f9
 80065b8:	24000370 	.word	0x24000370

080065bc <_fwalk_sglue>:
 80065bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80065c0:	4607      	mov	r7, r0
 80065c2:	4688      	mov	r8, r1
 80065c4:	4614      	mov	r4, r2
 80065c6:	2600      	movs	r6, #0
 80065c8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80065cc:	f1b9 0901 	subs.w	r9, r9, #1
 80065d0:	d505      	bpl.n	80065de <_fwalk_sglue+0x22>
 80065d2:	6824      	ldr	r4, [r4, #0]
 80065d4:	2c00      	cmp	r4, #0
 80065d6:	d1f7      	bne.n	80065c8 <_fwalk_sglue+0xc>
 80065d8:	4630      	mov	r0, r6
 80065da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80065de:	89ab      	ldrh	r3, [r5, #12]
 80065e0:	2b01      	cmp	r3, #1
 80065e2:	d907      	bls.n	80065f4 <_fwalk_sglue+0x38>
 80065e4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80065e8:	3301      	adds	r3, #1
 80065ea:	d003      	beq.n	80065f4 <_fwalk_sglue+0x38>
 80065ec:	4629      	mov	r1, r5
 80065ee:	4638      	mov	r0, r7
 80065f0:	47c0      	blx	r8
 80065f2:	4306      	orrs	r6, r0
 80065f4:	3568      	adds	r5, #104	@ 0x68
 80065f6:	e7e9      	b.n	80065cc <_fwalk_sglue+0x10>

080065f8 <iprintf>:
 80065f8:	b40f      	push	{r0, r1, r2, r3}
 80065fa:	b507      	push	{r0, r1, r2, lr}
 80065fc:	4906      	ldr	r1, [pc, #24]	@ (8006618 <iprintf+0x20>)
 80065fe:	ab04      	add	r3, sp, #16
 8006600:	6808      	ldr	r0, [r1, #0]
 8006602:	f853 2b04 	ldr.w	r2, [r3], #4
 8006606:	6881      	ldr	r1, [r0, #8]
 8006608:	9301      	str	r3, [sp, #4]
 800660a:	f000 f9f7 	bl	80069fc <_vfiprintf_r>
 800660e:	b003      	add	sp, #12
 8006610:	f85d eb04 	ldr.w	lr, [sp], #4
 8006614:	b004      	add	sp, #16
 8006616:	4770      	bx	lr
 8006618:	2400001c 	.word	0x2400001c

0800661c <__sread>:
 800661c:	b510      	push	{r4, lr}
 800661e:	460c      	mov	r4, r1
 8006620:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006624:	f000 f868 	bl	80066f8 <_read_r>
 8006628:	2800      	cmp	r0, #0
 800662a:	bfab      	itete	ge
 800662c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800662e:	89a3      	ldrhlt	r3, [r4, #12]
 8006630:	181b      	addge	r3, r3, r0
 8006632:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006636:	bfac      	ite	ge
 8006638:	6563      	strge	r3, [r4, #84]	@ 0x54
 800663a:	81a3      	strhlt	r3, [r4, #12]
 800663c:	bd10      	pop	{r4, pc}

0800663e <__swrite>:
 800663e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006642:	461f      	mov	r7, r3
 8006644:	898b      	ldrh	r3, [r1, #12]
 8006646:	05db      	lsls	r3, r3, #23
 8006648:	4605      	mov	r5, r0
 800664a:	460c      	mov	r4, r1
 800664c:	4616      	mov	r6, r2
 800664e:	d505      	bpl.n	800665c <__swrite+0x1e>
 8006650:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006654:	2302      	movs	r3, #2
 8006656:	2200      	movs	r2, #0
 8006658:	f000 f83c 	bl	80066d4 <_lseek_r>
 800665c:	89a3      	ldrh	r3, [r4, #12]
 800665e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006662:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006666:	81a3      	strh	r3, [r4, #12]
 8006668:	4632      	mov	r2, r6
 800666a:	463b      	mov	r3, r7
 800666c:	4628      	mov	r0, r5
 800666e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006672:	f000 b853 	b.w	800671c <_write_r>

08006676 <__sseek>:
 8006676:	b510      	push	{r4, lr}
 8006678:	460c      	mov	r4, r1
 800667a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800667e:	f000 f829 	bl	80066d4 <_lseek_r>
 8006682:	1c43      	adds	r3, r0, #1
 8006684:	89a3      	ldrh	r3, [r4, #12]
 8006686:	bf15      	itete	ne
 8006688:	6560      	strne	r0, [r4, #84]	@ 0x54
 800668a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800668e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006692:	81a3      	strheq	r3, [r4, #12]
 8006694:	bf18      	it	ne
 8006696:	81a3      	strhne	r3, [r4, #12]
 8006698:	bd10      	pop	{r4, pc}

0800669a <__sclose>:
 800669a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800669e:	f000 b809 	b.w	80066b4 <_close_r>

080066a2 <memset>:
 80066a2:	4402      	add	r2, r0
 80066a4:	4603      	mov	r3, r0
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d100      	bne.n	80066ac <memset+0xa>
 80066aa:	4770      	bx	lr
 80066ac:	f803 1b01 	strb.w	r1, [r3], #1
 80066b0:	e7f9      	b.n	80066a6 <memset+0x4>
	...

080066b4 <_close_r>:
 80066b4:	b538      	push	{r3, r4, r5, lr}
 80066b6:	4d06      	ldr	r5, [pc, #24]	@ (80066d0 <_close_r+0x1c>)
 80066b8:	2300      	movs	r3, #0
 80066ba:	4604      	mov	r4, r0
 80066bc:	4608      	mov	r0, r1
 80066be:	602b      	str	r3, [r5, #0]
 80066c0:	f7fa fcb8 	bl	8001034 <_close>
 80066c4:	1c43      	adds	r3, r0, #1
 80066c6:	d102      	bne.n	80066ce <_close_r+0x1a>
 80066c8:	682b      	ldr	r3, [r5, #0]
 80066ca:	b103      	cbz	r3, 80066ce <_close_r+0x1a>
 80066cc:	6023      	str	r3, [r4, #0]
 80066ce:	bd38      	pop	{r3, r4, r5, pc}
 80066d0:	24000374 	.word	0x24000374

080066d4 <_lseek_r>:
 80066d4:	b538      	push	{r3, r4, r5, lr}
 80066d6:	4d07      	ldr	r5, [pc, #28]	@ (80066f4 <_lseek_r+0x20>)
 80066d8:	4604      	mov	r4, r0
 80066da:	4608      	mov	r0, r1
 80066dc:	4611      	mov	r1, r2
 80066de:	2200      	movs	r2, #0
 80066e0:	602a      	str	r2, [r5, #0]
 80066e2:	461a      	mov	r2, r3
 80066e4:	f7fa fccd 	bl	8001082 <_lseek>
 80066e8:	1c43      	adds	r3, r0, #1
 80066ea:	d102      	bne.n	80066f2 <_lseek_r+0x1e>
 80066ec:	682b      	ldr	r3, [r5, #0]
 80066ee:	b103      	cbz	r3, 80066f2 <_lseek_r+0x1e>
 80066f0:	6023      	str	r3, [r4, #0]
 80066f2:	bd38      	pop	{r3, r4, r5, pc}
 80066f4:	24000374 	.word	0x24000374

080066f8 <_read_r>:
 80066f8:	b538      	push	{r3, r4, r5, lr}
 80066fa:	4d07      	ldr	r5, [pc, #28]	@ (8006718 <_read_r+0x20>)
 80066fc:	4604      	mov	r4, r0
 80066fe:	4608      	mov	r0, r1
 8006700:	4611      	mov	r1, r2
 8006702:	2200      	movs	r2, #0
 8006704:	602a      	str	r2, [r5, #0]
 8006706:	461a      	mov	r2, r3
 8006708:	f7fa fc5b 	bl	8000fc2 <_read>
 800670c:	1c43      	adds	r3, r0, #1
 800670e:	d102      	bne.n	8006716 <_read_r+0x1e>
 8006710:	682b      	ldr	r3, [r5, #0]
 8006712:	b103      	cbz	r3, 8006716 <_read_r+0x1e>
 8006714:	6023      	str	r3, [r4, #0]
 8006716:	bd38      	pop	{r3, r4, r5, pc}
 8006718:	24000374 	.word	0x24000374

0800671c <_write_r>:
 800671c:	b538      	push	{r3, r4, r5, lr}
 800671e:	4d07      	ldr	r5, [pc, #28]	@ (800673c <_write_r+0x20>)
 8006720:	4604      	mov	r4, r0
 8006722:	4608      	mov	r0, r1
 8006724:	4611      	mov	r1, r2
 8006726:	2200      	movs	r2, #0
 8006728:	602a      	str	r2, [r5, #0]
 800672a:	461a      	mov	r2, r3
 800672c:	f7fa fc66 	bl	8000ffc <_write>
 8006730:	1c43      	adds	r3, r0, #1
 8006732:	d102      	bne.n	800673a <_write_r+0x1e>
 8006734:	682b      	ldr	r3, [r5, #0]
 8006736:	b103      	cbz	r3, 800673a <_write_r+0x1e>
 8006738:	6023      	str	r3, [r4, #0]
 800673a:	bd38      	pop	{r3, r4, r5, pc}
 800673c:	24000374 	.word	0x24000374

08006740 <__errno>:
 8006740:	4b01      	ldr	r3, [pc, #4]	@ (8006748 <__errno+0x8>)
 8006742:	6818      	ldr	r0, [r3, #0]
 8006744:	4770      	bx	lr
 8006746:	bf00      	nop
 8006748:	2400001c 	.word	0x2400001c

0800674c <__libc_init_array>:
 800674c:	b570      	push	{r4, r5, r6, lr}
 800674e:	4d0d      	ldr	r5, [pc, #52]	@ (8006784 <__libc_init_array+0x38>)
 8006750:	4c0d      	ldr	r4, [pc, #52]	@ (8006788 <__libc_init_array+0x3c>)
 8006752:	1b64      	subs	r4, r4, r5
 8006754:	10a4      	asrs	r4, r4, #2
 8006756:	2600      	movs	r6, #0
 8006758:	42a6      	cmp	r6, r4
 800675a:	d109      	bne.n	8006770 <__libc_init_array+0x24>
 800675c:	4d0b      	ldr	r5, [pc, #44]	@ (800678c <__libc_init_array+0x40>)
 800675e:	4c0c      	ldr	r4, [pc, #48]	@ (8006790 <__libc_init_array+0x44>)
 8006760:	f000 fdc6 	bl	80072f0 <_init>
 8006764:	1b64      	subs	r4, r4, r5
 8006766:	10a4      	asrs	r4, r4, #2
 8006768:	2600      	movs	r6, #0
 800676a:	42a6      	cmp	r6, r4
 800676c:	d105      	bne.n	800677a <__libc_init_array+0x2e>
 800676e:	bd70      	pop	{r4, r5, r6, pc}
 8006770:	f855 3b04 	ldr.w	r3, [r5], #4
 8006774:	4798      	blx	r3
 8006776:	3601      	adds	r6, #1
 8006778:	e7ee      	b.n	8006758 <__libc_init_array+0xc>
 800677a:	f855 3b04 	ldr.w	r3, [r5], #4
 800677e:	4798      	blx	r3
 8006780:	3601      	adds	r6, #1
 8006782:	e7f2      	b.n	800676a <__libc_init_array+0x1e>
 8006784:	08007488 	.word	0x08007488
 8006788:	08007488 	.word	0x08007488
 800678c:	08007488 	.word	0x08007488
 8006790:	0800748c 	.word	0x0800748c

08006794 <__retarget_lock_init_recursive>:
 8006794:	4770      	bx	lr

08006796 <__retarget_lock_acquire_recursive>:
 8006796:	4770      	bx	lr

08006798 <__retarget_lock_release_recursive>:
 8006798:	4770      	bx	lr

0800679a <memcpy>:
 800679a:	440a      	add	r2, r1
 800679c:	4291      	cmp	r1, r2
 800679e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80067a2:	d100      	bne.n	80067a6 <memcpy+0xc>
 80067a4:	4770      	bx	lr
 80067a6:	b510      	push	{r4, lr}
 80067a8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80067ac:	f803 4f01 	strb.w	r4, [r3, #1]!
 80067b0:	4291      	cmp	r1, r2
 80067b2:	d1f9      	bne.n	80067a8 <memcpy+0xe>
 80067b4:	bd10      	pop	{r4, pc}
	...

080067b8 <_free_r>:
 80067b8:	b538      	push	{r3, r4, r5, lr}
 80067ba:	4605      	mov	r5, r0
 80067bc:	2900      	cmp	r1, #0
 80067be:	d041      	beq.n	8006844 <_free_r+0x8c>
 80067c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80067c4:	1f0c      	subs	r4, r1, #4
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	bfb8      	it	lt
 80067ca:	18e4      	addlt	r4, r4, r3
 80067cc:	f000 f8e0 	bl	8006990 <__malloc_lock>
 80067d0:	4a1d      	ldr	r2, [pc, #116]	@ (8006848 <_free_r+0x90>)
 80067d2:	6813      	ldr	r3, [r2, #0]
 80067d4:	b933      	cbnz	r3, 80067e4 <_free_r+0x2c>
 80067d6:	6063      	str	r3, [r4, #4]
 80067d8:	6014      	str	r4, [r2, #0]
 80067da:	4628      	mov	r0, r5
 80067dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80067e0:	f000 b8dc 	b.w	800699c <__malloc_unlock>
 80067e4:	42a3      	cmp	r3, r4
 80067e6:	d908      	bls.n	80067fa <_free_r+0x42>
 80067e8:	6820      	ldr	r0, [r4, #0]
 80067ea:	1821      	adds	r1, r4, r0
 80067ec:	428b      	cmp	r3, r1
 80067ee:	bf01      	itttt	eq
 80067f0:	6819      	ldreq	r1, [r3, #0]
 80067f2:	685b      	ldreq	r3, [r3, #4]
 80067f4:	1809      	addeq	r1, r1, r0
 80067f6:	6021      	streq	r1, [r4, #0]
 80067f8:	e7ed      	b.n	80067d6 <_free_r+0x1e>
 80067fa:	461a      	mov	r2, r3
 80067fc:	685b      	ldr	r3, [r3, #4]
 80067fe:	b10b      	cbz	r3, 8006804 <_free_r+0x4c>
 8006800:	42a3      	cmp	r3, r4
 8006802:	d9fa      	bls.n	80067fa <_free_r+0x42>
 8006804:	6811      	ldr	r1, [r2, #0]
 8006806:	1850      	adds	r0, r2, r1
 8006808:	42a0      	cmp	r0, r4
 800680a:	d10b      	bne.n	8006824 <_free_r+0x6c>
 800680c:	6820      	ldr	r0, [r4, #0]
 800680e:	4401      	add	r1, r0
 8006810:	1850      	adds	r0, r2, r1
 8006812:	4283      	cmp	r3, r0
 8006814:	6011      	str	r1, [r2, #0]
 8006816:	d1e0      	bne.n	80067da <_free_r+0x22>
 8006818:	6818      	ldr	r0, [r3, #0]
 800681a:	685b      	ldr	r3, [r3, #4]
 800681c:	6053      	str	r3, [r2, #4]
 800681e:	4408      	add	r0, r1
 8006820:	6010      	str	r0, [r2, #0]
 8006822:	e7da      	b.n	80067da <_free_r+0x22>
 8006824:	d902      	bls.n	800682c <_free_r+0x74>
 8006826:	230c      	movs	r3, #12
 8006828:	602b      	str	r3, [r5, #0]
 800682a:	e7d6      	b.n	80067da <_free_r+0x22>
 800682c:	6820      	ldr	r0, [r4, #0]
 800682e:	1821      	adds	r1, r4, r0
 8006830:	428b      	cmp	r3, r1
 8006832:	bf04      	itt	eq
 8006834:	6819      	ldreq	r1, [r3, #0]
 8006836:	685b      	ldreq	r3, [r3, #4]
 8006838:	6063      	str	r3, [r4, #4]
 800683a:	bf04      	itt	eq
 800683c:	1809      	addeq	r1, r1, r0
 800683e:	6021      	streq	r1, [r4, #0]
 8006840:	6054      	str	r4, [r2, #4]
 8006842:	e7ca      	b.n	80067da <_free_r+0x22>
 8006844:	bd38      	pop	{r3, r4, r5, pc}
 8006846:	bf00      	nop
 8006848:	24000380 	.word	0x24000380

0800684c <sbrk_aligned>:
 800684c:	b570      	push	{r4, r5, r6, lr}
 800684e:	4e0f      	ldr	r6, [pc, #60]	@ (800688c <sbrk_aligned+0x40>)
 8006850:	460c      	mov	r4, r1
 8006852:	6831      	ldr	r1, [r6, #0]
 8006854:	4605      	mov	r5, r0
 8006856:	b911      	cbnz	r1, 800685e <sbrk_aligned+0x12>
 8006858:	f000 fcb6 	bl	80071c8 <_sbrk_r>
 800685c:	6030      	str	r0, [r6, #0]
 800685e:	4621      	mov	r1, r4
 8006860:	4628      	mov	r0, r5
 8006862:	f000 fcb1 	bl	80071c8 <_sbrk_r>
 8006866:	1c43      	adds	r3, r0, #1
 8006868:	d103      	bne.n	8006872 <sbrk_aligned+0x26>
 800686a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800686e:	4620      	mov	r0, r4
 8006870:	bd70      	pop	{r4, r5, r6, pc}
 8006872:	1cc4      	adds	r4, r0, #3
 8006874:	f024 0403 	bic.w	r4, r4, #3
 8006878:	42a0      	cmp	r0, r4
 800687a:	d0f8      	beq.n	800686e <sbrk_aligned+0x22>
 800687c:	1a21      	subs	r1, r4, r0
 800687e:	4628      	mov	r0, r5
 8006880:	f000 fca2 	bl	80071c8 <_sbrk_r>
 8006884:	3001      	adds	r0, #1
 8006886:	d1f2      	bne.n	800686e <sbrk_aligned+0x22>
 8006888:	e7ef      	b.n	800686a <sbrk_aligned+0x1e>
 800688a:	bf00      	nop
 800688c:	2400037c 	.word	0x2400037c

08006890 <_malloc_r>:
 8006890:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006894:	1ccd      	adds	r5, r1, #3
 8006896:	f025 0503 	bic.w	r5, r5, #3
 800689a:	3508      	adds	r5, #8
 800689c:	2d0c      	cmp	r5, #12
 800689e:	bf38      	it	cc
 80068a0:	250c      	movcc	r5, #12
 80068a2:	2d00      	cmp	r5, #0
 80068a4:	4606      	mov	r6, r0
 80068a6:	db01      	blt.n	80068ac <_malloc_r+0x1c>
 80068a8:	42a9      	cmp	r1, r5
 80068aa:	d904      	bls.n	80068b6 <_malloc_r+0x26>
 80068ac:	230c      	movs	r3, #12
 80068ae:	6033      	str	r3, [r6, #0]
 80068b0:	2000      	movs	r0, #0
 80068b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068b6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800698c <_malloc_r+0xfc>
 80068ba:	f000 f869 	bl	8006990 <__malloc_lock>
 80068be:	f8d8 3000 	ldr.w	r3, [r8]
 80068c2:	461c      	mov	r4, r3
 80068c4:	bb44      	cbnz	r4, 8006918 <_malloc_r+0x88>
 80068c6:	4629      	mov	r1, r5
 80068c8:	4630      	mov	r0, r6
 80068ca:	f7ff ffbf 	bl	800684c <sbrk_aligned>
 80068ce:	1c43      	adds	r3, r0, #1
 80068d0:	4604      	mov	r4, r0
 80068d2:	d158      	bne.n	8006986 <_malloc_r+0xf6>
 80068d4:	f8d8 4000 	ldr.w	r4, [r8]
 80068d8:	4627      	mov	r7, r4
 80068da:	2f00      	cmp	r7, #0
 80068dc:	d143      	bne.n	8006966 <_malloc_r+0xd6>
 80068de:	2c00      	cmp	r4, #0
 80068e0:	d04b      	beq.n	800697a <_malloc_r+0xea>
 80068e2:	6823      	ldr	r3, [r4, #0]
 80068e4:	4639      	mov	r1, r7
 80068e6:	4630      	mov	r0, r6
 80068e8:	eb04 0903 	add.w	r9, r4, r3
 80068ec:	f000 fc6c 	bl	80071c8 <_sbrk_r>
 80068f0:	4581      	cmp	r9, r0
 80068f2:	d142      	bne.n	800697a <_malloc_r+0xea>
 80068f4:	6821      	ldr	r1, [r4, #0]
 80068f6:	1a6d      	subs	r5, r5, r1
 80068f8:	4629      	mov	r1, r5
 80068fa:	4630      	mov	r0, r6
 80068fc:	f7ff ffa6 	bl	800684c <sbrk_aligned>
 8006900:	3001      	adds	r0, #1
 8006902:	d03a      	beq.n	800697a <_malloc_r+0xea>
 8006904:	6823      	ldr	r3, [r4, #0]
 8006906:	442b      	add	r3, r5
 8006908:	6023      	str	r3, [r4, #0]
 800690a:	f8d8 3000 	ldr.w	r3, [r8]
 800690e:	685a      	ldr	r2, [r3, #4]
 8006910:	bb62      	cbnz	r2, 800696c <_malloc_r+0xdc>
 8006912:	f8c8 7000 	str.w	r7, [r8]
 8006916:	e00f      	b.n	8006938 <_malloc_r+0xa8>
 8006918:	6822      	ldr	r2, [r4, #0]
 800691a:	1b52      	subs	r2, r2, r5
 800691c:	d420      	bmi.n	8006960 <_malloc_r+0xd0>
 800691e:	2a0b      	cmp	r2, #11
 8006920:	d917      	bls.n	8006952 <_malloc_r+0xc2>
 8006922:	1961      	adds	r1, r4, r5
 8006924:	42a3      	cmp	r3, r4
 8006926:	6025      	str	r5, [r4, #0]
 8006928:	bf18      	it	ne
 800692a:	6059      	strne	r1, [r3, #4]
 800692c:	6863      	ldr	r3, [r4, #4]
 800692e:	bf08      	it	eq
 8006930:	f8c8 1000 	streq.w	r1, [r8]
 8006934:	5162      	str	r2, [r4, r5]
 8006936:	604b      	str	r3, [r1, #4]
 8006938:	4630      	mov	r0, r6
 800693a:	f000 f82f 	bl	800699c <__malloc_unlock>
 800693e:	f104 000b 	add.w	r0, r4, #11
 8006942:	1d23      	adds	r3, r4, #4
 8006944:	f020 0007 	bic.w	r0, r0, #7
 8006948:	1ac2      	subs	r2, r0, r3
 800694a:	bf1c      	itt	ne
 800694c:	1a1b      	subne	r3, r3, r0
 800694e:	50a3      	strne	r3, [r4, r2]
 8006950:	e7af      	b.n	80068b2 <_malloc_r+0x22>
 8006952:	6862      	ldr	r2, [r4, #4]
 8006954:	42a3      	cmp	r3, r4
 8006956:	bf0c      	ite	eq
 8006958:	f8c8 2000 	streq.w	r2, [r8]
 800695c:	605a      	strne	r2, [r3, #4]
 800695e:	e7eb      	b.n	8006938 <_malloc_r+0xa8>
 8006960:	4623      	mov	r3, r4
 8006962:	6864      	ldr	r4, [r4, #4]
 8006964:	e7ae      	b.n	80068c4 <_malloc_r+0x34>
 8006966:	463c      	mov	r4, r7
 8006968:	687f      	ldr	r7, [r7, #4]
 800696a:	e7b6      	b.n	80068da <_malloc_r+0x4a>
 800696c:	461a      	mov	r2, r3
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	42a3      	cmp	r3, r4
 8006972:	d1fb      	bne.n	800696c <_malloc_r+0xdc>
 8006974:	2300      	movs	r3, #0
 8006976:	6053      	str	r3, [r2, #4]
 8006978:	e7de      	b.n	8006938 <_malloc_r+0xa8>
 800697a:	230c      	movs	r3, #12
 800697c:	6033      	str	r3, [r6, #0]
 800697e:	4630      	mov	r0, r6
 8006980:	f000 f80c 	bl	800699c <__malloc_unlock>
 8006984:	e794      	b.n	80068b0 <_malloc_r+0x20>
 8006986:	6005      	str	r5, [r0, #0]
 8006988:	e7d6      	b.n	8006938 <_malloc_r+0xa8>
 800698a:	bf00      	nop
 800698c:	24000380 	.word	0x24000380

08006990 <__malloc_lock>:
 8006990:	4801      	ldr	r0, [pc, #4]	@ (8006998 <__malloc_lock+0x8>)
 8006992:	f7ff bf00 	b.w	8006796 <__retarget_lock_acquire_recursive>
 8006996:	bf00      	nop
 8006998:	24000378 	.word	0x24000378

0800699c <__malloc_unlock>:
 800699c:	4801      	ldr	r0, [pc, #4]	@ (80069a4 <__malloc_unlock+0x8>)
 800699e:	f7ff befb 	b.w	8006798 <__retarget_lock_release_recursive>
 80069a2:	bf00      	nop
 80069a4:	24000378 	.word	0x24000378

080069a8 <__sfputc_r>:
 80069a8:	6893      	ldr	r3, [r2, #8]
 80069aa:	3b01      	subs	r3, #1
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	b410      	push	{r4}
 80069b0:	6093      	str	r3, [r2, #8]
 80069b2:	da08      	bge.n	80069c6 <__sfputc_r+0x1e>
 80069b4:	6994      	ldr	r4, [r2, #24]
 80069b6:	42a3      	cmp	r3, r4
 80069b8:	db01      	blt.n	80069be <__sfputc_r+0x16>
 80069ba:	290a      	cmp	r1, #10
 80069bc:	d103      	bne.n	80069c6 <__sfputc_r+0x1e>
 80069be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80069c2:	f000 bb6d 	b.w	80070a0 <__swbuf_r>
 80069c6:	6813      	ldr	r3, [r2, #0]
 80069c8:	1c58      	adds	r0, r3, #1
 80069ca:	6010      	str	r0, [r2, #0]
 80069cc:	7019      	strb	r1, [r3, #0]
 80069ce:	4608      	mov	r0, r1
 80069d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80069d4:	4770      	bx	lr

080069d6 <__sfputs_r>:
 80069d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069d8:	4606      	mov	r6, r0
 80069da:	460f      	mov	r7, r1
 80069dc:	4614      	mov	r4, r2
 80069de:	18d5      	adds	r5, r2, r3
 80069e0:	42ac      	cmp	r4, r5
 80069e2:	d101      	bne.n	80069e8 <__sfputs_r+0x12>
 80069e4:	2000      	movs	r0, #0
 80069e6:	e007      	b.n	80069f8 <__sfputs_r+0x22>
 80069e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069ec:	463a      	mov	r2, r7
 80069ee:	4630      	mov	r0, r6
 80069f0:	f7ff ffda 	bl	80069a8 <__sfputc_r>
 80069f4:	1c43      	adds	r3, r0, #1
 80069f6:	d1f3      	bne.n	80069e0 <__sfputs_r+0xa>
 80069f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080069fc <_vfiprintf_r>:
 80069fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a00:	460d      	mov	r5, r1
 8006a02:	b09d      	sub	sp, #116	@ 0x74
 8006a04:	4614      	mov	r4, r2
 8006a06:	4698      	mov	r8, r3
 8006a08:	4606      	mov	r6, r0
 8006a0a:	b118      	cbz	r0, 8006a14 <_vfiprintf_r+0x18>
 8006a0c:	6a03      	ldr	r3, [r0, #32]
 8006a0e:	b90b      	cbnz	r3, 8006a14 <_vfiprintf_r+0x18>
 8006a10:	f7ff fdbc 	bl	800658c <__sinit>
 8006a14:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006a16:	07d9      	lsls	r1, r3, #31
 8006a18:	d405      	bmi.n	8006a26 <_vfiprintf_r+0x2a>
 8006a1a:	89ab      	ldrh	r3, [r5, #12]
 8006a1c:	059a      	lsls	r2, r3, #22
 8006a1e:	d402      	bmi.n	8006a26 <_vfiprintf_r+0x2a>
 8006a20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006a22:	f7ff feb8 	bl	8006796 <__retarget_lock_acquire_recursive>
 8006a26:	89ab      	ldrh	r3, [r5, #12]
 8006a28:	071b      	lsls	r3, r3, #28
 8006a2a:	d501      	bpl.n	8006a30 <_vfiprintf_r+0x34>
 8006a2c:	692b      	ldr	r3, [r5, #16]
 8006a2e:	b99b      	cbnz	r3, 8006a58 <_vfiprintf_r+0x5c>
 8006a30:	4629      	mov	r1, r5
 8006a32:	4630      	mov	r0, r6
 8006a34:	f000 fb72 	bl	800711c <__swsetup_r>
 8006a38:	b170      	cbz	r0, 8006a58 <_vfiprintf_r+0x5c>
 8006a3a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006a3c:	07dc      	lsls	r4, r3, #31
 8006a3e:	d504      	bpl.n	8006a4a <_vfiprintf_r+0x4e>
 8006a40:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006a44:	b01d      	add	sp, #116	@ 0x74
 8006a46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a4a:	89ab      	ldrh	r3, [r5, #12]
 8006a4c:	0598      	lsls	r0, r3, #22
 8006a4e:	d4f7      	bmi.n	8006a40 <_vfiprintf_r+0x44>
 8006a50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006a52:	f7ff fea1 	bl	8006798 <__retarget_lock_release_recursive>
 8006a56:	e7f3      	b.n	8006a40 <_vfiprintf_r+0x44>
 8006a58:	2300      	movs	r3, #0
 8006a5a:	9309      	str	r3, [sp, #36]	@ 0x24
 8006a5c:	2320      	movs	r3, #32
 8006a5e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006a62:	f8cd 800c 	str.w	r8, [sp, #12]
 8006a66:	2330      	movs	r3, #48	@ 0x30
 8006a68:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006c18 <_vfiprintf_r+0x21c>
 8006a6c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006a70:	f04f 0901 	mov.w	r9, #1
 8006a74:	4623      	mov	r3, r4
 8006a76:	469a      	mov	sl, r3
 8006a78:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006a7c:	b10a      	cbz	r2, 8006a82 <_vfiprintf_r+0x86>
 8006a7e:	2a25      	cmp	r2, #37	@ 0x25
 8006a80:	d1f9      	bne.n	8006a76 <_vfiprintf_r+0x7a>
 8006a82:	ebba 0b04 	subs.w	fp, sl, r4
 8006a86:	d00b      	beq.n	8006aa0 <_vfiprintf_r+0xa4>
 8006a88:	465b      	mov	r3, fp
 8006a8a:	4622      	mov	r2, r4
 8006a8c:	4629      	mov	r1, r5
 8006a8e:	4630      	mov	r0, r6
 8006a90:	f7ff ffa1 	bl	80069d6 <__sfputs_r>
 8006a94:	3001      	adds	r0, #1
 8006a96:	f000 80a7 	beq.w	8006be8 <_vfiprintf_r+0x1ec>
 8006a9a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006a9c:	445a      	add	r2, fp
 8006a9e:	9209      	str	r2, [sp, #36]	@ 0x24
 8006aa0:	f89a 3000 	ldrb.w	r3, [sl]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	f000 809f 	beq.w	8006be8 <_vfiprintf_r+0x1ec>
 8006aaa:	2300      	movs	r3, #0
 8006aac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006ab0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006ab4:	f10a 0a01 	add.w	sl, sl, #1
 8006ab8:	9304      	str	r3, [sp, #16]
 8006aba:	9307      	str	r3, [sp, #28]
 8006abc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006ac0:	931a      	str	r3, [sp, #104]	@ 0x68
 8006ac2:	4654      	mov	r4, sl
 8006ac4:	2205      	movs	r2, #5
 8006ac6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006aca:	4853      	ldr	r0, [pc, #332]	@ (8006c18 <_vfiprintf_r+0x21c>)
 8006acc:	f7f9 fc08 	bl	80002e0 <memchr>
 8006ad0:	9a04      	ldr	r2, [sp, #16]
 8006ad2:	b9d8      	cbnz	r0, 8006b0c <_vfiprintf_r+0x110>
 8006ad4:	06d1      	lsls	r1, r2, #27
 8006ad6:	bf44      	itt	mi
 8006ad8:	2320      	movmi	r3, #32
 8006ada:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006ade:	0713      	lsls	r3, r2, #28
 8006ae0:	bf44      	itt	mi
 8006ae2:	232b      	movmi	r3, #43	@ 0x2b
 8006ae4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006ae8:	f89a 3000 	ldrb.w	r3, [sl]
 8006aec:	2b2a      	cmp	r3, #42	@ 0x2a
 8006aee:	d015      	beq.n	8006b1c <_vfiprintf_r+0x120>
 8006af0:	9a07      	ldr	r2, [sp, #28]
 8006af2:	4654      	mov	r4, sl
 8006af4:	2000      	movs	r0, #0
 8006af6:	f04f 0c0a 	mov.w	ip, #10
 8006afa:	4621      	mov	r1, r4
 8006afc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006b00:	3b30      	subs	r3, #48	@ 0x30
 8006b02:	2b09      	cmp	r3, #9
 8006b04:	d94b      	bls.n	8006b9e <_vfiprintf_r+0x1a2>
 8006b06:	b1b0      	cbz	r0, 8006b36 <_vfiprintf_r+0x13a>
 8006b08:	9207      	str	r2, [sp, #28]
 8006b0a:	e014      	b.n	8006b36 <_vfiprintf_r+0x13a>
 8006b0c:	eba0 0308 	sub.w	r3, r0, r8
 8006b10:	fa09 f303 	lsl.w	r3, r9, r3
 8006b14:	4313      	orrs	r3, r2
 8006b16:	9304      	str	r3, [sp, #16]
 8006b18:	46a2      	mov	sl, r4
 8006b1a:	e7d2      	b.n	8006ac2 <_vfiprintf_r+0xc6>
 8006b1c:	9b03      	ldr	r3, [sp, #12]
 8006b1e:	1d19      	adds	r1, r3, #4
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	9103      	str	r1, [sp, #12]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	bfbb      	ittet	lt
 8006b28:	425b      	neglt	r3, r3
 8006b2a:	f042 0202 	orrlt.w	r2, r2, #2
 8006b2e:	9307      	strge	r3, [sp, #28]
 8006b30:	9307      	strlt	r3, [sp, #28]
 8006b32:	bfb8      	it	lt
 8006b34:	9204      	strlt	r2, [sp, #16]
 8006b36:	7823      	ldrb	r3, [r4, #0]
 8006b38:	2b2e      	cmp	r3, #46	@ 0x2e
 8006b3a:	d10a      	bne.n	8006b52 <_vfiprintf_r+0x156>
 8006b3c:	7863      	ldrb	r3, [r4, #1]
 8006b3e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006b40:	d132      	bne.n	8006ba8 <_vfiprintf_r+0x1ac>
 8006b42:	9b03      	ldr	r3, [sp, #12]
 8006b44:	1d1a      	adds	r2, r3, #4
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	9203      	str	r2, [sp, #12]
 8006b4a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006b4e:	3402      	adds	r4, #2
 8006b50:	9305      	str	r3, [sp, #20]
 8006b52:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006c28 <_vfiprintf_r+0x22c>
 8006b56:	7821      	ldrb	r1, [r4, #0]
 8006b58:	2203      	movs	r2, #3
 8006b5a:	4650      	mov	r0, sl
 8006b5c:	f7f9 fbc0 	bl	80002e0 <memchr>
 8006b60:	b138      	cbz	r0, 8006b72 <_vfiprintf_r+0x176>
 8006b62:	9b04      	ldr	r3, [sp, #16]
 8006b64:	eba0 000a 	sub.w	r0, r0, sl
 8006b68:	2240      	movs	r2, #64	@ 0x40
 8006b6a:	4082      	lsls	r2, r0
 8006b6c:	4313      	orrs	r3, r2
 8006b6e:	3401      	adds	r4, #1
 8006b70:	9304      	str	r3, [sp, #16]
 8006b72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b76:	4829      	ldr	r0, [pc, #164]	@ (8006c1c <_vfiprintf_r+0x220>)
 8006b78:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006b7c:	2206      	movs	r2, #6
 8006b7e:	f7f9 fbaf 	bl	80002e0 <memchr>
 8006b82:	2800      	cmp	r0, #0
 8006b84:	d03f      	beq.n	8006c06 <_vfiprintf_r+0x20a>
 8006b86:	4b26      	ldr	r3, [pc, #152]	@ (8006c20 <_vfiprintf_r+0x224>)
 8006b88:	bb1b      	cbnz	r3, 8006bd2 <_vfiprintf_r+0x1d6>
 8006b8a:	9b03      	ldr	r3, [sp, #12]
 8006b8c:	3307      	adds	r3, #7
 8006b8e:	f023 0307 	bic.w	r3, r3, #7
 8006b92:	3308      	adds	r3, #8
 8006b94:	9303      	str	r3, [sp, #12]
 8006b96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b98:	443b      	add	r3, r7
 8006b9a:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b9c:	e76a      	b.n	8006a74 <_vfiprintf_r+0x78>
 8006b9e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006ba2:	460c      	mov	r4, r1
 8006ba4:	2001      	movs	r0, #1
 8006ba6:	e7a8      	b.n	8006afa <_vfiprintf_r+0xfe>
 8006ba8:	2300      	movs	r3, #0
 8006baa:	3401      	adds	r4, #1
 8006bac:	9305      	str	r3, [sp, #20]
 8006bae:	4619      	mov	r1, r3
 8006bb0:	f04f 0c0a 	mov.w	ip, #10
 8006bb4:	4620      	mov	r0, r4
 8006bb6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006bba:	3a30      	subs	r2, #48	@ 0x30
 8006bbc:	2a09      	cmp	r2, #9
 8006bbe:	d903      	bls.n	8006bc8 <_vfiprintf_r+0x1cc>
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d0c6      	beq.n	8006b52 <_vfiprintf_r+0x156>
 8006bc4:	9105      	str	r1, [sp, #20]
 8006bc6:	e7c4      	b.n	8006b52 <_vfiprintf_r+0x156>
 8006bc8:	fb0c 2101 	mla	r1, ip, r1, r2
 8006bcc:	4604      	mov	r4, r0
 8006bce:	2301      	movs	r3, #1
 8006bd0:	e7f0      	b.n	8006bb4 <_vfiprintf_r+0x1b8>
 8006bd2:	ab03      	add	r3, sp, #12
 8006bd4:	9300      	str	r3, [sp, #0]
 8006bd6:	462a      	mov	r2, r5
 8006bd8:	4b12      	ldr	r3, [pc, #72]	@ (8006c24 <_vfiprintf_r+0x228>)
 8006bda:	a904      	add	r1, sp, #16
 8006bdc:	4630      	mov	r0, r6
 8006bde:	f3af 8000 	nop.w
 8006be2:	4607      	mov	r7, r0
 8006be4:	1c78      	adds	r0, r7, #1
 8006be6:	d1d6      	bne.n	8006b96 <_vfiprintf_r+0x19a>
 8006be8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006bea:	07d9      	lsls	r1, r3, #31
 8006bec:	d405      	bmi.n	8006bfa <_vfiprintf_r+0x1fe>
 8006bee:	89ab      	ldrh	r3, [r5, #12]
 8006bf0:	059a      	lsls	r2, r3, #22
 8006bf2:	d402      	bmi.n	8006bfa <_vfiprintf_r+0x1fe>
 8006bf4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006bf6:	f7ff fdcf 	bl	8006798 <__retarget_lock_release_recursive>
 8006bfa:	89ab      	ldrh	r3, [r5, #12]
 8006bfc:	065b      	lsls	r3, r3, #25
 8006bfe:	f53f af1f 	bmi.w	8006a40 <_vfiprintf_r+0x44>
 8006c02:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006c04:	e71e      	b.n	8006a44 <_vfiprintf_r+0x48>
 8006c06:	ab03      	add	r3, sp, #12
 8006c08:	9300      	str	r3, [sp, #0]
 8006c0a:	462a      	mov	r2, r5
 8006c0c:	4b05      	ldr	r3, [pc, #20]	@ (8006c24 <_vfiprintf_r+0x228>)
 8006c0e:	a904      	add	r1, sp, #16
 8006c10:	4630      	mov	r0, r6
 8006c12:	f000 f879 	bl	8006d08 <_printf_i>
 8006c16:	e7e4      	b.n	8006be2 <_vfiprintf_r+0x1e6>
 8006c18:	0800744c 	.word	0x0800744c
 8006c1c:	08007456 	.word	0x08007456
 8006c20:	00000000 	.word	0x00000000
 8006c24:	080069d7 	.word	0x080069d7
 8006c28:	08007452 	.word	0x08007452

08006c2c <_printf_common>:
 8006c2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c30:	4616      	mov	r6, r2
 8006c32:	4698      	mov	r8, r3
 8006c34:	688a      	ldr	r2, [r1, #8]
 8006c36:	690b      	ldr	r3, [r1, #16]
 8006c38:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	bfb8      	it	lt
 8006c40:	4613      	movlt	r3, r2
 8006c42:	6033      	str	r3, [r6, #0]
 8006c44:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006c48:	4607      	mov	r7, r0
 8006c4a:	460c      	mov	r4, r1
 8006c4c:	b10a      	cbz	r2, 8006c52 <_printf_common+0x26>
 8006c4e:	3301      	adds	r3, #1
 8006c50:	6033      	str	r3, [r6, #0]
 8006c52:	6823      	ldr	r3, [r4, #0]
 8006c54:	0699      	lsls	r1, r3, #26
 8006c56:	bf42      	ittt	mi
 8006c58:	6833      	ldrmi	r3, [r6, #0]
 8006c5a:	3302      	addmi	r3, #2
 8006c5c:	6033      	strmi	r3, [r6, #0]
 8006c5e:	6825      	ldr	r5, [r4, #0]
 8006c60:	f015 0506 	ands.w	r5, r5, #6
 8006c64:	d106      	bne.n	8006c74 <_printf_common+0x48>
 8006c66:	f104 0a19 	add.w	sl, r4, #25
 8006c6a:	68e3      	ldr	r3, [r4, #12]
 8006c6c:	6832      	ldr	r2, [r6, #0]
 8006c6e:	1a9b      	subs	r3, r3, r2
 8006c70:	42ab      	cmp	r3, r5
 8006c72:	dc26      	bgt.n	8006cc2 <_printf_common+0x96>
 8006c74:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006c78:	6822      	ldr	r2, [r4, #0]
 8006c7a:	3b00      	subs	r3, #0
 8006c7c:	bf18      	it	ne
 8006c7e:	2301      	movne	r3, #1
 8006c80:	0692      	lsls	r2, r2, #26
 8006c82:	d42b      	bmi.n	8006cdc <_printf_common+0xb0>
 8006c84:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006c88:	4641      	mov	r1, r8
 8006c8a:	4638      	mov	r0, r7
 8006c8c:	47c8      	blx	r9
 8006c8e:	3001      	adds	r0, #1
 8006c90:	d01e      	beq.n	8006cd0 <_printf_common+0xa4>
 8006c92:	6823      	ldr	r3, [r4, #0]
 8006c94:	6922      	ldr	r2, [r4, #16]
 8006c96:	f003 0306 	and.w	r3, r3, #6
 8006c9a:	2b04      	cmp	r3, #4
 8006c9c:	bf02      	ittt	eq
 8006c9e:	68e5      	ldreq	r5, [r4, #12]
 8006ca0:	6833      	ldreq	r3, [r6, #0]
 8006ca2:	1aed      	subeq	r5, r5, r3
 8006ca4:	68a3      	ldr	r3, [r4, #8]
 8006ca6:	bf0c      	ite	eq
 8006ca8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006cac:	2500      	movne	r5, #0
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	bfc4      	itt	gt
 8006cb2:	1a9b      	subgt	r3, r3, r2
 8006cb4:	18ed      	addgt	r5, r5, r3
 8006cb6:	2600      	movs	r6, #0
 8006cb8:	341a      	adds	r4, #26
 8006cba:	42b5      	cmp	r5, r6
 8006cbc:	d11a      	bne.n	8006cf4 <_printf_common+0xc8>
 8006cbe:	2000      	movs	r0, #0
 8006cc0:	e008      	b.n	8006cd4 <_printf_common+0xa8>
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	4652      	mov	r2, sl
 8006cc6:	4641      	mov	r1, r8
 8006cc8:	4638      	mov	r0, r7
 8006cca:	47c8      	blx	r9
 8006ccc:	3001      	adds	r0, #1
 8006cce:	d103      	bne.n	8006cd8 <_printf_common+0xac>
 8006cd0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006cd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cd8:	3501      	adds	r5, #1
 8006cda:	e7c6      	b.n	8006c6a <_printf_common+0x3e>
 8006cdc:	18e1      	adds	r1, r4, r3
 8006cde:	1c5a      	adds	r2, r3, #1
 8006ce0:	2030      	movs	r0, #48	@ 0x30
 8006ce2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006ce6:	4422      	add	r2, r4
 8006ce8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006cec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006cf0:	3302      	adds	r3, #2
 8006cf2:	e7c7      	b.n	8006c84 <_printf_common+0x58>
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	4622      	mov	r2, r4
 8006cf8:	4641      	mov	r1, r8
 8006cfa:	4638      	mov	r0, r7
 8006cfc:	47c8      	blx	r9
 8006cfe:	3001      	adds	r0, #1
 8006d00:	d0e6      	beq.n	8006cd0 <_printf_common+0xa4>
 8006d02:	3601      	adds	r6, #1
 8006d04:	e7d9      	b.n	8006cba <_printf_common+0x8e>
	...

08006d08 <_printf_i>:
 8006d08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006d0c:	7e0f      	ldrb	r7, [r1, #24]
 8006d0e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006d10:	2f78      	cmp	r7, #120	@ 0x78
 8006d12:	4691      	mov	r9, r2
 8006d14:	4680      	mov	r8, r0
 8006d16:	460c      	mov	r4, r1
 8006d18:	469a      	mov	sl, r3
 8006d1a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006d1e:	d807      	bhi.n	8006d30 <_printf_i+0x28>
 8006d20:	2f62      	cmp	r7, #98	@ 0x62
 8006d22:	d80a      	bhi.n	8006d3a <_printf_i+0x32>
 8006d24:	2f00      	cmp	r7, #0
 8006d26:	f000 80d2 	beq.w	8006ece <_printf_i+0x1c6>
 8006d2a:	2f58      	cmp	r7, #88	@ 0x58
 8006d2c:	f000 80b9 	beq.w	8006ea2 <_printf_i+0x19a>
 8006d30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006d34:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006d38:	e03a      	b.n	8006db0 <_printf_i+0xa8>
 8006d3a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006d3e:	2b15      	cmp	r3, #21
 8006d40:	d8f6      	bhi.n	8006d30 <_printf_i+0x28>
 8006d42:	a101      	add	r1, pc, #4	@ (adr r1, 8006d48 <_printf_i+0x40>)
 8006d44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006d48:	08006da1 	.word	0x08006da1
 8006d4c:	08006db5 	.word	0x08006db5
 8006d50:	08006d31 	.word	0x08006d31
 8006d54:	08006d31 	.word	0x08006d31
 8006d58:	08006d31 	.word	0x08006d31
 8006d5c:	08006d31 	.word	0x08006d31
 8006d60:	08006db5 	.word	0x08006db5
 8006d64:	08006d31 	.word	0x08006d31
 8006d68:	08006d31 	.word	0x08006d31
 8006d6c:	08006d31 	.word	0x08006d31
 8006d70:	08006d31 	.word	0x08006d31
 8006d74:	08006eb5 	.word	0x08006eb5
 8006d78:	08006ddf 	.word	0x08006ddf
 8006d7c:	08006e6f 	.word	0x08006e6f
 8006d80:	08006d31 	.word	0x08006d31
 8006d84:	08006d31 	.word	0x08006d31
 8006d88:	08006ed7 	.word	0x08006ed7
 8006d8c:	08006d31 	.word	0x08006d31
 8006d90:	08006ddf 	.word	0x08006ddf
 8006d94:	08006d31 	.word	0x08006d31
 8006d98:	08006d31 	.word	0x08006d31
 8006d9c:	08006e77 	.word	0x08006e77
 8006da0:	6833      	ldr	r3, [r6, #0]
 8006da2:	1d1a      	adds	r2, r3, #4
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	6032      	str	r2, [r6, #0]
 8006da8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006dac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006db0:	2301      	movs	r3, #1
 8006db2:	e09d      	b.n	8006ef0 <_printf_i+0x1e8>
 8006db4:	6833      	ldr	r3, [r6, #0]
 8006db6:	6820      	ldr	r0, [r4, #0]
 8006db8:	1d19      	adds	r1, r3, #4
 8006dba:	6031      	str	r1, [r6, #0]
 8006dbc:	0606      	lsls	r6, r0, #24
 8006dbe:	d501      	bpl.n	8006dc4 <_printf_i+0xbc>
 8006dc0:	681d      	ldr	r5, [r3, #0]
 8006dc2:	e003      	b.n	8006dcc <_printf_i+0xc4>
 8006dc4:	0645      	lsls	r5, r0, #25
 8006dc6:	d5fb      	bpl.n	8006dc0 <_printf_i+0xb8>
 8006dc8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006dcc:	2d00      	cmp	r5, #0
 8006dce:	da03      	bge.n	8006dd8 <_printf_i+0xd0>
 8006dd0:	232d      	movs	r3, #45	@ 0x2d
 8006dd2:	426d      	negs	r5, r5
 8006dd4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006dd8:	4859      	ldr	r0, [pc, #356]	@ (8006f40 <_printf_i+0x238>)
 8006dda:	230a      	movs	r3, #10
 8006ddc:	e011      	b.n	8006e02 <_printf_i+0xfa>
 8006dde:	6821      	ldr	r1, [r4, #0]
 8006de0:	6833      	ldr	r3, [r6, #0]
 8006de2:	0608      	lsls	r0, r1, #24
 8006de4:	f853 5b04 	ldr.w	r5, [r3], #4
 8006de8:	d402      	bmi.n	8006df0 <_printf_i+0xe8>
 8006dea:	0649      	lsls	r1, r1, #25
 8006dec:	bf48      	it	mi
 8006dee:	b2ad      	uxthmi	r5, r5
 8006df0:	2f6f      	cmp	r7, #111	@ 0x6f
 8006df2:	4853      	ldr	r0, [pc, #332]	@ (8006f40 <_printf_i+0x238>)
 8006df4:	6033      	str	r3, [r6, #0]
 8006df6:	bf14      	ite	ne
 8006df8:	230a      	movne	r3, #10
 8006dfa:	2308      	moveq	r3, #8
 8006dfc:	2100      	movs	r1, #0
 8006dfe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006e02:	6866      	ldr	r6, [r4, #4]
 8006e04:	60a6      	str	r6, [r4, #8]
 8006e06:	2e00      	cmp	r6, #0
 8006e08:	bfa2      	ittt	ge
 8006e0a:	6821      	ldrge	r1, [r4, #0]
 8006e0c:	f021 0104 	bicge.w	r1, r1, #4
 8006e10:	6021      	strge	r1, [r4, #0]
 8006e12:	b90d      	cbnz	r5, 8006e18 <_printf_i+0x110>
 8006e14:	2e00      	cmp	r6, #0
 8006e16:	d04b      	beq.n	8006eb0 <_printf_i+0x1a8>
 8006e18:	4616      	mov	r6, r2
 8006e1a:	fbb5 f1f3 	udiv	r1, r5, r3
 8006e1e:	fb03 5711 	mls	r7, r3, r1, r5
 8006e22:	5dc7      	ldrb	r7, [r0, r7]
 8006e24:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006e28:	462f      	mov	r7, r5
 8006e2a:	42bb      	cmp	r3, r7
 8006e2c:	460d      	mov	r5, r1
 8006e2e:	d9f4      	bls.n	8006e1a <_printf_i+0x112>
 8006e30:	2b08      	cmp	r3, #8
 8006e32:	d10b      	bne.n	8006e4c <_printf_i+0x144>
 8006e34:	6823      	ldr	r3, [r4, #0]
 8006e36:	07df      	lsls	r7, r3, #31
 8006e38:	d508      	bpl.n	8006e4c <_printf_i+0x144>
 8006e3a:	6923      	ldr	r3, [r4, #16]
 8006e3c:	6861      	ldr	r1, [r4, #4]
 8006e3e:	4299      	cmp	r1, r3
 8006e40:	bfde      	ittt	le
 8006e42:	2330      	movle	r3, #48	@ 0x30
 8006e44:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006e48:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8006e4c:	1b92      	subs	r2, r2, r6
 8006e4e:	6122      	str	r2, [r4, #16]
 8006e50:	f8cd a000 	str.w	sl, [sp]
 8006e54:	464b      	mov	r3, r9
 8006e56:	aa03      	add	r2, sp, #12
 8006e58:	4621      	mov	r1, r4
 8006e5a:	4640      	mov	r0, r8
 8006e5c:	f7ff fee6 	bl	8006c2c <_printf_common>
 8006e60:	3001      	adds	r0, #1
 8006e62:	d14a      	bne.n	8006efa <_printf_i+0x1f2>
 8006e64:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006e68:	b004      	add	sp, #16
 8006e6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e6e:	6823      	ldr	r3, [r4, #0]
 8006e70:	f043 0320 	orr.w	r3, r3, #32
 8006e74:	6023      	str	r3, [r4, #0]
 8006e76:	4833      	ldr	r0, [pc, #204]	@ (8006f44 <_printf_i+0x23c>)
 8006e78:	2778      	movs	r7, #120	@ 0x78
 8006e7a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006e7e:	6823      	ldr	r3, [r4, #0]
 8006e80:	6831      	ldr	r1, [r6, #0]
 8006e82:	061f      	lsls	r7, r3, #24
 8006e84:	f851 5b04 	ldr.w	r5, [r1], #4
 8006e88:	d402      	bmi.n	8006e90 <_printf_i+0x188>
 8006e8a:	065f      	lsls	r7, r3, #25
 8006e8c:	bf48      	it	mi
 8006e8e:	b2ad      	uxthmi	r5, r5
 8006e90:	6031      	str	r1, [r6, #0]
 8006e92:	07d9      	lsls	r1, r3, #31
 8006e94:	bf44      	itt	mi
 8006e96:	f043 0320 	orrmi.w	r3, r3, #32
 8006e9a:	6023      	strmi	r3, [r4, #0]
 8006e9c:	b11d      	cbz	r5, 8006ea6 <_printf_i+0x19e>
 8006e9e:	2310      	movs	r3, #16
 8006ea0:	e7ac      	b.n	8006dfc <_printf_i+0xf4>
 8006ea2:	4827      	ldr	r0, [pc, #156]	@ (8006f40 <_printf_i+0x238>)
 8006ea4:	e7e9      	b.n	8006e7a <_printf_i+0x172>
 8006ea6:	6823      	ldr	r3, [r4, #0]
 8006ea8:	f023 0320 	bic.w	r3, r3, #32
 8006eac:	6023      	str	r3, [r4, #0]
 8006eae:	e7f6      	b.n	8006e9e <_printf_i+0x196>
 8006eb0:	4616      	mov	r6, r2
 8006eb2:	e7bd      	b.n	8006e30 <_printf_i+0x128>
 8006eb4:	6833      	ldr	r3, [r6, #0]
 8006eb6:	6825      	ldr	r5, [r4, #0]
 8006eb8:	6961      	ldr	r1, [r4, #20]
 8006eba:	1d18      	adds	r0, r3, #4
 8006ebc:	6030      	str	r0, [r6, #0]
 8006ebe:	062e      	lsls	r6, r5, #24
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	d501      	bpl.n	8006ec8 <_printf_i+0x1c0>
 8006ec4:	6019      	str	r1, [r3, #0]
 8006ec6:	e002      	b.n	8006ece <_printf_i+0x1c6>
 8006ec8:	0668      	lsls	r0, r5, #25
 8006eca:	d5fb      	bpl.n	8006ec4 <_printf_i+0x1bc>
 8006ecc:	8019      	strh	r1, [r3, #0]
 8006ece:	2300      	movs	r3, #0
 8006ed0:	6123      	str	r3, [r4, #16]
 8006ed2:	4616      	mov	r6, r2
 8006ed4:	e7bc      	b.n	8006e50 <_printf_i+0x148>
 8006ed6:	6833      	ldr	r3, [r6, #0]
 8006ed8:	1d1a      	adds	r2, r3, #4
 8006eda:	6032      	str	r2, [r6, #0]
 8006edc:	681e      	ldr	r6, [r3, #0]
 8006ede:	6862      	ldr	r2, [r4, #4]
 8006ee0:	2100      	movs	r1, #0
 8006ee2:	4630      	mov	r0, r6
 8006ee4:	f7f9 f9fc 	bl	80002e0 <memchr>
 8006ee8:	b108      	cbz	r0, 8006eee <_printf_i+0x1e6>
 8006eea:	1b80      	subs	r0, r0, r6
 8006eec:	6060      	str	r0, [r4, #4]
 8006eee:	6863      	ldr	r3, [r4, #4]
 8006ef0:	6123      	str	r3, [r4, #16]
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006ef8:	e7aa      	b.n	8006e50 <_printf_i+0x148>
 8006efa:	6923      	ldr	r3, [r4, #16]
 8006efc:	4632      	mov	r2, r6
 8006efe:	4649      	mov	r1, r9
 8006f00:	4640      	mov	r0, r8
 8006f02:	47d0      	blx	sl
 8006f04:	3001      	adds	r0, #1
 8006f06:	d0ad      	beq.n	8006e64 <_printf_i+0x15c>
 8006f08:	6823      	ldr	r3, [r4, #0]
 8006f0a:	079b      	lsls	r3, r3, #30
 8006f0c:	d413      	bmi.n	8006f36 <_printf_i+0x22e>
 8006f0e:	68e0      	ldr	r0, [r4, #12]
 8006f10:	9b03      	ldr	r3, [sp, #12]
 8006f12:	4298      	cmp	r0, r3
 8006f14:	bfb8      	it	lt
 8006f16:	4618      	movlt	r0, r3
 8006f18:	e7a6      	b.n	8006e68 <_printf_i+0x160>
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	4632      	mov	r2, r6
 8006f1e:	4649      	mov	r1, r9
 8006f20:	4640      	mov	r0, r8
 8006f22:	47d0      	blx	sl
 8006f24:	3001      	adds	r0, #1
 8006f26:	d09d      	beq.n	8006e64 <_printf_i+0x15c>
 8006f28:	3501      	adds	r5, #1
 8006f2a:	68e3      	ldr	r3, [r4, #12]
 8006f2c:	9903      	ldr	r1, [sp, #12]
 8006f2e:	1a5b      	subs	r3, r3, r1
 8006f30:	42ab      	cmp	r3, r5
 8006f32:	dcf2      	bgt.n	8006f1a <_printf_i+0x212>
 8006f34:	e7eb      	b.n	8006f0e <_printf_i+0x206>
 8006f36:	2500      	movs	r5, #0
 8006f38:	f104 0619 	add.w	r6, r4, #25
 8006f3c:	e7f5      	b.n	8006f2a <_printf_i+0x222>
 8006f3e:	bf00      	nop
 8006f40:	0800745d 	.word	0x0800745d
 8006f44:	0800746e 	.word	0x0800746e

08006f48 <__sflush_r>:
 8006f48:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006f4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f50:	0716      	lsls	r6, r2, #28
 8006f52:	4605      	mov	r5, r0
 8006f54:	460c      	mov	r4, r1
 8006f56:	d454      	bmi.n	8007002 <__sflush_r+0xba>
 8006f58:	684b      	ldr	r3, [r1, #4]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	dc02      	bgt.n	8006f64 <__sflush_r+0x1c>
 8006f5e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	dd48      	ble.n	8006ff6 <__sflush_r+0xae>
 8006f64:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006f66:	2e00      	cmp	r6, #0
 8006f68:	d045      	beq.n	8006ff6 <__sflush_r+0xae>
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006f70:	682f      	ldr	r7, [r5, #0]
 8006f72:	6a21      	ldr	r1, [r4, #32]
 8006f74:	602b      	str	r3, [r5, #0]
 8006f76:	d030      	beq.n	8006fda <__sflush_r+0x92>
 8006f78:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006f7a:	89a3      	ldrh	r3, [r4, #12]
 8006f7c:	0759      	lsls	r1, r3, #29
 8006f7e:	d505      	bpl.n	8006f8c <__sflush_r+0x44>
 8006f80:	6863      	ldr	r3, [r4, #4]
 8006f82:	1ad2      	subs	r2, r2, r3
 8006f84:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006f86:	b10b      	cbz	r3, 8006f8c <__sflush_r+0x44>
 8006f88:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006f8a:	1ad2      	subs	r2, r2, r3
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006f90:	6a21      	ldr	r1, [r4, #32]
 8006f92:	4628      	mov	r0, r5
 8006f94:	47b0      	blx	r6
 8006f96:	1c43      	adds	r3, r0, #1
 8006f98:	89a3      	ldrh	r3, [r4, #12]
 8006f9a:	d106      	bne.n	8006faa <__sflush_r+0x62>
 8006f9c:	6829      	ldr	r1, [r5, #0]
 8006f9e:	291d      	cmp	r1, #29
 8006fa0:	d82b      	bhi.n	8006ffa <__sflush_r+0xb2>
 8006fa2:	4a2a      	ldr	r2, [pc, #168]	@ (800704c <__sflush_r+0x104>)
 8006fa4:	410a      	asrs	r2, r1
 8006fa6:	07d6      	lsls	r6, r2, #31
 8006fa8:	d427      	bmi.n	8006ffa <__sflush_r+0xb2>
 8006faa:	2200      	movs	r2, #0
 8006fac:	6062      	str	r2, [r4, #4]
 8006fae:	04d9      	lsls	r1, r3, #19
 8006fb0:	6922      	ldr	r2, [r4, #16]
 8006fb2:	6022      	str	r2, [r4, #0]
 8006fb4:	d504      	bpl.n	8006fc0 <__sflush_r+0x78>
 8006fb6:	1c42      	adds	r2, r0, #1
 8006fb8:	d101      	bne.n	8006fbe <__sflush_r+0x76>
 8006fba:	682b      	ldr	r3, [r5, #0]
 8006fbc:	b903      	cbnz	r3, 8006fc0 <__sflush_r+0x78>
 8006fbe:	6560      	str	r0, [r4, #84]	@ 0x54
 8006fc0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006fc2:	602f      	str	r7, [r5, #0]
 8006fc4:	b1b9      	cbz	r1, 8006ff6 <__sflush_r+0xae>
 8006fc6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006fca:	4299      	cmp	r1, r3
 8006fcc:	d002      	beq.n	8006fd4 <__sflush_r+0x8c>
 8006fce:	4628      	mov	r0, r5
 8006fd0:	f7ff fbf2 	bl	80067b8 <_free_r>
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	6363      	str	r3, [r4, #52]	@ 0x34
 8006fd8:	e00d      	b.n	8006ff6 <__sflush_r+0xae>
 8006fda:	2301      	movs	r3, #1
 8006fdc:	4628      	mov	r0, r5
 8006fde:	47b0      	blx	r6
 8006fe0:	4602      	mov	r2, r0
 8006fe2:	1c50      	adds	r0, r2, #1
 8006fe4:	d1c9      	bne.n	8006f7a <__sflush_r+0x32>
 8006fe6:	682b      	ldr	r3, [r5, #0]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d0c6      	beq.n	8006f7a <__sflush_r+0x32>
 8006fec:	2b1d      	cmp	r3, #29
 8006fee:	d001      	beq.n	8006ff4 <__sflush_r+0xac>
 8006ff0:	2b16      	cmp	r3, #22
 8006ff2:	d11e      	bne.n	8007032 <__sflush_r+0xea>
 8006ff4:	602f      	str	r7, [r5, #0]
 8006ff6:	2000      	movs	r0, #0
 8006ff8:	e022      	b.n	8007040 <__sflush_r+0xf8>
 8006ffa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006ffe:	b21b      	sxth	r3, r3
 8007000:	e01b      	b.n	800703a <__sflush_r+0xf2>
 8007002:	690f      	ldr	r7, [r1, #16]
 8007004:	2f00      	cmp	r7, #0
 8007006:	d0f6      	beq.n	8006ff6 <__sflush_r+0xae>
 8007008:	0793      	lsls	r3, r2, #30
 800700a:	680e      	ldr	r6, [r1, #0]
 800700c:	bf08      	it	eq
 800700e:	694b      	ldreq	r3, [r1, #20]
 8007010:	600f      	str	r7, [r1, #0]
 8007012:	bf18      	it	ne
 8007014:	2300      	movne	r3, #0
 8007016:	eba6 0807 	sub.w	r8, r6, r7
 800701a:	608b      	str	r3, [r1, #8]
 800701c:	f1b8 0f00 	cmp.w	r8, #0
 8007020:	dde9      	ble.n	8006ff6 <__sflush_r+0xae>
 8007022:	6a21      	ldr	r1, [r4, #32]
 8007024:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007026:	4643      	mov	r3, r8
 8007028:	463a      	mov	r2, r7
 800702a:	4628      	mov	r0, r5
 800702c:	47b0      	blx	r6
 800702e:	2800      	cmp	r0, #0
 8007030:	dc08      	bgt.n	8007044 <__sflush_r+0xfc>
 8007032:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007036:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800703a:	81a3      	strh	r3, [r4, #12]
 800703c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007044:	4407      	add	r7, r0
 8007046:	eba8 0800 	sub.w	r8, r8, r0
 800704a:	e7e7      	b.n	800701c <__sflush_r+0xd4>
 800704c:	dfbffffe 	.word	0xdfbffffe

08007050 <_fflush_r>:
 8007050:	b538      	push	{r3, r4, r5, lr}
 8007052:	690b      	ldr	r3, [r1, #16]
 8007054:	4605      	mov	r5, r0
 8007056:	460c      	mov	r4, r1
 8007058:	b913      	cbnz	r3, 8007060 <_fflush_r+0x10>
 800705a:	2500      	movs	r5, #0
 800705c:	4628      	mov	r0, r5
 800705e:	bd38      	pop	{r3, r4, r5, pc}
 8007060:	b118      	cbz	r0, 800706a <_fflush_r+0x1a>
 8007062:	6a03      	ldr	r3, [r0, #32]
 8007064:	b90b      	cbnz	r3, 800706a <_fflush_r+0x1a>
 8007066:	f7ff fa91 	bl	800658c <__sinit>
 800706a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d0f3      	beq.n	800705a <_fflush_r+0xa>
 8007072:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007074:	07d0      	lsls	r0, r2, #31
 8007076:	d404      	bmi.n	8007082 <_fflush_r+0x32>
 8007078:	0599      	lsls	r1, r3, #22
 800707a:	d402      	bmi.n	8007082 <_fflush_r+0x32>
 800707c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800707e:	f7ff fb8a 	bl	8006796 <__retarget_lock_acquire_recursive>
 8007082:	4628      	mov	r0, r5
 8007084:	4621      	mov	r1, r4
 8007086:	f7ff ff5f 	bl	8006f48 <__sflush_r>
 800708a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800708c:	07da      	lsls	r2, r3, #31
 800708e:	4605      	mov	r5, r0
 8007090:	d4e4      	bmi.n	800705c <_fflush_r+0xc>
 8007092:	89a3      	ldrh	r3, [r4, #12]
 8007094:	059b      	lsls	r3, r3, #22
 8007096:	d4e1      	bmi.n	800705c <_fflush_r+0xc>
 8007098:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800709a:	f7ff fb7d 	bl	8006798 <__retarget_lock_release_recursive>
 800709e:	e7dd      	b.n	800705c <_fflush_r+0xc>

080070a0 <__swbuf_r>:
 80070a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070a2:	460e      	mov	r6, r1
 80070a4:	4614      	mov	r4, r2
 80070a6:	4605      	mov	r5, r0
 80070a8:	b118      	cbz	r0, 80070b2 <__swbuf_r+0x12>
 80070aa:	6a03      	ldr	r3, [r0, #32]
 80070ac:	b90b      	cbnz	r3, 80070b2 <__swbuf_r+0x12>
 80070ae:	f7ff fa6d 	bl	800658c <__sinit>
 80070b2:	69a3      	ldr	r3, [r4, #24]
 80070b4:	60a3      	str	r3, [r4, #8]
 80070b6:	89a3      	ldrh	r3, [r4, #12]
 80070b8:	071a      	lsls	r2, r3, #28
 80070ba:	d501      	bpl.n	80070c0 <__swbuf_r+0x20>
 80070bc:	6923      	ldr	r3, [r4, #16]
 80070be:	b943      	cbnz	r3, 80070d2 <__swbuf_r+0x32>
 80070c0:	4621      	mov	r1, r4
 80070c2:	4628      	mov	r0, r5
 80070c4:	f000 f82a 	bl	800711c <__swsetup_r>
 80070c8:	b118      	cbz	r0, 80070d2 <__swbuf_r+0x32>
 80070ca:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80070ce:	4638      	mov	r0, r7
 80070d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070d2:	6823      	ldr	r3, [r4, #0]
 80070d4:	6922      	ldr	r2, [r4, #16]
 80070d6:	1a98      	subs	r0, r3, r2
 80070d8:	6963      	ldr	r3, [r4, #20]
 80070da:	b2f6      	uxtb	r6, r6
 80070dc:	4283      	cmp	r3, r0
 80070de:	4637      	mov	r7, r6
 80070e0:	dc05      	bgt.n	80070ee <__swbuf_r+0x4e>
 80070e2:	4621      	mov	r1, r4
 80070e4:	4628      	mov	r0, r5
 80070e6:	f7ff ffb3 	bl	8007050 <_fflush_r>
 80070ea:	2800      	cmp	r0, #0
 80070ec:	d1ed      	bne.n	80070ca <__swbuf_r+0x2a>
 80070ee:	68a3      	ldr	r3, [r4, #8]
 80070f0:	3b01      	subs	r3, #1
 80070f2:	60a3      	str	r3, [r4, #8]
 80070f4:	6823      	ldr	r3, [r4, #0]
 80070f6:	1c5a      	adds	r2, r3, #1
 80070f8:	6022      	str	r2, [r4, #0]
 80070fa:	701e      	strb	r6, [r3, #0]
 80070fc:	6962      	ldr	r2, [r4, #20]
 80070fe:	1c43      	adds	r3, r0, #1
 8007100:	429a      	cmp	r2, r3
 8007102:	d004      	beq.n	800710e <__swbuf_r+0x6e>
 8007104:	89a3      	ldrh	r3, [r4, #12]
 8007106:	07db      	lsls	r3, r3, #31
 8007108:	d5e1      	bpl.n	80070ce <__swbuf_r+0x2e>
 800710a:	2e0a      	cmp	r6, #10
 800710c:	d1df      	bne.n	80070ce <__swbuf_r+0x2e>
 800710e:	4621      	mov	r1, r4
 8007110:	4628      	mov	r0, r5
 8007112:	f7ff ff9d 	bl	8007050 <_fflush_r>
 8007116:	2800      	cmp	r0, #0
 8007118:	d0d9      	beq.n	80070ce <__swbuf_r+0x2e>
 800711a:	e7d6      	b.n	80070ca <__swbuf_r+0x2a>

0800711c <__swsetup_r>:
 800711c:	b538      	push	{r3, r4, r5, lr}
 800711e:	4b29      	ldr	r3, [pc, #164]	@ (80071c4 <__swsetup_r+0xa8>)
 8007120:	4605      	mov	r5, r0
 8007122:	6818      	ldr	r0, [r3, #0]
 8007124:	460c      	mov	r4, r1
 8007126:	b118      	cbz	r0, 8007130 <__swsetup_r+0x14>
 8007128:	6a03      	ldr	r3, [r0, #32]
 800712a:	b90b      	cbnz	r3, 8007130 <__swsetup_r+0x14>
 800712c:	f7ff fa2e 	bl	800658c <__sinit>
 8007130:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007134:	0719      	lsls	r1, r3, #28
 8007136:	d422      	bmi.n	800717e <__swsetup_r+0x62>
 8007138:	06da      	lsls	r2, r3, #27
 800713a:	d407      	bmi.n	800714c <__swsetup_r+0x30>
 800713c:	2209      	movs	r2, #9
 800713e:	602a      	str	r2, [r5, #0]
 8007140:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007144:	81a3      	strh	r3, [r4, #12]
 8007146:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800714a:	e033      	b.n	80071b4 <__swsetup_r+0x98>
 800714c:	0758      	lsls	r0, r3, #29
 800714e:	d512      	bpl.n	8007176 <__swsetup_r+0x5a>
 8007150:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007152:	b141      	cbz	r1, 8007166 <__swsetup_r+0x4a>
 8007154:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007158:	4299      	cmp	r1, r3
 800715a:	d002      	beq.n	8007162 <__swsetup_r+0x46>
 800715c:	4628      	mov	r0, r5
 800715e:	f7ff fb2b 	bl	80067b8 <_free_r>
 8007162:	2300      	movs	r3, #0
 8007164:	6363      	str	r3, [r4, #52]	@ 0x34
 8007166:	89a3      	ldrh	r3, [r4, #12]
 8007168:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800716c:	81a3      	strh	r3, [r4, #12]
 800716e:	2300      	movs	r3, #0
 8007170:	6063      	str	r3, [r4, #4]
 8007172:	6923      	ldr	r3, [r4, #16]
 8007174:	6023      	str	r3, [r4, #0]
 8007176:	89a3      	ldrh	r3, [r4, #12]
 8007178:	f043 0308 	orr.w	r3, r3, #8
 800717c:	81a3      	strh	r3, [r4, #12]
 800717e:	6923      	ldr	r3, [r4, #16]
 8007180:	b94b      	cbnz	r3, 8007196 <__swsetup_r+0x7a>
 8007182:	89a3      	ldrh	r3, [r4, #12]
 8007184:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007188:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800718c:	d003      	beq.n	8007196 <__swsetup_r+0x7a>
 800718e:	4621      	mov	r1, r4
 8007190:	4628      	mov	r0, r5
 8007192:	f000 f84f 	bl	8007234 <__smakebuf_r>
 8007196:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800719a:	f013 0201 	ands.w	r2, r3, #1
 800719e:	d00a      	beq.n	80071b6 <__swsetup_r+0x9a>
 80071a0:	2200      	movs	r2, #0
 80071a2:	60a2      	str	r2, [r4, #8]
 80071a4:	6962      	ldr	r2, [r4, #20]
 80071a6:	4252      	negs	r2, r2
 80071a8:	61a2      	str	r2, [r4, #24]
 80071aa:	6922      	ldr	r2, [r4, #16]
 80071ac:	b942      	cbnz	r2, 80071c0 <__swsetup_r+0xa4>
 80071ae:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80071b2:	d1c5      	bne.n	8007140 <__swsetup_r+0x24>
 80071b4:	bd38      	pop	{r3, r4, r5, pc}
 80071b6:	0799      	lsls	r1, r3, #30
 80071b8:	bf58      	it	pl
 80071ba:	6962      	ldrpl	r2, [r4, #20]
 80071bc:	60a2      	str	r2, [r4, #8]
 80071be:	e7f4      	b.n	80071aa <__swsetup_r+0x8e>
 80071c0:	2000      	movs	r0, #0
 80071c2:	e7f7      	b.n	80071b4 <__swsetup_r+0x98>
 80071c4:	2400001c 	.word	0x2400001c

080071c8 <_sbrk_r>:
 80071c8:	b538      	push	{r3, r4, r5, lr}
 80071ca:	4d06      	ldr	r5, [pc, #24]	@ (80071e4 <_sbrk_r+0x1c>)
 80071cc:	2300      	movs	r3, #0
 80071ce:	4604      	mov	r4, r0
 80071d0:	4608      	mov	r0, r1
 80071d2:	602b      	str	r3, [r5, #0]
 80071d4:	f7f9 ff62 	bl	800109c <_sbrk>
 80071d8:	1c43      	adds	r3, r0, #1
 80071da:	d102      	bne.n	80071e2 <_sbrk_r+0x1a>
 80071dc:	682b      	ldr	r3, [r5, #0]
 80071de:	b103      	cbz	r3, 80071e2 <_sbrk_r+0x1a>
 80071e0:	6023      	str	r3, [r4, #0]
 80071e2:	bd38      	pop	{r3, r4, r5, pc}
 80071e4:	24000374 	.word	0x24000374

080071e8 <__swhatbuf_r>:
 80071e8:	b570      	push	{r4, r5, r6, lr}
 80071ea:	460c      	mov	r4, r1
 80071ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071f0:	2900      	cmp	r1, #0
 80071f2:	b096      	sub	sp, #88	@ 0x58
 80071f4:	4615      	mov	r5, r2
 80071f6:	461e      	mov	r6, r3
 80071f8:	da0d      	bge.n	8007216 <__swhatbuf_r+0x2e>
 80071fa:	89a3      	ldrh	r3, [r4, #12]
 80071fc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007200:	f04f 0100 	mov.w	r1, #0
 8007204:	bf14      	ite	ne
 8007206:	2340      	movne	r3, #64	@ 0x40
 8007208:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800720c:	2000      	movs	r0, #0
 800720e:	6031      	str	r1, [r6, #0]
 8007210:	602b      	str	r3, [r5, #0]
 8007212:	b016      	add	sp, #88	@ 0x58
 8007214:	bd70      	pop	{r4, r5, r6, pc}
 8007216:	466a      	mov	r2, sp
 8007218:	f000 f848 	bl	80072ac <_fstat_r>
 800721c:	2800      	cmp	r0, #0
 800721e:	dbec      	blt.n	80071fa <__swhatbuf_r+0x12>
 8007220:	9901      	ldr	r1, [sp, #4]
 8007222:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007226:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800722a:	4259      	negs	r1, r3
 800722c:	4159      	adcs	r1, r3
 800722e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007232:	e7eb      	b.n	800720c <__swhatbuf_r+0x24>

08007234 <__smakebuf_r>:
 8007234:	898b      	ldrh	r3, [r1, #12]
 8007236:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007238:	079d      	lsls	r5, r3, #30
 800723a:	4606      	mov	r6, r0
 800723c:	460c      	mov	r4, r1
 800723e:	d507      	bpl.n	8007250 <__smakebuf_r+0x1c>
 8007240:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007244:	6023      	str	r3, [r4, #0]
 8007246:	6123      	str	r3, [r4, #16]
 8007248:	2301      	movs	r3, #1
 800724a:	6163      	str	r3, [r4, #20]
 800724c:	b003      	add	sp, #12
 800724e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007250:	ab01      	add	r3, sp, #4
 8007252:	466a      	mov	r2, sp
 8007254:	f7ff ffc8 	bl	80071e8 <__swhatbuf_r>
 8007258:	9f00      	ldr	r7, [sp, #0]
 800725a:	4605      	mov	r5, r0
 800725c:	4639      	mov	r1, r7
 800725e:	4630      	mov	r0, r6
 8007260:	f7ff fb16 	bl	8006890 <_malloc_r>
 8007264:	b948      	cbnz	r0, 800727a <__smakebuf_r+0x46>
 8007266:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800726a:	059a      	lsls	r2, r3, #22
 800726c:	d4ee      	bmi.n	800724c <__smakebuf_r+0x18>
 800726e:	f023 0303 	bic.w	r3, r3, #3
 8007272:	f043 0302 	orr.w	r3, r3, #2
 8007276:	81a3      	strh	r3, [r4, #12]
 8007278:	e7e2      	b.n	8007240 <__smakebuf_r+0xc>
 800727a:	89a3      	ldrh	r3, [r4, #12]
 800727c:	6020      	str	r0, [r4, #0]
 800727e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007282:	81a3      	strh	r3, [r4, #12]
 8007284:	9b01      	ldr	r3, [sp, #4]
 8007286:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800728a:	b15b      	cbz	r3, 80072a4 <__smakebuf_r+0x70>
 800728c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007290:	4630      	mov	r0, r6
 8007292:	f000 f81d 	bl	80072d0 <_isatty_r>
 8007296:	b128      	cbz	r0, 80072a4 <__smakebuf_r+0x70>
 8007298:	89a3      	ldrh	r3, [r4, #12]
 800729a:	f023 0303 	bic.w	r3, r3, #3
 800729e:	f043 0301 	orr.w	r3, r3, #1
 80072a2:	81a3      	strh	r3, [r4, #12]
 80072a4:	89a3      	ldrh	r3, [r4, #12]
 80072a6:	431d      	orrs	r5, r3
 80072a8:	81a5      	strh	r5, [r4, #12]
 80072aa:	e7cf      	b.n	800724c <__smakebuf_r+0x18>

080072ac <_fstat_r>:
 80072ac:	b538      	push	{r3, r4, r5, lr}
 80072ae:	4d07      	ldr	r5, [pc, #28]	@ (80072cc <_fstat_r+0x20>)
 80072b0:	2300      	movs	r3, #0
 80072b2:	4604      	mov	r4, r0
 80072b4:	4608      	mov	r0, r1
 80072b6:	4611      	mov	r1, r2
 80072b8:	602b      	str	r3, [r5, #0]
 80072ba:	f7f9 fec7 	bl	800104c <_fstat>
 80072be:	1c43      	adds	r3, r0, #1
 80072c0:	d102      	bne.n	80072c8 <_fstat_r+0x1c>
 80072c2:	682b      	ldr	r3, [r5, #0]
 80072c4:	b103      	cbz	r3, 80072c8 <_fstat_r+0x1c>
 80072c6:	6023      	str	r3, [r4, #0]
 80072c8:	bd38      	pop	{r3, r4, r5, pc}
 80072ca:	bf00      	nop
 80072cc:	24000374 	.word	0x24000374

080072d0 <_isatty_r>:
 80072d0:	b538      	push	{r3, r4, r5, lr}
 80072d2:	4d06      	ldr	r5, [pc, #24]	@ (80072ec <_isatty_r+0x1c>)
 80072d4:	2300      	movs	r3, #0
 80072d6:	4604      	mov	r4, r0
 80072d8:	4608      	mov	r0, r1
 80072da:	602b      	str	r3, [r5, #0]
 80072dc:	f7f9 fec6 	bl	800106c <_isatty>
 80072e0:	1c43      	adds	r3, r0, #1
 80072e2:	d102      	bne.n	80072ea <_isatty_r+0x1a>
 80072e4:	682b      	ldr	r3, [r5, #0]
 80072e6:	b103      	cbz	r3, 80072ea <_isatty_r+0x1a>
 80072e8:	6023      	str	r3, [r4, #0]
 80072ea:	bd38      	pop	{r3, r4, r5, pc}
 80072ec:	24000374 	.word	0x24000374

080072f0 <_init>:
 80072f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072f2:	bf00      	nop
 80072f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072f6:	bc08      	pop	{r3}
 80072f8:	469e      	mov	lr, r3
 80072fa:	4770      	bx	lr

080072fc <_fini>:
 80072fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072fe:	bf00      	nop
 8007300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007302:	bc08      	pop	{r3}
 8007304:	469e      	mov	lr, r3
 8007306:	4770      	bx	lr
